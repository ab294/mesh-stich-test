var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@esbuild-plugins/node-globals-polyfill/_virtual-process-polyfill_.js
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    return setTimeout(fun, 0);
  }
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e2) {
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    return clearTimeout(marker);
  }
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      return cachedClearTimeout.call(null, marker);
    } catch (e2) {
      return cachedClearTimeout.call(this, marker);
    }
  }
}
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
function noop() {
}
function binding(name) {
  throw new Error("process.binding is not supported");
}
function cwd() {
  return "/";
}
function chdir(dir) {
  throw new Error("process.chdir is not supported");
}
function umask() {
  return 0;
}
function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance2) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}
function uptime() {
  var currentTime = new Date();
  var dif = currentTime - startTime;
  return dif / 1e3;
}
var cachedSetTimeout, cachedClearTimeout, queue, draining, currentQueue, queueIndex, title, platform, browser, env, argv, version, versions, release, config, on, addListener, once, off, removeListener, removeAllListeners, emit, performance2, performanceNow, startTime, process, defines;
var init_virtual_process_polyfill = __esm({
  "node_modules/@esbuild-plugins/node-globals-polyfill/_virtual-process-polyfill_.js"() {
    cachedSetTimeout = defaultSetTimout;
    cachedClearTimeout = defaultClearTimeout;
    if (typeof globalThis.setTimeout === "function") {
      cachedSetTimeout = setTimeout;
    }
    if (typeof globalThis.clearTimeout === "function") {
      cachedClearTimeout = clearTimeout;
    }
    queue = [];
    draining = false;
    queueIndex = -1;
    Item.prototype.run = function() {
      this.fun.apply(null, this.array);
    };
    title = "browser";
    platform = "browser";
    browser = true;
    env = {};
    argv = [];
    version = "";
    versions = {};
    release = {};
    config = {};
    on = noop;
    addListener = noop;
    once = noop;
    off = noop;
    removeListener = noop;
    removeAllListeners = noop;
    emit = noop;
    performance2 = globalThis.performance || {};
    performanceNow = performance2.now || performance2.mozNow || performance2.msNow || performance2.oNow || performance2.webkitNow || function() {
      return new Date().getTime();
    };
    startTime = new Date();
    process = {
      nextTick,
      title,
      browser,
      env,
      argv,
      version,
      versions,
      on,
      addListener,
      once,
      off,
      removeListener,
      removeAllListeners,
      emit,
      binding,
      cwd,
      chdir,
      umask,
      hrtime,
      platform,
      release,
      config,
      uptime
    };
    defines = {};
    Object.keys(defines).forEach((key) => {
      const segs = key.split(".");
      let target = process;
      for (let i = 0; i < segs.length; i++) {
        const seg = segs[i];
        if (i === segs.length - 1) {
          target[seg] = defines[key];
        } else {
          target = target[seg] || (target[seg] = {});
        }
      }
    });
  }
});

// node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js
function init() {
  inited = true;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
}
function base64toByteArray(b64) {
  if (!inited) {
    init();
  }
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error("Invalid string. Length must be a multiple of 4");
  }
  placeHolders = b64[len - 2] === "=" ? 2 : b64[len - 1] === "=" ? 1 : 0;
  arr = new Arr(len * 3 / 4 - placeHolders);
  l = placeHolders > 0 ? len - 4 : len;
  var L = 0;
  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 255;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 255;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 255;
    arr[L++] = tmp & 255;
  }
  return arr;
}
function tripletToBase64(num) {
  return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join("");
}
function base64fromByteArray(uint8) {
  if (!inited) {
    init();
  }
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var output = "";
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 63];
    output += "==";
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 63];
    output += lookup[tmp << 2 & 63];
    output += "=";
  }
  parts.push(output);
  return parts.join("");
}
function kMaxLength() {
  return Buffer2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError("Invalid typed array length");
  }
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    that = new Uint8Array(length);
    that.__proto__ = Buffer2.prototype;
  } else {
    if (that === null) {
      that = new Buffer2(length);
    }
    that.length = length;
  }
  return that;
}
function Buffer2(arg, encodingOrOffset, length) {
  if (!Buffer2.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer2)) {
    return new Buffer2(arg, encodingOrOffset, length);
  }
  if (typeof arg === "number") {
    if (typeof encodingOrOffset === "string") {
      throw new Error("If encoding is specified then the first argument must be a string");
    }
    return allocUnsafe(this, arg);
  }
  return from(this, arg, encodingOrOffset, length);
}
function from(that, value, encodingOrOffset, length) {
  if (typeof value === "number") {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }
  if (typeof value === "string") {
    return fromString(that, value, encodingOrOffset);
  }
  return fromObject(that, value);
}
function assertSize(size) {
  if (typeof size !== "number") {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}
function alloc(that, size, fill2, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(that, size);
  }
  if (fill2 !== void 0) {
    return typeof encoding === "string" ? createBuffer(that, size).fill(fill2, encoding) : createBuffer(that, size).fill(fill2);
  }
  return createBuffer(that, size);
}
function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
  if (!Buffer2.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }
  return that;
}
function fromString(that, string, encoding) {
  if (typeof encoding !== "string" || encoding === "") {
    encoding = "utf8";
  }
  if (!Buffer2.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }
  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);
  if (actual !== length) {
    that = that.slice(0, actual);
  }
  return that;
}
function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }
  return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength;
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError("'offset' is out of bounds");
  }
  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError("'length' is out of bounds");
  }
  if (byteOffset === void 0 && length === void 0) {
    array = new Uint8Array(array);
  } else if (length === void 0) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }
  if (Buffer2.TYPED_ARRAY_SUPPORT) {
    that = array;
    that.__proto__ = Buffer2.prototype;
  } else {
    that = fromArrayLike(that, array);
  }
  return that;
}
function fromObject(that, obj) {
  if (internalIsBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);
    if (that.length === 0) {
      return that;
    }
    obj.copy(that, 0, 0, len);
    return that;
  }
  if (obj) {
    if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
      if (typeof obj.length !== "number" || isnan(obj.length)) {
        return createBuffer(that, 0);
      }
      return fromArrayLike(that, obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }
  throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function checked(length) {
  if (length >= kMaxLength()) {
    throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
  }
  return length | 0;
}
function internalIsBuffer(b) {
  return !!(b != null && b._isBuffer);
}
function byteLength(string, encoding) {
  if (internalIsBuffer(string)) {
    return string.length;
  }
  if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }
  if (typeof string !== "string") {
    string = "" + string;
  }
  var len = string.length;
  if (len === 0)
    return 0;
  var loweredCase = false;
  for (; ; ) {
    switch (encoding) {
      case "ascii":
      case "latin1":
      case "binary":
        return len;
      case "utf8":
      case "utf-8":
      case void 0:
        return utf8ToBytes(string).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return len * 2;
      case "hex":
        return len >>> 1;
      case "base64":
        return base64ToBytes(string).length;
      default:
        if (loweredCase)
          return utf8ToBytes(string).length;
        encoding = ("" + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
function slowToString(encoding, start, end) {
  var loweredCase = false;
  if (start === void 0 || start < 0) {
    start = 0;
  }
  if (start > this.length) {
    return "";
  }
  if (end === void 0 || end > this.length) {
    end = this.length;
  }
  if (end <= 0) {
    return "";
  }
  end >>>= 0;
  start >>>= 0;
  if (end <= start) {
    return "";
  }
  if (!encoding)
    encoding = "utf8";
  while (true) {
    switch (encoding) {
      case "hex":
        return hexSlice(this, start, end);
      case "utf8":
      case "utf-8":
        return utf8Slice(this, start, end);
      case "ascii":
        return asciiSlice(this, start, end);
      case "latin1":
      case "binary":
        return latin1Slice(this, start, end);
      case "base64":
        return base64Slice(this, start, end);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return utf16leSlice(this, start, end);
      default:
        if (loweredCase)
          throw new TypeError("Unknown encoding: " + encoding);
        encoding = (encoding + "").toLowerCase();
        loweredCase = true;
    }
  }
}
function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  if (buffer.length === 0)
    return -1;
  if (typeof byteOffset === "string") {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 2147483647) {
    byteOffset = 2147483647;
  } else if (byteOffset < -2147483648) {
    byteOffset = -2147483648;
  }
  byteOffset = +byteOffset;
  if (isNaN(byteOffset)) {
    byteOffset = dir ? 0 : buffer.length - 1;
  }
  if (byteOffset < 0)
    byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir)
      return -1;
    else
      byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir)
      byteOffset = 0;
    else
      return -1;
  }
  if (typeof val === "string") {
    val = Buffer2.from(val, encoding);
  }
  if (internalIsBuffer(val)) {
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === "number") {
    val = val & 255;
    if (Buffer2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }
  throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;
  if (encoding !== void 0) {
    encoding = String(encoding).toLowerCase();
    if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }
  function read(buf, i2) {
    if (indexSize === 1) {
      return buf[i2];
    } else {
      return buf.readUInt16BE(i2 * indexSize);
    }
  }
  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1)
          foundIndex = i;
        if (i - foundIndex + 1 === valLength)
          return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1)
          i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength)
      byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found)
        return i;
    }
  }
  return -1;
}
function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }
  var strLen = string.length;
  if (strLen % 2 !== 0)
    throw new TypeError("Invalid hex string");
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed))
      return i;
    buf[offset + i] = parsed;
  }
  return i;
}
function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64fromByteArray(buf);
  } else {
    return base64fromByteArray(buf.slice(start, end));
  }
}
function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;
      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 128) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 192) === 128) {
            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
            if (tempCodePoint > 127) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
              codePoint = tempCodePoint;
            }
          }
      }
    }
    if (codePoint === null) {
      codePoint = 65533;
      bytesPerSequence = 1;
    } else if (codePoint > 65535) {
      codePoint -= 65536;
      res.push(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    res.push(codePoint);
    i += bytesPerSequence;
  }
  return decodeCodePointsArray(res);
}
function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints);
  }
  var res = "";
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}
function asciiSlice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 127);
  }
  return ret;
}
function latin1Slice(buf, start, end) {
  var ret = "";
  end = Math.min(buf.length, end);
  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}
function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0)
    start = 0;
  if (!end || end < 0 || end > len)
    end = len;
  var out = "";
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}
function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = "";
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0)
    throw new RangeError("offset is not uint");
  if (offset + ext > length)
    throw new RangeError("Trying to access beyond buffer length");
}
function checkInt(buf, value, offset, ext, max, min) {
  if (!internalIsBuffer(buf))
    throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min)
    throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length)
    throw new RangeError("Index out of range");
}
function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0)
    value = 65535 + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}
function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0)
    value = 4294967295 + value + 1;
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
  }
}
function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length)
    throw new RangeError("Index out of range");
  if (offset < 0)
    throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
  }
  ieee754write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}
function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
  }
  ieee754write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}
function base64clean(str2) {
  str2 = stringtrim(str2).replace(INVALID_BASE64_RE, "");
  if (str2.length < 2)
    return "";
  while (str2.length % 4 !== 0) {
    str2 = str2 + "=";
  }
  return str2;
}
function stringtrim(str2) {
  if (str2.trim)
    return str2.trim();
  return str2.replace(/^\s+|\s+$/g, "");
}
function toHex(n) {
  if (n < 16)
    return "0" + n.toString(16);
  return n.toString(16);
}
function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];
  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);
    if (codePoint > 55295 && codePoint < 57344) {
      if (!leadSurrogate) {
        if (codePoint > 56319) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          continue;
        } else if (i + 1 === length) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
          continue;
        }
        leadSurrogate = codePoint;
        continue;
      }
      if (codePoint < 56320) {
        if ((units -= 3) > -1)
          bytes.push(239, 191, 189);
        leadSurrogate = codePoint;
        continue;
      }
      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
    } else if (leadSurrogate) {
      if ((units -= 3) > -1)
        bytes.push(239, 191, 189);
    }
    leadSurrogate = null;
    if (codePoint < 128) {
      if ((units -= 1) < 0)
        break;
      bytes.push(codePoint);
    } else if (codePoint < 2048) {
      if ((units -= 2) < 0)
        break;
      bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
    } else if (codePoint < 65536) {
      if ((units -= 3) < 0)
        break;
      bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
    } else if (codePoint < 1114112) {
      if ((units -= 4) < 0)
        break;
      bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
    } else {
      throw new Error("Invalid code point");
    }
  }
  return bytes;
}
function asciiToBytes(str2) {
  var byteArray = [];
  for (var i = 0; i < str2.length; ++i) {
    byteArray.push(str2.charCodeAt(i) & 255);
  }
  return byteArray;
}
function utf16leToBytes(str2, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str2.length; ++i) {
    if ((units -= 2) < 0)
      break;
    c = str2.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }
  return byteArray;
}
function base64ToBytes(str2) {
  return base64toByteArray(base64clean(str2));
}
function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length)
      break;
    dst[i + offset] = src[i];
  }
  return i;
}
function isnan(val) {
  return val !== val;
}
function isBuffer(obj) {
  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj));
}
function isFastBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
}
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isFastBuffer(obj.slice(0, 0));
}
function ieee754read(buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
  }
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
  }
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
}
function ieee754write(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);
  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
  }
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
  }
  buffer[offset + i - d] |= s * 128;
}
var lookup, revLookup, Arr, inited, MAX_ARGUMENTS_LENGTH, INVALID_BASE64_RE;
var init_Buffer = __esm({
  "node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js"() {
    init_virtual_process_polyfill();
    init_buffer();
    lookup = [];
    revLookup = [];
    Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    inited = false;
    Buffer2.TYPED_ARRAY_SUPPORT = globalThis.TYPED_ARRAY_SUPPORT !== void 0 ? globalThis.TYPED_ARRAY_SUPPORT : true;
    Buffer2.poolSize = 8192;
    Buffer2._augment = function(arr) {
      arr.__proto__ = Buffer2.prototype;
      return arr;
    };
    Buffer2.from = function(value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length);
    };
    Buffer2.kMaxLength = kMaxLength();
    if (Buffer2.TYPED_ARRAY_SUPPORT) {
      Buffer2.prototype.__proto__ = Uint8Array.prototype;
      Buffer2.__proto__ = Uint8Array;
      if (typeof Symbol !== "undefined" && Symbol.species && Buffer2[Symbol.species] === Buffer2) {
      }
    }
    Buffer2.alloc = function(size, fill2, encoding) {
      return alloc(null, size, fill2, encoding);
    };
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(null, size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(null, size);
    };
    Buffer2.isBuffer = isBuffer;
    Buffer2.compare = function compare(a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError("Arguments must be Buffers");
      }
      if (a === b)
        return 0;
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      var i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      var buffer = Buffer2.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer;
    };
    Buffer2.byteLength = byteLength;
    Buffer2.prototype._isBuffer = true;
    Buffer2.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString() {
      var length = this.length | 0;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.equals = function equals(b) {
      if (!internalIsBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError("Argument must be a Buffer");
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    Buffer2.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
            return asciiWrite(this, string, offset, length);
          case "latin1":
          case "binary":
            return latin1Write(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    MAX_ARGUMENTS_LENGTH = 4096;
    Buffer2.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      var newBuf;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer2.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer2(sliceLen, void 0);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }
      return newBuf;
    };
    Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength2, this.length);
      }
      var val = this[offset + --byteLength2];
      var mul = 1;
      while (byteLength2 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength2] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength2 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert)
        checkOffset(offset, byteLength2, this.length);
      var i = byteLength2;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength2);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754read(this, offset, false, 52, 8);
    };
    Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var mul = 1;
      var i = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength2 = byteLength2 | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
        checkInt(this, value, offset, byteLength2, maxBytes, 0);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      if (!Buffer2.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength2 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength2 - 1);
        checkInt(this, value, offset, byteLength2, limit - 1, -limit);
      }
      var i = byteLength2 - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength2;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (!Buffer2.TYPED_ARRAY_SUPPORT)
        value = Math.floor(value);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      if (Buffer2.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4;
    };
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("sourceStart out of bounds");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      var i;
      if (this === target && start < targetStart && targetStart < end) {
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1e3 || !Buffer2.TYPED_ARRAY_SUPPORT) {
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
      } else if (typeof val === "number") {
        val = val & 255;
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      var i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val) ? val : utf8ToBytes(new Buffer2(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
  }
});

// node_modules/@esbuild-plugins/node-globals-polyfill/_buffer.js
var init_buffer = __esm({
  "node_modules/@esbuild-plugins/node-globals-polyfill/_buffer.js"() {
    init_Buffer();
  }
});

// node_modules/graphql/version.mjs
var versionInfo;
var init_version = __esm({
  "node_modules/graphql/version.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    versionInfo = Object.freeze({
      major: 16,
      minor: 5,
      patch: 0,
      preReleaseTag: null
    });
  }
});

// node_modules/graphql/jsutils/devAssert.mjs
function devAssert(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message);
  }
}
var init_devAssert = __esm({
  "node_modules/graphql/jsutils/devAssert.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/jsutils/isPromise.mjs
function isPromise(value) {
  return typeof (value === null || value === void 0 ? void 0 : value.then) === "function";
}
var init_isPromise = __esm({
  "node_modules/graphql/jsutils/isPromise.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/jsutils/isObjectLike.mjs
function isObjectLike(value) {
  return typeof value == "object" && value !== null;
}
var init_isObjectLike = __esm({
  "node_modules/graphql/jsutils/isObjectLike.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/jsutils/invariant.mjs
function invariant(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message != null ? message : "Unexpected invariant triggered.");
  }
}
var init_invariant = __esm({
  "node_modules/graphql/jsutils/invariant.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/language/location.mjs
function getLocation(source, position) {
  let lastLineStart = 0;
  let line = 1;
  for (const match of source.body.matchAll(LineRegExp)) {
    typeof match.index === "number" || invariant(false);
    if (match.index >= position) {
      break;
    }
    lastLineStart = match.index + match[0].length;
    line += 1;
  }
  return {
    line,
    column: position + 1 - lastLineStart
  };
}
var LineRegExp;
var init_location = __esm({
  "node_modules/graphql/language/location.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_invariant();
    LineRegExp = /\r\n|[\n\r]/g;
  }
});

// node_modules/graphql/language/printLocation.mjs
function printLocation(location) {
  return printSourceLocation(location.source, getLocation(location.source, location.start));
}
function printSourceLocation(source, sourceLocation) {
  const firstLineColumnOffset = source.locationOffset.column - 1;
  const body = "".padStart(firstLineColumnOffset) + source.body;
  const lineIndex = sourceLocation.line - 1;
  const lineOffset = source.locationOffset.line - 1;
  const lineNum = sourceLocation.line + lineOffset;
  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
  const columnNum = sourceLocation.column + columnOffset;
  const locationStr = `${source.name}:${lineNum}:${columnNum}
`;
  const lines = body.split(/\r\n|[\n\r]/g);
  const locationLine = lines[lineIndex];
  if (locationLine.length > 120) {
    const subLineIndex = Math.floor(columnNum / 80);
    const subLineColumnNum = columnNum % 80;
    const subLines = [];
    for (let i = 0; i < locationLine.length; i += 80) {
      subLines.push(locationLine.slice(i, i + 80));
    }
    return locationStr + printPrefixedLines([
      [`${lineNum} |`, subLines[0]],
      ...subLines.slice(1, subLineIndex + 1).map((subLine) => ["|", subLine]),
      ["|", "^".padStart(subLineColumnNum)],
      ["|", subLines[subLineIndex + 1]]
    ]);
  }
  return locationStr + printPrefixedLines([
    [`${lineNum - 1} |`, lines[lineIndex - 1]],
    [`${lineNum} |`, locationLine],
    ["|", "^".padStart(columnNum)],
    [`${lineNum + 1} |`, lines[lineIndex + 1]]
  ]);
}
function printPrefixedLines(lines) {
  const existingLines = lines.filter(([_, line]) => line !== void 0);
  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));
  return existingLines.map(([prefix, line]) => prefix.padStart(padLen) + (line ? " " + line : "")).join("\n");
}
var init_printLocation = __esm({
  "node_modules/graphql/language/printLocation.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_location();
  }
});

// node_modules/graphql/error/GraphQLError.mjs
function toNormalizedOptions(args) {
  const firstArg = args[0];
  if (firstArg == null || "kind" in firstArg || "length" in firstArg) {
    return {
      nodes: firstArg,
      source: args[1],
      positions: args[2],
      path: args[3],
      originalError: args[4],
      extensions: args[5]
    };
  }
  return firstArg;
}
function undefinedIfEmpty(array) {
  return array === void 0 || array.length === 0 ? void 0 : array;
}
var GraphQLError;
var init_GraphQLError = __esm({
  "node_modules/graphql/error/GraphQLError.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_isObjectLike();
    init_location();
    init_printLocation();
    GraphQLError = class extends Error {
      constructor(message, ...rawArgs) {
        var _this$nodes, _nodeLocations$, _ref;
        const { nodes, source, positions, path: path2, originalError, extensions } = toNormalizedOptions(rawArgs);
        super(message);
        this.name = "GraphQLError";
        this.path = path2 !== null && path2 !== void 0 ? path2 : void 0;
        this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
        this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0);
        const nodeLocations = undefinedIfEmpty((_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map((node) => node.loc).filter((loc) => loc != null));
        this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;
        this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => loc.start);
        this.locations = positions && source ? positions.map((pos) => getLocation(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => getLocation(loc.source, loc.start));
        const originalExtensions = isObjectLike(originalError === null || originalError === void 0 ? void 0 : originalError.extensions) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : void 0;
        this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : /* @__PURE__ */ Object.create(null);
        Object.defineProperties(this, {
          message: {
            writable: true,
            enumerable: true
          },
          name: {
            enumerable: false
          },
          nodes: {
            enumerable: false
          },
          source: {
            enumerable: false
          },
          positions: {
            enumerable: false
          },
          originalError: {
            enumerable: false
          }
        });
        if (originalError !== null && originalError !== void 0 && originalError.stack) {
          Object.defineProperty(this, "stack", {
            value: originalError.stack,
            writable: true,
            configurable: true
          });
        } else if (Error.captureStackTrace) {
          Error.captureStackTrace(this, GraphQLError);
        } else {
          Object.defineProperty(this, "stack", {
            value: Error().stack,
            writable: true,
            configurable: true
          });
        }
      }
      get [Symbol.toStringTag]() {
        return "GraphQLError";
      }
      toString() {
        let output = this.message;
        if (this.nodes) {
          for (const node of this.nodes) {
            if (node.loc) {
              output += "\n\n" + printLocation(node.loc);
            }
          }
        } else if (this.source && this.locations) {
          for (const location of this.locations) {
            output += "\n\n" + printSourceLocation(this.source, location);
          }
        }
        return output;
      }
      toJSON() {
        const formattedError = {
          message: this.message
        };
        if (this.locations != null) {
          formattedError.locations = this.locations;
        }
        if (this.path != null) {
          formattedError.path = this.path;
        }
        if (this.extensions != null && Object.keys(this.extensions).length > 0) {
          formattedError.extensions = this.extensions;
        }
        return formattedError;
      }
    };
  }
});

// node_modules/graphql/error/syntaxError.mjs
function syntaxError(source, position, description) {
  return new GraphQLError(`Syntax Error: ${description}`, {
    source,
    positions: [position]
  });
}
var init_syntaxError = __esm({
  "node_modules/graphql/error/syntaxError.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/language/ast.mjs
function isNode(maybeNode) {
  const maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
  return typeof maybeKind === "string" && kindValues.has(maybeKind);
}
var Location, Token, QueryDocumentKeys, kindValues, OperationTypeNode;
var init_ast = __esm({
  "node_modules/graphql/language/ast.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    Location = class {
      constructor(startToken, endToken, source) {
        this.start = startToken.start;
        this.end = endToken.end;
        this.startToken = startToken;
        this.endToken = endToken;
        this.source = source;
      }
      get [Symbol.toStringTag]() {
        return "Location";
      }
      toJSON() {
        return {
          start: this.start,
          end: this.end
        };
      }
    };
    Token = class {
      constructor(kind, start, end, line, column, value) {
        this.kind = kind;
        this.start = start;
        this.end = end;
        this.line = line;
        this.column = column;
        this.value = value;
        this.prev = null;
        this.next = null;
      }
      get [Symbol.toStringTag]() {
        return "Token";
      }
      toJSON() {
        return {
          kind: this.kind,
          value: this.value,
          line: this.line,
          column: this.column
        };
      }
    };
    QueryDocumentKeys = {
      Name: [],
      Document: ["definitions"],
      OperationDefinition: [
        "name",
        "variableDefinitions",
        "directives",
        "selectionSet"
      ],
      VariableDefinition: ["variable", "type", "defaultValue", "directives"],
      Variable: ["name"],
      SelectionSet: ["selections"],
      Field: ["alias", "name", "arguments", "directives", "selectionSet"],
      Argument: ["name", "value"],
      FragmentSpread: ["name", "directives"],
      InlineFragment: ["typeCondition", "directives", "selectionSet"],
      FragmentDefinition: [
        "name",
        "variableDefinitions",
        "typeCondition",
        "directives",
        "selectionSet"
      ],
      IntValue: [],
      FloatValue: [],
      StringValue: [],
      BooleanValue: [],
      NullValue: [],
      EnumValue: [],
      ListValue: ["values"],
      ObjectValue: ["fields"],
      ObjectField: ["name", "value"],
      Directive: ["name", "arguments"],
      NamedType: ["name"],
      ListType: ["type"],
      NonNullType: ["type"],
      SchemaDefinition: ["description", "directives", "operationTypes"],
      OperationTypeDefinition: ["type"],
      ScalarTypeDefinition: ["description", "name", "directives"],
      ObjectTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      FieldDefinition: ["description", "name", "arguments", "type", "directives"],
      InputValueDefinition: [
        "description",
        "name",
        "type",
        "defaultValue",
        "directives"
      ],
      InterfaceTypeDefinition: [
        "description",
        "name",
        "interfaces",
        "directives",
        "fields"
      ],
      UnionTypeDefinition: ["description", "name", "directives", "types"],
      EnumTypeDefinition: ["description", "name", "directives", "values"],
      EnumValueDefinition: ["description", "name", "directives"],
      InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
      DirectiveDefinition: ["description", "name", "arguments", "locations"],
      SchemaExtension: ["directives", "operationTypes"],
      ScalarTypeExtension: ["name", "directives"],
      ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
      InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
      UnionTypeExtension: ["name", "directives", "types"],
      EnumTypeExtension: ["name", "directives", "values"],
      InputObjectTypeExtension: ["name", "directives", "fields"]
    };
    kindValues = new Set(Object.keys(QueryDocumentKeys));
    (function(OperationTypeNode2) {
      OperationTypeNode2["QUERY"] = "query";
      OperationTypeNode2["MUTATION"] = "mutation";
      OperationTypeNode2["SUBSCRIPTION"] = "subscription";
    })(OperationTypeNode || (OperationTypeNode = {}));
  }
});

// node_modules/graphql/language/directiveLocation.mjs
var DirectiveLocation;
var init_directiveLocation = __esm({
  "node_modules/graphql/language/directiveLocation.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    (function(DirectiveLocation4) {
      DirectiveLocation4["QUERY"] = "QUERY";
      DirectiveLocation4["MUTATION"] = "MUTATION";
      DirectiveLocation4["SUBSCRIPTION"] = "SUBSCRIPTION";
      DirectiveLocation4["FIELD"] = "FIELD";
      DirectiveLocation4["FRAGMENT_DEFINITION"] = "FRAGMENT_DEFINITION";
      DirectiveLocation4["FRAGMENT_SPREAD"] = "FRAGMENT_SPREAD";
      DirectiveLocation4["INLINE_FRAGMENT"] = "INLINE_FRAGMENT";
      DirectiveLocation4["VARIABLE_DEFINITION"] = "VARIABLE_DEFINITION";
      DirectiveLocation4["SCHEMA"] = "SCHEMA";
      DirectiveLocation4["SCALAR"] = "SCALAR";
      DirectiveLocation4["OBJECT"] = "OBJECT";
      DirectiveLocation4["FIELD_DEFINITION"] = "FIELD_DEFINITION";
      DirectiveLocation4["ARGUMENT_DEFINITION"] = "ARGUMENT_DEFINITION";
      DirectiveLocation4["INTERFACE"] = "INTERFACE";
      DirectiveLocation4["UNION"] = "UNION";
      DirectiveLocation4["ENUM"] = "ENUM";
      DirectiveLocation4["ENUM_VALUE"] = "ENUM_VALUE";
      DirectiveLocation4["INPUT_OBJECT"] = "INPUT_OBJECT";
      DirectiveLocation4["INPUT_FIELD_DEFINITION"] = "INPUT_FIELD_DEFINITION";
    })(DirectiveLocation || (DirectiveLocation = {}));
  }
});

// node_modules/graphql/language/kinds.mjs
var Kind;
var init_kinds = __esm({
  "node_modules/graphql/language/kinds.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    (function(Kind2) {
      Kind2["NAME"] = "Name";
      Kind2["DOCUMENT"] = "Document";
      Kind2["OPERATION_DEFINITION"] = "OperationDefinition";
      Kind2["VARIABLE_DEFINITION"] = "VariableDefinition";
      Kind2["SELECTION_SET"] = "SelectionSet";
      Kind2["FIELD"] = "Field";
      Kind2["ARGUMENT"] = "Argument";
      Kind2["FRAGMENT_SPREAD"] = "FragmentSpread";
      Kind2["INLINE_FRAGMENT"] = "InlineFragment";
      Kind2["FRAGMENT_DEFINITION"] = "FragmentDefinition";
      Kind2["VARIABLE"] = "Variable";
      Kind2["INT"] = "IntValue";
      Kind2["FLOAT"] = "FloatValue";
      Kind2["STRING"] = "StringValue";
      Kind2["BOOLEAN"] = "BooleanValue";
      Kind2["NULL"] = "NullValue";
      Kind2["ENUM"] = "EnumValue";
      Kind2["LIST"] = "ListValue";
      Kind2["OBJECT"] = "ObjectValue";
      Kind2["OBJECT_FIELD"] = "ObjectField";
      Kind2["DIRECTIVE"] = "Directive";
      Kind2["NAMED_TYPE"] = "NamedType";
      Kind2["LIST_TYPE"] = "ListType";
      Kind2["NON_NULL_TYPE"] = "NonNullType";
      Kind2["SCHEMA_DEFINITION"] = "SchemaDefinition";
      Kind2["OPERATION_TYPE_DEFINITION"] = "OperationTypeDefinition";
      Kind2["SCALAR_TYPE_DEFINITION"] = "ScalarTypeDefinition";
      Kind2["OBJECT_TYPE_DEFINITION"] = "ObjectTypeDefinition";
      Kind2["FIELD_DEFINITION"] = "FieldDefinition";
      Kind2["INPUT_VALUE_DEFINITION"] = "InputValueDefinition";
      Kind2["INTERFACE_TYPE_DEFINITION"] = "InterfaceTypeDefinition";
      Kind2["UNION_TYPE_DEFINITION"] = "UnionTypeDefinition";
      Kind2["ENUM_TYPE_DEFINITION"] = "EnumTypeDefinition";
      Kind2["ENUM_VALUE_DEFINITION"] = "EnumValueDefinition";
      Kind2["INPUT_OBJECT_TYPE_DEFINITION"] = "InputObjectTypeDefinition";
      Kind2["DIRECTIVE_DEFINITION"] = "DirectiveDefinition";
      Kind2["SCHEMA_EXTENSION"] = "SchemaExtension";
      Kind2["SCALAR_TYPE_EXTENSION"] = "ScalarTypeExtension";
      Kind2["OBJECT_TYPE_EXTENSION"] = "ObjectTypeExtension";
      Kind2["INTERFACE_TYPE_EXTENSION"] = "InterfaceTypeExtension";
      Kind2["UNION_TYPE_EXTENSION"] = "UnionTypeExtension";
      Kind2["ENUM_TYPE_EXTENSION"] = "EnumTypeExtension";
      Kind2["INPUT_OBJECT_TYPE_EXTENSION"] = "InputObjectTypeExtension";
    })(Kind || (Kind = {}));
  }
});

// node_modules/graphql/language/characterClasses.mjs
function isWhiteSpace(code) {
  return code === 9 || code === 32;
}
function isDigit(code) {
  return code >= 48 && code <= 57;
}
function isLetter(code) {
  return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function isNameStart(code) {
  return isLetter(code) || code === 95;
}
function isNameContinue(code) {
  return isLetter(code) || isDigit(code) || code === 95;
}
var init_characterClasses = __esm({
  "node_modules/graphql/language/characterClasses.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/language/blockString.mjs
function dedentBlockStringLines(lines) {
  var _firstNonEmptyLine2;
  let commonIndent = Number.MAX_SAFE_INTEGER;
  let firstNonEmptyLine = null;
  let lastNonEmptyLine = -1;
  for (let i = 0; i < lines.length; ++i) {
    var _firstNonEmptyLine;
    const line = lines[i];
    const indent4 = leadingWhitespace(line);
    if (indent4 === line.length) {
      continue;
    }
    firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i;
    lastNonEmptyLine = i;
    if (i !== 0 && indent4 < commonIndent) {
      commonIndent = indent4;
    }
  }
  return lines.map((line, i) => i === 0 ? line : line.slice(commonIndent)).slice((_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0, lastNonEmptyLine + 1);
}
function leadingWhitespace(str2) {
  let i = 0;
  while (i < str2.length && isWhiteSpace(str2.charCodeAt(i))) {
    ++i;
  }
  return i;
}
function printBlockString(value, options) {
  const escapedValue = value.replace(/"""/g, '\\"""');
  const lines = escapedValue.split(/\r\n|[\n\r]/g);
  const isSingleLine = lines.length === 1;
  const forceLeadingNewLine = lines.length > 1 && lines.slice(1).every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0)));
  const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""');
  const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
  const hasTrailingSlash = value.endsWith("\\");
  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
  const printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && (!isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);
  let result = "";
  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));
  if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {
    result += "\n";
  }
  result += escapedValue;
  if (printAsMultipleLines || forceTrailingNewline) {
    result += "\n";
  }
  return '"""' + result + '"""';
}
var init_blockString = __esm({
  "node_modules/graphql/language/blockString.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_characterClasses();
  }
});

// node_modules/graphql/language/tokenKind.mjs
var TokenKind;
var init_tokenKind = __esm({
  "node_modules/graphql/language/tokenKind.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    (function(TokenKind2) {
      TokenKind2["SOF"] = "<SOF>";
      TokenKind2["EOF"] = "<EOF>";
      TokenKind2["BANG"] = "!";
      TokenKind2["DOLLAR"] = "$";
      TokenKind2["AMP"] = "&";
      TokenKind2["PAREN_L"] = "(";
      TokenKind2["PAREN_R"] = ")";
      TokenKind2["SPREAD"] = "...";
      TokenKind2["COLON"] = ":";
      TokenKind2["EQUALS"] = "=";
      TokenKind2["AT"] = "@";
      TokenKind2["BRACKET_L"] = "[";
      TokenKind2["BRACKET_R"] = "]";
      TokenKind2["BRACE_L"] = "{";
      TokenKind2["PIPE"] = "|";
      TokenKind2["BRACE_R"] = "}";
      TokenKind2["NAME"] = "Name";
      TokenKind2["INT"] = "Int";
      TokenKind2["FLOAT"] = "Float";
      TokenKind2["STRING"] = "String";
      TokenKind2["BLOCK_STRING"] = "BlockString";
      TokenKind2["COMMENT"] = "Comment";
    })(TokenKind || (TokenKind = {}));
  }
});

// node_modules/graphql/language/lexer.mjs
function isPunctuatorTokenKind(kind) {
  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;
}
function isUnicodeScalarValue(code) {
  return code >= 0 && code <= 55295 || code >= 57344 && code <= 1114111;
}
function isSupplementaryCodePoint(body, location) {
  return isLeadingSurrogate(body.charCodeAt(location)) && isTrailingSurrogate(body.charCodeAt(location + 1));
}
function isLeadingSurrogate(code) {
  return code >= 55296 && code <= 56319;
}
function isTrailingSurrogate(code) {
  return code >= 56320 && code <= 57343;
}
function printCodePointAt(lexer, location) {
  const code = lexer.source.body.codePointAt(location);
  if (code === void 0) {
    return TokenKind.EOF;
  } else if (code >= 32 && code <= 126) {
    const char = String.fromCodePoint(code);
    return char === '"' ? `'"'` : `"${char}"`;
  }
  return "U+" + code.toString(16).toUpperCase().padStart(4, "0");
}
function createToken(lexer, kind, start, end, value) {
  const line = lexer.line;
  const col = 1 + start - lexer.lineStart;
  return new Token(kind, start, end, line, col, value);
}
function readNextToken(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    switch (code) {
      case 65279:
      case 9:
      case 32:
      case 44:
        ++position;
        continue;
      case 10:
        ++position;
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      case 13:
        if (body.charCodeAt(position + 1) === 10) {
          position += 2;
        } else {
          ++position;
        }
        ++lexer.line;
        lexer.lineStart = position;
        continue;
      case 35:
        return readComment(lexer, position);
      case 33:
        return createToken(lexer, TokenKind.BANG, position, position + 1);
      case 36:
        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);
      case 38:
        return createToken(lexer, TokenKind.AMP, position, position + 1);
      case 40:
        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);
      case 41:
        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);
      case 46:
        if (body.charCodeAt(position + 1) === 46 && body.charCodeAt(position + 2) === 46) {
          return createToken(lexer, TokenKind.SPREAD, position, position + 3);
        }
        break;
      case 58:
        return createToken(lexer, TokenKind.COLON, position, position + 1);
      case 61:
        return createToken(lexer, TokenKind.EQUALS, position, position + 1);
      case 64:
        return createToken(lexer, TokenKind.AT, position, position + 1);
      case 91:
        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);
      case 93:
        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);
      case 123:
        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);
      case 124:
        return createToken(lexer, TokenKind.PIPE, position, position + 1);
      case 125:
        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);
      case 34:
        if (body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
          return readBlockString(lexer, position);
        }
        return readString(lexer, position);
    }
    if (isDigit(code) || code === 45) {
      return readNumber(lexer, position, code);
    }
    if (isNameStart(code)) {
      return readName(lexer, position);
    }
    throw syntaxError(lexer.source, position, code === 39 ? `Unexpected single quote character ('), did you mean to use a double quote (")?` : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? `Unexpected character: ${printCodePointAt(lexer, position)}.` : `Invalid character: ${printCodePointAt(lexer, position)}.`);
  }
  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);
}
function readComment(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 10 || code === 13) {
      break;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      break;
    }
  }
  return createToken(lexer, TokenKind.COMMENT, start, position, body.slice(start + 1, position));
}
function readNumber(lexer, start, firstCode) {
  const body = lexer.source.body;
  let position = start;
  let code = firstCode;
  let isFloat2 = false;
  if (code === 45) {
    code = body.charCodeAt(++position);
  }
  if (code === 48) {
    code = body.charCodeAt(++position);
    if (isDigit(code)) {
      throw syntaxError(lexer.source, position, `Invalid number, unexpected digit after 0: ${printCodePointAt(lexer, position)}.`);
    }
  } else {
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46) {
    isFloat2 = true;
    code = body.charCodeAt(++position);
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 69 || code === 101) {
    isFloat2 = true;
    code = body.charCodeAt(++position);
    if (code === 43 || code === 45) {
      code = body.charCodeAt(++position);
    }
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  }
  if (code === 46 || isNameStart(code)) {
    throw syntaxError(lexer.source, position, `Invalid number, expected digit but got: ${printCodePointAt(lexer, position)}.`);
  }
  return createToken(lexer, isFloat2 ? TokenKind.FLOAT : TokenKind.INT, start, position, body.slice(start, position));
}
function readDigits(lexer, start, firstCode) {
  if (!isDigit(firstCode)) {
    throw syntaxError(lexer.source, start, `Invalid number, expected digit but got: ${printCodePointAt(lexer, start)}.`);
  }
  const body = lexer.source.body;
  let position = start + 1;
  while (isDigit(body.charCodeAt(position))) {
    ++position;
  }
  return position;
}
function readString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  let chunkStart = position;
  let value = "";
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 34) {
      value += body.slice(chunkStart, position);
      return createToken(lexer, TokenKind.STRING, start, position + 1, value);
    }
    if (code === 92) {
      value += body.slice(chunkStart, position);
      const escape = body.charCodeAt(position + 1) === 117 ? body.charCodeAt(position + 2) === 123 ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);
      value += escape.value;
      position += escape.size;
      chunkStart = position;
      continue;
    }
    if (code === 10 || code === 13) {
      break;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw syntaxError(lexer.source, position, `Invalid character within String: ${printCodePointAt(lexer, position)}.`);
    }
  }
  throw syntaxError(lexer.source, position, "Unterminated string.");
}
function readEscapedUnicodeVariableWidth(lexer, position) {
  const body = lexer.source.body;
  let point = 0;
  let size = 3;
  while (size < 12) {
    const code = body.charCodeAt(position + size++);
    if (code === 125) {
      if (size < 5 || !isUnicodeScalarValue(point)) {
        break;
      }
      return {
        value: String.fromCodePoint(point),
        size
      };
    }
    point = point << 4 | readHexDigit(code);
    if (point < 0) {
      break;
    }
  }
  throw syntaxError(lexer.source, position, `Invalid Unicode escape sequence: "${body.slice(position, position + size)}".`);
}
function readEscapedUnicodeFixedWidth(lexer, position) {
  const body = lexer.source.body;
  const code = read16BitHexCode(body, position + 2);
  if (isUnicodeScalarValue(code)) {
    return {
      value: String.fromCodePoint(code),
      size: 6
    };
  }
  if (isLeadingSurrogate(code)) {
    if (body.charCodeAt(position + 6) === 92 && body.charCodeAt(position + 7) === 117) {
      const trailingCode = read16BitHexCode(body, position + 8);
      if (isTrailingSurrogate(trailingCode)) {
        return {
          value: String.fromCodePoint(code, trailingCode),
          size: 12
        };
      }
    }
  }
  throw syntaxError(lexer.source, position, `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`);
}
function read16BitHexCode(body, position) {
  return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));
}
function readHexDigit(code) {
  return code >= 48 && code <= 57 ? code - 48 : code >= 65 && code <= 70 ? code - 55 : code >= 97 && code <= 102 ? code - 87 : -1;
}
function readEscapedCharacter(lexer, position) {
  const body = lexer.source.body;
  const code = body.charCodeAt(position + 1);
  switch (code) {
    case 34:
      return {
        value: '"',
        size: 2
      };
    case 92:
      return {
        value: "\\",
        size: 2
      };
    case 47:
      return {
        value: "/",
        size: 2
      };
    case 98:
      return {
        value: "\b",
        size: 2
      };
    case 102:
      return {
        value: "\f",
        size: 2
      };
    case 110:
      return {
        value: "\n",
        size: 2
      };
    case 114:
      return {
        value: "\r",
        size: 2
      };
    case 116:
      return {
        value: "	",
        size: 2
      };
  }
  throw syntaxError(lexer.source, position, `Invalid character escape sequence: "${body.slice(position, position + 2)}".`);
}
function readBlockString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let lineStart = lexer.lineStart;
  let position = start + 3;
  let chunkStart = position;
  let currentLine = "";
  const blockLines = [];
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      const token = createToken(lexer, TokenKind.BLOCK_STRING, start, position + 3, dedentBlockStringLines(blockLines).join("\n"));
      lexer.line += blockLines.length - 1;
      lexer.lineStart = lineStart;
      return token;
    }
    if (code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
      currentLine += body.slice(chunkStart, position);
      chunkStart = position + 1;
      position += 4;
      continue;
    }
    if (code === 10 || code === 13) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      if (code === 13 && body.charCodeAt(position + 1) === 10) {
        position += 2;
      } else {
        ++position;
      }
      currentLine = "";
      chunkStart = position;
      lineStart = position;
      continue;
    }
    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw syntaxError(lexer.source, position, `Invalid character within String: ${printCodePointAt(lexer, position)}.`);
    }
  }
  throw syntaxError(lexer.source, position, "Unterminated string.");
}
function readName(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  while (position < bodyLength) {
    const code = body.charCodeAt(position);
    if (isNameContinue(code)) {
      ++position;
    } else {
      break;
    }
  }
  return createToken(lexer, TokenKind.NAME, start, position, body.slice(start, position));
}
var Lexer;
var init_lexer = __esm({
  "node_modules/graphql/language/lexer.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_syntaxError();
    init_ast();
    init_blockString();
    init_characterClasses();
    init_tokenKind();
    Lexer = class {
      constructor(source) {
        const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);
        this.source = source;
        this.lastToken = startOfFileToken;
        this.token = startOfFileToken;
        this.line = 1;
        this.lineStart = 0;
      }
      get [Symbol.toStringTag]() {
        return "Lexer";
      }
      advance() {
        this.lastToken = this.token;
        const token = this.token = this.lookahead();
        return token;
      }
      lookahead() {
        let token = this.token;
        if (token.kind !== TokenKind.EOF) {
          do {
            if (token.next) {
              token = token.next;
            } else {
              const nextToken = readNextToken(this, token.end);
              token.next = nextToken;
              nextToken.prev = token;
              token = nextToken;
            }
          } while (token.kind === TokenKind.COMMENT);
        }
        return token;
      }
    };
  }
});

// node_modules/graphql/jsutils/inspect.mjs
function inspect(value) {
  return formatValue(value, []);
}
function formatValue(value, seenValues) {
  switch (typeof value) {
    case "string":
      return JSON.stringify(value);
    case "function":
      return value.name ? `[function ${value.name}]` : "[function]";
    case "object":
      return formatObjectValue(value, seenValues);
    default:
      return String(value);
  }
}
function formatObjectValue(value, previouslySeenValues) {
  if (value === null) {
    return "null";
  }
  if (previouslySeenValues.includes(value)) {
    return "[Circular]";
  }
  const seenValues = [...previouslySeenValues, value];
  if (isJSONable(value)) {
    const jsonValue = value.toJSON();
    if (jsonValue !== value) {
      return typeof jsonValue === "string" ? jsonValue : formatValue(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }
  return formatObject(value, seenValues);
}
function isJSONable(value) {
  return typeof value.toJSON === "function";
}
function formatObject(object, seenValues) {
  const entries = Object.entries(object);
  if (entries.length === 0) {
    return "{}";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[" + getObjectTag(object) + "]";
  }
  const properties = entries.map(([key, value]) => key + ": " + formatValue(value, seenValues));
  return "{ " + properties.join(", ") + " }";
}
function formatArray(array, seenValues) {
  if (array.length === 0) {
    return "[]";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return "[Array]";
  }
  const len = Math.min(MAX_ARRAY_LENGTH, array.length);
  const remaining = array.length - len;
  const items = [];
  for (let i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }
  if (remaining === 1) {
    items.push("... 1 more item");
  } else if (remaining > 1) {
    items.push(`... ${remaining} more items`);
  }
  return "[" + items.join(", ") + "]";
}
function getObjectTag(object) {
  const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
  if (tag === "Object" && typeof object.constructor === "function") {
    const name = object.constructor.name;
    if (typeof name === "string" && name !== "") {
      return name;
    }
  }
  return tag;
}
var MAX_ARRAY_LENGTH, MAX_RECURSIVE_DEPTH;
var init_inspect = __esm({
  "node_modules/graphql/jsutils/inspect.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    MAX_ARRAY_LENGTH = 10;
    MAX_RECURSIVE_DEPTH = 2;
  }
});

// node_modules/graphql/jsutils/instanceOf.mjs
var instanceOf;
var init_instanceOf = __esm({
  "node_modules/graphql/jsutils/instanceOf.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    instanceOf = true ? function instanceOf2(value, constructor) {
      return value instanceof constructor;
    } : function instanceOf3(value, constructor) {
      if (value instanceof constructor) {
        return true;
      }
      if (typeof value === "object" && value !== null) {
        var _value$constructor;
        const className = constructor.prototype[Symbol.toStringTag];
        const valueClassName = Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name;
        if (className === valueClassName) {
          const stringifiedValue = inspect(value);
          throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
        }
      }
      return false;
    };
  }
});

// node_modules/graphql/language/source.mjs
function isSource(source) {
  return instanceOf(source, Source);
}
var Source;
var init_source = __esm({
  "node_modules/graphql/language/source.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_inspect();
    init_instanceOf();
    Source = class {
      constructor(body, name = "GraphQL request", locationOffset = {
        line: 1,
        column: 1
      }) {
        typeof body === "string" || devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);
        this.body = body;
        this.name = name;
        this.locationOffset = locationOffset;
        this.locationOffset.line > 0 || devAssert(false, "line in locationOffset is 1-indexed and must be positive.");
        this.locationOffset.column > 0 || devAssert(false, "column in locationOffset is 1-indexed and must be positive.");
      }
      get [Symbol.toStringTag]() {
        return "Source";
      }
    };
  }
});

// node_modules/graphql/language/parser.mjs
function parse(source, options) {
  const parser = new Parser(source, options);
  return parser.parseDocument();
}
function parseValue(source, options) {
  const parser = new Parser(source, options);
  parser.expectToken(TokenKind.SOF);
  const value = parser.parseValueLiteral(false);
  parser.expectToken(TokenKind.EOF);
  return value;
}
function getTokenDesc(token) {
  const value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : "");
}
function getTokenKindDesc(kind) {
  return isPunctuatorTokenKind(kind) ? `"${kind}"` : kind;
}
var Parser;
var init_parser = __esm({
  "node_modules/graphql/language/parser.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_syntaxError();
    init_ast();
    init_directiveLocation();
    init_kinds();
    init_lexer();
    init_source();
    init_tokenKind();
    Parser = class {
      constructor(source, options) {
        const sourceObj = isSource(source) ? source : new Source(source);
        this._lexer = new Lexer(sourceObj);
        this._options = options;
      }
      parseName() {
        const token = this.expectToken(TokenKind.NAME);
        return this.node(token, {
          kind: Kind.NAME,
          value: token.value
        });
      }
      parseDocument() {
        return this.node(this._lexer.token, {
          kind: Kind.DOCUMENT,
          definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF)
        });
      }
      parseDefinition() {
        if (this.peek(TokenKind.BRACE_L)) {
          return this.parseOperationDefinition();
        }
        const hasDescription = this.peekDescription();
        const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;
        if (keywordToken.kind === TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaDefinition();
            case "scalar":
              return this.parseScalarTypeDefinition();
            case "type":
              return this.parseObjectTypeDefinition();
            case "interface":
              return this.parseInterfaceTypeDefinition();
            case "union":
              return this.parseUnionTypeDefinition();
            case "enum":
              return this.parseEnumTypeDefinition();
            case "input":
              return this.parseInputObjectTypeDefinition();
            case "directive":
              return this.parseDirectiveDefinition();
          }
          if (hasDescription) {
            throw syntaxError(this._lexer.source, this._lexer.token.start, "Unexpected description, descriptions are supported only on type definitions.");
          }
          switch (keywordToken.value) {
            case "query":
            case "mutation":
            case "subscription":
              return this.parseOperationDefinition();
            case "fragment":
              return this.parseFragmentDefinition();
            case "extend":
              return this.parseTypeSystemExtension();
          }
        }
        throw this.unexpected(keywordToken);
      }
      parseOperationDefinition() {
        const start = this._lexer.token;
        if (this.peek(TokenKind.BRACE_L)) {
          return this.node(start, {
            kind: Kind.OPERATION_DEFINITION,
            operation: OperationTypeNode.QUERY,
            name: void 0,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet()
          });
        }
        const operation = this.parseOperationType();
        let name;
        if (this.peek(TokenKind.NAME)) {
          name = this.parseName();
        }
        return this.node(start, {
          kind: Kind.OPERATION_DEFINITION,
          operation,
          name,
          variableDefinitions: this.parseVariableDefinitions(),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      parseOperationType() {
        const operationToken = this.expectToken(TokenKind.NAME);
        switch (operationToken.value) {
          case "query":
            return OperationTypeNode.QUERY;
          case "mutation":
            return OperationTypeNode.MUTATION;
          case "subscription":
            return OperationTypeNode.SUBSCRIPTION;
        }
        throw this.unexpected(operationToken);
      }
      parseVariableDefinitions() {
        return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);
      }
      parseVariableDefinition() {
        return this.node(this._lexer.token, {
          kind: Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseConstValueLiteral() : void 0,
          directives: this.parseConstDirectives()
        });
      }
      parseVariable() {
        const start = this._lexer.token;
        this.expectToken(TokenKind.DOLLAR);
        return this.node(start, {
          kind: Kind.VARIABLE,
          name: this.parseName()
        });
      }
      parseSelectionSet() {
        return this.node(this._lexer.token, {
          kind: Kind.SELECTION_SET,
          selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R)
        });
      }
      parseSelection() {
        return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
      }
      parseField() {
        const start = this._lexer.token;
        const nameOrAlias = this.parseName();
        let alias;
        let name;
        if (this.expectOptionalToken(TokenKind.COLON)) {
          alias = nameOrAlias;
          name = this.parseName();
        } else {
          name = nameOrAlias;
        }
        return this.node(start, {
          kind: Kind.FIELD,
          alias,
          name,
          arguments: this.parseArguments(false),
          directives: this.parseDirectives(false),
          selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0
        });
      }
      parseArguments(isConst) {
        const item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
      }
      parseArgument(isConst = false) {
        const start = this._lexer.token;
        const name = this.parseName();
        this.expectToken(TokenKind.COLON);
        return this.node(start, {
          kind: Kind.ARGUMENT,
          name,
          value: this.parseValueLiteral(isConst)
        });
      }
      parseConstArgument() {
        return this.parseArgument(true);
      }
      parseFragment() {
        const start = this._lexer.token;
        this.expectToken(TokenKind.SPREAD);
        const hasTypeCondition = this.expectOptionalKeyword("on");
        if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
          return this.node(start, {
            kind: Kind.FRAGMENT_SPREAD,
            name: this.parseFragmentName(),
            directives: this.parseDirectives(false)
          });
        }
        return this.node(start, {
          kind: Kind.INLINE_FRAGMENT,
          typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      parseFragmentDefinition() {
        var _this$_options;
        const start = this._lexer.token;
        this.expectKeyword("fragment");
        if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.allowLegacyFragmentVariables) === true) {
          return this.node(start, {
            kind: Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            variableDefinitions: this.parseVariableDefinitions(),
            typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet()
          });
        }
        return this.node(start, {
          kind: Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      parseFragmentName() {
        if (this._lexer.token.value === "on") {
          throw this.unexpected();
        }
        return this.parseName();
      }
      parseValueLiteral(isConst) {
        const token = this._lexer.token;
        switch (token.kind) {
          case TokenKind.BRACKET_L:
            return this.parseList(isConst);
          case TokenKind.BRACE_L:
            return this.parseObject(isConst);
          case TokenKind.INT:
            this._lexer.advance();
            return this.node(token, {
              kind: Kind.INT,
              value: token.value
            });
          case TokenKind.FLOAT:
            this._lexer.advance();
            return this.node(token, {
              kind: Kind.FLOAT,
              value: token.value
            });
          case TokenKind.STRING:
          case TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();
          case TokenKind.NAME:
            this._lexer.advance();
            switch (token.value) {
              case "true":
                return this.node(token, {
                  kind: Kind.BOOLEAN,
                  value: true
                });
              case "false":
                return this.node(token, {
                  kind: Kind.BOOLEAN,
                  value: false
                });
              case "null":
                return this.node(token, {
                  kind: Kind.NULL
                });
              default:
                return this.node(token, {
                  kind: Kind.ENUM,
                  value: token.value
                });
            }
          case TokenKind.DOLLAR:
            if (isConst) {
              this.expectToken(TokenKind.DOLLAR);
              if (this._lexer.token.kind === TokenKind.NAME) {
                const varName = this._lexer.token.value;
                throw syntaxError(this._lexer.source, token.start, `Unexpected variable "$${varName}" in constant value.`);
              } else {
                throw this.unexpected(token);
              }
            }
            return this.parseVariable();
          default:
            throw this.unexpected();
        }
      }
      parseConstValueLiteral() {
        return this.parseValueLiteral(true);
      }
      parseStringLiteral() {
        const token = this._lexer.token;
        this._lexer.advance();
        return this.node(token, {
          kind: Kind.STRING,
          value: token.value,
          block: token.kind === TokenKind.BLOCK_STRING
        });
      }
      parseList(isConst) {
        const item = () => this.parseValueLiteral(isConst);
        return this.node(this._lexer.token, {
          kind: Kind.LIST,
          values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R)
        });
      }
      parseObject(isConst) {
        const item = () => this.parseObjectField(isConst);
        return this.node(this._lexer.token, {
          kind: Kind.OBJECT,
          fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R)
        });
      }
      parseObjectField(isConst) {
        const start = this._lexer.token;
        const name = this.parseName();
        this.expectToken(TokenKind.COLON);
        return this.node(start, {
          kind: Kind.OBJECT_FIELD,
          name,
          value: this.parseValueLiteral(isConst)
        });
      }
      parseDirectives(isConst) {
        const directives = [];
        while (this.peek(TokenKind.AT)) {
          directives.push(this.parseDirective(isConst));
        }
        return directives;
      }
      parseConstDirectives() {
        return this.parseDirectives(true);
      }
      parseDirective(isConst) {
        const start = this._lexer.token;
        this.expectToken(TokenKind.AT);
        return this.node(start, {
          kind: Kind.DIRECTIVE,
          name: this.parseName(),
          arguments: this.parseArguments(isConst)
        });
      }
      parseTypeReference() {
        const start = this._lexer.token;
        let type2;
        if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
          const innerType = this.parseTypeReference();
          this.expectToken(TokenKind.BRACKET_R);
          type2 = this.node(start, {
            kind: Kind.LIST_TYPE,
            type: innerType
          });
        } else {
          type2 = this.parseNamedType();
        }
        if (this.expectOptionalToken(TokenKind.BANG)) {
          return this.node(start, {
            kind: Kind.NON_NULL_TYPE,
            type: type2
          });
        }
        return type2;
      }
      parseNamedType() {
        return this.node(this._lexer.token, {
          kind: Kind.NAMED_TYPE,
          name: this.parseName()
        });
      }
      peekDescription() {
        return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
      }
      parseDescription() {
        if (this.peekDescription()) {
          return this.parseStringLiteral();
        }
      }
      parseSchemaDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("schema");
        const directives = this.parseConstDirectives();
        const operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);
        return this.node(start, {
          kind: Kind.SCHEMA_DEFINITION,
          description,
          directives,
          operationTypes
        });
      }
      parseOperationTypeDefinition() {
        const start = this._lexer.token;
        const operation = this.parseOperationType();
        this.expectToken(TokenKind.COLON);
        const type2 = this.parseNamedType();
        return this.node(start, {
          kind: Kind.OPERATION_TYPE_DEFINITION,
          operation,
          type: type2
        });
      }
      parseScalarTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("scalar");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.SCALAR_TYPE_DEFINITION,
          description,
          name,
          directives
        });
      }
      parseObjectTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("type");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        return this.node(start, {
          kind: Kind.OBJECT_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields
        });
      }
      parseImplementsInterfaces() {
        return this.expectOptionalKeyword("implements") ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];
      }
      parseFieldsDefinition() {
        return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);
      }
      parseFieldDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseName();
        const args = this.parseArgumentDefs();
        this.expectToken(TokenKind.COLON);
        const type2 = this.parseTypeReference();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.FIELD_DEFINITION,
          description,
          name,
          arguments: args,
          type: type2,
          directives
        });
      }
      parseArgumentDefs() {
        return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);
      }
      parseInputValueDef() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseName();
        this.expectToken(TokenKind.COLON);
        const type2 = this.parseTypeReference();
        let defaultValue;
        if (this.expectOptionalToken(TokenKind.EQUALS)) {
          defaultValue = this.parseConstValueLiteral();
        }
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.INPUT_VALUE_DEFINITION,
          description,
          name,
          type: type2,
          defaultValue,
          directives
        });
      }
      parseInterfaceTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("interface");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        return this.node(start, {
          kind: Kind.INTERFACE_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives,
          fields
        });
      }
      parseUnionTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("union");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const types = this.parseUnionMemberTypes();
        return this.node(start, {
          kind: Kind.UNION_TYPE_DEFINITION,
          description,
          name,
          directives,
          types
        });
      }
      parseUnionMemberTypes() {
        return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];
      }
      parseEnumTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("enum");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const values = this.parseEnumValuesDefinition();
        return this.node(start, {
          kind: Kind.ENUM_TYPE_DEFINITION,
          description,
          name,
          directives,
          values
        });
      }
      parseEnumValuesDefinition() {
        return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);
      }
      parseEnumValueDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        const name = this.parseEnumValueName();
        const directives = this.parseConstDirectives();
        return this.node(start, {
          kind: Kind.ENUM_VALUE_DEFINITION,
          description,
          name,
          directives
        });
      }
      parseEnumValueName() {
        if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null") {
          throw syntaxError(this._lexer.source, this._lexer.token.start, `${getTokenDesc(this._lexer.token)} is reserved and cannot be used for an enum value.`);
        }
        return this.parseName();
      }
      parseInputObjectTypeDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("input");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const fields = this.parseInputFieldsDefinition();
        return this.node(start, {
          kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description,
          name,
          directives,
          fields
        });
      }
      parseInputFieldsDefinition() {
        return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);
      }
      parseTypeSystemExtension() {
        const keywordToken = this._lexer.lookahead();
        if (keywordToken.kind === TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaExtension();
            case "scalar":
              return this.parseScalarTypeExtension();
            case "type":
              return this.parseObjectTypeExtension();
            case "interface":
              return this.parseInterfaceTypeExtension();
            case "union":
              return this.parseUnionTypeExtension();
            case "enum":
              return this.parseEnumTypeExtension();
            case "input":
              return this.parseInputObjectTypeExtension();
          }
        }
        throw this.unexpected(keywordToken);
      }
      parseSchemaExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("schema");
        const directives = this.parseConstDirectives();
        const operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);
        if (directives.length === 0 && operationTypes.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.SCHEMA_EXTENSION,
          directives,
          operationTypes
        });
      }
      parseScalarTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("scalar");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        if (directives.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.SCALAR_TYPE_EXTENSION,
          name,
          directives
        });
      }
      parseObjectTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("type");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.OBJECT_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields
        });
      }
      parseInterfaceTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("interface");
        const name = this.parseName();
        const interfaces = this.parseImplementsInterfaces();
        const directives = this.parseConstDirectives();
        const fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.INTERFACE_TYPE_EXTENSION,
          name,
          interfaces,
          directives,
          fields
        });
      }
      parseUnionTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("union");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const types = this.parseUnionMemberTypes();
        if (directives.length === 0 && types.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.UNION_TYPE_EXTENSION,
          name,
          directives,
          types
        });
      }
      parseEnumTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("enum");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const values = this.parseEnumValuesDefinition();
        if (directives.length === 0 && values.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.ENUM_TYPE_EXTENSION,
          name,
          directives,
          values
        });
      }
      parseInputObjectTypeExtension() {
        const start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("input");
        const name = this.parseName();
        const directives = this.parseConstDirectives();
        const fields = this.parseInputFieldsDefinition();
        if (directives.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return this.node(start, {
          kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name,
          directives,
          fields
        });
      }
      parseDirectiveDefinition() {
        const start = this._lexer.token;
        const description = this.parseDescription();
        this.expectKeyword("directive");
        this.expectToken(TokenKind.AT);
        const name = this.parseName();
        const args = this.parseArgumentDefs();
        const repeatable = this.expectOptionalKeyword("repeatable");
        this.expectKeyword("on");
        const locations = this.parseDirectiveLocations();
        return this.node(start, {
          kind: Kind.DIRECTIVE_DEFINITION,
          description,
          name,
          arguments: args,
          repeatable,
          locations
        });
      }
      parseDirectiveLocations() {
        return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
      }
      parseDirectiveLocation() {
        const start = this._lexer.token;
        const name = this.parseName();
        if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {
          return name;
        }
        throw this.unexpected(start);
      }
      node(startToken, node) {
        var _this$_options2;
        if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.noLocation) !== true) {
          node.loc = new Location(startToken, this._lexer.lastToken, this._lexer.source);
        }
        return node;
      }
      peek(kind) {
        return this._lexer.token.kind === kind;
      }
      expectToken(kind) {
        const token = this._lexer.token;
        if (token.kind === kind) {
          this._lexer.advance();
          return token;
        }
        throw syntaxError(this._lexer.source, token.start, `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`);
      }
      expectOptionalToken(kind) {
        const token = this._lexer.token;
        if (token.kind === kind) {
          this._lexer.advance();
          return true;
        }
        return false;
      }
      expectKeyword(value) {
        const token = this._lexer.token;
        if (token.kind === TokenKind.NAME && token.value === value) {
          this._lexer.advance();
        } else {
          throw syntaxError(this._lexer.source, token.start, `Expected "${value}", found ${getTokenDesc(token)}.`);
        }
      }
      expectOptionalKeyword(value) {
        const token = this._lexer.token;
        if (token.kind === TokenKind.NAME && token.value === value) {
          this._lexer.advance();
          return true;
        }
        return false;
      }
      unexpected(atToken) {
        const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
        return syntaxError(this._lexer.source, token.start, `Unexpected ${getTokenDesc(token)}.`);
      }
      any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        const nodes = [];
        while (!this.expectOptionalToken(closeKind)) {
          nodes.push(parseFn.call(this));
        }
        return nodes;
      }
      optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
          const nodes = [];
          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));
          return nodes;
        }
        return [];
      }
      many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        const nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));
        return nodes;
      }
      delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        const nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (this.expectOptionalToken(delimiterKind));
        return nodes;
      }
    };
  }
});

// node_modules/graphql/jsutils/didYouMean.mjs
function didYouMean(firstArg, secondArg) {
  const [subMessage, suggestionsArg] = secondArg ? [firstArg, secondArg] : [void 0, firstArg];
  let message = " Did you mean ";
  if (subMessage) {
    message += subMessage + " ";
  }
  const suggestions = suggestionsArg.map((x) => `"${x}"`);
  switch (suggestions.length) {
    case 0:
      return "";
    case 1:
      return message + suggestions[0] + "?";
    case 2:
      return message + suggestions[0] + " or " + suggestions[1] + "?";
  }
  const selected = suggestions.slice(0, MAX_SUGGESTIONS);
  const lastItem = selected.pop();
  return message + selected.join(", ") + ", or " + lastItem + "?";
}
var MAX_SUGGESTIONS;
var init_didYouMean = __esm({
  "node_modules/graphql/jsutils/didYouMean.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    MAX_SUGGESTIONS = 5;
  }
});

// node_modules/graphql/jsutils/identityFunc.mjs
function identityFunc(x) {
  return x;
}
var init_identityFunc = __esm({
  "node_modules/graphql/jsutils/identityFunc.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/jsutils/keyMap.mjs
function keyMap(list, keyFn) {
  const result = /* @__PURE__ */ Object.create(null);
  for (const item of list) {
    result[keyFn(item)] = item;
  }
  return result;
}
var init_keyMap = __esm({
  "node_modules/graphql/jsutils/keyMap.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/jsutils/keyValMap.mjs
function keyValMap(list, keyFn, valFn) {
  const result = /* @__PURE__ */ Object.create(null);
  for (const item of list) {
    result[keyFn(item)] = valFn(item);
  }
  return result;
}
var init_keyValMap = __esm({
  "node_modules/graphql/jsutils/keyValMap.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/jsutils/mapValue.mjs
function mapValue(map2, fn) {
  const result = /* @__PURE__ */ Object.create(null);
  for (const key of Object.keys(map2)) {
    result[key] = fn(map2[key], key);
  }
  return result;
}
var init_mapValue = __esm({
  "node_modules/graphql/jsutils/mapValue.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/jsutils/naturalCompare.mjs
function naturalCompare(aStr, bStr) {
  let aIndex = 0;
  let bIndex = 0;
  while (aIndex < aStr.length && bIndex < bStr.length) {
    let aChar = aStr.charCodeAt(aIndex);
    let bChar = bStr.charCodeAt(bIndex);
    if (isDigit2(aChar) && isDigit2(bChar)) {
      let aNum = 0;
      do {
        ++aIndex;
        aNum = aNum * 10 + aChar - DIGIT_0;
        aChar = aStr.charCodeAt(aIndex);
      } while (isDigit2(aChar) && aNum > 0);
      let bNum = 0;
      do {
        ++bIndex;
        bNum = bNum * 10 + bChar - DIGIT_0;
        bChar = bStr.charCodeAt(bIndex);
      } while (isDigit2(bChar) && bNum > 0);
      if (aNum < bNum) {
        return -1;
      }
      if (aNum > bNum) {
        return 1;
      }
    } else {
      if (aChar < bChar) {
        return -1;
      }
      if (aChar > bChar) {
        return 1;
      }
      ++aIndex;
      ++bIndex;
    }
  }
  return aStr.length - bStr.length;
}
function isDigit2(code) {
  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;
}
var DIGIT_0, DIGIT_9;
var init_naturalCompare = __esm({
  "node_modules/graphql/jsutils/naturalCompare.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    DIGIT_0 = 48;
    DIGIT_9 = 57;
  }
});

// node_modules/graphql/jsutils/suggestionList.mjs
function suggestionList(input, options) {
  const optionsByDistance = /* @__PURE__ */ Object.create(null);
  const lexicalDistance = new LexicalDistance(input);
  const threshold = Math.floor(input.length * 0.4) + 1;
  for (const option of options) {
    const distance = lexicalDistance.measure(option, threshold);
    if (distance !== void 0) {
      optionsByDistance[option] = distance;
    }
  }
  return Object.keys(optionsByDistance).sort((a, b) => {
    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];
    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);
  });
}
function stringToArray(str2) {
  const strLength = str2.length;
  const array = new Array(strLength);
  for (let i = 0; i < strLength; ++i) {
    array[i] = str2.charCodeAt(i);
  }
  return array;
}
var LexicalDistance;
var init_suggestionList = __esm({
  "node_modules/graphql/jsutils/suggestionList.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_naturalCompare();
    LexicalDistance = class {
      constructor(input) {
        this._input = input;
        this._inputLowerCase = input.toLowerCase();
        this._inputArray = stringToArray(this._inputLowerCase);
        this._rows = [
          new Array(input.length + 1).fill(0),
          new Array(input.length + 1).fill(0),
          new Array(input.length + 1).fill(0)
        ];
      }
      measure(option, threshold) {
        if (this._input === option) {
          return 0;
        }
        const optionLowerCase = option.toLowerCase();
        if (this._inputLowerCase === optionLowerCase) {
          return 1;
        }
        let a = stringToArray(optionLowerCase);
        let b = this._inputArray;
        if (a.length < b.length) {
          const tmp = a;
          a = b;
          b = tmp;
        }
        const aLength = a.length;
        const bLength = b.length;
        if (aLength - bLength > threshold) {
          return void 0;
        }
        const rows = this._rows;
        for (let j = 0; j <= bLength; j++) {
          rows[0][j] = j;
        }
        for (let i = 1; i <= aLength; i++) {
          const upRow = rows[(i - 1) % 3];
          const currentRow = rows[i % 3];
          let smallestCell = currentRow[0] = i;
          for (let j = 1; j <= bLength; j++) {
            const cost = a[i - 1] === b[j - 1] ? 0 : 1;
            let currentCell = Math.min(upRow[j] + 1, currentRow[j - 1] + 1, upRow[j - 1] + cost);
            if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
              const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];
              currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
            }
            if (currentCell < smallestCell) {
              smallestCell = currentCell;
            }
            currentRow[j] = currentCell;
          }
          if (smallestCell > threshold) {
            return void 0;
          }
        }
        const distance = rows[aLength % 3][bLength];
        return distance <= threshold ? distance : void 0;
      }
    };
  }
});

// node_modules/graphql/jsutils/toObjMap.mjs
function toObjMap(obj) {
  if (obj == null) {
    return /* @__PURE__ */ Object.create(null);
  }
  if (Object.getPrototypeOf(obj) === null) {
    return obj;
  }
  const map2 = /* @__PURE__ */ Object.create(null);
  for (const [key, value] of Object.entries(obj)) {
    map2[key] = value;
  }
  return map2;
}
var init_toObjMap = __esm({
  "node_modules/graphql/jsutils/toObjMap.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/language/printString.mjs
function printString(str2) {
  return `"${str2.replace(escapedRegExp, escapedReplacer)}"`;
}
function escapedReplacer(str2) {
  return escapeSequences[str2.charCodeAt(0)];
}
var escapedRegExp, escapeSequences;
var init_printString = __esm({
  "node_modules/graphql/language/printString.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
    escapeSequences = [
      "\\u0000",
      "\\u0001",
      "\\u0002",
      "\\u0003",
      "\\u0004",
      "\\u0005",
      "\\u0006",
      "\\u0007",
      "\\b",
      "\\t",
      "\\n",
      "\\u000B",
      "\\f",
      "\\r",
      "\\u000E",
      "\\u000F",
      "\\u0010",
      "\\u0011",
      "\\u0012",
      "\\u0013",
      "\\u0014",
      "\\u0015",
      "\\u0016",
      "\\u0017",
      "\\u0018",
      "\\u0019",
      "\\u001A",
      "\\u001B",
      "\\u001C",
      "\\u001D",
      "\\u001E",
      "\\u001F",
      "",
      "",
      '\\"',
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\\\",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\u007F",
      "\\u0080",
      "\\u0081",
      "\\u0082",
      "\\u0083",
      "\\u0084",
      "\\u0085",
      "\\u0086",
      "\\u0087",
      "\\u0088",
      "\\u0089",
      "\\u008A",
      "\\u008B",
      "\\u008C",
      "\\u008D",
      "\\u008E",
      "\\u008F",
      "\\u0090",
      "\\u0091",
      "\\u0092",
      "\\u0093",
      "\\u0094",
      "\\u0095",
      "\\u0096",
      "\\u0097",
      "\\u0098",
      "\\u0099",
      "\\u009A",
      "\\u009B",
      "\\u009C",
      "\\u009D",
      "\\u009E",
      "\\u009F"
    ];
  }
});

// node_modules/graphql/language/visitor.mjs
function visit(root, visitor, visitorKeys = QueryDocumentKeys) {
  const enterLeaveMap = /* @__PURE__ */ new Map();
  for (const kind of Object.values(Kind)) {
    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
  }
  let stack = void 0;
  let inArray = Array.isArray(root);
  let keys = [root];
  let index = -1;
  let edits = [];
  let node = root;
  let key = void 0;
  let parent = void 0;
  const path2 = [];
  const ancestors = [];
  do {
    index++;
    const isLeaving = index === keys.length;
    const isEdited = isLeaving && edits.length !== 0;
    if (isLeaving) {
      key = ancestors.length === 0 ? void 0 : path2[path2.length - 1];
      node = parent;
      parent = ancestors.pop();
      if (isEdited) {
        if (inArray) {
          node = node.slice();
          let editOffset = 0;
          for (const [editKey, editValue] of edits) {
            const arrayKey = editKey - editOffset;
            if (editValue === null) {
              node.splice(arrayKey, 1);
              editOffset++;
            } else {
              node[arrayKey] = editValue;
            }
          }
        } else {
          node = Object.defineProperties({}, Object.getOwnPropertyDescriptors(node));
          for (const [editKey, editValue] of edits) {
            node[editKey] = editValue;
          }
        }
      }
      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else if (parent) {
      key = inArray ? index : keys[index];
      node = parent[key];
      if (node === null || node === void 0) {
        continue;
      }
      path2.push(key);
    }
    let result;
    if (!Array.isArray(node)) {
      var _enterLeaveMap$get, _enterLeaveMap$get2;
      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);
      const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
      result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path2, ancestors);
      if (result === BREAK) {
        break;
      }
      if (result === false) {
        if (!isLeaving) {
          path2.pop();
          continue;
        }
      } else if (result !== void 0) {
        edits.push([key, result]);
        if (!isLeaving) {
          if (isNode(result)) {
            node = result;
          } else {
            path2.pop();
            continue;
          }
        }
      }
    }
    if (result === void 0 && isEdited) {
      edits.push([key, node]);
    }
    if (isLeaving) {
      path2.pop();
    } else {
      var _node$kind;
      stack = {
        inArray,
        index,
        keys,
        edits,
        prev: stack
      };
      inArray = Array.isArray(node);
      keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];
      index = -1;
      edits = [];
      if (parent) {
        ancestors.push(parent);
      }
      parent = node;
    }
  } while (stack !== void 0);
  if (edits.length !== 0) {
    return edits[edits.length - 1][1];
  }
  return root;
}
function visitInParallel(visitors) {
  const skipping = new Array(visitors.length).fill(null);
  const mergedVisitor = /* @__PURE__ */ Object.create(null);
  for (const kind of Object.values(Kind)) {
    let hasVisitor = false;
    const enterList = new Array(visitors.length).fill(void 0);
    const leaveList = new Array(visitors.length).fill(void 0);
    for (let i = 0; i < visitors.length; ++i) {
      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);
      hasVisitor || (hasVisitor = enter != null || leave != null);
      enterList[i] = enter;
      leaveList[i] = leave;
    }
    if (!hasVisitor) {
      continue;
    }
    const mergedEnterLeave = {
      enter(...args) {
        const node = args[0];
        for (let i = 0; i < visitors.length; i++) {
          if (skipping[i] === null) {
            var _enterList$i;
            const result = (_enterList$i = enterList[i]) === null || _enterList$i === void 0 ? void 0 : _enterList$i.apply(visitors[i], args);
            if (result === false) {
              skipping[i] = node;
            } else if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== void 0) {
              return result;
            }
          }
        }
      },
      leave(...args) {
        const node = args[0];
        for (let i = 0; i < visitors.length; i++) {
          if (skipping[i] === null) {
            var _leaveList$i;
            const result = (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0 ? void 0 : _leaveList$i.apply(visitors[i], args);
            if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== void 0 && result !== false) {
              return result;
            }
          } else if (skipping[i] === node) {
            skipping[i] = null;
          }
        }
      }
    };
    mergedVisitor[kind] = mergedEnterLeave;
  }
  return mergedVisitor;
}
function getEnterLeaveForKind(visitor, kind) {
  const kindVisitor = visitor[kind];
  if (typeof kindVisitor === "object") {
    return kindVisitor;
  } else if (typeof kindVisitor === "function") {
    return {
      enter: kindVisitor,
      leave: void 0
    };
  }
  return {
    enter: visitor.enter,
    leave: visitor.leave
  };
}
var BREAK;
var init_visitor = __esm({
  "node_modules/graphql/language/visitor.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_inspect();
    init_ast();
    init_kinds();
    BREAK = Object.freeze({});
  }
});

// node_modules/graphql/language/printer.mjs
function print(ast) {
  return visit(ast, printDocASTReducer);
}
function join(maybeArray, separator3 = "") {
  var _maybeArray$filter$jo;
  return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter((x) => x).join(separator3)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
}
function block(array) {
  return wrap("{\n", indent(join(array, "\n")), "\n}");
}
function wrap(start, maybeString, end = "") {
  return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
}
function indent(str2) {
  return wrap("  ", str2.replace(/\n/g, "\n  "));
}
function hasMultilineItems(maybeArray) {
  var _maybeArray$some;
  return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str2) => str2.includes("\n"))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;
}
var MAX_LINE_LENGTH, printDocASTReducer;
var init_printer = __esm({
  "node_modules/graphql/language/printer.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_blockString();
    init_printString();
    init_visitor();
    MAX_LINE_LENGTH = 80;
    printDocASTReducer = {
      Name: {
        leave: (node) => node.value
      },
      Variable: {
        leave: (node) => "$" + node.name
      },
      Document: {
        leave: (node) => join(node.definitions, "\n\n")
      },
      OperationDefinition: {
        leave(node) {
          const varDefs = wrap("(", join(node.variableDefinitions, ", "), ")");
          const prefix = join([
            node.operation,
            join([node.name, varDefs]),
            join(node.directives, " ")
          ], " ");
          return (prefix === "query" ? "" : prefix + " ") + node.selectionSet;
        }
      },
      VariableDefinition: {
        leave: ({ variable, type: type2, defaultValue, directives }) => variable + ": " + type2 + wrap(" = ", defaultValue) + wrap(" ", join(directives, " "))
      },
      SelectionSet: {
        leave: ({ selections }) => block(selections)
      },
      Field: {
        leave({ alias, name, arguments: args, directives, selectionSet }) {
          const prefix = wrap("", alias, ": ") + name;
          let argsLine = prefix + wrap("(", join(args, ", "), ")");
          if (argsLine.length > MAX_LINE_LENGTH) {
            argsLine = prefix + wrap("(\n", indent(join(args, "\n")), "\n)");
          }
          return join([argsLine, join(directives, " "), selectionSet], " ");
        }
      },
      Argument: {
        leave: ({ name, value }) => name + ": " + value
      },
      FragmentSpread: {
        leave: ({ name, directives }) => "..." + name + wrap(" ", join(directives, " "))
      },
      InlineFragment: {
        leave: ({ typeCondition, directives, selectionSet }) => join([
          "...",
          wrap("on ", typeCondition),
          join(directives, " "),
          selectionSet
        ], " ")
      },
      FragmentDefinition: {
        leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => `fragment ${name}${wrap("(", join(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap("", join(directives, " "), " ")}` + selectionSet
      },
      IntValue: {
        leave: ({ value }) => value
      },
      FloatValue: {
        leave: ({ value }) => value
      },
      StringValue: {
        leave: ({ value, block: isBlockString }) => isBlockString ? printBlockString(value) : printString(value)
      },
      BooleanValue: {
        leave: ({ value }) => value ? "true" : "false"
      },
      NullValue: {
        leave: () => "null"
      },
      EnumValue: {
        leave: ({ value }) => value
      },
      ListValue: {
        leave: ({ values }) => "[" + join(values, ", ") + "]"
      },
      ObjectValue: {
        leave: ({ fields }) => "{" + join(fields, ", ") + "}"
      },
      ObjectField: {
        leave: ({ name, value }) => name + ": " + value
      },
      Directive: {
        leave: ({ name, arguments: args }) => "@" + name + wrap("(", join(args, ", "), ")")
      },
      NamedType: {
        leave: ({ name }) => name
      },
      ListType: {
        leave: ({ type: type2 }) => "[" + type2 + "]"
      },
      NonNullType: {
        leave: ({ type: type2 }) => type2 + "!"
      },
      SchemaDefinition: {
        leave: ({ description, directives, operationTypes }) => wrap("", description, "\n") + join(["schema", join(directives, " "), block(operationTypes)], " ")
      },
      OperationTypeDefinition: {
        leave: ({ operation, type: type2 }) => operation + ": " + type2
      },
      ScalarTypeDefinition: {
        leave: ({ description, name, directives }) => wrap("", description, "\n") + join(["scalar", name, join(directives, " ")], " ")
      },
      ObjectTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join([
          "type",
          name,
          wrap("implements ", join(interfaces, " & ")),
          join(directives, " "),
          block(fields)
        ], " ")
      },
      FieldDefinition: {
        leave: ({ description, name, arguments: args, type: type2, directives }) => wrap("", description, "\n") + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + ": " + type2 + wrap(" ", join(directives, " "))
      },
      InputValueDefinition: {
        leave: ({ description, name, type: type2, defaultValue, directives }) => wrap("", description, "\n") + join([name + ": " + type2, wrap("= ", defaultValue), join(directives, " ")], " ")
      },
      InterfaceTypeDefinition: {
        leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join([
          "interface",
          name,
          wrap("implements ", join(interfaces, " & ")),
          join(directives, " "),
          block(fields)
        ], " ")
      },
      UnionTypeDefinition: {
        leave: ({ description, name, directives, types }) => wrap("", description, "\n") + join(["union", name, join(directives, " "), wrap("= ", join(types, " | "))], " ")
      },
      EnumTypeDefinition: {
        leave: ({ description, name, directives, values }) => wrap("", description, "\n") + join(["enum", name, join(directives, " "), block(values)], " ")
      },
      EnumValueDefinition: {
        leave: ({ description, name, directives }) => wrap("", description, "\n") + join([name, join(directives, " ")], " ")
      },
      InputObjectTypeDefinition: {
        leave: ({ description, name, directives, fields }) => wrap("", description, "\n") + join(["input", name, join(directives, " "), block(fields)], " ")
      },
      DirectiveDefinition: {
        leave: ({ description, name, arguments: args, repeatable, locations }) => wrap("", description, "\n") + "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ")
      },
      SchemaExtension: {
        leave: ({ directives, operationTypes }) => join(["extend schema", join(directives, " "), block(operationTypes)], " ")
      },
      ScalarTypeExtension: {
        leave: ({ name, directives }) => join(["extend scalar", name, join(directives, " ")], " ")
      },
      ObjectTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join([
          "extend type",
          name,
          wrap("implements ", join(interfaces, " & ")),
          join(directives, " "),
          block(fields)
        ], " ")
      },
      InterfaceTypeExtension: {
        leave: ({ name, interfaces, directives, fields }) => join([
          "extend interface",
          name,
          wrap("implements ", join(interfaces, " & ")),
          join(directives, " "),
          block(fields)
        ], " ")
      },
      UnionTypeExtension: {
        leave: ({ name, directives, types }) => join([
          "extend union",
          name,
          join(directives, " "),
          wrap("= ", join(types, " | "))
        ], " ")
      },
      EnumTypeExtension: {
        leave: ({ name, directives, values }) => join(["extend enum", name, join(directives, " "), block(values)], " ")
      },
      InputObjectTypeExtension: {
        leave: ({ name, directives, fields }) => join(["extend input", name, join(directives, " "), block(fields)], " ")
      }
    };
  }
});

// node_modules/graphql/utilities/valueFromASTUntyped.mjs
function valueFromASTUntyped(valueNode, variables) {
  switch (valueNode.kind) {
    case Kind.NULL:
      return null;
    case Kind.INT:
      return parseInt(valueNode.value, 10);
    case Kind.FLOAT:
      return parseFloat(valueNode.value);
    case Kind.STRING:
    case Kind.ENUM:
    case Kind.BOOLEAN:
      return valueNode.value;
    case Kind.LIST:
      return valueNode.values.map((node) => valueFromASTUntyped(node, variables));
    case Kind.OBJECT:
      return keyValMap(valueNode.fields, (field) => field.name.value, (field) => valueFromASTUntyped(field.value, variables));
    case Kind.VARIABLE:
      return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
  }
}
var init_valueFromASTUntyped = __esm({
  "node_modules/graphql/utilities/valueFromASTUntyped.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_keyValMap();
    init_kinds();
  }
});

// node_modules/graphql/type/assertName.mjs
function assertName(name) {
  name != null || devAssert(false, "Must provide name.");
  typeof name === "string" || devAssert(false, "Expected name to be a string.");
  if (name.length === 0) {
    throw new GraphQLError("Expected name to be a non-empty string.");
  }
  for (let i = 1; i < name.length; ++i) {
    if (!isNameContinue(name.charCodeAt(i))) {
      throw new GraphQLError(`Names must only contain [_a-zA-Z0-9] but "${name}" does not.`);
    }
  }
  if (!isNameStart(name.charCodeAt(0))) {
    throw new GraphQLError(`Names must start with [_a-zA-Z] but "${name}" does not.`);
  }
  return name;
}
function assertEnumValueName(name) {
  if (name === "true" || name === "false" || name === "null") {
    throw new GraphQLError(`Enum values cannot be named: ${name}`);
  }
  return assertName(name);
}
var init_assertName = __esm({
  "node_modules/graphql/type/assertName.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_GraphQLError();
    init_characterClasses();
  }
});

// node_modules/graphql/type/definition.mjs
function isType(type2) {
  return isScalarType(type2) || isObjectType(type2) || isInterfaceType(type2) || isUnionType(type2) || isEnumType(type2) || isInputObjectType(type2) || isListType(type2) || isNonNullType(type2);
}
function isScalarType(type2) {
  return instanceOf(type2, GraphQLScalarType);
}
function isObjectType(type2) {
  return instanceOf(type2, GraphQLObjectType);
}
function assertObjectType(type2) {
  if (!isObjectType(type2)) {
    throw new Error(`Expected ${inspect(type2)} to be a GraphQL Object type.`);
  }
  return type2;
}
function isInterfaceType(type2) {
  return instanceOf(type2, GraphQLInterfaceType);
}
function assertInterfaceType(type2) {
  if (!isInterfaceType(type2)) {
    throw new Error(`Expected ${inspect(type2)} to be a GraphQL Interface type.`);
  }
  return type2;
}
function isUnionType(type2) {
  return instanceOf(type2, GraphQLUnionType);
}
function isEnumType(type2) {
  return instanceOf(type2, GraphQLEnumType);
}
function isInputObjectType(type2) {
  return instanceOf(type2, GraphQLInputObjectType);
}
function isListType(type2) {
  return instanceOf(type2, GraphQLList);
}
function isNonNullType(type2) {
  return instanceOf(type2, GraphQLNonNull);
}
function isInputType(type2) {
  return isScalarType(type2) || isEnumType(type2) || isInputObjectType(type2) || isWrappingType(type2) && isInputType(type2.ofType);
}
function isOutputType(type2) {
  return isScalarType(type2) || isObjectType(type2) || isInterfaceType(type2) || isUnionType(type2) || isEnumType(type2) || isWrappingType(type2) && isOutputType(type2.ofType);
}
function isLeafType(type2) {
  return isScalarType(type2) || isEnumType(type2);
}
function isCompositeType(type2) {
  return isObjectType(type2) || isInterfaceType(type2) || isUnionType(type2);
}
function isAbstractType(type2) {
  return isInterfaceType(type2) || isUnionType(type2);
}
function isWrappingType(type2) {
  return isListType(type2) || isNonNullType(type2);
}
function isNullableType(type2) {
  return isType(type2) && !isNonNullType(type2);
}
function assertNullableType(type2) {
  if (!isNullableType(type2)) {
    throw new Error(`Expected ${inspect(type2)} to be a GraphQL nullable type.`);
  }
  return type2;
}
function getNullableType(type2) {
  if (type2) {
    return isNonNullType(type2) ? type2.ofType : type2;
  }
}
function isNamedType(type2) {
  return isScalarType(type2) || isObjectType(type2) || isInterfaceType(type2) || isUnionType(type2) || isEnumType(type2) || isInputObjectType(type2);
}
function getNamedType(type2) {
  if (type2) {
    let unwrappedType = type2;
    while (isWrappingType(unwrappedType)) {
      unwrappedType = unwrappedType.ofType;
    }
    return unwrappedType;
  }
}
function resolveReadonlyArrayThunk(thunk) {
  return typeof thunk === "function" ? thunk() : thunk;
}
function resolveObjMapThunk(thunk) {
  return typeof thunk === "function" ? thunk() : thunk;
}
function defineInterfaces(config2) {
  var _config$interfaces;
  const interfaces = resolveReadonlyArrayThunk((_config$interfaces = config2.interfaces) !== null && _config$interfaces !== void 0 ? _config$interfaces : []);
  Array.isArray(interfaces) || devAssert(false, `${config2.name} interfaces must be an Array or a function which returns an Array.`);
  return interfaces;
}
function defineFieldMap(config2) {
  const fieldMap = resolveObjMapThunk(config2.fields);
  isPlainObj(fieldMap) || devAssert(false, `${config2.name} fields must be an object with field names as keys or a function which returns such an object.`);
  return mapValue(fieldMap, (fieldConfig, fieldName) => {
    var _fieldConfig$args;
    isPlainObj(fieldConfig) || devAssert(false, `${config2.name}.${fieldName} field config must be an object.`);
    fieldConfig.resolve == null || typeof fieldConfig.resolve === "function" || devAssert(false, `${config2.name}.${fieldName} field resolver must be a function if provided, but got: ${inspect(fieldConfig.resolve)}.`);
    const argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};
    isPlainObj(argsConfig) || devAssert(false, `${config2.name}.${fieldName} args must be an object with argument names as keys.`);
    return {
      name: assertName(fieldName),
      description: fieldConfig.description,
      type: fieldConfig.type,
      args: defineArguments(argsConfig),
      resolve: fieldConfig.resolve,
      subscribe: fieldConfig.subscribe,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: toObjMap(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}
function defineArguments(config2) {
  return Object.entries(config2).map(([argName, argConfig]) => ({
    name: assertName(argName),
    description: argConfig.description,
    type: argConfig.type,
    defaultValue: argConfig.defaultValue,
    deprecationReason: argConfig.deprecationReason,
    extensions: toObjMap(argConfig.extensions),
    astNode: argConfig.astNode
  }));
}
function isPlainObj(obj) {
  return isObjectLike(obj) && !Array.isArray(obj);
}
function fieldsToFieldsConfig(fields) {
  return mapValue(fields, (field) => ({
    description: field.description,
    type: field.type,
    args: argsToArgsConfig(field.args),
    resolve: field.resolve,
    subscribe: field.subscribe,
    deprecationReason: field.deprecationReason,
    extensions: field.extensions,
    astNode: field.astNode
  }));
}
function argsToArgsConfig(args) {
  return keyValMap(args, (arg) => arg.name, (arg) => ({
    description: arg.description,
    type: arg.type,
    defaultValue: arg.defaultValue,
    deprecationReason: arg.deprecationReason,
    extensions: arg.extensions,
    astNode: arg.astNode
  }));
}
function isRequiredArgument(arg) {
  return isNonNullType(arg.type) && arg.defaultValue === void 0;
}
function defineTypes(config2) {
  const types = resolveReadonlyArrayThunk(config2.types);
  Array.isArray(types) || devAssert(false, `Must provide Array of types or a function which returns such an array for Union ${config2.name}.`);
  return types;
}
function didYouMeanEnumValue(enumType, unknownValueStr) {
  const allNames = enumType.getValues().map((value) => value.name);
  const suggestedValues = suggestionList(unknownValueStr, allNames);
  return didYouMean("the enum value", suggestedValues);
}
function defineEnumValues(typeName, valueMap) {
  isPlainObj(valueMap) || devAssert(false, `${typeName} values must be an object with value names as keys.`);
  return Object.entries(valueMap).map(([valueName, valueConfig]) => {
    isPlainObj(valueConfig) || devAssert(false, `${typeName}.${valueName} must refer to an object with a "value" key representing an internal value but got: ${inspect(valueConfig)}.`);
    return {
      name: assertEnumValueName(valueName),
      description: valueConfig.description,
      value: valueConfig.value !== void 0 ? valueConfig.value : valueName,
      deprecationReason: valueConfig.deprecationReason,
      extensions: toObjMap(valueConfig.extensions),
      astNode: valueConfig.astNode
    };
  });
}
function defineInputFieldMap(config2) {
  const fieldMap = resolveObjMapThunk(config2.fields);
  isPlainObj(fieldMap) || devAssert(false, `${config2.name} fields must be an object with field names as keys or a function which returns such an object.`);
  return mapValue(fieldMap, (fieldConfig, fieldName) => {
    !("resolve" in fieldConfig) || devAssert(false, `${config2.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`);
    return {
      name: assertName(fieldName),
      description: fieldConfig.description,
      type: fieldConfig.type,
      defaultValue: fieldConfig.defaultValue,
      deprecationReason: fieldConfig.deprecationReason,
      extensions: toObjMap(fieldConfig.extensions),
      astNode: fieldConfig.astNode
    };
  });
}
function isRequiredInputField(field) {
  return isNonNullType(field.type) && field.defaultValue === void 0;
}
var GraphQLList, GraphQLNonNull, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType;
var init_definition = __esm({
  "node_modules/graphql/type/definition.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_didYouMean();
    init_identityFunc();
    init_inspect();
    init_instanceOf();
    init_isObjectLike();
    init_keyMap();
    init_keyValMap();
    init_mapValue();
    init_suggestionList();
    init_toObjMap();
    init_GraphQLError();
    init_kinds();
    init_printer();
    init_valueFromASTUntyped();
    init_assertName();
    GraphQLList = class {
      constructor(ofType) {
        isType(ofType) || devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);
        this.ofType = ofType;
      }
      get [Symbol.toStringTag]() {
        return "GraphQLList";
      }
      toString() {
        return "[" + String(this.ofType) + "]";
      }
      toJSON() {
        return this.toString();
      }
    };
    GraphQLNonNull = class {
      constructor(ofType) {
        isNullableType(ofType) || devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL nullable type.`);
        this.ofType = ofType;
      }
      get [Symbol.toStringTag]() {
        return "GraphQLNonNull";
      }
      toString() {
        return String(this.ofType) + "!";
      }
      toJSON() {
        return this.toString();
      }
    };
    GraphQLScalarType = class {
      constructor(config2) {
        var _config$parseValue, _config$serialize, _config$parseLiteral, _config$extensionASTN;
        const parseValue2 = (_config$parseValue = config2.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : identityFunc;
        this.name = assertName(config2.name);
        this.description = config2.description;
        this.specifiedByURL = config2.specifiedByURL;
        this.serialize = (_config$serialize = config2.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : identityFunc;
        this.parseValue = parseValue2;
        this.parseLiteral = (_config$parseLiteral = config2.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : (node, variables) => parseValue2(valueFromASTUntyped(node, variables));
        this.extensions = toObjMap(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN = config2.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];
        config2.specifiedByURL == null || typeof config2.specifiedByURL === "string" || devAssert(false, `${this.name} must provide "specifiedByURL" as a string, but got: ${inspect(config2.specifiedByURL)}.`);
        config2.serialize == null || typeof config2.serialize === "function" || devAssert(false, `${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`);
        if (config2.parseLiteral) {
          typeof config2.parseValue === "function" && typeof config2.parseLiteral === "function" || devAssert(false, `${this.name} must provide both "parseValue" and "parseLiteral" functions.`);
        }
      }
      get [Symbol.toStringTag]() {
        return "GraphQLScalarType";
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          specifiedByURL: this.specifiedByURL,
          serialize: this.serialize,
          parseValue: this.parseValue,
          parseLiteral: this.parseLiteral,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    GraphQLObjectType = class {
      constructor(config2) {
        var _config$extensionASTN2;
        this.name = assertName(config2.name);
        this.description = config2.description;
        this.isTypeOf = config2.isTypeOf;
        this.extensions = toObjMap(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN2 = config2.extensionASTNodes) !== null && _config$extensionASTN2 !== void 0 ? _config$extensionASTN2 : [];
        this._fields = () => defineFieldMap(config2);
        this._interfaces = () => defineInterfaces(config2);
        config2.isTypeOf == null || typeof config2.isTypeOf === "function" || devAssert(false, `${this.name} must provide "isTypeOf" as a function, but got: ${inspect(config2.isTypeOf)}.`);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLObjectType";
      }
      getFields() {
        if (typeof this._fields === "function") {
          this._fields = this._fields();
        }
        return this._fields;
      }
      getInterfaces() {
        if (typeof this._interfaces === "function") {
          this._interfaces = this._interfaces();
        }
        return this._interfaces;
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: fieldsToFieldsConfig(this.getFields()),
          isTypeOf: this.isTypeOf,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    GraphQLInterfaceType = class {
      constructor(config2) {
        var _config$extensionASTN3;
        this.name = assertName(config2.name);
        this.description = config2.description;
        this.resolveType = config2.resolveType;
        this.extensions = toObjMap(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN3 = config2.extensionASTNodes) !== null && _config$extensionASTN3 !== void 0 ? _config$extensionASTN3 : [];
        this._fields = defineFieldMap.bind(void 0, config2);
        this._interfaces = defineInterfaces.bind(void 0, config2);
        config2.resolveType == null || typeof config2.resolveType === "function" || devAssert(false, `${this.name} must provide "resolveType" as a function, but got: ${inspect(config2.resolveType)}.`);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLInterfaceType";
      }
      getFields() {
        if (typeof this._fields === "function") {
          this._fields = this._fields();
        }
        return this._fields;
      }
      getInterfaces() {
        if (typeof this._interfaces === "function") {
          this._interfaces = this._interfaces();
        }
        return this._interfaces;
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          interfaces: this.getInterfaces(),
          fields: fieldsToFieldsConfig(this.getFields()),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    GraphQLUnionType = class {
      constructor(config2) {
        var _config$extensionASTN4;
        this.name = assertName(config2.name);
        this.description = config2.description;
        this.resolveType = config2.resolveType;
        this.extensions = toObjMap(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN4 = config2.extensionASTNodes) !== null && _config$extensionASTN4 !== void 0 ? _config$extensionASTN4 : [];
        this._types = defineTypes.bind(void 0, config2);
        config2.resolveType == null || typeof config2.resolveType === "function" || devAssert(false, `${this.name} must provide "resolveType" as a function, but got: ${inspect(config2.resolveType)}.`);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLUnionType";
      }
      getTypes() {
        if (typeof this._types === "function") {
          this._types = this._types();
        }
        return this._types;
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          types: this.getTypes(),
          resolveType: this.resolveType,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    GraphQLEnumType = class {
      constructor(config2) {
        var _config$extensionASTN5;
        this.name = assertName(config2.name);
        this.description = config2.description;
        this.extensions = toObjMap(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN5 = config2.extensionASTNodes) !== null && _config$extensionASTN5 !== void 0 ? _config$extensionASTN5 : [];
        this._values = defineEnumValues(this.name, config2.values);
        this._valueLookup = new Map(this._values.map((enumValue) => [enumValue.value, enumValue]));
        this._nameLookup = keyMap(this._values, (value) => value.name);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLEnumType";
      }
      getValues() {
        return this._values;
      }
      getValue(name) {
        return this._nameLookup[name];
      }
      serialize(outputValue) {
        const enumValue = this._valueLookup.get(outputValue);
        if (enumValue === void 0) {
          throw new GraphQLError(`Enum "${this.name}" cannot represent value: ${inspect(outputValue)}`);
        }
        return enumValue.name;
      }
      parseValue(inputValue) {
        if (typeof inputValue !== "string") {
          const valueStr = inspect(inputValue);
          throw new GraphQLError(`Enum "${this.name}" cannot represent non-string value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr));
        }
        const enumValue = this.getValue(inputValue);
        if (enumValue == null) {
          throw new GraphQLError(`Value "${inputValue}" does not exist in "${this.name}" enum.` + didYouMeanEnumValue(this, inputValue));
        }
        return enumValue.value;
      }
      parseLiteral(valueNode, _variables) {
        if (valueNode.kind !== Kind.ENUM) {
          const valueStr = print(valueNode);
          throw new GraphQLError(`Enum "${this.name}" cannot represent non-enum value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr), {
            nodes: valueNode
          });
        }
        const enumValue = this.getValue(valueNode.value);
        if (enumValue == null) {
          const valueStr = print(valueNode);
          throw new GraphQLError(`Value "${valueStr}" does not exist in "${this.name}" enum.` + didYouMeanEnumValue(this, valueStr), {
            nodes: valueNode
          });
        }
        return enumValue.value;
      }
      toConfig() {
        const values = keyValMap(this.getValues(), (value) => value.name, (value) => ({
          description: value.description,
          value: value.value,
          deprecationReason: value.deprecationReason,
          extensions: value.extensions,
          astNode: value.astNode
        }));
        return {
          name: this.name,
          description: this.description,
          values,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    GraphQLInputObjectType = class {
      constructor(config2) {
        var _config$extensionASTN6;
        this.name = assertName(config2.name);
        this.description = config2.description;
        this.extensions = toObjMap(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN6 = config2.extensionASTNodes) !== null && _config$extensionASTN6 !== void 0 ? _config$extensionASTN6 : [];
        this._fields = defineInputFieldMap.bind(void 0, config2);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLInputObjectType";
      }
      getFields() {
        if (typeof this._fields === "function") {
          this._fields = this._fields();
        }
        return this._fields;
      }
      toConfig() {
        const fields = mapValue(this.getFields(), (field) => ({
          description: field.description,
          type: field.type,
          defaultValue: field.defaultValue,
          deprecationReason: field.deprecationReason,
          extensions: field.extensions,
          astNode: field.astNode
        }));
        return {
          name: this.name,
          description: this.description,
          fields,
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes
        };
      }
      toString() {
        return this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
  }
});

// node_modules/graphql/utilities/typeComparators.mjs
function isEqualType(typeA, typeB) {
  if (typeA === typeB) {
    return true;
  }
  if (isNonNullType(typeA) && isNonNullType(typeB)) {
    return isEqualType(typeA.ofType, typeB.ofType);
  }
  if (isListType(typeA) && isListType(typeB)) {
    return isEqualType(typeA.ofType, typeB.ofType);
  }
  return false;
}
function isTypeSubTypeOf(schema2, maybeSubType, superType) {
  if (maybeSubType === superType) {
    return true;
  }
  if (isNonNullType(superType)) {
    if (isNonNullType(maybeSubType)) {
      return isTypeSubTypeOf(schema2, maybeSubType.ofType, superType.ofType);
    }
    return false;
  }
  if (isNonNullType(maybeSubType)) {
    return isTypeSubTypeOf(schema2, maybeSubType.ofType, superType);
  }
  if (isListType(superType)) {
    if (isListType(maybeSubType)) {
      return isTypeSubTypeOf(schema2, maybeSubType.ofType, superType.ofType);
    }
    return false;
  }
  if (isListType(maybeSubType)) {
    return false;
  }
  return isAbstractType(superType) && (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) && schema2.isSubType(superType, maybeSubType);
}
function doTypesOverlap(schema2, typeA, typeB) {
  if (typeA === typeB) {
    return true;
  }
  if (isAbstractType(typeA)) {
    if (isAbstractType(typeB)) {
      return schema2.getPossibleTypes(typeA).some((type2) => schema2.isSubType(typeB, type2));
    }
    return schema2.isSubType(typeA, typeB);
  }
  if (isAbstractType(typeB)) {
    return schema2.isSubType(typeB, typeA);
  }
  return false;
}
var init_typeComparators = __esm({
  "node_modules/graphql/utilities/typeComparators.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_definition();
  }
});

// node_modules/graphql/type/scalars.mjs
function isSpecifiedScalarType(type2) {
  return specifiedScalarTypes.some(({ name }) => type2.name === name);
}
function serializeObject(outputValue) {
  if (isObjectLike(outputValue)) {
    if (typeof outputValue.valueOf === "function") {
      const valueOfResult = outputValue.valueOf();
      if (!isObjectLike(valueOfResult)) {
        return valueOfResult;
      }
    }
    if (typeof outputValue.toJSON === "function") {
      return outputValue.toJSON();
    }
  }
  return outputValue;
}
var GRAPHQL_MAX_INT, GRAPHQL_MIN_INT, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID, specifiedScalarTypes;
var init_scalars = __esm({
  "node_modules/graphql/type/scalars.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_isObjectLike();
    init_GraphQLError();
    init_kinds();
    init_printer();
    init_definition();
    GRAPHQL_MAX_INT = 2147483647;
    GRAPHQL_MIN_INT = -2147483648;
    GraphQLInt = new GraphQLScalarType({
      name: "Int",
      description: "The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",
      serialize(outputValue) {
        const coercedValue = serializeObject(outputValue);
        if (typeof coercedValue === "boolean") {
          return coercedValue ? 1 : 0;
        }
        let num = coercedValue;
        if (typeof coercedValue === "string" && coercedValue !== "") {
          num = Number(coercedValue);
        }
        if (typeof num !== "number" || !Number.isInteger(num)) {
          throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(coercedValue)}`);
        }
        if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
          throw new GraphQLError("Int cannot represent non 32-bit signed integer value: " + inspect(coercedValue));
        }
        return num;
      },
      parseValue(inputValue) {
        if (typeof inputValue !== "number" || !Number.isInteger(inputValue)) {
          throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(inputValue)}`);
        }
        if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {
          throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${inputValue}`);
        }
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== Kind.INT) {
          throw new GraphQLError(`Int cannot represent non-integer value: ${print(valueNode)}`, {
            nodes: valueNode
          });
        }
        const num = parseInt(valueNode.value, 10);
        if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {
          throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${valueNode.value}`, {
            nodes: valueNode
          });
        }
        return num;
      }
    });
    GraphQLFloat = new GraphQLScalarType({
      name: "Float",
      description: "The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",
      serialize(outputValue) {
        const coercedValue = serializeObject(outputValue);
        if (typeof coercedValue === "boolean") {
          return coercedValue ? 1 : 0;
        }
        let num = coercedValue;
        if (typeof coercedValue === "string" && coercedValue !== "") {
          num = Number(coercedValue);
        }
        if (typeof num !== "number" || !Number.isFinite(num)) {
          throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(coercedValue)}`);
        }
        return num;
      },
      parseValue(inputValue) {
        if (typeof inputValue !== "number" || !Number.isFinite(inputValue)) {
          throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(inputValue)}`);
        }
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {
          throw new GraphQLError(`Float cannot represent non numeric value: ${print(valueNode)}`, valueNode);
        }
        return parseFloat(valueNode.value);
      }
    });
    GraphQLString = new GraphQLScalarType({
      name: "String",
      description: "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",
      serialize(outputValue) {
        const coercedValue = serializeObject(outputValue);
        if (typeof coercedValue === "string") {
          return coercedValue;
        }
        if (typeof coercedValue === "boolean") {
          return coercedValue ? "true" : "false";
        }
        if (typeof coercedValue === "number" && Number.isFinite(coercedValue)) {
          return coercedValue.toString();
        }
        throw new GraphQLError(`String cannot represent value: ${inspect(outputValue)}`);
      },
      parseValue(inputValue) {
        if (typeof inputValue !== "string") {
          throw new GraphQLError(`String cannot represent a non string value: ${inspect(inputValue)}`);
        }
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== Kind.STRING) {
          throw new GraphQLError(`String cannot represent a non string value: ${print(valueNode)}`, {
            nodes: valueNode
          });
        }
        return valueNode.value;
      }
    });
    GraphQLBoolean = new GraphQLScalarType({
      name: "Boolean",
      description: "The `Boolean` scalar type represents `true` or `false`.",
      serialize(outputValue) {
        const coercedValue = serializeObject(outputValue);
        if (typeof coercedValue === "boolean") {
          return coercedValue;
        }
        if (Number.isFinite(coercedValue)) {
          return coercedValue !== 0;
        }
        throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`);
      },
      parseValue(inputValue) {
        if (typeof inputValue !== "boolean") {
          throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(inputValue)}`);
        }
        return inputValue;
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== Kind.BOOLEAN) {
          throw new GraphQLError(`Boolean cannot represent a non boolean value: ${print(valueNode)}`, {
            nodes: valueNode
          });
        }
        return valueNode.value;
      }
    });
    GraphQLID = new GraphQLScalarType({
      name: "ID",
      description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',
      serialize(outputValue) {
        const coercedValue = serializeObject(outputValue);
        if (typeof coercedValue === "string") {
          return coercedValue;
        }
        if (Number.isInteger(coercedValue)) {
          return String(coercedValue);
        }
        throw new GraphQLError(`ID cannot represent value: ${inspect(outputValue)}`);
      },
      parseValue(inputValue) {
        if (typeof inputValue === "string") {
          return inputValue;
        }
        if (typeof inputValue === "number" && Number.isInteger(inputValue)) {
          return inputValue.toString();
        }
        throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);
      },
      parseLiteral(valueNode) {
        if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {
          throw new GraphQLError("ID cannot represent a non-string and non-integer value: " + print(valueNode), {
            nodes: valueNode
          });
        }
        return valueNode.value;
      }
    });
    specifiedScalarTypes = Object.freeze([
      GraphQLString,
      GraphQLInt,
      GraphQLFloat,
      GraphQLBoolean,
      GraphQLID
    ]);
  }
});

// node_modules/graphql/type/directives.mjs
function isDirective(directive) {
  return instanceOf(directive, GraphQLDirective);
}
function isSpecifiedDirective(directive) {
  return specifiedDirectives.some(({ name }) => name === directive.name);
}
var GraphQLDirective, GraphQLIncludeDirective, GraphQLSkipDirective, DEFAULT_DEPRECATION_REASON, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective, specifiedDirectives;
var init_directives = __esm({
  "node_modules/graphql/type/directives.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_instanceOf();
    init_isObjectLike();
    init_toObjMap();
    init_directiveLocation();
    init_assertName();
    init_definition();
    init_scalars();
    GraphQLDirective = class {
      constructor(config2) {
        var _config$isRepeatable, _config$args;
        this.name = assertName(config2.name);
        this.description = config2.description;
        this.locations = config2.locations;
        this.isRepeatable = (_config$isRepeatable = config2.isRepeatable) !== null && _config$isRepeatable !== void 0 ? _config$isRepeatable : false;
        this.extensions = toObjMap(config2.extensions);
        this.astNode = config2.astNode;
        Array.isArray(config2.locations) || devAssert(false, `@${config2.name} locations must be an Array.`);
        const args = (_config$args = config2.args) !== null && _config$args !== void 0 ? _config$args : {};
        isObjectLike(args) && !Array.isArray(args) || devAssert(false, `@${config2.name} args must be an object with argument names as keys.`);
        this.args = defineArguments(args);
      }
      get [Symbol.toStringTag]() {
        return "GraphQLDirective";
      }
      toConfig() {
        return {
          name: this.name,
          description: this.description,
          locations: this.locations,
          args: argsToArgsConfig(this.args),
          isRepeatable: this.isRepeatable,
          extensions: this.extensions,
          astNode: this.astNode
        };
      }
      toString() {
        return "@" + this.name;
      }
      toJSON() {
        return this.toString();
      }
    };
    GraphQLIncludeDirective = new GraphQLDirective({
      name: "include",
      description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
      locations: [
        DirectiveLocation.FIELD,
        DirectiveLocation.FRAGMENT_SPREAD,
        DirectiveLocation.INLINE_FRAGMENT
      ],
      args: {
        if: {
          type: new GraphQLNonNull(GraphQLBoolean),
          description: "Included when true."
        }
      }
    });
    GraphQLSkipDirective = new GraphQLDirective({
      name: "skip",
      description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
      locations: [
        DirectiveLocation.FIELD,
        DirectiveLocation.FRAGMENT_SPREAD,
        DirectiveLocation.INLINE_FRAGMENT
      ],
      args: {
        if: {
          type: new GraphQLNonNull(GraphQLBoolean),
          description: "Skipped when true."
        }
      }
    });
    DEFAULT_DEPRECATION_REASON = "No longer supported";
    GraphQLDeprecatedDirective = new GraphQLDirective({
      name: "deprecated",
      description: "Marks an element of a GraphQL schema as no longer supported.",
      locations: [
        DirectiveLocation.FIELD_DEFINITION,
        DirectiveLocation.ARGUMENT_DEFINITION,
        DirectiveLocation.INPUT_FIELD_DEFINITION,
        DirectiveLocation.ENUM_VALUE
      ],
      args: {
        reason: {
          type: GraphQLString,
          description: "Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",
          defaultValue: DEFAULT_DEPRECATION_REASON
        }
      }
    });
    GraphQLSpecifiedByDirective = new GraphQLDirective({
      name: "specifiedBy",
      description: "Exposes a URL that specifies the behavior of this scalar.",
      locations: [DirectiveLocation.SCALAR],
      args: {
        url: {
          type: new GraphQLNonNull(GraphQLString),
          description: "The URL that specifies the behavior of this scalar."
        }
      }
    });
    specifiedDirectives = Object.freeze([
      GraphQLIncludeDirective,
      GraphQLSkipDirective,
      GraphQLDeprecatedDirective,
      GraphQLSpecifiedByDirective
    ]);
  }
});

// node_modules/graphql/jsutils/isIterableObject.mjs
function isIterableObject(maybeIterable) {
  return typeof maybeIterable === "object" && typeof (maybeIterable === null || maybeIterable === void 0 ? void 0 : maybeIterable[Symbol.iterator]) === "function";
}
var init_isIterableObject = __esm({
  "node_modules/graphql/jsutils/isIterableObject.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/utilities/astFromValue.mjs
function astFromValue(value, type2) {
  if (isNonNullType(type2)) {
    const astValue = astFromValue(value, type2.ofType);
    if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === Kind.NULL) {
      return null;
    }
    return astValue;
  }
  if (value === null) {
    return {
      kind: Kind.NULL
    };
  }
  if (value === void 0) {
    return null;
  }
  if (isListType(type2)) {
    const itemType = type2.ofType;
    if (isIterableObject(value)) {
      const valuesNodes = [];
      for (const item of value) {
        const itemNode = astFromValue(item, itemType);
        if (itemNode != null) {
          valuesNodes.push(itemNode);
        }
      }
      return {
        kind: Kind.LIST,
        values: valuesNodes
      };
    }
    return astFromValue(value, itemType);
  }
  if (isInputObjectType(type2)) {
    if (!isObjectLike(value)) {
      return null;
    }
    const fieldNodes = [];
    for (const field of Object.values(type2.getFields())) {
      const fieldValue = astFromValue(value[field.name], field.type);
      if (fieldValue) {
        fieldNodes.push({
          kind: Kind.OBJECT_FIELD,
          name: {
            kind: Kind.NAME,
            value: field.name
          },
          value: fieldValue
        });
      }
    }
    return {
      kind: Kind.OBJECT,
      fields: fieldNodes
    };
  }
  if (isLeafType(type2)) {
    const serialized = type2.serialize(value);
    if (serialized == null) {
      return null;
    }
    if (typeof serialized === "boolean") {
      return {
        kind: Kind.BOOLEAN,
        value: serialized
      };
    }
    if (typeof serialized === "number" && Number.isFinite(serialized)) {
      const stringNum = String(serialized);
      return integerStringRegExp.test(stringNum) ? {
        kind: Kind.INT,
        value: stringNum
      } : {
        kind: Kind.FLOAT,
        value: stringNum
      };
    }
    if (typeof serialized === "string") {
      if (isEnumType(type2)) {
        return {
          kind: Kind.ENUM,
          value: serialized
        };
      }
      if (type2 === GraphQLID && integerStringRegExp.test(serialized)) {
        return {
          kind: Kind.INT,
          value: serialized
        };
      }
      return {
        kind: Kind.STRING,
        value: serialized
      };
    }
    throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`);
  }
  invariant(false, "Unexpected input type: " + inspect(type2));
}
var integerStringRegExp;
var init_astFromValue = __esm({
  "node_modules/graphql/utilities/astFromValue.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_invariant();
    init_isIterableObject();
    init_isObjectLike();
    init_kinds();
    init_definition();
    init_scalars();
    integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;
  }
});

// node_modules/graphql/type/introspection.mjs
function isIntrospectionType(type2) {
  return introspectionTypes.some(({ name }) => type2.name === name);
}
var __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, TypeKind, __TypeKind, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, introspectionTypes;
var init_introspection = __esm({
  "node_modules/graphql/type/introspection.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_invariant();
    init_directiveLocation();
    init_printer();
    init_astFromValue();
    init_definition();
    init_scalars();
    __Schema = new GraphQLObjectType({
      name: "__Schema",
      description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
      fields: () => ({
        description: {
          type: GraphQLString,
          resolve: (schema2) => schema2.description
        },
        types: {
          description: "A list of all types supported by this server.",
          type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),
          resolve(schema2) {
            return Object.values(schema2.getTypeMap());
          }
        },
        queryType: {
          description: "The type that query operations will be rooted at.",
          type: new GraphQLNonNull(__Type),
          resolve: (schema2) => schema2.getQueryType()
        },
        mutationType: {
          description: "If this server supports mutation, the type that mutation operations will be rooted at.",
          type: __Type,
          resolve: (schema2) => schema2.getMutationType()
        },
        subscriptionType: {
          description: "If this server support subscription, the type that subscription operations will be rooted at.",
          type: __Type,
          resolve: (schema2) => schema2.getSubscriptionType()
        },
        directives: {
          description: "A list of all directives supported by this server.",
          type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Directive))),
          resolve: (schema2) => schema2.getDirectives()
        }
      })
    });
    __Directive = new GraphQLObjectType({
      name: "__Directive",
      description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
      fields: () => ({
        name: {
          type: new GraphQLNonNull(GraphQLString),
          resolve: (directive) => directive.name
        },
        description: {
          type: GraphQLString,
          resolve: (directive) => directive.description
        },
        isRepeatable: {
          type: new GraphQLNonNull(GraphQLBoolean),
          resolve: (directive) => directive.isRepeatable
        },
        locations: {
          type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__DirectiveLocation))),
          resolve: (directive) => directive.locations
        },
        args: {
          type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),
          args: {
            includeDeprecated: {
              type: GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve(field, { includeDeprecated }) {
            return includeDeprecated ? field.args : field.args.filter((arg) => arg.deprecationReason == null);
          }
        }
      })
    });
    __DirectiveLocation = new GraphQLEnumType({
      name: "__DirectiveLocation",
      description: "A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",
      values: {
        QUERY: {
          value: DirectiveLocation.QUERY,
          description: "Location adjacent to a query operation."
        },
        MUTATION: {
          value: DirectiveLocation.MUTATION,
          description: "Location adjacent to a mutation operation."
        },
        SUBSCRIPTION: {
          value: DirectiveLocation.SUBSCRIPTION,
          description: "Location adjacent to a subscription operation."
        },
        FIELD: {
          value: DirectiveLocation.FIELD,
          description: "Location adjacent to a field."
        },
        FRAGMENT_DEFINITION: {
          value: DirectiveLocation.FRAGMENT_DEFINITION,
          description: "Location adjacent to a fragment definition."
        },
        FRAGMENT_SPREAD: {
          value: DirectiveLocation.FRAGMENT_SPREAD,
          description: "Location adjacent to a fragment spread."
        },
        INLINE_FRAGMENT: {
          value: DirectiveLocation.INLINE_FRAGMENT,
          description: "Location adjacent to an inline fragment."
        },
        VARIABLE_DEFINITION: {
          value: DirectiveLocation.VARIABLE_DEFINITION,
          description: "Location adjacent to a variable definition."
        },
        SCHEMA: {
          value: DirectiveLocation.SCHEMA,
          description: "Location adjacent to a schema definition."
        },
        SCALAR: {
          value: DirectiveLocation.SCALAR,
          description: "Location adjacent to a scalar definition."
        },
        OBJECT: {
          value: DirectiveLocation.OBJECT,
          description: "Location adjacent to an object type definition."
        },
        FIELD_DEFINITION: {
          value: DirectiveLocation.FIELD_DEFINITION,
          description: "Location adjacent to a field definition."
        },
        ARGUMENT_DEFINITION: {
          value: DirectiveLocation.ARGUMENT_DEFINITION,
          description: "Location adjacent to an argument definition."
        },
        INTERFACE: {
          value: DirectiveLocation.INTERFACE,
          description: "Location adjacent to an interface definition."
        },
        UNION: {
          value: DirectiveLocation.UNION,
          description: "Location adjacent to a union definition."
        },
        ENUM: {
          value: DirectiveLocation.ENUM,
          description: "Location adjacent to an enum definition."
        },
        ENUM_VALUE: {
          value: DirectiveLocation.ENUM_VALUE,
          description: "Location adjacent to an enum value definition."
        },
        INPUT_OBJECT: {
          value: DirectiveLocation.INPUT_OBJECT,
          description: "Location adjacent to an input object type definition."
        },
        INPUT_FIELD_DEFINITION: {
          value: DirectiveLocation.INPUT_FIELD_DEFINITION,
          description: "Location adjacent to an input object field definition."
        }
      }
    });
    __Type = new GraphQLObjectType({
      name: "__Type",
      description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
      fields: () => ({
        kind: {
          type: new GraphQLNonNull(__TypeKind),
          resolve(type2) {
            if (isScalarType(type2)) {
              return TypeKind.SCALAR;
            }
            if (isObjectType(type2)) {
              return TypeKind.OBJECT;
            }
            if (isInterfaceType(type2)) {
              return TypeKind.INTERFACE;
            }
            if (isUnionType(type2)) {
              return TypeKind.UNION;
            }
            if (isEnumType(type2)) {
              return TypeKind.ENUM;
            }
            if (isInputObjectType(type2)) {
              return TypeKind.INPUT_OBJECT;
            }
            if (isListType(type2)) {
              return TypeKind.LIST;
            }
            if (isNonNullType(type2)) {
              return TypeKind.NON_NULL;
            }
            invariant(false, `Unexpected type: "${inspect(type2)}".`);
          }
        },
        name: {
          type: GraphQLString,
          resolve: (type2) => "name" in type2 ? type2.name : void 0
        },
        description: {
          type: GraphQLString,
          resolve: (type2) => "description" in type2 ? type2.description : void 0
        },
        specifiedByURL: {
          type: GraphQLString,
          resolve: (obj) => "specifiedByURL" in obj ? obj.specifiedByURL : void 0
        },
        fields: {
          type: new GraphQLList(new GraphQLNonNull(__Field)),
          args: {
            includeDeprecated: {
              type: GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve(type2, { includeDeprecated }) {
            if (isObjectType(type2) || isInterfaceType(type2)) {
              const fields = Object.values(type2.getFields());
              return includeDeprecated ? fields : fields.filter((field) => field.deprecationReason == null);
            }
          }
        },
        interfaces: {
          type: new GraphQLList(new GraphQLNonNull(__Type)),
          resolve(type2) {
            if (isObjectType(type2) || isInterfaceType(type2)) {
              return type2.getInterfaces();
            }
          }
        },
        possibleTypes: {
          type: new GraphQLList(new GraphQLNonNull(__Type)),
          resolve(type2, _args, _context, { schema: schema2 }) {
            if (isAbstractType(type2)) {
              return schema2.getPossibleTypes(type2);
            }
          }
        },
        enumValues: {
          type: new GraphQLList(new GraphQLNonNull(__EnumValue)),
          args: {
            includeDeprecated: {
              type: GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve(type2, { includeDeprecated }) {
            if (isEnumType(type2)) {
              const values = type2.getValues();
              return includeDeprecated ? values : values.filter((field) => field.deprecationReason == null);
            }
          }
        },
        inputFields: {
          type: new GraphQLList(new GraphQLNonNull(__InputValue)),
          args: {
            includeDeprecated: {
              type: GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve(type2, { includeDeprecated }) {
            if (isInputObjectType(type2)) {
              const values = Object.values(type2.getFields());
              return includeDeprecated ? values : values.filter((field) => field.deprecationReason == null);
            }
          }
        },
        ofType: {
          type: __Type,
          resolve: (type2) => "ofType" in type2 ? type2.ofType : void 0
        }
      })
    });
    __Field = new GraphQLObjectType({
      name: "__Field",
      description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
      fields: () => ({
        name: {
          type: new GraphQLNonNull(GraphQLString),
          resolve: (field) => field.name
        },
        description: {
          type: GraphQLString,
          resolve: (field) => field.description
        },
        args: {
          type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),
          args: {
            includeDeprecated: {
              type: GraphQLBoolean,
              defaultValue: false
            }
          },
          resolve(field, { includeDeprecated }) {
            return includeDeprecated ? field.args : field.args.filter((arg) => arg.deprecationReason == null);
          }
        },
        type: {
          type: new GraphQLNonNull(__Type),
          resolve: (field) => field.type
        },
        isDeprecated: {
          type: new GraphQLNonNull(GraphQLBoolean),
          resolve: (field) => field.deprecationReason != null
        },
        deprecationReason: {
          type: GraphQLString,
          resolve: (field) => field.deprecationReason
        }
      })
    });
    __InputValue = new GraphQLObjectType({
      name: "__InputValue",
      description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
      fields: () => ({
        name: {
          type: new GraphQLNonNull(GraphQLString),
          resolve: (inputValue) => inputValue.name
        },
        description: {
          type: GraphQLString,
          resolve: (inputValue) => inputValue.description
        },
        type: {
          type: new GraphQLNonNull(__Type),
          resolve: (inputValue) => inputValue.type
        },
        defaultValue: {
          type: GraphQLString,
          description: "A GraphQL-formatted string representing the default value for this input value.",
          resolve(inputValue) {
            const { type: type2, defaultValue } = inputValue;
            const valueAST = astFromValue(defaultValue, type2);
            return valueAST ? print(valueAST) : null;
          }
        },
        isDeprecated: {
          type: new GraphQLNonNull(GraphQLBoolean),
          resolve: (field) => field.deprecationReason != null
        },
        deprecationReason: {
          type: GraphQLString,
          resolve: (obj) => obj.deprecationReason
        }
      })
    });
    __EnumValue = new GraphQLObjectType({
      name: "__EnumValue",
      description: "One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",
      fields: () => ({
        name: {
          type: new GraphQLNonNull(GraphQLString),
          resolve: (enumValue) => enumValue.name
        },
        description: {
          type: GraphQLString,
          resolve: (enumValue) => enumValue.description
        },
        isDeprecated: {
          type: new GraphQLNonNull(GraphQLBoolean),
          resolve: (enumValue) => enumValue.deprecationReason != null
        },
        deprecationReason: {
          type: GraphQLString,
          resolve: (enumValue) => enumValue.deprecationReason
        }
      })
    });
    (function(TypeKind2) {
      TypeKind2["SCALAR"] = "SCALAR";
      TypeKind2["OBJECT"] = "OBJECT";
      TypeKind2["INTERFACE"] = "INTERFACE";
      TypeKind2["UNION"] = "UNION";
      TypeKind2["ENUM"] = "ENUM";
      TypeKind2["INPUT_OBJECT"] = "INPUT_OBJECT";
      TypeKind2["LIST"] = "LIST";
      TypeKind2["NON_NULL"] = "NON_NULL";
    })(TypeKind || (TypeKind = {}));
    __TypeKind = new GraphQLEnumType({
      name: "__TypeKind",
      description: "An enum describing what kind of type a given `__Type` is.",
      values: {
        SCALAR: {
          value: TypeKind.SCALAR,
          description: "Indicates this type is a scalar."
        },
        OBJECT: {
          value: TypeKind.OBJECT,
          description: "Indicates this type is an object. `fields` and `interfaces` are valid fields."
        },
        INTERFACE: {
          value: TypeKind.INTERFACE,
          description: "Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."
        },
        UNION: {
          value: TypeKind.UNION,
          description: "Indicates this type is a union. `possibleTypes` is a valid field."
        },
        ENUM: {
          value: TypeKind.ENUM,
          description: "Indicates this type is an enum. `enumValues` is a valid field."
        },
        INPUT_OBJECT: {
          value: TypeKind.INPUT_OBJECT,
          description: "Indicates this type is an input object. `inputFields` is a valid field."
        },
        LIST: {
          value: TypeKind.LIST,
          description: "Indicates this type is a list. `ofType` is a valid field."
        },
        NON_NULL: {
          value: TypeKind.NON_NULL,
          description: "Indicates this type is a non-null. `ofType` is a valid field."
        }
      }
    });
    SchemaMetaFieldDef = {
      name: "__schema",
      type: new GraphQLNonNull(__Schema),
      description: "Access the current type schema of this server.",
      args: [],
      resolve: (_source, _args, _context, { schema: schema2 }) => schema2,
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    };
    TypeMetaFieldDef = {
      name: "__type",
      type: __Type,
      description: "Request the type information of a single type.",
      args: [
        {
          name: "name",
          description: void 0,
          type: new GraphQLNonNull(GraphQLString),
          defaultValue: void 0,
          deprecationReason: void 0,
          extensions: /* @__PURE__ */ Object.create(null),
          astNode: void 0
        }
      ],
      resolve: (_source, { name }, _context, { schema: schema2 }) => schema2.getType(name),
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    };
    TypeNameMetaFieldDef = {
      name: "__typename",
      type: new GraphQLNonNull(GraphQLString),
      description: "The name of the current Object type at runtime.",
      args: [],
      resolve: (_source, _args, _context, { parentType }) => parentType.name,
      deprecationReason: void 0,
      extensions: /* @__PURE__ */ Object.create(null),
      astNode: void 0
    };
    introspectionTypes = Object.freeze([
      __Schema,
      __Directive,
      __DirectiveLocation,
      __Type,
      __Field,
      __InputValue,
      __EnumValue,
      __TypeKind
    ]);
  }
});

// node_modules/graphql/type/schema.mjs
function isSchema(schema2) {
  return instanceOf(schema2, GraphQLSchema);
}
function assertSchema(schema2) {
  if (!isSchema(schema2)) {
    throw new Error(`Expected ${inspect(schema2)} to be a GraphQL schema.`);
  }
  return schema2;
}
function collectReferencedTypes(type2, typeSet) {
  const namedType = getNamedType(type2);
  if (!typeSet.has(namedType)) {
    typeSet.add(namedType);
    if (isUnionType(namedType)) {
      for (const memberType of namedType.getTypes()) {
        collectReferencedTypes(memberType, typeSet);
      }
    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {
      for (const interfaceType of namedType.getInterfaces()) {
        collectReferencedTypes(interfaceType, typeSet);
      }
      for (const field of Object.values(namedType.getFields())) {
        collectReferencedTypes(field.type, typeSet);
        for (const arg of field.args) {
          collectReferencedTypes(arg.type, typeSet);
        }
      }
    } else if (isInputObjectType(namedType)) {
      for (const field of Object.values(namedType.getFields())) {
        collectReferencedTypes(field.type, typeSet);
      }
    }
  }
  return typeSet;
}
var GraphQLSchema;
var init_schema = __esm({
  "node_modules/graphql/type/schema.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_inspect();
    init_instanceOf();
    init_isObjectLike();
    init_toObjMap();
    init_ast();
    init_definition();
    init_directives();
    init_introspection();
    GraphQLSchema = class {
      constructor(config2) {
        var _config$extensionASTN, _config$directives;
        this.__validationErrors = config2.assumeValid === true ? [] : void 0;
        isObjectLike(config2) || devAssert(false, "Must provide configuration object.");
        !config2.types || Array.isArray(config2.types) || devAssert(false, `"types" must be Array if provided but got: ${inspect(config2.types)}.`);
        !config2.directives || Array.isArray(config2.directives) || devAssert(false, `"directives" must be Array if provided but got: ${inspect(config2.directives)}.`);
        this.description = config2.description;
        this.extensions = toObjMap(config2.extensions);
        this.astNode = config2.astNode;
        this.extensionASTNodes = (_config$extensionASTN = config2.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];
        this._queryType = config2.query;
        this._mutationType = config2.mutation;
        this._subscriptionType = config2.subscription;
        this._directives = (_config$directives = config2.directives) !== null && _config$directives !== void 0 ? _config$directives : specifiedDirectives;
        const allReferencedTypes = new Set(config2.types);
        if (config2.types != null) {
          for (const type2 of config2.types) {
            allReferencedTypes.delete(type2);
            collectReferencedTypes(type2, allReferencedTypes);
          }
        }
        if (this._queryType != null) {
          collectReferencedTypes(this._queryType, allReferencedTypes);
        }
        if (this._mutationType != null) {
          collectReferencedTypes(this._mutationType, allReferencedTypes);
        }
        if (this._subscriptionType != null) {
          collectReferencedTypes(this._subscriptionType, allReferencedTypes);
        }
        for (const directive of this._directives) {
          if (isDirective(directive)) {
            for (const arg of directive.args) {
              collectReferencedTypes(arg.type, allReferencedTypes);
            }
          }
        }
        collectReferencedTypes(__Schema, allReferencedTypes);
        this._typeMap = /* @__PURE__ */ Object.create(null);
        this._subTypeMap = /* @__PURE__ */ Object.create(null);
        this._implementationsMap = /* @__PURE__ */ Object.create(null);
        for (const namedType of allReferencedTypes) {
          if (namedType == null) {
            continue;
          }
          const typeName = namedType.name;
          typeName || devAssert(false, "One of the provided types for building the Schema is missing a name.");
          if (this._typeMap[typeName] !== void 0) {
            throw new Error(`Schema must contain uniquely named types but contains multiple types named "${typeName}".`);
          }
          this._typeMap[typeName] = namedType;
          if (isInterfaceType(namedType)) {
            for (const iface of namedType.getInterfaces()) {
              if (isInterfaceType(iface)) {
                let implementations = this._implementationsMap[iface.name];
                if (implementations === void 0) {
                  implementations = this._implementationsMap[iface.name] = {
                    objects: [],
                    interfaces: []
                  };
                }
                implementations.interfaces.push(namedType);
              }
            }
          } else if (isObjectType(namedType)) {
            for (const iface of namedType.getInterfaces()) {
              if (isInterfaceType(iface)) {
                let implementations = this._implementationsMap[iface.name];
                if (implementations === void 0) {
                  implementations = this._implementationsMap[iface.name] = {
                    objects: [],
                    interfaces: []
                  };
                }
                implementations.objects.push(namedType);
              }
            }
          }
        }
      }
      get [Symbol.toStringTag]() {
        return "GraphQLSchema";
      }
      getQueryType() {
        return this._queryType;
      }
      getMutationType() {
        return this._mutationType;
      }
      getSubscriptionType() {
        return this._subscriptionType;
      }
      getRootType(operation) {
        switch (operation) {
          case OperationTypeNode.QUERY:
            return this.getQueryType();
          case OperationTypeNode.MUTATION:
            return this.getMutationType();
          case OperationTypeNode.SUBSCRIPTION:
            return this.getSubscriptionType();
        }
      }
      getTypeMap() {
        return this._typeMap;
      }
      getType(name) {
        return this.getTypeMap()[name];
      }
      getPossibleTypes(abstractType) {
        return isUnionType(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;
      }
      getImplementations(interfaceType) {
        const implementations = this._implementationsMap[interfaceType.name];
        return implementations !== null && implementations !== void 0 ? implementations : {
          objects: [],
          interfaces: []
        };
      }
      isSubType(abstractType, maybeSubType) {
        let map2 = this._subTypeMap[abstractType.name];
        if (map2 === void 0) {
          map2 = /* @__PURE__ */ Object.create(null);
          if (isUnionType(abstractType)) {
            for (const type2 of abstractType.getTypes()) {
              map2[type2.name] = true;
            }
          } else {
            const implementations = this.getImplementations(abstractType);
            for (const type2 of implementations.objects) {
              map2[type2.name] = true;
            }
            for (const type2 of implementations.interfaces) {
              map2[type2.name] = true;
            }
          }
          this._subTypeMap[abstractType.name] = map2;
        }
        return map2[maybeSubType.name] !== void 0;
      }
      getDirectives() {
        return this._directives;
      }
      getDirective(name) {
        return this.getDirectives().find((directive) => directive.name === name);
      }
      toConfig() {
        return {
          description: this.description,
          query: this.getQueryType(),
          mutation: this.getMutationType(),
          subscription: this.getSubscriptionType(),
          types: Object.values(this.getTypeMap()),
          directives: this.getDirectives(),
          extensions: this.extensions,
          astNode: this.astNode,
          extensionASTNodes: this.extensionASTNodes,
          assumeValid: this.__validationErrors !== void 0
        };
      }
    };
  }
});

// node_modules/graphql/type/validate.mjs
function validateSchema(schema2) {
  assertSchema(schema2);
  if (schema2.__validationErrors) {
    return schema2.__validationErrors;
  }
  const context = new SchemaValidationContext(schema2);
  validateRootTypes(context);
  validateDirectives(context);
  validateTypes(context);
  const errors = context.getErrors();
  schema2.__validationErrors = errors;
  return errors;
}
function assertValidSchema(schema2) {
  const errors = validateSchema(schema2);
  if (errors.length !== 0) {
    throw new Error(errors.map((error) => error.message).join("\n\n"));
  }
}
function validateRootTypes(context) {
  const schema2 = context.schema;
  const queryType = schema2.getQueryType();
  if (!queryType) {
    context.reportError("Query root type must be provided.", schema2.astNode);
  } else if (!isObjectType(queryType)) {
    var _getOperationTypeNode;
    context.reportError(`Query root type must be Object type, it cannot be ${inspect(queryType)}.`, (_getOperationTypeNode = getOperationTypeNode(schema2, OperationTypeNode.QUERY)) !== null && _getOperationTypeNode !== void 0 ? _getOperationTypeNode : queryType.astNode);
  }
  const mutationType = schema2.getMutationType();
  if (mutationType && !isObjectType(mutationType)) {
    var _getOperationTypeNode2;
    context.reportError(`Mutation root type must be Object type if provided, it cannot be ${inspect(mutationType)}.`, (_getOperationTypeNode2 = getOperationTypeNode(schema2, OperationTypeNode.MUTATION)) !== null && _getOperationTypeNode2 !== void 0 ? _getOperationTypeNode2 : mutationType.astNode);
  }
  const subscriptionType = schema2.getSubscriptionType();
  if (subscriptionType && !isObjectType(subscriptionType)) {
    var _getOperationTypeNode3;
    context.reportError(`Subscription root type must be Object type if provided, it cannot be ${inspect(subscriptionType)}.`, (_getOperationTypeNode3 = getOperationTypeNode(schema2, OperationTypeNode.SUBSCRIPTION)) !== null && _getOperationTypeNode3 !== void 0 ? _getOperationTypeNode3 : subscriptionType.astNode);
  }
}
function getOperationTypeNode(schema2, operation) {
  var _flatMap$find;
  return (_flatMap$find = [schema2.astNode, ...schema2.extensionASTNodes].flatMap((schemaNode) => {
    var _schemaNode$operation;
    return (_schemaNode$operation = schemaNode === null || schemaNode === void 0 ? void 0 : schemaNode.operationTypes) !== null && _schemaNode$operation !== void 0 ? _schemaNode$operation : [];
  }).find((operationNode) => operationNode.operation === operation)) === null || _flatMap$find === void 0 ? void 0 : _flatMap$find.type;
}
function validateDirectives(context) {
  for (const directive of context.schema.getDirectives()) {
    if (!isDirective(directive)) {
      context.reportError(`Expected directive but got: ${inspect(directive)}.`, directive === null || directive === void 0 ? void 0 : directive.astNode);
      continue;
    }
    validateName(context, directive);
    for (const arg of directive.args) {
      validateName(context, arg);
      if (!isInputType(arg.type)) {
        context.reportError(`The type of @${directive.name}(${arg.name}:) must be Input Type but got: ${inspect(arg.type)}.`, arg.astNode);
      }
      if (isRequiredArgument(arg) && arg.deprecationReason != null) {
        var _arg$astNode;
        context.reportError(`Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`, [
          getDeprecatedDirectiveNode(arg.astNode),
          (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type
        ]);
      }
    }
  }
}
function validateName(context, node) {
  if (node.name.startsWith("__")) {
    context.reportError(`Name "${node.name}" must not begin with "__", which is reserved by GraphQL introspection.`, node.astNode);
  }
}
function validateTypes(context) {
  const validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);
  const typeMap = context.schema.getTypeMap();
  for (const type2 of Object.values(typeMap)) {
    if (!isNamedType(type2)) {
      context.reportError(`Expected GraphQL named type but got: ${inspect(type2)}.`, type2.astNode);
      continue;
    }
    if (!isIntrospectionType(type2)) {
      validateName(context, type2);
    }
    if (isObjectType(type2)) {
      validateFields(context, type2);
      validateInterfaces(context, type2);
    } else if (isInterfaceType(type2)) {
      validateFields(context, type2);
      validateInterfaces(context, type2);
    } else if (isUnionType(type2)) {
      validateUnionMembers(context, type2);
    } else if (isEnumType(type2)) {
      validateEnumValues(context, type2);
    } else if (isInputObjectType(type2)) {
      validateInputFields(context, type2);
      validateInputObjectCircularRefs(type2);
    }
  }
}
function validateFields(context, type2) {
  const fields = Object.values(type2.getFields());
  if (fields.length === 0) {
    context.reportError(`Type ${type2.name} must define one or more fields.`, [
      type2.astNode,
      ...type2.extensionASTNodes
    ]);
  }
  for (const field of fields) {
    validateName(context, field);
    if (!isOutputType(field.type)) {
      var _field$astNode;
      context.reportError(`The type of ${type2.name}.${field.name} must be Output Type but got: ${inspect(field.type)}.`, (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type);
    }
    for (const arg of field.args) {
      const argName = arg.name;
      validateName(context, arg);
      if (!isInputType(arg.type)) {
        var _arg$astNode2;
        context.reportError(`The type of ${type2.name}.${field.name}(${argName}:) must be Input Type but got: ${inspect(arg.type)}.`, (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0 ? void 0 : _arg$astNode2.type);
      }
      if (isRequiredArgument(arg) && arg.deprecationReason != null) {
        var _arg$astNode3;
        context.reportError(`Required argument ${type2.name}.${field.name}(${argName}:) cannot be deprecated.`, [
          getDeprecatedDirectiveNode(arg.astNode),
          (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0 ? void 0 : _arg$astNode3.type
        ]);
      }
    }
  }
}
function validateInterfaces(context, type2) {
  const ifaceTypeNames = /* @__PURE__ */ Object.create(null);
  for (const iface of type2.getInterfaces()) {
    if (!isInterfaceType(iface)) {
      context.reportError(`Type ${inspect(type2)} must only implement Interface types, it cannot implement ${inspect(iface)}.`, getAllImplementsInterfaceNodes(type2, iface));
      continue;
    }
    if (type2 === iface) {
      context.reportError(`Type ${type2.name} cannot implement itself because it would create a circular reference.`, getAllImplementsInterfaceNodes(type2, iface));
      continue;
    }
    if (ifaceTypeNames[iface.name]) {
      context.reportError(`Type ${type2.name} can only implement ${iface.name} once.`, getAllImplementsInterfaceNodes(type2, iface));
      continue;
    }
    ifaceTypeNames[iface.name] = true;
    validateTypeImplementsAncestors(context, type2, iface);
    validateTypeImplementsInterface(context, type2, iface);
  }
}
function validateTypeImplementsInterface(context, type2, iface) {
  const typeFieldMap = type2.getFields();
  for (const ifaceField of Object.values(iface.getFields())) {
    const fieldName = ifaceField.name;
    const typeField = typeFieldMap[fieldName];
    if (!typeField) {
      context.reportError(`Interface field ${iface.name}.${fieldName} expected but ${type2.name} does not provide it.`, [ifaceField.astNode, type2.astNode, ...type2.extensionASTNodes]);
      continue;
    }
    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {
      var _ifaceField$astNode, _typeField$astNode;
      context.reportError(`Interface field ${iface.name}.${fieldName} expects type ${inspect(ifaceField.type)} but ${type2.name}.${fieldName} is type ${inspect(typeField.type)}.`, [
        (_ifaceField$astNode = ifaceField.astNode) === null || _ifaceField$astNode === void 0 ? void 0 : _ifaceField$astNode.type,
        (_typeField$astNode = typeField.astNode) === null || _typeField$astNode === void 0 ? void 0 : _typeField$astNode.type
      ]);
    }
    for (const ifaceArg of ifaceField.args) {
      const argName = ifaceArg.name;
      const typeArg = typeField.args.find((arg) => arg.name === argName);
      if (!typeArg) {
        context.reportError(`Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type2.name}.${fieldName} does not provide it.`, [ifaceArg.astNode, typeField.astNode]);
        continue;
      }
      if (!isEqualType(ifaceArg.type, typeArg.type)) {
        var _ifaceArg$astNode, _typeArg$astNode;
        context.reportError(`Interface field argument ${iface.name}.${fieldName}(${argName}:) expects type ${inspect(ifaceArg.type)} but ${type2.name}.${fieldName}(${argName}:) is type ${inspect(typeArg.type)}.`, [
          (_ifaceArg$astNode = ifaceArg.astNode) === null || _ifaceArg$astNode === void 0 ? void 0 : _ifaceArg$astNode.type,
          (_typeArg$astNode = typeArg.astNode) === null || _typeArg$astNode === void 0 ? void 0 : _typeArg$astNode.type
        ]);
      }
    }
    for (const typeArg of typeField.args) {
      const argName = typeArg.name;
      const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);
      if (!ifaceArg && isRequiredArgument(typeArg)) {
        context.reportError(`Object field ${type2.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`, [typeArg.astNode, ifaceField.astNode]);
      }
    }
  }
}
function validateTypeImplementsAncestors(context, type2, iface) {
  const ifaceInterfaces = type2.getInterfaces();
  for (const transitive of iface.getInterfaces()) {
    if (!ifaceInterfaces.includes(transitive)) {
      context.reportError(transitive === type2 ? `Type ${type2.name} cannot implement ${iface.name} because it would create a circular reference.` : `Type ${type2.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`, [
        ...getAllImplementsInterfaceNodes(iface, transitive),
        ...getAllImplementsInterfaceNodes(type2, iface)
      ]);
    }
  }
}
function validateUnionMembers(context, union2) {
  const memberTypes = union2.getTypes();
  if (memberTypes.length === 0) {
    context.reportError(`Union type ${union2.name} must define one or more member types.`, [union2.astNode, ...union2.extensionASTNodes]);
  }
  const includedTypeNames = /* @__PURE__ */ Object.create(null);
  for (const memberType of memberTypes) {
    if (includedTypeNames[memberType.name]) {
      context.reportError(`Union type ${union2.name} can only include type ${memberType.name} once.`, getUnionMemberTypeNodes(union2, memberType.name));
      continue;
    }
    includedTypeNames[memberType.name] = true;
    if (!isObjectType(memberType)) {
      context.reportError(`Union type ${union2.name} can only include Object types, it cannot include ${inspect(memberType)}.`, getUnionMemberTypeNodes(union2, String(memberType)));
    }
  }
}
function validateEnumValues(context, enumType) {
  const enumValues = enumType.getValues();
  if (enumValues.length === 0) {
    context.reportError(`Enum type ${enumType.name} must define one or more values.`, [enumType.astNode, ...enumType.extensionASTNodes]);
  }
  for (const enumValue of enumValues) {
    validateName(context, enumValue);
  }
}
function validateInputFields(context, inputObj) {
  const fields = Object.values(inputObj.getFields());
  if (fields.length === 0) {
    context.reportError(`Input Object type ${inputObj.name} must define one or more fields.`, [inputObj.astNode, ...inputObj.extensionASTNodes]);
  }
  for (const field of fields) {
    validateName(context, field);
    if (!isInputType(field.type)) {
      var _field$astNode2;
      context.reportError(`The type of ${inputObj.name}.${field.name} must be Input Type but got: ${inspect(field.type)}.`, (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type);
    }
    if (isRequiredInputField(field) && field.deprecationReason != null) {
      var _field$astNode3;
      context.reportError(`Required input field ${inputObj.name}.${field.name} cannot be deprecated.`, [
        getDeprecatedDirectiveNode(field.astNode),
        (_field$astNode3 = field.astNode) === null || _field$astNode3 === void 0 ? void 0 : _field$astNode3.type
      ]);
    }
  }
}
function createInputObjectCircularRefsValidator(context) {
  const visitedTypes = /* @__PURE__ */ Object.create(null);
  const fieldPath = [];
  const fieldPathIndexByTypeName = /* @__PURE__ */ Object.create(null);
  return detectCycleRecursive;
  function detectCycleRecursive(inputObj) {
    if (visitedTypes[inputObj.name]) {
      return;
    }
    visitedTypes[inputObj.name] = true;
    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;
    const fields = Object.values(inputObj.getFields());
    for (const field of fields) {
      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {
        const fieldType = field.type.ofType;
        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];
        fieldPath.push(field);
        if (cycleIndex === void 0) {
          detectCycleRecursive(fieldType);
        } else {
          const cyclePath = fieldPath.slice(cycleIndex);
          const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join(".");
          context.reportError(`Cannot reference Input Object "${fieldType.name}" within itself through a series of non-null fields: "${pathStr}".`, cyclePath.map((fieldObj) => fieldObj.astNode));
        }
        fieldPath.pop();
      }
    }
    fieldPathIndexByTypeName[inputObj.name] = void 0;
  }
}
function getAllImplementsInterfaceNodes(type2, iface) {
  const { astNode, extensionASTNodes } = type2;
  const nodes = astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes;
  return nodes.flatMap((typeNode) => {
    var _typeNode$interfaces;
    return (_typeNode$interfaces = typeNode.interfaces) !== null && _typeNode$interfaces !== void 0 ? _typeNode$interfaces : [];
  }).filter((ifaceNode) => ifaceNode.name.value === iface.name);
}
function getUnionMemberTypeNodes(union2, typeName) {
  const { astNode, extensionASTNodes } = union2;
  const nodes = astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes;
  return nodes.flatMap((unionNode) => {
    var _unionNode$types;
    return (_unionNode$types = unionNode.types) !== null && _unionNode$types !== void 0 ? _unionNode$types : [];
  }).filter((typeNode) => typeNode.name.value === typeName);
}
function getDeprecatedDirectiveNode(definitionNode) {
  var _definitionNode$direc;
  return definitionNode === null || definitionNode === void 0 ? void 0 : (_definitionNode$direc = definitionNode.directives) === null || _definitionNode$direc === void 0 ? void 0 : _definitionNode$direc.find((node) => node.name.value === GraphQLDeprecatedDirective.name);
}
var SchemaValidationContext;
var init_validate = __esm({
  "node_modules/graphql/type/validate.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_GraphQLError();
    init_ast();
    init_typeComparators();
    init_definition();
    init_directives();
    init_introspection();
    init_schema();
    SchemaValidationContext = class {
      constructor(schema2) {
        this._errors = [];
        this.schema = schema2;
      }
      reportError(message, nodes) {
        const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;
        this._errors.push(new GraphQLError(message, {
          nodes: _nodes
        }));
      }
      getErrors() {
        return this._errors;
      }
    };
  }
});

// node_modules/graphql/utilities/typeFromAST.mjs
function typeFromAST(schema2, typeNode) {
  switch (typeNode.kind) {
    case Kind.LIST_TYPE: {
      const innerType = typeFromAST(schema2, typeNode.type);
      return innerType && new GraphQLList(innerType);
    }
    case Kind.NON_NULL_TYPE: {
      const innerType = typeFromAST(schema2, typeNode.type);
      return innerType && new GraphQLNonNull(innerType);
    }
    case Kind.NAMED_TYPE:
      return schema2.getType(typeNode.name.value);
  }
}
var init_typeFromAST = __esm({
  "node_modules/graphql/utilities/typeFromAST.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_kinds();
    init_definition();
  }
});

// node_modules/graphql/utilities/TypeInfo.mjs
function getFieldDef(schema2, parentType, fieldNode) {
  const name = fieldNode.name.value;
  if (name === SchemaMetaFieldDef.name && schema2.getQueryType() === parentType) {
    return SchemaMetaFieldDef;
  }
  if (name === TypeMetaFieldDef.name && schema2.getQueryType() === parentType) {
    return TypeMetaFieldDef;
  }
  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {
    return TypeNameMetaFieldDef;
  }
  if (isObjectType(parentType) || isInterfaceType(parentType)) {
    return parentType.getFields()[name];
  }
}
function visitWithTypeInfo(typeInfo, visitor) {
  return {
    enter(...args) {
      const node = args[0];
      typeInfo.enter(node);
      const fn = getEnterLeaveForKind(visitor, node.kind).enter;
      if (fn) {
        const result = fn.apply(visitor, args);
        if (result !== void 0) {
          typeInfo.leave(node);
          if (isNode(result)) {
            typeInfo.enter(result);
          }
        }
        return result;
      }
    },
    leave(...args) {
      const node = args[0];
      const fn = getEnterLeaveForKind(visitor, node.kind).leave;
      let result;
      if (fn) {
        result = fn.apply(visitor, args);
      }
      typeInfo.leave(node);
      return result;
    }
  };
}
var TypeInfo;
var init_TypeInfo = __esm({
  "node_modules/graphql/utilities/TypeInfo.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_ast();
    init_kinds();
    init_visitor();
    init_definition();
    init_introspection();
    init_typeFromAST();
    TypeInfo = class {
      constructor(schema2, initialType, getFieldDefFn) {
        this._schema = schema2;
        this._typeStack = [];
        this._parentTypeStack = [];
        this._inputTypeStack = [];
        this._fieldDefStack = [];
        this._defaultValueStack = [];
        this._directive = null;
        this._argument = null;
        this._enumValue = null;
        this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;
        if (initialType) {
          if (isInputType(initialType)) {
            this._inputTypeStack.push(initialType);
          }
          if (isCompositeType(initialType)) {
            this._parentTypeStack.push(initialType);
          }
          if (isOutputType(initialType)) {
            this._typeStack.push(initialType);
          }
        }
      }
      get [Symbol.toStringTag]() {
        return "TypeInfo";
      }
      getType() {
        if (this._typeStack.length > 0) {
          return this._typeStack[this._typeStack.length - 1];
        }
      }
      getParentType() {
        if (this._parentTypeStack.length > 0) {
          return this._parentTypeStack[this._parentTypeStack.length - 1];
        }
      }
      getInputType() {
        if (this._inputTypeStack.length > 0) {
          return this._inputTypeStack[this._inputTypeStack.length - 1];
        }
      }
      getParentInputType() {
        if (this._inputTypeStack.length > 1) {
          return this._inputTypeStack[this._inputTypeStack.length - 2];
        }
      }
      getFieldDef() {
        if (this._fieldDefStack.length > 0) {
          return this._fieldDefStack[this._fieldDefStack.length - 1];
        }
      }
      getDefaultValue() {
        if (this._defaultValueStack.length > 0) {
          return this._defaultValueStack[this._defaultValueStack.length - 1];
        }
      }
      getDirective() {
        return this._directive;
      }
      getArgument() {
        return this._argument;
      }
      getEnumValue() {
        return this._enumValue;
      }
      enter(node) {
        const schema2 = this._schema;
        switch (node.kind) {
          case Kind.SELECTION_SET: {
            const namedType = getNamedType(this.getType());
            this._parentTypeStack.push(isCompositeType(namedType) ? namedType : void 0);
            break;
          }
          case Kind.FIELD: {
            const parentType = this.getParentType();
            let fieldDef;
            let fieldType;
            if (parentType) {
              fieldDef = this._getFieldDef(schema2, parentType, node);
              if (fieldDef) {
                fieldType = fieldDef.type;
              }
            }
            this._fieldDefStack.push(fieldDef);
            this._typeStack.push(isOutputType(fieldType) ? fieldType : void 0);
            break;
          }
          case Kind.DIRECTIVE:
            this._directive = schema2.getDirective(node.name.value);
            break;
          case Kind.OPERATION_DEFINITION: {
            const rootType = schema2.getRootType(node.operation);
            this._typeStack.push(isObjectType(rootType) ? rootType : void 0);
            break;
          }
          case Kind.INLINE_FRAGMENT:
          case Kind.FRAGMENT_DEFINITION: {
            const typeConditionAST = node.typeCondition;
            const outputType = typeConditionAST ? typeFromAST(schema2, typeConditionAST) : getNamedType(this.getType());
            this._typeStack.push(isOutputType(outputType) ? outputType : void 0);
            break;
          }
          case Kind.VARIABLE_DEFINITION: {
            const inputType = typeFromAST(schema2, node.type);
            this._inputTypeStack.push(isInputType(inputType) ? inputType : void 0);
            break;
          }
          case Kind.ARGUMENT: {
            var _this$getDirective;
            let argDef;
            let argType;
            const fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();
            if (fieldOrDirective) {
              argDef = fieldOrDirective.args.find((arg) => arg.name === node.name.value);
              if (argDef) {
                argType = argDef.type;
              }
            }
            this._argument = argDef;
            this._defaultValueStack.push(argDef ? argDef.defaultValue : void 0);
            this._inputTypeStack.push(isInputType(argType) ? argType : void 0);
            break;
          }
          case Kind.LIST: {
            const listType = getNullableType(this.getInputType());
            const itemType = isListType(listType) ? listType.ofType : listType;
            this._defaultValueStack.push(void 0);
            this._inputTypeStack.push(isInputType(itemType) ? itemType : void 0);
            break;
          }
          case Kind.OBJECT_FIELD: {
            const objectType = getNamedType(this.getInputType());
            let inputFieldType;
            let inputField;
            if (isInputObjectType(objectType)) {
              inputField = objectType.getFields()[node.name.value];
              if (inputField) {
                inputFieldType = inputField.type;
              }
            }
            this._defaultValueStack.push(inputField ? inputField.defaultValue : void 0);
            this._inputTypeStack.push(isInputType(inputFieldType) ? inputFieldType : void 0);
            break;
          }
          case Kind.ENUM: {
            const enumType = getNamedType(this.getInputType());
            let enumValue;
            if (isEnumType(enumType)) {
              enumValue = enumType.getValue(node.value);
            }
            this._enumValue = enumValue;
            break;
          }
          default:
        }
      }
      leave(node) {
        switch (node.kind) {
          case Kind.SELECTION_SET:
            this._parentTypeStack.pop();
            break;
          case Kind.FIELD:
            this._fieldDefStack.pop();
            this._typeStack.pop();
            break;
          case Kind.DIRECTIVE:
            this._directive = null;
            break;
          case Kind.OPERATION_DEFINITION:
          case Kind.INLINE_FRAGMENT:
          case Kind.FRAGMENT_DEFINITION:
            this._typeStack.pop();
            break;
          case Kind.VARIABLE_DEFINITION:
            this._inputTypeStack.pop();
            break;
          case Kind.ARGUMENT:
            this._argument = null;
            this._defaultValueStack.pop();
            this._inputTypeStack.pop();
            break;
          case Kind.LIST:
          case Kind.OBJECT_FIELD:
            this._defaultValueStack.pop();
            this._inputTypeStack.pop();
            break;
          case Kind.ENUM:
            this._enumValue = null;
            break;
          default:
        }
      }
    };
  }
});

// node_modules/graphql/language/predicates.mjs
function isDefinitionNode(node) {
  return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);
}
function isExecutableDefinitionNode(node) {
  return node.kind === Kind.OPERATION_DEFINITION || node.kind === Kind.FRAGMENT_DEFINITION;
}
function isTypeSystemDefinitionNode(node) {
  return node.kind === Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === Kind.DIRECTIVE_DEFINITION;
}
function isTypeDefinitionNode(node) {
  return node.kind === Kind.SCALAR_TYPE_DEFINITION || node.kind === Kind.OBJECT_TYPE_DEFINITION || node.kind === Kind.INTERFACE_TYPE_DEFINITION || node.kind === Kind.UNION_TYPE_DEFINITION || node.kind === Kind.ENUM_TYPE_DEFINITION || node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION;
}
function isTypeSystemExtensionNode(node) {
  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);
}
function isTypeExtensionNode(node) {
  return node.kind === Kind.SCALAR_TYPE_EXTENSION || node.kind === Kind.OBJECT_TYPE_EXTENSION || node.kind === Kind.INTERFACE_TYPE_EXTENSION || node.kind === Kind.UNION_TYPE_EXTENSION || node.kind === Kind.ENUM_TYPE_EXTENSION || node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION;
}
var init_predicates = __esm({
  "node_modules/graphql/language/predicates.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_kinds();
  }
});

// node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs
function ExecutableDefinitionsRule(context) {
  return {
    Document(node) {
      for (const definition of node.definitions) {
        if (!isExecutableDefinitionNode(definition)) {
          const defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? "schema" : '"' + definition.name.value + '"';
          context.reportError(new GraphQLError(`The ${defName} definition is not executable.`, {
            nodes: definition
          }));
        }
      }
      return false;
    }
  };
}
var init_ExecutableDefinitionsRule = __esm({
  "node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
    init_kinds();
    init_predicates();
  }
});

// node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs
function FieldsOnCorrectTypeRule(context) {
  return {
    Field(node) {
      const type2 = context.getParentType();
      if (type2) {
        const fieldDef = context.getFieldDef();
        if (!fieldDef) {
          const schema2 = context.getSchema();
          const fieldName = node.name.value;
          let suggestion = didYouMean("to use an inline fragment on", getSuggestedTypeNames(schema2, type2, fieldName));
          if (suggestion === "") {
            suggestion = didYouMean(getSuggestedFieldNames(type2, fieldName));
          }
          context.reportError(new GraphQLError(`Cannot query field "${fieldName}" on type "${type2.name}".` + suggestion, {
            nodes: node
          }));
        }
      }
    }
  };
}
function getSuggestedTypeNames(schema2, type2, fieldName) {
  if (!isAbstractType(type2)) {
    return [];
  }
  const suggestedTypes = /* @__PURE__ */ new Set();
  const usageCount = /* @__PURE__ */ Object.create(null);
  for (const possibleType of schema2.getPossibleTypes(type2)) {
    if (!possibleType.getFields()[fieldName]) {
      continue;
    }
    suggestedTypes.add(possibleType);
    usageCount[possibleType.name] = 1;
    for (const possibleInterface of possibleType.getInterfaces()) {
      var _usageCount$possibleI;
      if (!possibleInterface.getFields()[fieldName]) {
        continue;
      }
      suggestedTypes.add(possibleInterface);
      usageCount[possibleInterface.name] = ((_usageCount$possibleI = usageCount[possibleInterface.name]) !== null && _usageCount$possibleI !== void 0 ? _usageCount$possibleI : 0) + 1;
    }
  }
  return [...suggestedTypes].sort((typeA, typeB) => {
    const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];
    if (usageCountDiff !== 0) {
      return usageCountDiff;
    }
    if (isInterfaceType(typeA) && schema2.isSubType(typeA, typeB)) {
      return -1;
    }
    if (isInterfaceType(typeB) && schema2.isSubType(typeB, typeA)) {
      return 1;
    }
    return naturalCompare(typeA.name, typeB.name);
  }).map((x) => x.name);
}
function getSuggestedFieldNames(type2, fieldName) {
  if (isObjectType(type2) || isInterfaceType(type2)) {
    const possibleFieldNames = Object.keys(type2.getFields());
    return suggestionList(fieldName, possibleFieldNames);
  }
  return [];
}
var init_FieldsOnCorrectTypeRule = __esm({
  "node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_didYouMean();
    init_naturalCompare();
    init_suggestionList();
    init_GraphQLError();
    init_definition();
  }
});

// node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs
function FragmentsOnCompositeTypesRule(context) {
  return {
    InlineFragment(node) {
      const typeCondition = node.typeCondition;
      if (typeCondition) {
        const type2 = typeFromAST(context.getSchema(), typeCondition);
        if (type2 && !isCompositeType(type2)) {
          const typeStr = print(typeCondition);
          context.reportError(new GraphQLError(`Fragment cannot condition on non composite type "${typeStr}".`, {
            nodes: typeCondition
          }));
        }
      }
    },
    FragmentDefinition(node) {
      const type2 = typeFromAST(context.getSchema(), node.typeCondition);
      if (type2 && !isCompositeType(type2)) {
        const typeStr = print(node.typeCondition);
        context.reportError(new GraphQLError(`Fragment "${node.name.value}" cannot condition on non composite type "${typeStr}".`, {
          nodes: node.typeCondition
        }));
      }
    }
  };
}
var init_FragmentsOnCompositeTypesRule = __esm({
  "node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
    init_printer();
    init_definition();
    init_typeFromAST();
  }
});

// node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs
function KnownArgumentNamesRule(context) {
  return {
    ...KnownArgumentNamesOnDirectivesRule(context),
    Argument(argNode) {
      const argDef = context.getArgument();
      const fieldDef = context.getFieldDef();
      const parentType = context.getParentType();
      if (!argDef && fieldDef && parentType) {
        const argName = argNode.name.value;
        const knownArgsNames = fieldDef.args.map((arg) => arg.name);
        const suggestions = suggestionList(argName, knownArgsNames);
        context.reportError(new GraphQLError(`Unknown argument "${argName}" on field "${parentType.name}.${fieldDef.name}".` + didYouMean(suggestions), {
          nodes: argNode
        }));
      }
    }
  };
}
function KnownArgumentNamesOnDirectivesRule(context) {
  const directiveArgs = /* @__PURE__ */ Object.create(null);
  const schema2 = context.getSchema();
  const definedDirectives = schema2 ? schema2.getDirectives() : specifiedDirectives;
  for (const directive of definedDirectives) {
    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);
  }
  const astDefinitions = context.getDocument().definitions;
  for (const def of astDefinitions) {
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      var _def$arguments;
      const argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);
    }
  }
  return {
    Directive(directiveNode) {
      const directiveName = directiveNode.name.value;
      const knownArgs = directiveArgs[directiveName];
      if (directiveNode.arguments && knownArgs) {
        for (const argNode of directiveNode.arguments) {
          const argName = argNode.name.value;
          if (!knownArgs.includes(argName)) {
            const suggestions = suggestionList(argName, knownArgs);
            context.reportError(new GraphQLError(`Unknown argument "${argName}" on directive "@${directiveName}".` + didYouMean(suggestions), {
              nodes: argNode
            }));
          }
        }
      }
      return false;
    }
  };
}
var init_KnownArgumentNamesRule = __esm({
  "node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_didYouMean();
    init_suggestionList();
    init_GraphQLError();
    init_kinds();
    init_directives();
  }
});

// node_modules/graphql/validation/rules/KnownDirectivesRule.mjs
function KnownDirectivesRule(context) {
  const locationsMap = /* @__PURE__ */ Object.create(null);
  const schema2 = context.getSchema();
  const definedDirectives = schema2 ? schema2.getDirectives() : specifiedDirectives;
  for (const directive of definedDirectives) {
    locationsMap[directive.name] = directive.locations;
  }
  const astDefinitions = context.getDocument().definitions;
  for (const def of astDefinitions) {
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      locationsMap[def.name.value] = def.locations.map((name) => name.value);
    }
  }
  return {
    Directive(node, _key, _parent, _path, ancestors) {
      const name = node.name.value;
      const locations = locationsMap[name];
      if (!locations) {
        context.reportError(new GraphQLError(`Unknown directive "@${name}".`, {
          nodes: node
        }));
        return;
      }
      const candidateLocation = getDirectiveLocationForASTPath(ancestors);
      if (candidateLocation && !locations.includes(candidateLocation)) {
        context.reportError(new GraphQLError(`Directive "@${name}" may not be used on ${candidateLocation}.`, {
          nodes: node
        }));
      }
    }
  };
}
function getDirectiveLocationForASTPath(ancestors) {
  const appliedTo = ancestors[ancestors.length - 1];
  "kind" in appliedTo || invariant(false);
  switch (appliedTo.kind) {
    case Kind.OPERATION_DEFINITION:
      return getDirectiveLocationForOperation(appliedTo.operation);
    case Kind.FIELD:
      return DirectiveLocation.FIELD;
    case Kind.FRAGMENT_SPREAD:
      return DirectiveLocation.FRAGMENT_SPREAD;
    case Kind.INLINE_FRAGMENT:
      return DirectiveLocation.INLINE_FRAGMENT;
    case Kind.FRAGMENT_DEFINITION:
      return DirectiveLocation.FRAGMENT_DEFINITION;
    case Kind.VARIABLE_DEFINITION:
      return DirectiveLocation.VARIABLE_DEFINITION;
    case Kind.SCHEMA_DEFINITION:
    case Kind.SCHEMA_EXTENSION:
      return DirectiveLocation.SCHEMA;
    case Kind.SCALAR_TYPE_DEFINITION:
    case Kind.SCALAR_TYPE_EXTENSION:
      return DirectiveLocation.SCALAR;
    case Kind.OBJECT_TYPE_DEFINITION:
    case Kind.OBJECT_TYPE_EXTENSION:
      return DirectiveLocation.OBJECT;
    case Kind.FIELD_DEFINITION:
      return DirectiveLocation.FIELD_DEFINITION;
    case Kind.INTERFACE_TYPE_DEFINITION:
    case Kind.INTERFACE_TYPE_EXTENSION:
      return DirectiveLocation.INTERFACE;
    case Kind.UNION_TYPE_DEFINITION:
    case Kind.UNION_TYPE_EXTENSION:
      return DirectiveLocation.UNION;
    case Kind.ENUM_TYPE_DEFINITION:
    case Kind.ENUM_TYPE_EXTENSION:
      return DirectiveLocation.ENUM;
    case Kind.ENUM_VALUE_DEFINITION:
      return DirectiveLocation.ENUM_VALUE;
    case Kind.INPUT_OBJECT_TYPE_DEFINITION:
    case Kind.INPUT_OBJECT_TYPE_EXTENSION:
      return DirectiveLocation.INPUT_OBJECT;
    case Kind.INPUT_VALUE_DEFINITION: {
      const parentNode = ancestors[ancestors.length - 3];
      "kind" in parentNode || invariant(false);
      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;
    }
    default:
      invariant(false, "Unexpected kind: " + inspect(appliedTo.kind));
  }
}
function getDirectiveLocationForOperation(operation) {
  switch (operation) {
    case OperationTypeNode.QUERY:
      return DirectiveLocation.QUERY;
    case OperationTypeNode.MUTATION:
      return DirectiveLocation.MUTATION;
    case OperationTypeNode.SUBSCRIPTION:
      return DirectiveLocation.SUBSCRIPTION;
  }
}
var init_KnownDirectivesRule = __esm({
  "node_modules/graphql/validation/rules/KnownDirectivesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_invariant();
    init_GraphQLError();
    init_ast();
    init_directiveLocation();
    init_kinds();
    init_directives();
  }
});

// node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs
function KnownFragmentNamesRule(context) {
  return {
    FragmentSpread(node) {
      const fragmentName = node.name.value;
      const fragment = context.getFragment(fragmentName);
      if (!fragment) {
        context.reportError(new GraphQLError(`Unknown fragment "${fragmentName}".`, {
          nodes: node.name
        }));
      }
    }
  };
}
var init_KnownFragmentNamesRule = __esm({
  "node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs
function KnownTypeNamesRule(context) {
  const schema2 = context.getSchema();
  const existingTypesMap = schema2 ? schema2.getTypeMap() : /* @__PURE__ */ Object.create(null);
  const definedTypes = /* @__PURE__ */ Object.create(null);
  for (const def of context.getDocument().definitions) {
    if (isTypeDefinitionNode(def)) {
      definedTypes[def.name.value] = true;
    }
  }
  const typeNames = [
    ...Object.keys(existingTypesMap),
    ...Object.keys(definedTypes)
  ];
  return {
    NamedType(node, _1, parent, _2, ancestors) {
      const typeName = node.name.value;
      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {
        var _ancestors$;
        const definitionNode = (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0 ? _ancestors$ : parent;
        const isSDL = definitionNode != null && isSDLNode(definitionNode);
        if (isSDL && standardTypeNames.includes(typeName)) {
          return;
        }
        const suggestedTypes = suggestionList(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);
        context.reportError(new GraphQLError(`Unknown type "${typeName}".` + didYouMean(suggestedTypes), {
          nodes: node
        }));
      }
    }
  };
}
function isSDLNode(value) {
  return "kind" in value && (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value));
}
var standardTypeNames;
var init_KnownTypeNamesRule = __esm({
  "node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_didYouMean();
    init_suggestionList();
    init_GraphQLError();
    init_predicates();
    init_introspection();
    init_scalars();
    standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map((type2) => type2.name);
  }
});

// node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs
function LoneAnonymousOperationRule(context) {
  let operationCount = 0;
  return {
    Document(node) {
      operationCount = node.definitions.filter((definition) => definition.kind === Kind.OPERATION_DEFINITION).length;
    },
    OperationDefinition(node) {
      if (!node.name && operationCount > 1) {
        context.reportError(new GraphQLError("This anonymous operation must be the only defined operation.", {
          nodes: node
        }));
      }
    }
  };
}
var init_LoneAnonymousOperationRule = __esm({
  "node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
    init_kinds();
  }
});

// node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs
function LoneSchemaDefinitionRule(context) {
  var _ref, _ref2, _oldSchema$astNode;
  const oldSchema = context.getSchema();
  const alreadyDefined = (_ref = (_ref2 = (_oldSchema$astNode = oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0 ? _oldSchema$astNode : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getQueryType()) !== null && _ref2 !== void 0 ? _ref2 : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getMutationType()) !== null && _ref !== void 0 ? _ref : oldSchema === null || oldSchema === void 0 ? void 0 : oldSchema.getSubscriptionType();
  let schemaDefinitionsCount = 0;
  return {
    SchemaDefinition(node) {
      if (alreadyDefined) {
        context.reportError(new GraphQLError("Cannot define a new schema within a schema extension.", {
          nodes: node
        }));
        return;
      }
      if (schemaDefinitionsCount > 0) {
        context.reportError(new GraphQLError("Must provide only one schema definition.", {
          nodes: node
        }));
      }
      ++schemaDefinitionsCount;
    }
  };
}
var init_LoneSchemaDefinitionRule = __esm({
  "node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs
function NoFragmentCyclesRule(context) {
  const visitedFrags = /* @__PURE__ */ Object.create(null);
  const spreadPath = [];
  const spreadPathIndexByName = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => false,
    FragmentDefinition(node) {
      detectCycleRecursive(node);
      return false;
    }
  };
  function detectCycleRecursive(fragment) {
    if (visitedFrags[fragment.name.value]) {
      return;
    }
    const fragmentName = fragment.name.value;
    visitedFrags[fragmentName] = true;
    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);
    if (spreadNodes.length === 0) {
      return;
    }
    spreadPathIndexByName[fragmentName] = spreadPath.length;
    for (const spreadNode of spreadNodes) {
      const spreadName = spreadNode.name.value;
      const cycleIndex = spreadPathIndexByName[spreadName];
      spreadPath.push(spreadNode);
      if (cycleIndex === void 0) {
        const spreadFragment = context.getFragment(spreadName);
        if (spreadFragment) {
          detectCycleRecursive(spreadFragment);
        }
      } else {
        const cyclePath = spreadPath.slice(cycleIndex);
        const viaPath = cyclePath.slice(0, -1).map((s) => '"' + s.name.value + '"').join(", ");
        context.reportError(new GraphQLError(`Cannot spread fragment "${spreadName}" within itself` + (viaPath !== "" ? ` via ${viaPath}.` : "."), {
          nodes: cyclePath
        }));
      }
      spreadPath.pop();
    }
    spreadPathIndexByName[fragmentName] = void 0;
  }
}
var init_NoFragmentCyclesRule = __esm({
  "node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs
function NoUndefinedVariablesRule(context) {
  let variableNameDefined = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        variableNameDefined = /* @__PURE__ */ Object.create(null);
      },
      leave(operation) {
        const usages = context.getRecursiveVariableUsages(operation);
        for (const { node } of usages) {
          const varName = node.name.value;
          if (variableNameDefined[varName] !== true) {
            context.reportError(new GraphQLError(operation.name ? `Variable "$${varName}" is not defined by operation "${operation.name.value}".` : `Variable "$${varName}" is not defined.`, {
              nodes: [node, operation]
            }));
          }
        }
      }
    },
    VariableDefinition(node) {
      variableNameDefined[node.variable.name.value] = true;
    }
  };
}
var init_NoUndefinedVariablesRule = __esm({
  "node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs
function NoUnusedFragmentsRule(context) {
  const operationDefs = [];
  const fragmentDefs = [];
  return {
    OperationDefinition(node) {
      operationDefs.push(node);
      return false;
    },
    FragmentDefinition(node) {
      fragmentDefs.push(node);
      return false;
    },
    Document: {
      leave() {
        const fragmentNameUsed = /* @__PURE__ */ Object.create(null);
        for (const operation of operationDefs) {
          for (const fragment of context.getRecursivelyReferencedFragments(operation)) {
            fragmentNameUsed[fragment.name.value] = true;
          }
        }
        for (const fragmentDef of fragmentDefs) {
          const fragName = fragmentDef.name.value;
          if (fragmentNameUsed[fragName] !== true) {
            context.reportError(new GraphQLError(`Fragment "${fragName}" is never used.`, {
              nodes: fragmentDef
            }));
          }
        }
      }
    }
  };
}
var init_NoUnusedFragmentsRule = __esm({
  "node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs
function NoUnusedVariablesRule(context) {
  let variableDefs = [];
  return {
    OperationDefinition: {
      enter() {
        variableDefs = [];
      },
      leave(operation) {
        const variableNameUsed = /* @__PURE__ */ Object.create(null);
        const usages = context.getRecursiveVariableUsages(operation);
        for (const { node } of usages) {
          variableNameUsed[node.name.value] = true;
        }
        for (const variableDef of variableDefs) {
          const variableName = variableDef.variable.name.value;
          if (variableNameUsed[variableName] !== true) {
            context.reportError(new GraphQLError(operation.name ? `Variable "$${variableName}" is never used in operation "${operation.name.value}".` : `Variable "$${variableName}" is never used.`, {
              nodes: variableDef
            }));
          }
        }
      }
    },
    VariableDefinition(def) {
      variableDefs.push(def);
    }
  };
}
var init_NoUnusedVariablesRule = __esm({
  "node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/utilities/sortValueNode.mjs
function sortValueNode(valueNode) {
  switch (valueNode.kind) {
    case Kind.OBJECT:
      return { ...valueNode, fields: sortFields(valueNode.fields) };
    case Kind.LIST:
      return { ...valueNode, values: valueNode.values.map(sortValueNode) };
    case Kind.INT:
    case Kind.FLOAT:
    case Kind.STRING:
    case Kind.BOOLEAN:
    case Kind.NULL:
    case Kind.ENUM:
    case Kind.VARIABLE:
      return valueNode;
  }
}
function sortFields(fields) {
  return fields.map((fieldNode) => ({
    ...fieldNode,
    value: sortValueNode(fieldNode.value)
  })).sort((fieldA, fieldB) => naturalCompare(fieldA.name.value, fieldB.name.value));
}
var init_sortValueNode = __esm({
  "node_modules/graphql/utilities/sortValueNode.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_naturalCompare();
    init_kinds();
  }
});

// node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs
function reasonMessage(reason) {
  if (Array.isArray(reason)) {
    return reason.map(([responseName, subReason]) => `subfields "${responseName}" conflict because ` + reasonMessage(subReason)).join(" and ");
  }
  return reason;
}
function OverlappingFieldsCanBeMergedRule(context) {
  const comparedFragmentPairs = new PairSet();
  const cachedFieldsAndFragmentNames = /* @__PURE__ */ new Map();
  return {
    SelectionSet(selectionSet) {
      const conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);
      for (const [[responseName, reason], fields1, fields2] of conflicts) {
        const reasonMsg = reasonMessage(reason);
        context.reportError(new GraphQLError(`Fields "${responseName}" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`, {
          nodes: fields1.concat(fields2)
        }));
      }
    }
  };
}
function findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {
  const conflicts = [];
  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet);
  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);
  if (fragmentNames.length !== 0) {
    for (let i = 0; i < fragmentNames.length; i++) {
      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]);
      for (let j = i + 1; j < fragmentNames.length; j++) {
        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);
      }
    }
  }
  return conflicts;
}
function collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {
  const fragment = context.getFragment(fragmentName);
  if (!fragment) {
    return;
  }
  const [fieldMap2, referencedFragmentNames] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment);
  if (fieldMap === fieldMap2) {
    return;
  }
  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2);
  for (const referencedFragmentName of referencedFragmentNames) {
    if (comparedFragmentPairs.has(referencedFragmentName, fragmentName, areMutuallyExclusive)) {
      continue;
    }
    comparedFragmentPairs.add(referencedFragmentName, fragmentName, areMutuallyExclusive);
    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, referencedFragmentName);
  }
}
function collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {
  if (fragmentName1 === fragmentName2) {
    return;
  }
  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {
    return;
  }
  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);
  const fragment1 = context.getFragment(fragmentName1);
  const fragment2 = context.getFragment(fragmentName2);
  if (!fragment1 || !fragment2) {
    return;
  }
  const [fieldMap1, referencedFragmentNames1] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1);
  const [fieldMap2, referencedFragmentNames2] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2);
  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);
  for (const referencedFragmentName2 of referencedFragmentNames2) {
    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, referencedFragmentName2);
  }
  for (const referencedFragmentName1 of referencedFragmentNames1) {
    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, referencedFragmentName1, fragmentName2);
  }
}
function findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {
  const conflicts = [];
  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1);
  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2);
  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2);
  for (const fragmentName2 of fragmentNames2) {
    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentName2);
  }
  for (const fragmentName1 of fragmentNames1) {
    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentName1);
  }
  for (const fragmentName1 of fragmentNames1) {
    for (const fragmentName2 of fragmentNames2) {
      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2);
    }
  }
  return conflicts;
}
function collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {
  for (const [responseName, fields] of Object.entries(fieldMap)) {
    if (fields.length > 1) {
      for (let i = 0; i < fields.length; i++) {
        for (let j = i + 1; j < fields.length; j++) {
          const conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, responseName, fields[i], fields[j]);
          if (conflict) {
            conflicts.push(conflict);
          }
        }
      }
    }
  }
}
function collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {
  for (const [responseName, fields1] of Object.entries(fieldMap1)) {
    const fields2 = fieldMap2[responseName];
    if (fields2) {
      for (const field1 of fields1) {
        for (const field2 of fields2) {
          const conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2);
          if (conflict) {
            conflicts.push(conflict);
          }
        }
      }
    }
  }
}
function findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {
  const [parentType1, node1, def1] = field1;
  const [parentType2, node2, def2] = field2;
  const areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);
  if (!areMutuallyExclusive) {
    const name1 = node1.name.value;
    const name2 = node2.name.value;
    if (name1 !== name2) {
      return [
        [responseName, `"${name1}" and "${name2}" are different fields`],
        [node1],
        [node2]
      ];
    }
    if (stringifyArguments(node1) !== stringifyArguments(node2)) {
      return [
        [responseName, "they have differing arguments"],
        [node1],
        [node2]
      ];
    }
  }
  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;
  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;
  if (type1 && type2 && doTypesConflict(type1, type2)) {
    return [
      [
        responseName,
        `they return conflicting types "${inspect(type1)}" and "${inspect(type2)}"`
      ],
      [node1],
      [node2]
    ];
  }
  const selectionSet1 = node1.selectionSet;
  const selectionSet2 = node2.selectionSet;
  if (selectionSet1 && selectionSet2) {
    const conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);
    return subfieldConflicts(conflicts, responseName, node1, node2);
  }
}
function stringifyArguments(fieldNode) {
  var _fieldNode$arguments;
  const args = (_fieldNode$arguments = fieldNode.arguments) !== null && _fieldNode$arguments !== void 0 ? _fieldNode$arguments : [];
  const inputObjectWithArgs = {
    kind: Kind.OBJECT,
    fields: args.map((argNode) => ({
      kind: Kind.OBJECT_FIELD,
      name: argNode.name,
      value: argNode.value
    }))
  };
  return print(sortValueNode(inputObjectWithArgs));
}
function doTypesConflict(type1, type2) {
  if (isListType(type1)) {
    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
  }
  if (isListType(type2)) {
    return true;
  }
  if (isNonNullType(type1)) {
    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;
  }
  if (isNonNullType(type2)) {
    return true;
  }
  if (isLeafType(type1) || isLeafType(type2)) {
    return type1 !== type2;
  }
  return false;
}
function getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {
  const cached = cachedFieldsAndFragmentNames.get(selectionSet);
  if (cached) {
    return cached;
  }
  const nodeAndDefs = /* @__PURE__ */ Object.create(null);
  const fragmentNames = /* @__PURE__ */ Object.create(null);
  _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);
  const result = [nodeAndDefs, Object.keys(fragmentNames)];
  cachedFieldsAndFragmentNames.set(selectionSet, result);
  return result;
}
function getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {
  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);
  if (cached) {
    return cached;
  }
  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);
  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);
}
function _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {
  for (const selection of selectionSet.selections) {
    switch (selection.kind) {
      case Kind.FIELD: {
        const fieldName = selection.name.value;
        let fieldDef;
        if (isObjectType(parentType) || isInterfaceType(parentType)) {
          fieldDef = parentType.getFields()[fieldName];
        }
        const responseName = selection.alias ? selection.alias.value : fieldName;
        if (!nodeAndDefs[responseName]) {
          nodeAndDefs[responseName] = [];
        }
        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);
        break;
      }
      case Kind.FRAGMENT_SPREAD:
        fragmentNames[selection.name.value] = true;
        break;
      case Kind.INLINE_FRAGMENT: {
        const typeCondition = selection.typeCondition;
        const inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;
        _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);
        break;
      }
    }
  }
}
function subfieldConflicts(conflicts, responseName, node1, node2) {
  if (conflicts.length > 0) {
    return [
      [responseName, conflicts.map(([reason]) => reason)],
      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],
      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()]
    ];
  }
}
var PairSet;
var init_OverlappingFieldsCanBeMergedRule = __esm({
  "node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_GraphQLError();
    init_kinds();
    init_printer();
    init_definition();
    init_sortValueNode();
    init_typeFromAST();
    PairSet = class {
      constructor() {
        this._data = /* @__PURE__ */ new Map();
      }
      has(a, b, areMutuallyExclusive) {
        var _this$_data$get;
        const [key1, key2] = a < b ? [a, b] : [b, a];
        const result = (_this$_data$get = this._data.get(key1)) === null || _this$_data$get === void 0 ? void 0 : _this$_data$get.get(key2);
        if (result === void 0) {
          return false;
        }
        return areMutuallyExclusive ? true : areMutuallyExclusive === result;
      }
      add(a, b, areMutuallyExclusive) {
        const [key1, key2] = a < b ? [a, b] : [b, a];
        const map2 = this._data.get(key1);
        if (map2 === void 0) {
          this._data.set(key1, /* @__PURE__ */ new Map([[key2, areMutuallyExclusive]]));
        } else {
          map2.set(key2, areMutuallyExclusive);
        }
      }
    };
  }
});

// node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs
function PossibleFragmentSpreadsRule(context) {
  return {
    InlineFragment(node) {
      const fragType = context.getType();
      const parentType = context.getParentType();
      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {
        const parentTypeStr = inspect(parentType);
        const fragTypeStr = inspect(fragType);
        context.reportError(new GraphQLError(`Fragment cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`, {
          nodes: node
        }));
      }
    },
    FragmentSpread(node) {
      const fragName = node.name.value;
      const fragType = getFragmentType(context, fragName);
      const parentType = context.getParentType();
      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {
        const parentTypeStr = inspect(parentType);
        const fragTypeStr = inspect(fragType);
        context.reportError(new GraphQLError(`Fragment "${fragName}" cannot be spread here as objects of type "${parentTypeStr}" can never be of type "${fragTypeStr}".`, {
          nodes: node
        }));
      }
    }
  };
}
function getFragmentType(context, name) {
  const frag = context.getFragment(name);
  if (frag) {
    const type2 = typeFromAST(context.getSchema(), frag.typeCondition);
    if (isCompositeType(type2)) {
      return type2;
    }
  }
}
var init_PossibleFragmentSpreadsRule = __esm({
  "node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_GraphQLError();
    init_definition();
    init_typeComparators();
    init_typeFromAST();
  }
});

// node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs
function PossibleTypeExtensionsRule(context) {
  const schema2 = context.getSchema();
  const definedTypes = /* @__PURE__ */ Object.create(null);
  for (const def of context.getDocument().definitions) {
    if (isTypeDefinitionNode(def)) {
      definedTypes[def.name.value] = def;
    }
  }
  return {
    ScalarTypeExtension: checkExtension,
    ObjectTypeExtension: checkExtension,
    InterfaceTypeExtension: checkExtension,
    UnionTypeExtension: checkExtension,
    EnumTypeExtension: checkExtension,
    InputObjectTypeExtension: checkExtension
  };
  function checkExtension(node) {
    const typeName = node.name.value;
    const defNode = definedTypes[typeName];
    const existingType = schema2 === null || schema2 === void 0 ? void 0 : schema2.getType(typeName);
    let expectedKind;
    if (defNode) {
      expectedKind = defKindToExtKind[defNode.kind];
    } else if (existingType) {
      expectedKind = typeToExtKind(existingType);
    }
    if (expectedKind) {
      if (expectedKind !== node.kind) {
        const kindStr = extensionKindToTypeName(node.kind);
        context.reportError(new GraphQLError(`Cannot extend non-${kindStr} type "${typeName}".`, {
          nodes: defNode ? [defNode, node] : node
        }));
      }
    } else {
      const allTypeNames = Object.keys({
        ...definedTypes,
        ...schema2 === null || schema2 === void 0 ? void 0 : schema2.getTypeMap()
      });
      const suggestedTypes = suggestionList(typeName, allTypeNames);
      context.reportError(new GraphQLError(`Cannot extend type "${typeName}" because it is not defined.` + didYouMean(suggestedTypes), {
        nodes: node.name
      }));
    }
  }
}
function typeToExtKind(type2) {
  if (isScalarType(type2)) {
    return Kind.SCALAR_TYPE_EXTENSION;
  }
  if (isObjectType(type2)) {
    return Kind.OBJECT_TYPE_EXTENSION;
  }
  if (isInterfaceType(type2)) {
    return Kind.INTERFACE_TYPE_EXTENSION;
  }
  if (isUnionType(type2)) {
    return Kind.UNION_TYPE_EXTENSION;
  }
  if (isEnumType(type2)) {
    return Kind.ENUM_TYPE_EXTENSION;
  }
  if (isInputObjectType(type2)) {
    return Kind.INPUT_OBJECT_TYPE_EXTENSION;
  }
  invariant(false, "Unexpected type: " + inspect(type2));
}
function extensionKindToTypeName(kind) {
  switch (kind) {
    case Kind.SCALAR_TYPE_EXTENSION:
      return "scalar";
    case Kind.OBJECT_TYPE_EXTENSION:
      return "object";
    case Kind.INTERFACE_TYPE_EXTENSION:
      return "interface";
    case Kind.UNION_TYPE_EXTENSION:
      return "union";
    case Kind.ENUM_TYPE_EXTENSION:
      return "enum";
    case Kind.INPUT_OBJECT_TYPE_EXTENSION:
      return "input object";
    default:
      invariant(false, "Unexpected kind: " + inspect(kind));
  }
}
var defKindToExtKind;
var init_PossibleTypeExtensionsRule = __esm({
  "node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_didYouMean();
    init_inspect();
    init_invariant();
    init_suggestionList();
    init_GraphQLError();
    init_kinds();
    init_predicates();
    init_definition();
    defKindToExtKind = {
      [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,
      [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,
      [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,
      [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,
      [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,
      [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION
    };
  }
});

// node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs
function ProvidedRequiredArgumentsRule(context) {
  return {
    ...ProvidedRequiredArgumentsOnDirectivesRule(context),
    Field: {
      leave(fieldNode) {
        var _fieldNode$arguments;
        const fieldDef = context.getFieldDef();
        if (!fieldDef) {
          return false;
        }
        const providedArgs = new Set((_fieldNode$arguments = fieldNode.arguments) === null || _fieldNode$arguments === void 0 ? void 0 : _fieldNode$arguments.map((arg) => arg.name.value));
        for (const argDef of fieldDef.args) {
          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {
            const argTypeStr = inspect(argDef.type);
            context.reportError(new GraphQLError(`Field "${fieldDef.name}" argument "${argDef.name}" of type "${argTypeStr}" is required, but it was not provided.`, {
              nodes: fieldNode
            }));
          }
        }
      }
    }
  };
}
function ProvidedRequiredArgumentsOnDirectivesRule(context) {
  var _schema$getDirectives;
  const requiredArgsMap = /* @__PURE__ */ Object.create(null);
  const schema2 = context.getSchema();
  const definedDirectives = (_schema$getDirectives = schema2 === null || schema2 === void 0 ? void 0 : schema2.getDirectives()) !== null && _schema$getDirectives !== void 0 ? _schema$getDirectives : specifiedDirectives;
  for (const directive of definedDirectives) {
    requiredArgsMap[directive.name] = keyMap(directive.args.filter(isRequiredArgument), (arg) => arg.name);
  }
  const astDefinitions = context.getDocument().definitions;
  for (const def of astDefinitions) {
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      var _def$arguments;
      const argNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];
      requiredArgsMap[def.name.value] = keyMap(argNodes.filter(isRequiredArgumentNode), (arg) => arg.name.value);
    }
  }
  return {
    Directive: {
      leave(directiveNode) {
        const directiveName = directiveNode.name.value;
        const requiredArgs = requiredArgsMap[directiveName];
        if (requiredArgs) {
          var _directiveNode$argume;
          const argNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));
          for (const [argName, argDef] of Object.entries(requiredArgs)) {
            if (!argNodeMap.has(argName)) {
              const argType = isType(argDef.type) ? inspect(argDef.type) : print(argDef.type);
              context.reportError(new GraphQLError(`Directive "@${directiveName}" argument "${argName}" of type "${argType}" is required, but it was not provided.`, {
                nodes: directiveNode
              }));
            }
          }
        }
      }
    }
  };
}
function isRequiredArgumentNode(arg) {
  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;
}
var init_ProvidedRequiredArgumentsRule = __esm({
  "node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_keyMap();
    init_GraphQLError();
    init_kinds();
    init_printer();
    init_definition();
    init_directives();
  }
});

// node_modules/graphql/validation/rules/ScalarLeafsRule.mjs
function ScalarLeafsRule(context) {
  return {
    Field(node) {
      const type2 = context.getType();
      const selectionSet = node.selectionSet;
      if (type2) {
        if (isLeafType(getNamedType(type2))) {
          if (selectionSet) {
            const fieldName = node.name.value;
            const typeStr = inspect(type2);
            context.reportError(new GraphQLError(`Field "${fieldName}" must not have a selection since type "${typeStr}" has no subfields.`, {
              nodes: selectionSet
            }));
          }
        } else if (!selectionSet) {
          const fieldName = node.name.value;
          const typeStr = inspect(type2);
          context.reportError(new GraphQLError(`Field "${fieldName}" of type "${typeStr}" must have a selection of subfields. Did you mean "${fieldName} { ... }"?`, {
            nodes: node
          }));
        }
      }
    }
  };
}
var init_ScalarLeafsRule = __esm({
  "node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_GraphQLError();
    init_definition();
  }
});

// node_modules/graphql/jsutils/printPathArray.mjs
function printPathArray(path2) {
  return path2.map((key) => typeof key === "number" ? "[" + key.toString() + "]" : "." + key).join("");
}
var init_printPathArray = __esm({
  "node_modules/graphql/jsutils/printPathArray.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/jsutils/Path.mjs
function addPath(prev, key, typename) {
  return {
    prev,
    key,
    typename
  };
}
function pathToArray(path2) {
  const flattened = [];
  let curr = path2;
  while (curr) {
    flattened.push(curr.key);
    curr = curr.prev;
  }
  return flattened.reverse();
}
var init_Path = __esm({
  "node_modules/graphql/jsutils/Path.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/utilities/coerceInputValue.mjs
function coerceInputValue(inputValue, type2, onError = defaultOnError) {
  return coerceInputValueImpl(inputValue, type2, onError, void 0);
}
function defaultOnError(path2, invalidValue, error) {
  let errorPrefix = "Invalid value " + inspect(invalidValue);
  if (path2.length > 0) {
    errorPrefix += ` at "value${printPathArray(path2)}"`;
  }
  error.message = errorPrefix + ": " + error.message;
  throw error;
}
function coerceInputValueImpl(inputValue, type2, onError, path2) {
  if (isNonNullType(type2)) {
    if (inputValue != null) {
      return coerceInputValueImpl(inputValue, type2.ofType, onError, path2);
    }
    onError(pathToArray(path2), inputValue, new GraphQLError(`Expected non-nullable type "${inspect(type2)}" not to be null.`));
    return;
  }
  if (inputValue == null) {
    return null;
  }
  if (isListType(type2)) {
    const itemType = type2.ofType;
    if (isIterableObject(inputValue)) {
      return Array.from(inputValue, (itemValue, index) => {
        const itemPath = addPath(path2, index, void 0);
        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
      });
    }
    return [coerceInputValueImpl(inputValue, itemType, onError, path2)];
  }
  if (isInputObjectType(type2)) {
    if (!isObjectLike(inputValue)) {
      onError(pathToArray(path2), inputValue, new GraphQLError(`Expected type "${type2.name}" to be an object.`));
      return;
    }
    const coercedValue = {};
    const fieldDefs = type2.getFields();
    for (const field of Object.values(fieldDefs)) {
      const fieldValue = inputValue[field.name];
      if (fieldValue === void 0) {
        if (field.defaultValue !== void 0) {
          coercedValue[field.name] = field.defaultValue;
        } else if (isNonNullType(field.type)) {
          const typeStr = inspect(field.type);
          onError(pathToArray(path2), inputValue, new GraphQLError(`Field "${field.name}" of required type "${typeStr}" was not provided.`));
        }
        continue;
      }
      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path2, field.name, type2.name));
    }
    for (const fieldName of Object.keys(inputValue)) {
      if (!fieldDefs[fieldName]) {
        const suggestions = suggestionList(fieldName, Object.keys(type2.getFields()));
        onError(pathToArray(path2), inputValue, new GraphQLError(`Field "${fieldName}" is not defined by type "${type2.name}".` + didYouMean(suggestions)));
      }
    }
    return coercedValue;
  }
  if (isLeafType(type2)) {
    let parseResult;
    try {
      parseResult = type2.parseValue(inputValue);
    } catch (error) {
      if (error instanceof GraphQLError) {
        onError(pathToArray(path2), inputValue, error);
      } else {
        onError(pathToArray(path2), inputValue, new GraphQLError(`Expected type "${type2.name}". ` + error.message, {
          originalError: error
        }));
      }
      return;
    }
    if (parseResult === void 0) {
      onError(pathToArray(path2), inputValue, new GraphQLError(`Expected type "${type2.name}".`));
    }
    return parseResult;
  }
  invariant(false, "Unexpected input type: " + inspect(type2));
}
var init_coerceInputValue = __esm({
  "node_modules/graphql/utilities/coerceInputValue.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_didYouMean();
    init_inspect();
    init_invariant();
    init_isIterableObject();
    init_isObjectLike();
    init_Path();
    init_printPathArray();
    init_suggestionList();
    init_GraphQLError();
    init_definition();
  }
});

// node_modules/graphql/utilities/valueFromAST.mjs
function valueFromAST(valueNode, type2, variables) {
  if (!valueNode) {
    return;
  }
  if (valueNode.kind === Kind.VARIABLE) {
    const variableName = valueNode.name.value;
    if (variables == null || variables[variableName] === void 0) {
      return;
    }
    const variableValue = variables[variableName];
    if (variableValue === null && isNonNullType(type2)) {
      return;
    }
    return variableValue;
  }
  if (isNonNullType(type2)) {
    if (valueNode.kind === Kind.NULL) {
      return;
    }
    return valueFromAST(valueNode, type2.ofType, variables);
  }
  if (valueNode.kind === Kind.NULL) {
    return null;
  }
  if (isListType(type2)) {
    const itemType = type2.ofType;
    if (valueNode.kind === Kind.LIST) {
      const coercedValues = [];
      for (const itemNode of valueNode.values) {
        if (isMissingVariable(itemNode, variables)) {
          if (isNonNullType(itemType)) {
            return;
          }
          coercedValues.push(null);
        } else {
          const itemValue = valueFromAST(itemNode, itemType, variables);
          if (itemValue === void 0) {
            return;
          }
          coercedValues.push(itemValue);
        }
      }
      return coercedValues;
    }
    const coercedValue = valueFromAST(valueNode, itemType, variables);
    if (coercedValue === void 0) {
      return;
    }
    return [coercedValue];
  }
  if (isInputObjectType(type2)) {
    if (valueNode.kind !== Kind.OBJECT) {
      return;
    }
    const coercedObj = /* @__PURE__ */ Object.create(null);
    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);
    for (const field of Object.values(type2.getFields())) {
      const fieldNode = fieldNodes[field.name];
      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
        if (field.defaultValue !== void 0) {
          coercedObj[field.name] = field.defaultValue;
        } else if (isNonNullType(field.type)) {
          return;
        }
        continue;
      }
      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);
      if (fieldValue === void 0) {
        return;
      }
      coercedObj[field.name] = fieldValue;
    }
    return coercedObj;
  }
  if (isLeafType(type2)) {
    let result;
    try {
      result = type2.parseLiteral(valueNode, variables);
    } catch (_error) {
      return;
    }
    if (result === void 0) {
      return;
    }
    return result;
  }
  invariant(false, "Unexpected input type: " + inspect(type2));
}
function isMissingVariable(valueNode, variables) {
  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === void 0);
}
var init_valueFromAST = __esm({
  "node_modules/graphql/utilities/valueFromAST.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_invariant();
    init_keyMap();
    init_kinds();
    init_definition();
  }
});

// node_modules/graphql/execution/values.mjs
function getVariableValues(schema2, varDefNodes, inputs, options) {
  const errors = [];
  const maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;
  try {
    const coerced = coerceVariableValues(schema2, varDefNodes, inputs, (error) => {
      if (maxErrors != null && errors.length >= maxErrors) {
        throw new GraphQLError("Too many errors processing variables, error limit reached. Execution aborted.");
      }
      errors.push(error);
    });
    if (errors.length === 0) {
      return {
        coerced
      };
    }
  } catch (error) {
    errors.push(error);
  }
  return {
    errors
  };
}
function coerceVariableValues(schema2, varDefNodes, inputs, onError) {
  const coercedValues = {};
  for (const varDefNode of varDefNodes) {
    const varName = varDefNode.variable.name.value;
    const varType = typeFromAST(schema2, varDefNode.type);
    if (!isInputType(varType)) {
      const varTypeStr = print(varDefNode.type);
      onError(new GraphQLError(`Variable "$${varName}" expected value of type "${varTypeStr}" which cannot be used as an input type.`, {
        nodes: varDefNode.type
      }));
      continue;
    }
    if (!hasOwnProperty(inputs, varName)) {
      if (varDefNode.defaultValue) {
        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);
      } else if (isNonNullType(varType)) {
        const varTypeStr = inspect(varType);
        onError(new GraphQLError(`Variable "$${varName}" of required type "${varTypeStr}" was not provided.`, {
          nodes: varDefNode
        }));
      }
      continue;
    }
    const value = inputs[varName];
    if (value === null && isNonNullType(varType)) {
      const varTypeStr = inspect(varType);
      onError(new GraphQLError(`Variable "$${varName}" of non-null type "${varTypeStr}" must not be null.`, {
        nodes: varDefNode
      }));
      continue;
    }
    coercedValues[varName] = coerceInputValue(value, varType, (path2, invalidValue, error) => {
      let prefix = `Variable "$${varName}" got invalid value ` + inspect(invalidValue);
      if (path2.length > 0) {
        prefix += ` at "${varName}${printPathArray(path2)}"`;
      }
      onError(new GraphQLError(prefix + "; " + error.message, {
        nodes: varDefNode,
        originalError: error.originalError
      }));
    });
  }
  return coercedValues;
}
function getArgumentValues(def, node, variableValues) {
  var _node$arguments;
  const coercedValues = {};
  const argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);
  for (const argDef of def.args) {
    const name = argDef.name;
    const argType = argDef.type;
    const argumentNode = argNodeMap[name];
    if (!argumentNode) {
      if (argDef.defaultValue !== void 0) {
        coercedValues[name] = argDef.defaultValue;
      } else if (isNonNullType(argType)) {
        throw new GraphQLError(`Argument "${name}" of required type "${inspect(argType)}" was not provided.`, {
          nodes: node
        });
      }
      continue;
    }
    const valueNode = argumentNode.value;
    let isNull2 = valueNode.kind === Kind.NULL;
    if (valueNode.kind === Kind.VARIABLE) {
      const variableName = valueNode.name.value;
      if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {
        if (argDef.defaultValue !== void 0) {
          coercedValues[name] = argDef.defaultValue;
        } else if (isNonNullType(argType)) {
          throw new GraphQLError(`Argument "${name}" of required type "${inspect(argType)}" was provided the variable "$${variableName}" which was not provided a runtime value.`, {
            nodes: valueNode
          });
        }
        continue;
      }
      isNull2 = variableValues[variableName] == null;
    }
    if (isNull2 && isNonNullType(argType)) {
      throw new GraphQLError(`Argument "${name}" of non-null type "${inspect(argType)}" must not be null.`, {
        nodes: valueNode
      });
    }
    const coercedValue = valueFromAST(valueNode, argType, variableValues);
    if (coercedValue === void 0) {
      throw new GraphQLError(`Argument "${name}" has invalid value ${print(valueNode)}.`, {
        nodes: valueNode
      });
    }
    coercedValues[name] = coercedValue;
  }
  return coercedValues;
}
function getDirectiveValues(directiveDef, node, variableValues) {
  var _node$directives;
  const directiveNode = (_node$directives = node.directives) === null || _node$directives === void 0 ? void 0 : _node$directives.find((directive) => directive.name.value === directiveDef.name);
  if (directiveNode) {
    return getArgumentValues(directiveDef, directiveNode, variableValues);
  }
}
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
var init_values = __esm({
  "node_modules/graphql/execution/values.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_keyMap();
    init_printPathArray();
    init_GraphQLError();
    init_kinds();
    init_printer();
    init_definition();
    init_coerceInputValue();
    init_typeFromAST();
    init_valueFromAST();
  }
});

// node_modules/graphql/execution/collectFields.mjs
function collectFields(schema2, fragments, variableValues, runtimeType, selectionSet) {
  const fields = /* @__PURE__ */ new Map();
  collectFieldsImpl(schema2, fragments, variableValues, runtimeType, selectionSet, fields, /* @__PURE__ */ new Set());
  return fields;
}
function collectSubfields(schema2, fragments, variableValues, returnType, fieldNodes) {
  const subFieldNodes = /* @__PURE__ */ new Map();
  const visitedFragmentNames = /* @__PURE__ */ new Set();
  for (const node of fieldNodes) {
    if (node.selectionSet) {
      collectFieldsImpl(schema2, fragments, variableValues, returnType, node.selectionSet, subFieldNodes, visitedFragmentNames);
    }
  }
  return subFieldNodes;
}
function collectFieldsImpl(schema2, fragments, variableValues, runtimeType, selectionSet, fields, visitedFragmentNames) {
  for (const selection of selectionSet.selections) {
    switch (selection.kind) {
      case Kind.FIELD: {
        if (!shouldIncludeNode(variableValues, selection)) {
          continue;
        }
        const name = getFieldEntryKey(selection);
        const fieldList = fields.get(name);
        if (fieldList !== void 0) {
          fieldList.push(selection);
        } else {
          fields.set(name, [selection]);
        }
        break;
      }
      case Kind.INLINE_FRAGMENT: {
        if (!shouldIncludeNode(variableValues, selection) || !doesFragmentConditionMatch(schema2, selection, runtimeType)) {
          continue;
        }
        collectFieldsImpl(schema2, fragments, variableValues, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
        break;
      }
      case Kind.FRAGMENT_SPREAD: {
        const fragName = selection.name.value;
        if (visitedFragmentNames.has(fragName) || !shouldIncludeNode(variableValues, selection)) {
          continue;
        }
        visitedFragmentNames.add(fragName);
        const fragment = fragments[fragName];
        if (!fragment || !doesFragmentConditionMatch(schema2, fragment, runtimeType)) {
          continue;
        }
        collectFieldsImpl(schema2, fragments, variableValues, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
        break;
      }
    }
  }
}
function shouldIncludeNode(variableValues, node) {
  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);
  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
    return false;
  }
  const include = getDirectiveValues(GraphQLIncludeDirective, node, variableValues);
  if ((include === null || include === void 0 ? void 0 : include.if) === false) {
    return false;
  }
  return true;
}
function doesFragmentConditionMatch(schema2, fragment, type2) {
  const typeConditionNode = fragment.typeCondition;
  if (!typeConditionNode) {
    return true;
  }
  const conditionalType = typeFromAST(schema2, typeConditionNode);
  if (conditionalType === type2) {
    return true;
  }
  if (isAbstractType(conditionalType)) {
    return schema2.isSubType(conditionalType, type2);
  }
  return false;
}
function getFieldEntryKey(node) {
  return node.alias ? node.alias.value : node.name.value;
}
var init_collectFields = __esm({
  "node_modules/graphql/execution/collectFields.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_kinds();
    init_definition();
    init_directives();
    init_typeFromAST();
    init_values();
  }
});

// node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs
function SingleFieldSubscriptionsRule(context) {
  return {
    OperationDefinition(node) {
      if (node.operation === "subscription") {
        const schema2 = context.getSchema();
        const subscriptionType = schema2.getSubscriptionType();
        if (subscriptionType) {
          const operationName = node.name ? node.name.value : null;
          const variableValues = /* @__PURE__ */ Object.create(null);
          const document = context.getDocument();
          const fragments = /* @__PURE__ */ Object.create(null);
          for (const definition of document.definitions) {
            if (definition.kind === Kind.FRAGMENT_DEFINITION) {
              fragments[definition.name.value] = definition;
            }
          }
          const fields = collectFields(schema2, fragments, variableValues, subscriptionType, node.selectionSet);
          if (fields.size > 1) {
            const fieldSelectionLists = [...fields.values()];
            const extraFieldSelectionLists = fieldSelectionLists.slice(1);
            const extraFieldSelections = extraFieldSelectionLists.flat();
            context.reportError(new GraphQLError(operationName != null ? `Subscription "${operationName}" must select only one top level field.` : "Anonymous Subscription must select only one top level field.", {
              nodes: extraFieldSelections
            }));
          }
          for (const fieldNodes of fields.values()) {
            const field = fieldNodes[0];
            const fieldName = field.name.value;
            if (fieldName.startsWith("__")) {
              context.reportError(new GraphQLError(operationName != null ? `Subscription "${operationName}" must not select an introspection top level field.` : "Anonymous Subscription must not select an introspection top level field.", {
                nodes: fieldNodes
              }));
            }
          }
        }
      }
    }
  };
}
var init_SingleFieldSubscriptionsRule = __esm({
  "node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
    init_kinds();
    init_collectFields();
  }
});

// node_modules/graphql/jsutils/groupBy.mjs
function groupBy(list, keyFn) {
  const result = /* @__PURE__ */ new Map();
  for (const item of list) {
    const key = keyFn(item);
    const group = result.get(key);
    if (group === void 0) {
      result.set(key, [item]);
    } else {
      group.push(item);
    }
  }
  return result;
}
var init_groupBy = __esm({
  "node_modules/graphql/jsutils/groupBy.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs
function UniqueArgumentDefinitionNamesRule(context) {
  return {
    DirectiveDefinition(directiveNode) {
      var _directiveNode$argume;
      const argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];
      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);
    },
    InterfaceTypeDefinition: checkArgUniquenessPerField,
    InterfaceTypeExtension: checkArgUniquenessPerField,
    ObjectTypeDefinition: checkArgUniquenessPerField,
    ObjectTypeExtension: checkArgUniquenessPerField
  };
  function checkArgUniquenessPerField(typeNode) {
    var _typeNode$fields;
    const typeName = typeNode.name.value;
    const fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];
    for (const fieldDef of fieldNodes) {
      var _fieldDef$arguments;
      const fieldName = fieldDef.name.value;
      const argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];
      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);
    }
    return false;
  }
  function checkArgUniqueness(parentName, argumentNodes) {
    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);
    for (const [argName, argNodes] of seenArgs) {
      if (argNodes.length > 1) {
        context.reportError(new GraphQLError(`Argument "${parentName}(${argName}:)" can only be defined once.`, {
          nodes: argNodes.map((node) => node.name)
        }));
      }
    }
    return false;
  }
}
var init_UniqueArgumentDefinitionNamesRule = __esm({
  "node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_groupBy();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs
function UniqueArgumentNamesRule(context) {
  return {
    Field: checkArgUniqueness,
    Directive: checkArgUniqueness
  };
  function checkArgUniqueness(parentNode) {
    var _parentNode$arguments;
    const argumentNodes = (_parentNode$arguments = parentNode.arguments) !== null && _parentNode$arguments !== void 0 ? _parentNode$arguments : [];
    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);
    for (const [argName, argNodes] of seenArgs) {
      if (argNodes.length > 1) {
        context.reportError(new GraphQLError(`There can be only one argument named "${argName}".`, {
          nodes: argNodes.map((node) => node.name)
        }));
      }
    }
  }
}
var init_UniqueArgumentNamesRule = __esm({
  "node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_groupBy();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs
function UniqueDirectiveNamesRule(context) {
  const knownDirectiveNames = /* @__PURE__ */ Object.create(null);
  const schema2 = context.getSchema();
  return {
    DirectiveDefinition(node) {
      const directiveName = node.name.value;
      if (schema2 !== null && schema2 !== void 0 && schema2.getDirective(directiveName)) {
        context.reportError(new GraphQLError(`Directive "@${directiveName}" already exists in the schema. It cannot be redefined.`, {
          nodes: node.name
        }));
        return;
      }
      if (knownDirectiveNames[directiveName]) {
        context.reportError(new GraphQLError(`There can be only one directive named "@${directiveName}".`, {
          nodes: [knownDirectiveNames[directiveName], node.name]
        }));
      } else {
        knownDirectiveNames[directiveName] = node.name;
      }
      return false;
    }
  };
}
var init_UniqueDirectiveNamesRule = __esm({
  "node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs
function UniqueDirectivesPerLocationRule(context) {
  const uniqueDirectiveMap = /* @__PURE__ */ Object.create(null);
  const schema2 = context.getSchema();
  const definedDirectives = schema2 ? schema2.getDirectives() : specifiedDirectives;
  for (const directive of definedDirectives) {
    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;
  }
  const astDefinitions = context.getDocument().definitions;
  for (const def of astDefinitions) {
    if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      uniqueDirectiveMap[def.name.value] = !def.repeatable;
    }
  }
  const schemaDirectives = /* @__PURE__ */ Object.create(null);
  const typeDirectivesMap = /* @__PURE__ */ Object.create(null);
  return {
    enter(node) {
      if (!("directives" in node) || !node.directives) {
        return;
      }
      let seenDirectives;
      if (node.kind === Kind.SCHEMA_DEFINITION || node.kind === Kind.SCHEMA_EXTENSION) {
        seenDirectives = schemaDirectives;
      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {
        const typeName = node.name.value;
        seenDirectives = typeDirectivesMap[typeName];
        if (seenDirectives === void 0) {
          typeDirectivesMap[typeName] = seenDirectives = /* @__PURE__ */ Object.create(null);
        }
      } else {
        seenDirectives = /* @__PURE__ */ Object.create(null);
      }
      for (const directive of node.directives) {
        const directiveName = directive.name.value;
        if (uniqueDirectiveMap[directiveName]) {
          if (seenDirectives[directiveName]) {
            context.reportError(new GraphQLError(`The directive "@${directiveName}" can only be used once at this location.`, {
              nodes: [seenDirectives[directiveName], directive]
            }));
          } else {
            seenDirectives[directiveName] = directive;
          }
        }
      }
    }
  };
}
var init_UniqueDirectivesPerLocationRule = __esm({
  "node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
    init_kinds();
    init_predicates();
    init_directives();
  }
});

// node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs
function UniqueEnumValueNamesRule(context) {
  const schema2 = context.getSchema();
  const existingTypeMap = schema2 ? schema2.getTypeMap() : /* @__PURE__ */ Object.create(null);
  const knownValueNames = /* @__PURE__ */ Object.create(null);
  return {
    EnumTypeDefinition: checkValueUniqueness,
    EnumTypeExtension: checkValueUniqueness
  };
  function checkValueUniqueness(node) {
    var _node$values;
    const typeName = node.name.value;
    if (!knownValueNames[typeName]) {
      knownValueNames[typeName] = /* @__PURE__ */ Object.create(null);
    }
    const valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
    const valueNames = knownValueNames[typeName];
    for (const valueDef of valueNodes) {
      const valueName = valueDef.name.value;
      const existingType = existingTypeMap[typeName];
      if (isEnumType(existingType) && existingType.getValue(valueName)) {
        context.reportError(new GraphQLError(`Enum value "${typeName}.${valueName}" already exists in the schema. It cannot also be defined in this type extension.`, {
          nodes: valueDef.name
        }));
      } else if (valueNames[valueName]) {
        context.reportError(new GraphQLError(`Enum value "${typeName}.${valueName}" can only be defined once.`, {
          nodes: [valueNames[valueName], valueDef.name]
        }));
      } else {
        valueNames[valueName] = valueDef.name;
      }
    }
    return false;
  }
}
var init_UniqueEnumValueNamesRule = __esm({
  "node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
    init_definition();
  }
});

// node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs
function UniqueFieldDefinitionNamesRule(context) {
  const schema2 = context.getSchema();
  const existingTypeMap = schema2 ? schema2.getTypeMap() : /* @__PURE__ */ Object.create(null);
  const knownFieldNames = /* @__PURE__ */ Object.create(null);
  return {
    InputObjectTypeDefinition: checkFieldUniqueness,
    InputObjectTypeExtension: checkFieldUniqueness,
    InterfaceTypeDefinition: checkFieldUniqueness,
    InterfaceTypeExtension: checkFieldUniqueness,
    ObjectTypeDefinition: checkFieldUniqueness,
    ObjectTypeExtension: checkFieldUniqueness
  };
  function checkFieldUniqueness(node) {
    var _node$fields;
    const typeName = node.name.value;
    if (!knownFieldNames[typeName]) {
      knownFieldNames[typeName] = /* @__PURE__ */ Object.create(null);
    }
    const fieldNodes = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
    const fieldNames = knownFieldNames[typeName];
    for (const fieldDef of fieldNodes) {
      const fieldName = fieldDef.name.value;
      if (hasField(existingTypeMap[typeName], fieldName)) {
        context.reportError(new GraphQLError(`Field "${typeName}.${fieldName}" already exists in the schema. It cannot also be defined in this type extension.`, {
          nodes: fieldDef.name
        }));
      } else if (fieldNames[fieldName]) {
        context.reportError(new GraphQLError(`Field "${typeName}.${fieldName}" can only be defined once.`, {
          nodes: [fieldNames[fieldName], fieldDef.name]
        }));
      } else {
        fieldNames[fieldName] = fieldDef.name;
      }
    }
    return false;
  }
}
function hasField(type2, fieldName) {
  if (isObjectType(type2) || isInterfaceType(type2) || isInputObjectType(type2)) {
    return type2.getFields()[fieldName] != null;
  }
  return false;
}
var init_UniqueFieldDefinitionNamesRule = __esm({
  "node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
    init_definition();
  }
});

// node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs
function UniqueFragmentNamesRule(context) {
  const knownFragmentNames = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: () => false,
    FragmentDefinition(node) {
      const fragmentName = node.name.value;
      if (knownFragmentNames[fragmentName]) {
        context.reportError(new GraphQLError(`There can be only one fragment named "${fragmentName}".`, {
          nodes: [knownFragmentNames[fragmentName], node.name]
        }));
      } else {
        knownFragmentNames[fragmentName] = node.name;
      }
      return false;
    }
  };
}
var init_UniqueFragmentNamesRule = __esm({
  "node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs
function UniqueInputFieldNamesRule(context) {
  const knownNameStack = [];
  let knownNames = /* @__PURE__ */ Object.create(null);
  return {
    ObjectValue: {
      enter() {
        knownNameStack.push(knownNames);
        knownNames = /* @__PURE__ */ Object.create(null);
      },
      leave() {
        const prevKnownNames = knownNameStack.pop();
        prevKnownNames || invariant(false);
        knownNames = prevKnownNames;
      }
    },
    ObjectField(node) {
      const fieldName = node.name.value;
      if (knownNames[fieldName]) {
        context.reportError(new GraphQLError(`There can be only one input field named "${fieldName}".`, {
          nodes: [knownNames[fieldName], node.name]
        }));
      } else {
        knownNames[fieldName] = node.name;
      }
    }
  };
}
var init_UniqueInputFieldNamesRule = __esm({
  "node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_invariant();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs
function UniqueOperationNamesRule(context) {
  const knownOperationNames = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition(node) {
      const operationName = node.name;
      if (operationName) {
        if (knownOperationNames[operationName.value]) {
          context.reportError(new GraphQLError(`There can be only one operation named "${operationName.value}".`, {
            nodes: [
              knownOperationNames[operationName.value],
              operationName
            ]
          }));
        } else {
          knownOperationNames[operationName.value] = operationName;
        }
      }
      return false;
    },
    FragmentDefinition: () => false
  };
}
var init_UniqueOperationNamesRule = __esm({
  "node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs
function UniqueOperationTypesRule(context) {
  const schema2 = context.getSchema();
  const definedOperationTypes = /* @__PURE__ */ Object.create(null);
  const existingOperationTypes = schema2 ? {
    query: schema2.getQueryType(),
    mutation: schema2.getMutationType(),
    subscription: schema2.getSubscriptionType()
  } : {};
  return {
    SchemaDefinition: checkOperationTypes,
    SchemaExtension: checkOperationTypes
  };
  function checkOperationTypes(node) {
    var _node$operationTypes;
    const operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
    for (const operationType of operationTypesNodes) {
      const operation = operationType.operation;
      const alreadyDefinedOperationType = definedOperationTypes[operation];
      if (existingOperationTypes[operation]) {
        context.reportError(new GraphQLError(`Type for ${operation} already defined in the schema. It cannot be redefined.`, {
          nodes: operationType
        }));
      } else if (alreadyDefinedOperationType) {
        context.reportError(new GraphQLError(`There can be only one ${operation} type in schema.`, {
          nodes: [alreadyDefinedOperationType, operationType]
        }));
      } else {
        definedOperationTypes[operation] = operationType;
      }
    }
    return false;
  }
}
var init_UniqueOperationTypesRule = __esm({
  "node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs
function UniqueTypeNamesRule(context) {
  const knownTypeNames = /* @__PURE__ */ Object.create(null);
  const schema2 = context.getSchema();
  return {
    ScalarTypeDefinition: checkTypeName,
    ObjectTypeDefinition: checkTypeName,
    InterfaceTypeDefinition: checkTypeName,
    UnionTypeDefinition: checkTypeName,
    EnumTypeDefinition: checkTypeName,
    InputObjectTypeDefinition: checkTypeName
  };
  function checkTypeName(node) {
    const typeName = node.name.value;
    if (schema2 !== null && schema2 !== void 0 && schema2.getType(typeName)) {
      context.reportError(new GraphQLError(`Type "${typeName}" already exists in the schema. It cannot also be defined in this type definition.`, {
        nodes: node.name
      }));
      return;
    }
    if (knownTypeNames[typeName]) {
      context.reportError(new GraphQLError(`There can be only one type named "${typeName}".`, {
        nodes: [knownTypeNames[typeName], node.name]
      }));
    } else {
      knownTypeNames[typeName] = node.name;
    }
    return false;
  }
}
var init_UniqueTypeNamesRule = __esm({
  "node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs
function UniqueVariableNamesRule(context) {
  return {
    OperationDefinition(operationNode) {
      var _operationNode$variab;
      const variableDefinitions = (_operationNode$variab = operationNode.variableDefinitions) !== null && _operationNode$variab !== void 0 ? _operationNode$variab : [];
      const seenVariableDefinitions = groupBy(variableDefinitions, (node) => node.variable.name.value);
      for (const [variableName, variableNodes] of seenVariableDefinitions) {
        if (variableNodes.length > 1) {
          context.reportError(new GraphQLError(`There can be only one variable named "$${variableName}".`, {
            nodes: variableNodes.map((node) => node.variable.name)
          }));
        }
      }
    }
  };
}
var init_UniqueVariableNamesRule = __esm({
  "node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_groupBy();
    init_GraphQLError();
  }
});

// node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs
function ValuesOfCorrectTypeRule(context) {
  return {
    ListValue(node) {
      const type2 = getNullableType(context.getParentInputType());
      if (!isListType(type2)) {
        isValidValueNode(context, node);
        return false;
      }
    },
    ObjectValue(node) {
      const type2 = getNamedType(context.getInputType());
      if (!isInputObjectType(type2)) {
        isValidValueNode(context, node);
        return false;
      }
      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);
      for (const fieldDef of Object.values(type2.getFields())) {
        const fieldNode = fieldNodeMap[fieldDef.name];
        if (!fieldNode && isRequiredInputField(fieldDef)) {
          const typeStr = inspect(fieldDef.type);
          context.reportError(new GraphQLError(`Field "${type2.name}.${fieldDef.name}" of required type "${typeStr}" was not provided.`, {
            nodes: node
          }));
        }
      }
    },
    ObjectField(node) {
      const parentType = getNamedType(context.getParentInputType());
      const fieldType = context.getInputType();
      if (!fieldType && isInputObjectType(parentType)) {
        const suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));
        context.reportError(new GraphQLError(`Field "${node.name.value}" is not defined by type "${parentType.name}".` + didYouMean(suggestions), {
          nodes: node
        }));
      }
    },
    NullValue(node) {
      const type2 = context.getInputType();
      if (isNonNullType(type2)) {
        context.reportError(new GraphQLError(`Expected value of type "${inspect(type2)}", found ${print(node)}.`, {
          nodes: node
        }));
      }
    },
    EnumValue: (node) => isValidValueNode(context, node),
    IntValue: (node) => isValidValueNode(context, node),
    FloatValue: (node) => isValidValueNode(context, node),
    StringValue: (node) => isValidValueNode(context, node),
    BooleanValue: (node) => isValidValueNode(context, node)
  };
}
function isValidValueNode(context, node) {
  const locationType = context.getInputType();
  if (!locationType) {
    return;
  }
  const type2 = getNamedType(locationType);
  if (!isLeafType(type2)) {
    const typeStr = inspect(locationType);
    context.reportError(new GraphQLError(`Expected value of type "${typeStr}", found ${print(node)}.`, {
      nodes: node
    }));
    return;
  }
  try {
    const parseResult = type2.parseLiteral(node, void 0);
    if (parseResult === void 0) {
      const typeStr = inspect(locationType);
      context.reportError(new GraphQLError(`Expected value of type "${typeStr}", found ${print(node)}.`, {
        nodes: node
      }));
    }
  } catch (error) {
    const typeStr = inspect(locationType);
    if (error instanceof GraphQLError) {
      context.reportError(error);
    } else {
      context.reportError(new GraphQLError(`Expected value of type "${typeStr}", found ${print(node)}; ` + error.message, {
        nodes: node,
        originalError: error
      }));
    }
  }
}
var init_ValuesOfCorrectTypeRule = __esm({
  "node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_didYouMean();
    init_inspect();
    init_keyMap();
    init_suggestionList();
    init_GraphQLError();
    init_printer();
    init_definition();
  }
});

// node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs
function VariablesAreInputTypesRule(context) {
  return {
    VariableDefinition(node) {
      const type2 = typeFromAST(context.getSchema(), node.type);
      if (type2 !== void 0 && !isInputType(type2)) {
        const variableName = node.variable.name.value;
        const typeName = print(node.type);
        context.reportError(new GraphQLError(`Variable "$${variableName}" cannot be non-input type "${typeName}".`, {
          nodes: node.type
        }));
      }
    }
  };
}
var init_VariablesAreInputTypesRule = __esm({
  "node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
    init_printer();
    init_definition();
    init_typeFromAST();
  }
});

// node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs
function VariablesInAllowedPositionRule(context) {
  let varDefMap = /* @__PURE__ */ Object.create(null);
  return {
    OperationDefinition: {
      enter() {
        varDefMap = /* @__PURE__ */ Object.create(null);
      },
      leave(operation) {
        const usages = context.getRecursiveVariableUsages(operation);
        for (const { node, type: type2, defaultValue } of usages) {
          const varName = node.name.value;
          const varDef = varDefMap[varName];
          if (varDef && type2) {
            const schema2 = context.getSchema();
            const varType = typeFromAST(schema2, varDef.type);
            if (varType && !allowedVariableUsage(schema2, varType, varDef.defaultValue, type2, defaultValue)) {
              const varTypeStr = inspect(varType);
              const typeStr = inspect(type2);
              context.reportError(new GraphQLError(`Variable "$${varName}" of type "${varTypeStr}" used in position expecting type "${typeStr}".`, {
                nodes: [varDef, node]
              }));
            }
          }
        }
      }
    },
    VariableDefinition(node) {
      varDefMap[node.variable.name.value] = node;
    }
  };
}
function allowedVariableUsage(schema2, varType, varDefaultValue, locationType, locationDefaultValue) {
  if (isNonNullType(locationType) && !isNonNullType(varType)) {
    const hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;
    const hasLocationDefaultValue = locationDefaultValue !== void 0;
    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {
      return false;
    }
    const nullableLocationType = locationType.ofType;
    return isTypeSubTypeOf(schema2, varType, nullableLocationType);
  }
  return isTypeSubTypeOf(schema2, varType, locationType);
}
var init_VariablesInAllowedPositionRule = __esm({
  "node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    init_GraphQLError();
    init_kinds();
    init_definition();
    init_typeComparators();
    init_typeFromAST();
  }
});

// node_modules/graphql/validation/specifiedRules.mjs
var specifiedRules, specifiedSDLRules;
var init_specifiedRules = __esm({
  "node_modules/graphql/validation/specifiedRules.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_ExecutableDefinitionsRule();
    init_FieldsOnCorrectTypeRule();
    init_FragmentsOnCompositeTypesRule();
    init_KnownArgumentNamesRule();
    init_KnownDirectivesRule();
    init_KnownFragmentNamesRule();
    init_KnownTypeNamesRule();
    init_LoneAnonymousOperationRule();
    init_LoneSchemaDefinitionRule();
    init_NoFragmentCyclesRule();
    init_NoUndefinedVariablesRule();
    init_NoUnusedFragmentsRule();
    init_NoUnusedVariablesRule();
    init_OverlappingFieldsCanBeMergedRule();
    init_PossibleFragmentSpreadsRule();
    init_PossibleTypeExtensionsRule();
    init_ProvidedRequiredArgumentsRule();
    init_ScalarLeafsRule();
    init_SingleFieldSubscriptionsRule();
    init_UniqueArgumentDefinitionNamesRule();
    init_UniqueArgumentNamesRule();
    init_UniqueDirectiveNamesRule();
    init_UniqueDirectivesPerLocationRule();
    init_UniqueEnumValueNamesRule();
    init_UniqueFieldDefinitionNamesRule();
    init_UniqueFragmentNamesRule();
    init_UniqueInputFieldNamesRule();
    init_UniqueOperationNamesRule();
    init_UniqueOperationTypesRule();
    init_UniqueTypeNamesRule();
    init_UniqueVariableNamesRule();
    init_ValuesOfCorrectTypeRule();
    init_VariablesAreInputTypesRule();
    init_VariablesInAllowedPositionRule();
    specifiedRules = Object.freeze([
      ExecutableDefinitionsRule,
      UniqueOperationNamesRule,
      LoneAnonymousOperationRule,
      SingleFieldSubscriptionsRule,
      KnownTypeNamesRule,
      FragmentsOnCompositeTypesRule,
      VariablesAreInputTypesRule,
      ScalarLeafsRule,
      FieldsOnCorrectTypeRule,
      UniqueFragmentNamesRule,
      KnownFragmentNamesRule,
      NoUnusedFragmentsRule,
      PossibleFragmentSpreadsRule,
      NoFragmentCyclesRule,
      UniqueVariableNamesRule,
      NoUndefinedVariablesRule,
      NoUnusedVariablesRule,
      KnownDirectivesRule,
      UniqueDirectivesPerLocationRule,
      KnownArgumentNamesRule,
      UniqueArgumentNamesRule,
      ValuesOfCorrectTypeRule,
      ProvidedRequiredArgumentsRule,
      VariablesInAllowedPositionRule,
      OverlappingFieldsCanBeMergedRule,
      UniqueInputFieldNamesRule
    ]);
    specifiedSDLRules = Object.freeze([
      LoneSchemaDefinitionRule,
      UniqueOperationTypesRule,
      UniqueTypeNamesRule,
      UniqueEnumValueNamesRule,
      UniqueFieldDefinitionNamesRule,
      UniqueArgumentDefinitionNamesRule,
      UniqueDirectiveNamesRule,
      KnownTypeNamesRule,
      KnownDirectivesRule,
      UniqueDirectivesPerLocationRule,
      PossibleTypeExtensionsRule,
      KnownArgumentNamesOnDirectivesRule,
      UniqueArgumentNamesRule,
      UniqueInputFieldNamesRule,
      ProvidedRequiredArgumentsOnDirectivesRule
    ]);
  }
});

// node_modules/graphql/validation/ValidationContext.mjs
var ASTValidationContext, SDLValidationContext, ValidationContext;
var init_ValidationContext = __esm({
  "node_modules/graphql/validation/ValidationContext.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_kinds();
    init_visitor();
    init_TypeInfo();
    ASTValidationContext = class {
      constructor(ast, onError) {
        this._ast = ast;
        this._fragments = void 0;
        this._fragmentSpreads = /* @__PURE__ */ new Map();
        this._recursivelyReferencedFragments = /* @__PURE__ */ new Map();
        this._onError = onError;
      }
      get [Symbol.toStringTag]() {
        return "ASTValidationContext";
      }
      reportError(error) {
        this._onError(error);
      }
      getDocument() {
        return this._ast;
      }
      getFragment(name) {
        let fragments;
        if (this._fragments) {
          fragments = this._fragments;
        } else {
          fragments = /* @__PURE__ */ Object.create(null);
          for (const defNode of this.getDocument().definitions) {
            if (defNode.kind === Kind.FRAGMENT_DEFINITION) {
              fragments[defNode.name.value] = defNode;
            }
          }
          this._fragments = fragments;
        }
        return fragments[name];
      }
      getFragmentSpreads(node) {
        let spreads = this._fragmentSpreads.get(node);
        if (!spreads) {
          spreads = [];
          const setsToVisit = [node];
          let set2;
          while (set2 = setsToVisit.pop()) {
            for (const selection of set2.selections) {
              if (selection.kind === Kind.FRAGMENT_SPREAD) {
                spreads.push(selection);
              } else if (selection.selectionSet) {
                setsToVisit.push(selection.selectionSet);
              }
            }
          }
          this._fragmentSpreads.set(node, spreads);
        }
        return spreads;
      }
      getRecursivelyReferencedFragments(operation) {
        let fragments = this._recursivelyReferencedFragments.get(operation);
        if (!fragments) {
          fragments = [];
          const collectedNames = /* @__PURE__ */ Object.create(null);
          const nodesToVisit = [operation.selectionSet];
          let node;
          while (node = nodesToVisit.pop()) {
            for (const spread of this.getFragmentSpreads(node)) {
              const fragName = spread.name.value;
              if (collectedNames[fragName] !== true) {
                collectedNames[fragName] = true;
                const fragment = this.getFragment(fragName);
                if (fragment) {
                  fragments.push(fragment);
                  nodesToVisit.push(fragment.selectionSet);
                }
              }
            }
          }
          this._recursivelyReferencedFragments.set(operation, fragments);
        }
        return fragments;
      }
    };
    SDLValidationContext = class extends ASTValidationContext {
      constructor(ast, schema2, onError) {
        super(ast, onError);
        this._schema = schema2;
      }
      get [Symbol.toStringTag]() {
        return "SDLValidationContext";
      }
      getSchema() {
        return this._schema;
      }
    };
    ValidationContext = class extends ASTValidationContext {
      constructor(schema2, ast, typeInfo, onError) {
        super(ast, onError);
        this._schema = schema2;
        this._typeInfo = typeInfo;
        this._variableUsages = /* @__PURE__ */ new Map();
        this._recursiveVariableUsages = /* @__PURE__ */ new Map();
      }
      get [Symbol.toStringTag]() {
        return "ValidationContext";
      }
      getSchema() {
        return this._schema;
      }
      getVariableUsages(node) {
        let usages = this._variableUsages.get(node);
        if (!usages) {
          const newUsages = [];
          const typeInfo = new TypeInfo(this._schema);
          visit(node, visitWithTypeInfo(typeInfo, {
            VariableDefinition: () => false,
            Variable(variable) {
              newUsages.push({
                node: variable,
                type: typeInfo.getInputType(),
                defaultValue: typeInfo.getDefaultValue()
              });
            }
          }));
          usages = newUsages;
          this._variableUsages.set(node, usages);
        }
        return usages;
      }
      getRecursiveVariableUsages(operation) {
        let usages = this._recursiveVariableUsages.get(operation);
        if (!usages) {
          usages = this.getVariableUsages(operation);
          for (const frag of this.getRecursivelyReferencedFragments(operation)) {
            usages = usages.concat(this.getVariableUsages(frag));
          }
          this._recursiveVariableUsages.set(operation, usages);
        }
        return usages;
      }
      getType() {
        return this._typeInfo.getType();
      }
      getParentType() {
        return this._typeInfo.getParentType();
      }
      getInputType() {
        return this._typeInfo.getInputType();
      }
      getParentInputType() {
        return this._typeInfo.getParentInputType();
      }
      getFieldDef() {
        return this._typeInfo.getFieldDef();
      }
      getDirective() {
        return this._typeInfo.getDirective();
      }
      getArgument() {
        return this._typeInfo.getArgument();
      }
      getEnumValue() {
        return this._typeInfo.getEnumValue();
      }
    };
  }
});

// node_modules/graphql/validation/validate.mjs
function validate(schema2, documentAST, rules = specifiedRules, options, typeInfo = new TypeInfo(schema2)) {
  var _options$maxErrors;
  const maxErrors = (_options$maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors) !== null && _options$maxErrors !== void 0 ? _options$maxErrors : 100;
  documentAST || devAssert(false, "Must provide document.");
  assertValidSchema(schema2);
  const abortObj = Object.freeze({});
  const errors = [];
  const context = new ValidationContext(schema2, documentAST, typeInfo, (error) => {
    if (errors.length >= maxErrors) {
      errors.push(new GraphQLError("Too many validation errors, error limit reached. Validation aborted."));
      throw abortObj;
    }
    errors.push(error);
  });
  const visitor = visitInParallel(rules.map((rule) => rule(context)));
  try {
    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));
  } catch (e) {
    if (e !== abortObj) {
      throw e;
    }
  }
  return errors;
}
function validateSDL(documentAST, schemaToExtend, rules = specifiedSDLRules) {
  const errors = [];
  const context = new SDLValidationContext(documentAST, schemaToExtend, (error) => {
    errors.push(error);
  });
  const visitors = rules.map((rule) => rule(context));
  visit(documentAST, visitInParallel(visitors));
  return errors;
}
function assertValidSDL(documentAST) {
  const errors = validateSDL(documentAST);
  if (errors.length !== 0) {
    throw new Error(errors.map((error) => error.message).join("\n\n"));
  }
}
function assertValidSDLExtension(documentAST, schema2) {
  const errors = validateSDL(documentAST, schema2);
  if (errors.length !== 0) {
    throw new Error(errors.map((error) => error.message).join("\n\n"));
  }
}
var init_validate2 = __esm({
  "node_modules/graphql/validation/validate.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_GraphQLError();
    init_visitor();
    init_validate();
    init_TypeInfo();
    init_specifiedRules();
    init_ValidationContext();
  }
});

// node_modules/graphql/jsutils/memoize3.mjs
function memoize3(fn) {
  let cache0;
  return function memoized(a1, a2, a3) {
    if (cache0 === void 0) {
      cache0 = /* @__PURE__ */ new WeakMap();
    }
    let cache1 = cache0.get(a1);
    if (cache1 === void 0) {
      cache1 = /* @__PURE__ */ new WeakMap();
      cache0.set(a1, cache1);
    }
    let cache2 = cache1.get(a2);
    if (cache2 === void 0) {
      cache2 = /* @__PURE__ */ new WeakMap();
      cache1.set(a2, cache2);
    }
    let fnResult = cache2.get(a3);
    if (fnResult === void 0) {
      fnResult = fn(a1, a2, a3);
      cache2.set(a3, fnResult);
    }
    return fnResult;
  };
}
var init_memoize3 = __esm({
  "node_modules/graphql/jsutils/memoize3.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/jsutils/promiseForObject.mjs
function promiseForObject(object) {
  return Promise.all(Object.values(object)).then((resolvedValues) => {
    const resolvedObject = /* @__PURE__ */ Object.create(null);
    for (const [i, key] of Object.keys(object).entries()) {
      resolvedObject[key] = resolvedValues[i];
    }
    return resolvedObject;
  });
}
var init_promiseForObject = __esm({
  "node_modules/graphql/jsutils/promiseForObject.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/jsutils/promiseReduce.mjs
function promiseReduce(values, callbackFn, initialValue) {
  let accumulator = initialValue;
  for (const value of values) {
    accumulator = isPromise(accumulator) ? accumulator.then((resolved) => callbackFn(resolved, value)) : callbackFn(accumulator, value);
  }
  return accumulator;
}
var init_promiseReduce = __esm({
  "node_modules/graphql/jsutils/promiseReduce.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_isPromise();
  }
});

// node_modules/graphql/jsutils/toError.mjs
function toError(thrownValue) {
  return thrownValue instanceof Error ? thrownValue : new NonErrorThrown(thrownValue);
}
var NonErrorThrown;
var init_toError = __esm({
  "node_modules/graphql/jsutils/toError.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_inspect();
    NonErrorThrown = class extends Error {
      constructor(thrownValue) {
        super("Unexpected error value: " + inspect(thrownValue));
        this.name = "NonErrorThrown";
        this.thrownValue = thrownValue;
      }
    };
  }
});

// node_modules/graphql/error/locatedError.mjs
function locatedError(rawOriginalError, nodes, path2) {
  var _nodes;
  const originalError = toError(rawOriginalError);
  if (isLocatedGraphQLError(originalError)) {
    return originalError;
  }
  return new GraphQLError(originalError.message, {
    nodes: (_nodes = originalError.nodes) !== null && _nodes !== void 0 ? _nodes : nodes,
    source: originalError.source,
    positions: originalError.positions,
    path: path2,
    originalError
  });
}
function isLocatedGraphQLError(error) {
  return Array.isArray(error.path);
}
var init_locatedError = __esm({
  "node_modules/graphql/error/locatedError.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_toError();
    init_GraphQLError();
  }
});

// node_modules/graphql/execution/execute.mjs
function execute(args) {
  arguments.length < 2 || devAssert(false, "graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");
  const { schema: schema2, document, variableValues, rootValue } = args;
  assertValidExecutionArguments(schema2, document, variableValues);
  const exeContext = buildExecutionContext(args);
  if (!("schema" in exeContext)) {
    return {
      errors: exeContext
    };
  }
  try {
    const { operation } = exeContext;
    const result = executeOperation(exeContext, operation, rootValue);
    if (isPromise(result)) {
      return result.then((data) => buildResponse(data, exeContext.errors), (error) => {
        exeContext.errors.push(error);
        return buildResponse(null, exeContext.errors);
      });
    }
    return buildResponse(result, exeContext.errors);
  } catch (error) {
    exeContext.errors.push(error);
    return buildResponse(null, exeContext.errors);
  }
}
function buildResponse(data, errors) {
  return errors.length === 0 ? {
    data
  } : {
    errors,
    data
  };
}
function assertValidExecutionArguments(schema2, document, rawVariableValues) {
  document || devAssert(false, "Must provide document.");
  assertValidSchema(schema2);
  rawVariableValues == null || isObjectLike(rawVariableValues) || devAssert(false, "Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.");
}
function buildExecutionContext(args) {
  var _definition$name, _operation$variableDe;
  const {
    schema: schema2,
    document,
    rootValue,
    contextValue,
    variableValues: rawVariableValues,
    operationName,
    fieldResolver,
    typeResolver,
    subscribeFieldResolver
  } = args;
  let operation;
  const fragments = /* @__PURE__ */ Object.create(null);
  for (const definition of document.definitions) {
    switch (definition.kind) {
      case Kind.OPERATION_DEFINITION:
        if (operationName == null) {
          if (operation !== void 0) {
            return [
              new GraphQLError("Must provide operation name if query contains multiple operations.")
            ];
          }
          operation = definition;
        } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
          operation = definition;
        }
        break;
      case Kind.FRAGMENT_DEFINITION:
        fragments[definition.name.value] = definition;
        break;
      default:
    }
  }
  if (!operation) {
    if (operationName != null) {
      return [new GraphQLError(`Unknown operation named "${operationName}".`)];
    }
    return [new GraphQLError("Must provide an operation.")];
  }
  const variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];
  const coercedVariableValues = getVariableValues(schema2, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {
    maxErrors: 50
  });
  if (coercedVariableValues.errors) {
    return coercedVariableValues.errors;
  }
  return {
    schema: schema2,
    fragments,
    rootValue,
    contextValue,
    operation,
    variableValues: coercedVariableValues.coerced,
    fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,
    typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,
    subscribeFieldResolver: subscribeFieldResolver !== null && subscribeFieldResolver !== void 0 ? subscribeFieldResolver : defaultFieldResolver,
    errors: []
  };
}
function executeOperation(exeContext, operation, rootValue) {
  const rootType = exeContext.schema.getRootType(operation.operation);
  if (rootType == null) {
    throw new GraphQLError(`Schema is not configured to execute ${operation.operation} operation.`, {
      nodes: operation
    });
  }
  const rootFields = collectFields(exeContext.schema, exeContext.fragments, exeContext.variableValues, rootType, operation.selectionSet);
  const path2 = void 0;
  switch (operation.operation) {
    case OperationTypeNode.QUERY:
      return executeFields(exeContext, rootType, rootValue, path2, rootFields);
    case OperationTypeNode.MUTATION:
      return executeFieldsSerially(exeContext, rootType, rootValue, path2, rootFields);
    case OperationTypeNode.SUBSCRIPTION:
      return executeFields(exeContext, rootType, rootValue, path2, rootFields);
  }
}
function executeFieldsSerially(exeContext, parentType, sourceValue, path2, fields) {
  return promiseReduce(fields.entries(), (results, [responseName, fieldNodes]) => {
    const fieldPath = addPath(path2, responseName, parentType.name);
    const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
    if (result === void 0) {
      return results;
    }
    if (isPromise(result)) {
      return result.then((resolvedResult) => {
        results[responseName] = resolvedResult;
        return results;
      });
    }
    results[responseName] = result;
    return results;
  }, /* @__PURE__ */ Object.create(null));
}
function executeFields(exeContext, parentType, sourceValue, path2, fields) {
  const results = /* @__PURE__ */ Object.create(null);
  let containsPromise = false;
  for (const [responseName, fieldNodes] of fields.entries()) {
    const fieldPath = addPath(path2, responseName, parentType.name);
    const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);
    if (result !== void 0) {
      results[responseName] = result;
      if (isPromise(result)) {
        containsPromise = true;
      }
    }
  }
  if (!containsPromise) {
    return results;
  }
  return promiseForObject(results);
}
function executeField(exeContext, parentType, source, fieldNodes, path2) {
  var _fieldDef$resolve;
  const fieldDef = getFieldDef2(exeContext.schema, parentType, fieldNodes[0]);
  if (!fieldDef) {
    return;
  }
  const returnType = fieldDef.type;
  const resolveFn = (_fieldDef$resolve = fieldDef.resolve) !== null && _fieldDef$resolve !== void 0 ? _fieldDef$resolve : exeContext.fieldResolver;
  const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path2);
  try {
    const args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues);
    const contextValue = exeContext.contextValue;
    const result = resolveFn(source, args, contextValue, info);
    let completed;
    if (isPromise(result)) {
      completed = result.then((resolved) => completeValue(exeContext, returnType, fieldNodes, info, path2, resolved));
    } else {
      completed = completeValue(exeContext, returnType, fieldNodes, info, path2, result);
    }
    if (isPromise(completed)) {
      return completed.then(void 0, (rawError) => {
        const error = locatedError(rawError, fieldNodes, pathToArray(path2));
        return handleFieldError(error, returnType, exeContext);
      });
    }
    return completed;
  } catch (rawError) {
    const error = locatedError(rawError, fieldNodes, pathToArray(path2));
    return handleFieldError(error, returnType, exeContext);
  }
}
function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path2) {
  return {
    fieldName: fieldDef.name,
    fieldNodes,
    returnType: fieldDef.type,
    parentType,
    path: path2,
    schema: exeContext.schema,
    fragments: exeContext.fragments,
    rootValue: exeContext.rootValue,
    operation: exeContext.operation,
    variableValues: exeContext.variableValues
  };
}
function handleFieldError(error, returnType, exeContext) {
  if (isNonNullType(returnType)) {
    throw error;
  }
  exeContext.errors.push(error);
  return null;
}
function completeValue(exeContext, returnType, fieldNodes, info, path2, result) {
  if (result instanceof Error) {
    throw result;
  }
  if (isNonNullType(returnType)) {
    const completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path2, result);
    if (completed === null) {
      throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);
    }
    return completed;
  }
  if (result == null) {
    return null;
  }
  if (isListType(returnType)) {
    return completeListValue(exeContext, returnType, fieldNodes, info, path2, result);
  }
  if (isLeafType(returnType)) {
    return completeLeafValue(returnType, result);
  }
  if (isAbstractType(returnType)) {
    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path2, result);
  }
  if (isObjectType(returnType)) {
    return completeObjectValue(exeContext, returnType, fieldNodes, info, path2, result);
  }
  invariant(false, "Cannot complete value of unexpected output type: " + inspect(returnType));
}
function completeListValue(exeContext, returnType, fieldNodes, info, path2, result) {
  if (!isIterableObject(result)) {
    throw new GraphQLError(`Expected Iterable, but did not find one for field "${info.parentType.name}.${info.fieldName}".`);
  }
  const itemType = returnType.ofType;
  let containsPromise = false;
  const completedResults = Array.from(result, (item, index) => {
    const itemPath = addPath(path2, index, void 0);
    try {
      let completedItem;
      if (isPromise(item)) {
        completedItem = item.then((resolved) => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved));
      } else {
        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item);
      }
      if (isPromise(completedItem)) {
        containsPromise = true;
        return completedItem.then(void 0, (rawError) => {
          const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));
          return handleFieldError(error, itemType, exeContext);
        });
      }
      return completedItem;
    } catch (rawError) {
      const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));
      return handleFieldError(error, itemType, exeContext);
    }
  });
  return containsPromise ? Promise.all(completedResults) : completedResults;
}
function completeLeafValue(returnType, result) {
  const serializedResult = returnType.serialize(result);
  if (serializedResult == null) {
    throw new Error(`Expected \`${inspect(returnType)}.serialize(${inspect(result)})\` to return non-nullable value, returned: ${inspect(serializedResult)}`);
  }
  return serializedResult;
}
function completeAbstractValue(exeContext, returnType, fieldNodes, info, path2, result) {
  var _returnType$resolveTy;
  const resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;
  const contextValue = exeContext.contextValue;
  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);
  if (isPromise(runtimeType)) {
    return runtimeType.then((resolvedRuntimeType) => completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path2, result));
  }
  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path2, result);
}
function ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {
  if (runtimeTypeName == null) {
    throw new GraphQLError(`Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}". Either the "${returnType.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`, fieldNodes);
  }
  if (isObjectType(runtimeTypeName)) {
    throw new GraphQLError("Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.");
  }
  if (typeof runtimeTypeName !== "string") {
    throw new GraphQLError(`Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${info.parentType.name}.${info.fieldName}" with value ${inspect(result)}, received "${inspect(runtimeTypeName)}".`);
  }
  const runtimeType = exeContext.schema.getType(runtimeTypeName);
  if (runtimeType == null) {
    throw new GraphQLError(`Abstract type "${returnType.name}" was resolved to a type "${runtimeTypeName}" that does not exist inside the schema.`, {
      nodes: fieldNodes
    });
  }
  if (!isObjectType(runtimeType)) {
    throw new GraphQLError(`Abstract type "${returnType.name}" was resolved to a non-object type "${runtimeTypeName}".`, {
      nodes: fieldNodes
    });
  }
  if (!exeContext.schema.isSubType(returnType, runtimeType)) {
    throw new GraphQLError(`Runtime Object type "${runtimeType.name}" is not a possible type for "${returnType.name}".`, {
      nodes: fieldNodes
    });
  }
  return runtimeType;
}
function completeObjectValue(exeContext, returnType, fieldNodes, info, path2, result) {
  const subFieldNodes = collectSubfields2(exeContext, returnType, fieldNodes);
  if (returnType.isTypeOf) {
    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);
    if (isPromise(isTypeOf)) {
      return isTypeOf.then((resolvedIsTypeOf) => {
        if (!resolvedIsTypeOf) {
          throw invalidReturnTypeError(returnType, result, fieldNodes);
        }
        return executeFields(exeContext, returnType, result, path2, subFieldNodes);
      });
    }
    if (!isTypeOf) {
      throw invalidReturnTypeError(returnType, result, fieldNodes);
    }
  }
  return executeFields(exeContext, returnType, result, path2, subFieldNodes);
}
function invalidReturnTypeError(returnType, result, fieldNodes) {
  return new GraphQLError(`Expected value of type "${returnType.name}" but got: ${inspect(result)}.`, {
    nodes: fieldNodes
  });
}
function getFieldDef2(schema2, parentType, fieldNode) {
  const fieldName = fieldNode.name.value;
  if (fieldName === SchemaMetaFieldDef.name && schema2.getQueryType() === parentType) {
    return SchemaMetaFieldDef;
  } else if (fieldName === TypeMetaFieldDef.name && schema2.getQueryType() === parentType) {
    return TypeMetaFieldDef;
  } else if (fieldName === TypeNameMetaFieldDef.name) {
    return TypeNameMetaFieldDef;
  }
  return parentType.getFields()[fieldName];
}
var collectSubfields2, defaultTypeResolver, defaultFieldResolver;
var init_execute = __esm({
  "node_modules/graphql/execution/execute.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_inspect();
    init_invariant();
    init_isIterableObject();
    init_isObjectLike();
    init_isPromise();
    init_memoize3();
    init_Path();
    init_promiseForObject();
    init_promiseReduce();
    init_GraphQLError();
    init_locatedError();
    init_ast();
    init_kinds();
    init_definition();
    init_introspection();
    init_validate();
    init_collectFields();
    init_values();
    collectSubfields2 = memoize3((exeContext, returnType, fieldNodes) => collectSubfields(exeContext.schema, exeContext.fragments, exeContext.variableValues, returnType, fieldNodes));
    defaultTypeResolver = function(value, contextValue, info, abstractType) {
      if (isObjectLike(value) && typeof value.__typename === "string") {
        return value.__typename;
      }
      const possibleTypes = info.schema.getPossibleTypes(abstractType);
      const promisedIsTypeOfResults = [];
      for (let i = 0; i < possibleTypes.length; i++) {
        const type2 = possibleTypes[i];
        if (type2.isTypeOf) {
          const isTypeOfResult = type2.isTypeOf(value, contextValue, info);
          if (isPromise(isTypeOfResult)) {
            promisedIsTypeOfResults[i] = isTypeOfResult;
          } else if (isTypeOfResult) {
            return type2.name;
          }
        }
      }
      if (promisedIsTypeOfResults.length) {
        return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {
          for (let i = 0; i < isTypeOfResults.length; i++) {
            if (isTypeOfResults[i]) {
              return possibleTypes[i].name;
            }
          }
        });
      }
    };
    defaultFieldResolver = function(source, args, contextValue, info) {
      if (isObjectLike(source) || typeof source === "function") {
        const property = source[info.fieldName];
        if (typeof property === "function") {
          return source[info.fieldName](args, contextValue, info);
        }
        return property;
      }
    };
  }
});

// node_modules/graphql/type/index.mjs
var init_type = __esm({
  "node_modules/graphql/type/index.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_schema();
    init_definition();
    init_directives();
    init_scalars();
    init_introspection();
  }
});

// node_modules/graphql/language/index.mjs
var init_language = __esm({
  "node_modules/graphql/language/index.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_source();
    init_kinds();
    init_tokenKind();
    init_parser();
    init_printer();
    init_visitor();
    init_predicates();
    init_directiveLocation();
  }
});

// node_modules/graphql/jsutils/isAsyncIterable.mjs
function isAsyncIterable(maybeAsyncIterable) {
  return typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0 ? void 0 : maybeAsyncIterable[Symbol.asyncIterator]) === "function";
}
var init_isAsyncIterable = __esm({
  "node_modules/graphql/jsutils/isAsyncIterable.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/execution/mapAsyncIterator.mjs
function mapAsyncIterator(iterable, callback) {
  const iterator = iterable[Symbol.asyncIterator]();
  async function mapResult(result) {
    if (result.done) {
      return result;
    }
    try {
      return {
        value: await callback(result.value),
        done: false
      };
    } catch (error) {
      if (typeof iterator.return === "function") {
        try {
          await iterator.return();
        } catch (_e) {
        }
      }
      throw error;
    }
  }
  return {
    async next() {
      return mapResult(await iterator.next());
    },
    async return() {
      return typeof iterator.return === "function" ? mapResult(await iterator.return()) : {
        value: void 0,
        done: true
      };
    },
    async throw(error) {
      if (typeof iterator.throw === "function") {
        return mapResult(await iterator.throw(error));
      }
      throw error;
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
var init_mapAsyncIterator = __esm({
  "node_modules/graphql/execution/mapAsyncIterator.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/execution/subscribe.mjs
async function subscribe(args) {
  arguments.length < 2 || devAssert(false, "graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");
  const {
    schema: schema2,
    document,
    rootValue,
    contextValue,
    variableValues,
    operationName,
    fieldResolver,
    subscribeFieldResolver
  } = args;
  const resultOrStream = await createSourceEventStream(schema2, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);
  if (!isAsyncIterable(resultOrStream)) {
    return resultOrStream;
  }
  const mapSourceToResponse = (payload) => execute({
    schema: schema2,
    document,
    rootValue: payload,
    contextValue,
    variableValues,
    operationName,
    fieldResolver
  });
  return mapAsyncIterator(resultOrStream, mapSourceToResponse);
}
async function createSourceEventStream(schema2, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver) {
  assertValidExecutionArguments(schema2, document, variableValues);
  const exeContext = buildExecutionContext({
    schema: schema2,
    document,
    rootValue,
    contextValue,
    variableValues,
    operationName,
    subscribeFieldResolver
  });
  if (!("schema" in exeContext)) {
    return {
      errors: exeContext
    };
  }
  try {
    const eventStream = await executeSubscription(exeContext);
    if (!isAsyncIterable(eventStream)) {
      throw new Error(`Subscription field must return Async Iterable. Received: ${inspect(eventStream)}.`);
    }
    return eventStream;
  } catch (error) {
    if (error instanceof GraphQLError) {
      return {
        errors: [error]
      };
    }
    throw error;
  }
}
async function executeSubscription(exeContext) {
  const { schema: schema2, fragments, operation, variableValues, rootValue } = exeContext;
  const rootType = schema2.getSubscriptionType();
  if (rootType == null) {
    throw new GraphQLError("Schema is not configured to execute subscription operation.", {
      nodes: operation
    });
  }
  const rootFields = collectFields(schema2, fragments, variableValues, rootType, operation.selectionSet);
  const [responseName, fieldNodes] = [...rootFields.entries()][0];
  const fieldDef = getFieldDef2(schema2, rootType, fieldNodes[0]);
  if (!fieldDef) {
    const fieldName = fieldNodes[0].name.value;
    throw new GraphQLError(`The subscription field "${fieldName}" is not defined.`, {
      nodes: fieldNodes
    });
  }
  const path2 = addPath(void 0, responseName, rootType.name);
  const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path2);
  try {
    var _fieldDef$subscribe;
    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues);
    const contextValue = exeContext.contextValue;
    const resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;
    const eventStream = await resolveFn(rootValue, args, contextValue, info);
    if (eventStream instanceof Error) {
      throw eventStream;
    }
    return eventStream;
  } catch (error) {
    throw locatedError(error, fieldNodes, pathToArray(path2));
  }
}
var init_subscribe = __esm({
  "node_modules/graphql/execution/subscribe.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_inspect();
    init_isAsyncIterable();
    init_Path();
    init_GraphQLError();
    init_locatedError();
    init_collectFields();
    init_execute();
    init_mapAsyncIterator();
    init_values();
  }
});

// node_modules/graphql/execution/index.mjs
var init_execution = __esm({
  "node_modules/graphql/execution/index.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_Path();
    init_execute();
    init_subscribe();
    init_values();
  }
});

// node_modules/graphql/validation/index.mjs
var init_validation = __esm({
  "node_modules/graphql/validation/index.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_validate2();
    init_ValidationContext();
    init_specifiedRules();
  }
});

// node_modules/graphql/error/index.mjs
var init_error = __esm({
  "node_modules/graphql/error/index.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_GraphQLError();
    init_locatedError();
  }
});

// node_modules/graphql/utilities/getIntrospectionQuery.mjs
function getIntrospectionQuery(options) {
  const optionsWithDefault = {
    descriptions: true,
    specifiedByUrl: false,
    directiveIsRepeatable: false,
    schemaDescription: false,
    inputValueDeprecation: false,
    ...options
  };
  const descriptions = optionsWithDefault.descriptions ? "description" : "";
  const specifiedByUrl = optionsWithDefault.specifiedByUrl ? "specifiedByURL" : "";
  const directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? "isRepeatable" : "";
  const schemaDescription = optionsWithDefault.schemaDescription ? descriptions : "";
  function inputDeprecation(str2) {
    return optionsWithDefault.inputValueDeprecation ? str2 : "";
  }
  return `
    query IntrospectionQuery {
      __schema {
        ${schemaDescription}
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
          ...FullType
        }
        directives {
          name
          ${descriptions}
          ${directiveIsRepeatable}
          locations
          args${inputDeprecation("(includeDeprecated: true)")} {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      ${descriptions}
      ${specifiedByUrl}
      fields(includeDeprecated: true) {
        name
        ${descriptions}
        args${inputDeprecation("(includeDeprecated: true)")} {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields${inputDeprecation("(includeDeprecated: true)")} {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        ${descriptions}
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      ${descriptions}
      type { ...TypeRef }
      defaultValue
      ${inputDeprecation("isDeprecated")}
      ${inputDeprecation("deprecationReason")}
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  `;
}
var init_getIntrospectionQuery = __esm({
  "node_modules/graphql/utilities/getIntrospectionQuery.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/graphql/utilities/getOperationAST.mjs
function getOperationAST(documentAST, operationName) {
  let operation = null;
  for (const definition of documentAST.definitions) {
    if (definition.kind === Kind.OPERATION_DEFINITION) {
      var _definition$name;
      if (operationName == null) {
        if (operation) {
          return null;
        }
        operation = definition;
      } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
        return definition;
      }
    }
  }
  return operation;
}
var init_getOperationAST = __esm({
  "node_modules/graphql/utilities/getOperationAST.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_kinds();
  }
});

// node_modules/graphql/utilities/buildClientSchema.mjs
function buildClientSchema(introspection, options) {
  isObjectLike(introspection) && isObjectLike(introspection.__schema) || devAssert(false, `Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${inspect(introspection)}.`);
  const schemaIntrospection = introspection.__schema;
  const typeMap = keyValMap(schemaIntrospection.types, (typeIntrospection) => typeIntrospection.name, (typeIntrospection) => buildType(typeIntrospection));
  for (const stdType of [...specifiedScalarTypes, ...introspectionTypes]) {
    if (typeMap[stdType.name]) {
      typeMap[stdType.name] = stdType;
    }
  }
  const queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
  const mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
  const subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null;
  const directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : [];
  return new GraphQLSchema({
    description: schemaIntrospection.description,
    query: queryType,
    mutation: mutationType,
    subscription: subscriptionType,
    types: Object.values(typeMap),
    directives,
    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
  });
  function getType(typeRef) {
    if (typeRef.kind === TypeKind.LIST) {
      const itemRef = typeRef.ofType;
      if (!itemRef) {
        throw new Error("Decorated type deeper than introspection query.");
      }
      return new GraphQLList(getType(itemRef));
    }
    if (typeRef.kind === TypeKind.NON_NULL) {
      const nullableRef = typeRef.ofType;
      if (!nullableRef) {
        throw new Error("Decorated type deeper than introspection query.");
      }
      const nullableType = getType(nullableRef);
      return new GraphQLNonNull(assertNullableType(nullableType));
    }
    return getNamedType2(typeRef);
  }
  function getNamedType2(typeRef) {
    const typeName = typeRef.name;
    if (!typeName) {
      throw new Error(`Unknown type reference: ${inspect(typeRef)}.`);
    }
    const type2 = typeMap[typeName];
    if (!type2) {
      throw new Error(`Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`);
    }
    return type2;
  }
  function getObjectType(typeRef) {
    return assertObjectType(getNamedType2(typeRef));
  }
  function getInterfaceType(typeRef) {
    return assertInterfaceType(getNamedType2(typeRef));
  }
  function buildType(type2) {
    if (type2 != null && type2.name != null && type2.kind != null) {
      switch (type2.kind) {
        case TypeKind.SCALAR:
          return buildScalarDef(type2);
        case TypeKind.OBJECT:
          return buildObjectDef(type2);
        case TypeKind.INTERFACE:
          return buildInterfaceDef(type2);
        case TypeKind.UNION:
          return buildUnionDef(type2);
        case TypeKind.ENUM:
          return buildEnumDef(type2);
        case TypeKind.INPUT_OBJECT:
          return buildInputObjectDef(type2);
      }
    }
    const typeStr = inspect(type2);
    throw new Error(`Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${typeStr}.`);
  }
  function buildScalarDef(scalarIntrospection) {
    return new GraphQLScalarType({
      name: scalarIntrospection.name,
      description: scalarIntrospection.description,
      specifiedByURL: scalarIntrospection.specifiedByURL
    });
  }
  function buildImplementationsList(implementingIntrospection) {
    if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === TypeKind.INTERFACE) {
      return [];
    }
    if (!implementingIntrospection.interfaces) {
      const implementingIntrospectionStr = inspect(implementingIntrospection);
      throw new Error(`Introspection result missing interfaces: ${implementingIntrospectionStr}.`);
    }
    return implementingIntrospection.interfaces.map(getInterfaceType);
  }
  function buildObjectDef(objectIntrospection) {
    return new GraphQLObjectType({
      name: objectIntrospection.name,
      description: objectIntrospection.description,
      interfaces: () => buildImplementationsList(objectIntrospection),
      fields: () => buildFieldDefMap(objectIntrospection)
    });
  }
  function buildInterfaceDef(interfaceIntrospection) {
    return new GraphQLInterfaceType({
      name: interfaceIntrospection.name,
      description: interfaceIntrospection.description,
      interfaces: () => buildImplementationsList(interfaceIntrospection),
      fields: () => buildFieldDefMap(interfaceIntrospection)
    });
  }
  function buildUnionDef(unionIntrospection) {
    if (!unionIntrospection.possibleTypes) {
      const unionIntrospectionStr = inspect(unionIntrospection);
      throw new Error(`Introspection result missing possibleTypes: ${unionIntrospectionStr}.`);
    }
    return new GraphQLUnionType({
      name: unionIntrospection.name,
      description: unionIntrospection.description,
      types: () => unionIntrospection.possibleTypes.map(getObjectType)
    });
  }
  function buildEnumDef(enumIntrospection) {
    if (!enumIntrospection.enumValues) {
      const enumIntrospectionStr = inspect(enumIntrospection);
      throw new Error(`Introspection result missing enumValues: ${enumIntrospectionStr}.`);
    }
    return new GraphQLEnumType({
      name: enumIntrospection.name,
      description: enumIntrospection.description,
      values: keyValMap(enumIntrospection.enumValues, (valueIntrospection) => valueIntrospection.name, (valueIntrospection) => ({
        description: valueIntrospection.description,
        deprecationReason: valueIntrospection.deprecationReason
      }))
    });
  }
  function buildInputObjectDef(inputObjectIntrospection) {
    if (!inputObjectIntrospection.inputFields) {
      const inputObjectIntrospectionStr = inspect(inputObjectIntrospection);
      throw new Error(`Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`);
    }
    return new GraphQLInputObjectType({
      name: inputObjectIntrospection.name,
      description: inputObjectIntrospection.description,
      fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields)
    });
  }
  function buildFieldDefMap(typeIntrospection) {
    if (!typeIntrospection.fields) {
      throw new Error(`Introspection result missing fields: ${inspect(typeIntrospection)}.`);
    }
    return keyValMap(typeIntrospection.fields, (fieldIntrospection) => fieldIntrospection.name, buildField);
  }
  function buildField(fieldIntrospection) {
    const type2 = getType(fieldIntrospection.type);
    if (!isOutputType(type2)) {
      const typeStr = inspect(type2);
      throw new Error(`Introspection must provide output type for fields, but received: ${typeStr}.`);
    }
    if (!fieldIntrospection.args) {
      const fieldIntrospectionStr = inspect(fieldIntrospection);
      throw new Error(`Introspection result missing field args: ${fieldIntrospectionStr}.`);
    }
    return {
      description: fieldIntrospection.description,
      deprecationReason: fieldIntrospection.deprecationReason,
      type: type2,
      args: buildInputValueDefMap(fieldIntrospection.args)
    };
  }
  function buildInputValueDefMap(inputValueIntrospections) {
    return keyValMap(inputValueIntrospections, (inputValue) => inputValue.name, buildInputValue);
  }
  function buildInputValue(inputValueIntrospection) {
    const type2 = getType(inputValueIntrospection.type);
    if (!isInputType(type2)) {
      const typeStr = inspect(type2);
      throw new Error(`Introspection must provide input type for arguments, but received: ${typeStr}.`);
    }
    const defaultValue = inputValueIntrospection.defaultValue != null ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type2) : void 0;
    return {
      description: inputValueIntrospection.description,
      type: type2,
      defaultValue,
      deprecationReason: inputValueIntrospection.deprecationReason
    };
  }
  function buildDirective(directiveIntrospection) {
    if (!directiveIntrospection.args) {
      const directiveIntrospectionStr = inspect(directiveIntrospection);
      throw new Error(`Introspection result missing directive args: ${directiveIntrospectionStr}.`);
    }
    if (!directiveIntrospection.locations) {
      const directiveIntrospectionStr = inspect(directiveIntrospection);
      throw new Error(`Introspection result missing directive locations: ${directiveIntrospectionStr}.`);
    }
    return new GraphQLDirective({
      name: directiveIntrospection.name,
      description: directiveIntrospection.description,
      isRepeatable: directiveIntrospection.isRepeatable,
      locations: directiveIntrospection.locations.slice(),
      args: buildInputValueDefMap(directiveIntrospection.args)
    });
  }
}
var init_buildClientSchema = __esm({
  "node_modules/graphql/utilities/buildClientSchema.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_inspect();
    init_isObjectLike();
    init_keyValMap();
    init_parser();
    init_definition();
    init_directives();
    init_introspection();
    init_scalars();
    init_schema();
    init_valueFromAST();
  }
});

// node_modules/graphql/utilities/extendSchema.mjs
function extendSchema(schema2, documentAST, options) {
  assertSchema(schema2);
  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(false, "Must provide valid Document AST.");
  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
    assertValidSDLExtension(documentAST, schema2);
  }
  const schemaConfig = schema2.toConfig();
  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
  return schemaConfig === extendedConfig ? schema2 : new GraphQLSchema(extendedConfig);
}
function extendSchemaImpl(schemaConfig, documentAST, options) {
  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;
  const typeDefs = [];
  const typeExtensionsMap = /* @__PURE__ */ Object.create(null);
  const directiveDefs = [];
  let schemaDef;
  const schemaExtensions = [];
  for (const def of documentAST.definitions) {
    if (def.kind === Kind.SCHEMA_DEFINITION) {
      schemaDef = def;
    } else if (def.kind === Kind.SCHEMA_EXTENSION) {
      schemaExtensions.push(def);
    } else if (isTypeDefinitionNode(def)) {
      typeDefs.push(def);
    } else if (isTypeExtensionNode(def)) {
      const extendedTypeName = def.name.value;
      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];
      typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];
    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {
      directiveDefs.push(def);
    }
  }
  if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {
    return schemaConfig;
  }
  const typeMap = /* @__PURE__ */ Object.create(null);
  for (const existingType of schemaConfig.types) {
    typeMap[existingType.name] = extendNamedType(existingType);
  }
  for (const typeNode of typeDefs) {
    var _stdTypeMap$name;
    const name = typeNode.name.value;
    typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
  }
  const operationTypes = {
    query: schemaConfig.query && replaceNamedType(schemaConfig.query),
    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
    subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),
    ...schemaDef && getOperationTypes([schemaDef]),
    ...getOperationTypes(schemaExtensions)
  };
  return {
    description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value,
    ...operationTypes,
    types: Object.values(typeMap),
    directives: [
      ...schemaConfig.directives.map(replaceDirective),
      ...directiveDefs.map(buildDirective)
    ],
    extensions: /* @__PURE__ */ Object.create(null),
    astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
    assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false
  };
  function replaceType(type2) {
    if (isListType(type2)) {
      return new GraphQLList(replaceType(type2.ofType));
    }
    if (isNonNullType(type2)) {
      return new GraphQLNonNull(replaceType(type2.ofType));
    }
    return replaceNamedType(type2);
  }
  function replaceNamedType(type2) {
    return typeMap[type2.name];
  }
  function replaceDirective(directive) {
    const config2 = directive.toConfig();
    return new GraphQLDirective({
      ...config2,
      args: mapValue(config2.args, extendArg)
    });
  }
  function extendNamedType(type2) {
    if (isIntrospectionType(type2) || isSpecifiedScalarType(type2)) {
      return type2;
    }
    if (isScalarType(type2)) {
      return extendScalarType(type2);
    }
    if (isObjectType(type2)) {
      return extendObjectType(type2);
    }
    if (isInterfaceType(type2)) {
      return extendInterfaceType(type2);
    }
    if (isUnionType(type2)) {
      return extendUnionType(type2);
    }
    if (isEnumType(type2)) {
      return extendEnumType(type2);
    }
    if (isInputObjectType(type2)) {
      return extendInputObjectType(type2);
    }
    invariant(false, "Unexpected type: " + inspect(type2));
  }
  function extendInputObjectType(type2) {
    var _typeExtensionsMap$co;
    const config2 = type2.toConfig();
    const extensions = (_typeExtensionsMap$co = typeExtensionsMap[config2.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
    return new GraphQLInputObjectType({
      ...config2,
      fields: () => ({
        ...mapValue(config2.fields, (field) => ({
          ...field,
          type: replaceType(field.type)
        })),
        ...buildInputFieldMap(extensions)
      }),
      extensionASTNodes: config2.extensionASTNodes.concat(extensions)
    });
  }
  function extendEnumType(type2) {
    var _typeExtensionsMap$ty;
    const config2 = type2.toConfig();
    const extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type2.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
    return new GraphQLEnumType({
      ...config2,
      values: { ...config2.values, ...buildEnumValueMap(extensions) },
      extensionASTNodes: config2.extensionASTNodes.concat(extensions)
    });
  }
  function extendScalarType(type2) {
    var _typeExtensionsMap$co2;
    const config2 = type2.toConfig();
    const extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config2.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];
    let specifiedByURL = config2.specifiedByURL;
    for (const extensionNode of extensions) {
      var _getSpecifiedByURL;
      specifiedByURL = (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null && _getSpecifiedByURL !== void 0 ? _getSpecifiedByURL : specifiedByURL;
    }
    return new GraphQLScalarType({
      ...config2,
      specifiedByURL,
      extensionASTNodes: config2.extensionASTNodes.concat(extensions)
    });
  }
  function extendObjectType(type2) {
    var _typeExtensionsMap$co3;
    const config2 = type2.toConfig();
    const extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config2.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
    return new GraphQLObjectType({
      ...config2,
      interfaces: () => [
        ...type2.getInterfaces().map(replaceNamedType),
        ...buildInterfaces(extensions)
      ],
      fields: () => ({
        ...mapValue(config2.fields, extendField),
        ...buildFieldMap(extensions)
      }),
      extensionASTNodes: config2.extensionASTNodes.concat(extensions)
    });
  }
  function extendInterfaceType(type2) {
    var _typeExtensionsMap$co4;
    const config2 = type2.toConfig();
    const extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config2.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
    return new GraphQLInterfaceType({
      ...config2,
      interfaces: () => [
        ...type2.getInterfaces().map(replaceNamedType),
        ...buildInterfaces(extensions)
      ],
      fields: () => ({
        ...mapValue(config2.fields, extendField),
        ...buildFieldMap(extensions)
      }),
      extensionASTNodes: config2.extensionASTNodes.concat(extensions)
    });
  }
  function extendUnionType(type2) {
    var _typeExtensionsMap$co5;
    const config2 = type2.toConfig();
    const extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config2.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
    return new GraphQLUnionType({
      ...config2,
      types: () => [
        ...type2.getTypes().map(replaceNamedType),
        ...buildUnionTypes(extensions)
      ],
      extensionASTNodes: config2.extensionASTNodes.concat(extensions)
    });
  }
  function extendField(field) {
    return {
      ...field,
      type: replaceType(field.type),
      args: field.args && mapValue(field.args, extendArg)
    };
  }
  function extendArg(arg) {
    return { ...arg, type: replaceType(arg.type) };
  }
  function getOperationTypes(nodes) {
    const opTypes = {};
    for (const node of nodes) {
      var _node$operationTypes;
      const operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
      for (const operationType of operationTypesNodes) {
        opTypes[operationType.operation] = getNamedType2(operationType.type);
      }
    }
    return opTypes;
  }
  function getNamedType2(node) {
    var _stdTypeMap$name2;
    const name = node.name.value;
    const type2 = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];
    if (type2 === void 0) {
      throw new Error(`Unknown type: "${name}".`);
    }
    return type2;
  }
  function getWrappedType(node) {
    if (node.kind === Kind.LIST_TYPE) {
      return new GraphQLList(getWrappedType(node.type));
    }
    if (node.kind === Kind.NON_NULL_TYPE) {
      return new GraphQLNonNull(getWrappedType(node.type));
    }
    return getNamedType2(node);
  }
  function buildDirective(node) {
    var _node$description;
    return new GraphQLDirective({
      name: node.name.value,
      description: (_node$description = node.description) === null || _node$description === void 0 ? void 0 : _node$description.value,
      locations: node.locations.map(({ value }) => value),
      isRepeatable: node.repeatable,
      args: buildArgumentMap(node.arguments),
      astNode: node
    });
  }
  function buildFieldMap(nodes) {
    const fieldConfigMap = /* @__PURE__ */ Object.create(null);
    for (const node of nodes) {
      var _node$fields;
      const nodeFields = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
      for (const field of nodeFields) {
        var _field$description;
        fieldConfigMap[field.name.value] = {
          type: getWrappedType(field.type),
          description: (_field$description = field.description) === null || _field$description === void 0 ? void 0 : _field$description.value,
          args: buildArgumentMap(field.arguments),
          deprecationReason: getDeprecationReason(field),
          astNode: field
        };
      }
    }
    return fieldConfigMap;
  }
  function buildArgumentMap(args) {
    const argsNodes = args !== null && args !== void 0 ? args : [];
    const argConfigMap = /* @__PURE__ */ Object.create(null);
    for (const arg of argsNodes) {
      var _arg$description;
      const type2 = getWrappedType(arg.type);
      argConfigMap[arg.name.value] = {
        type: type2,
        description: (_arg$description = arg.description) === null || _arg$description === void 0 ? void 0 : _arg$description.value,
        defaultValue: valueFromAST(arg.defaultValue, type2),
        deprecationReason: getDeprecationReason(arg),
        astNode: arg
      };
    }
    return argConfigMap;
  }
  function buildInputFieldMap(nodes) {
    const inputFieldMap = /* @__PURE__ */ Object.create(null);
    for (const node of nodes) {
      var _node$fields2;
      const fieldsNodes = (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];
      for (const field of fieldsNodes) {
        var _field$description2;
        const type2 = getWrappedType(field.type);
        inputFieldMap[field.name.value] = {
          type: type2,
          description: (_field$description2 = field.description) === null || _field$description2 === void 0 ? void 0 : _field$description2.value,
          defaultValue: valueFromAST(field.defaultValue, type2),
          deprecationReason: getDeprecationReason(field),
          astNode: field
        };
      }
    }
    return inputFieldMap;
  }
  function buildEnumValueMap(nodes) {
    const enumValueMap = /* @__PURE__ */ Object.create(null);
    for (const node of nodes) {
      var _node$values;
      const valuesNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
      for (const value of valuesNodes) {
        var _value$description;
        enumValueMap[value.name.value] = {
          description: (_value$description = value.description) === null || _value$description === void 0 ? void 0 : _value$description.value,
          deprecationReason: getDeprecationReason(value),
          astNode: value
        };
      }
    }
    return enumValueMap;
  }
  function buildInterfaces(nodes) {
    return nodes.flatMap((node) => {
      var _node$interfaces$map, _node$interfaces;
      return (_node$interfaces$map = (_node$interfaces = node.interfaces) === null || _node$interfaces === void 0 ? void 0 : _node$interfaces.map(getNamedType2)) !== null && _node$interfaces$map !== void 0 ? _node$interfaces$map : [];
    });
  }
  function buildUnionTypes(nodes) {
    return nodes.flatMap((node) => {
      var _node$types$map, _node$types;
      return (_node$types$map = (_node$types = node.types) === null || _node$types === void 0 ? void 0 : _node$types.map(getNamedType2)) !== null && _node$types$map !== void 0 ? _node$types$map : [];
    });
  }
  function buildType(astNode) {
    var _typeExtensionsMap$na;
    const name = astNode.name.value;
    const extensionASTNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];
    switch (astNode.kind) {
      case Kind.OBJECT_TYPE_DEFINITION: {
        var _astNode$description;
        const allNodes = [astNode, ...extensionASTNodes];
        return new GraphQLObjectType({
          name,
          description: (_astNode$description = astNode.description) === null || _astNode$description === void 0 ? void 0 : _astNode$description.value,
          interfaces: () => buildInterfaces(allNodes),
          fields: () => buildFieldMap(allNodes),
          astNode,
          extensionASTNodes
        });
      }
      case Kind.INTERFACE_TYPE_DEFINITION: {
        var _astNode$description2;
        const allNodes = [astNode, ...extensionASTNodes];
        return new GraphQLInterfaceType({
          name,
          description: (_astNode$description2 = astNode.description) === null || _astNode$description2 === void 0 ? void 0 : _astNode$description2.value,
          interfaces: () => buildInterfaces(allNodes),
          fields: () => buildFieldMap(allNodes),
          astNode,
          extensionASTNodes
        });
      }
      case Kind.ENUM_TYPE_DEFINITION: {
        var _astNode$description3;
        const allNodes = [astNode, ...extensionASTNodes];
        return new GraphQLEnumType({
          name,
          description: (_astNode$description3 = astNode.description) === null || _astNode$description3 === void 0 ? void 0 : _astNode$description3.value,
          values: buildEnumValueMap(allNodes),
          astNode,
          extensionASTNodes
        });
      }
      case Kind.UNION_TYPE_DEFINITION: {
        var _astNode$description4;
        const allNodes = [astNode, ...extensionASTNodes];
        return new GraphQLUnionType({
          name,
          description: (_astNode$description4 = astNode.description) === null || _astNode$description4 === void 0 ? void 0 : _astNode$description4.value,
          types: () => buildUnionTypes(allNodes),
          astNode,
          extensionASTNodes
        });
      }
      case Kind.SCALAR_TYPE_DEFINITION: {
        var _astNode$description5;
        return new GraphQLScalarType({
          name,
          description: (_astNode$description5 = astNode.description) === null || _astNode$description5 === void 0 ? void 0 : _astNode$description5.value,
          specifiedByURL: getSpecifiedByURL(astNode),
          astNode,
          extensionASTNodes
        });
      }
      case Kind.INPUT_OBJECT_TYPE_DEFINITION: {
        var _astNode$description6;
        const allNodes = [astNode, ...extensionASTNodes];
        return new GraphQLInputObjectType({
          name,
          description: (_astNode$description6 = astNode.description) === null || _astNode$description6 === void 0 ? void 0 : _astNode$description6.value,
          fields: () => buildInputFieldMap(allNodes),
          astNode,
          extensionASTNodes
        });
      }
    }
  }
}
function getDeprecationReason(node) {
  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);
  return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;
}
function getSpecifiedByURL(node) {
  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node);
  return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;
}
var stdTypeMap;
var init_extendSchema = __esm({
  "node_modules/graphql/utilities/extendSchema.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_inspect();
    init_invariant();
    init_keyMap();
    init_mapValue();
    init_kinds();
    init_predicates();
    init_definition();
    init_directives();
    init_introspection();
    init_scalars();
    init_schema();
    init_validate2();
    init_values();
    init_valueFromAST();
    stdTypeMap = keyMap([...specifiedScalarTypes, ...introspectionTypes], (type2) => type2.name);
  }
});

// node_modules/graphql/utilities/buildASTSchema.mjs
function buildASTSchema(documentAST, options) {
  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(false, "Must provide valid Document AST.");
  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
    assertValidSDL(documentAST);
  }
  const emptySchemaConfig = {
    description: void 0,
    types: [],
    directives: [],
    extensions: /* @__PURE__ */ Object.create(null),
    extensionASTNodes: [],
    assumeValid: false
  };
  const config2 = extendSchemaImpl(emptySchemaConfig, documentAST, options);
  if (config2.astNode == null) {
    for (const type2 of config2.types) {
      switch (type2.name) {
        case "Query":
          config2.query = type2;
          break;
        case "Mutation":
          config2.mutation = type2;
          break;
        case "Subscription":
          config2.subscription = type2;
          break;
      }
    }
  }
  const directives = [
    ...config2.directives,
    ...specifiedDirectives.filter((stdDirective) => config2.directives.every((directive) => directive.name !== stdDirective.name))
  ];
  return new GraphQLSchema({ ...config2, directives });
}
function buildSchema(source, options) {
  const document = parse(source, {
    noLocation: options === null || options === void 0 ? void 0 : options.noLocation,
    allowLegacyFragmentVariables: options === null || options === void 0 ? void 0 : options.allowLegacyFragmentVariables
  });
  return buildASTSchema(document, {
    assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,
    assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
  });
}
var init_buildASTSchema = __esm({
  "node_modules/graphql/utilities/buildASTSchema.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_devAssert();
    init_kinds();
    init_parser();
    init_directives();
    init_schema();
    init_validate2();
    init_extendSchema();
  }
});

// node_modules/graphql/utilities/index.mjs
var init_utilities = __esm({
  "node_modules/graphql/utilities/index.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_getIntrospectionQuery();
    init_getOperationAST();
    init_buildClientSchema();
    init_buildASTSchema();
    init_extendSchema();
    init_typeFromAST();
    init_valueFromAST();
    init_valueFromASTUntyped();
    init_astFromValue();
    init_TypeInfo();
    init_typeComparators();
  }
});

// node_modules/graphql/index.mjs
var init_graphql = __esm({
  "node_modules/graphql/index.mjs"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_version();
    init_type();
    init_language();
    init_execution();
    init_validation();
    init_error();
    init_utilities();
  }
});

// node_modules/@envelop/validation-cache/node_modules/tiny-lru/lib/tiny-lru.js
var require_tiny_lru = __commonJS({
  "node_modules/@envelop/validation-cache/node_modules/tiny-lru/lib/tiny-lru.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    !function(t, e) {
      typeof exports == "object" && typeof module != "undefined" ? module.exports = e() : typeof define == "function" && define.amd ? define(e) : (t = t || self)["tiny-lru"] = e();
    }(exports, function() {
      "use strict";
      class t {
        constructor(t2 = 0, e = 0) {
          this.first = null, this.items = /* @__PURE__ */ Object.create(null), this.last = null, this.max = t2, this.size = 0, this.ttl = e;
        }
        has(t2) {
          return t2 in this.items;
        }
        clear() {
          return this.first = null, this.items = /* @__PURE__ */ Object.create(null), this.last = null, this.size = 0, this;
        }
        delete(t2) {
          if (this.has(t2)) {
            const e = this.items[t2];
            delete this.items[t2], this.size--, e.prev !== null && (e.prev.next = e.next), e.next !== null && (e.next.prev = e.prev), this.first === e && (this.first = e.next), this.last === e && (this.last = e.prev);
          }
          return this;
        }
        evict() {
          const t2 = this.first;
          return delete this.items[t2.key], this.first = t2.next, this.first.prev = null, this.size--, this;
        }
        get(t2) {
          let e;
          if (this.has(t2)) {
            const s = this.items[t2];
            this.ttl > 0 && s.expiry <= new Date().getTime() ? this.delete(t2) : (e = s.value, this.set(t2, e, true));
          }
          return e;
        }
        keys() {
          return Object.keys(this.items);
        }
        set(t2, e, s = false) {
          let i;
          if (s || this.has(t2)) {
            if (i = this.items[t2], i.value = e, s === false && (i.expiry = this.ttl > 0 ? new Date().getTime() + this.ttl : this.ttl), this.last !== i) {
              const t3 = this.last, e2 = i.next, s2 = i.prev;
              this.first === i && (this.first = i.next), i.next = null, i.prev = this.last, t3.next = i, s2 !== null && (s2.next = e2), e2 !== null && (e2.prev = s2);
            }
          } else
            this.max > 0 && this.size === this.max && this.evict(), i = this.items[t2] = { expiry: this.ttl > 0 ? new Date().getTime() + this.ttl : this.ttl, key: t2, prev: this.last, next: null, value: e }, ++this.size == 1 ? this.first = i : this.last.next = i;
          return this.last = i, this;
        }
      }
      return function(e = 1e3, s = 0) {
        if (isNaN(e) || e < 0)
          throw new TypeError("Invalid max value");
        if (isNaN(s) || s < 0)
          throw new TypeError("Invalid ttl value");
        return new t(e, s);
      };
    });
  }
});

// node_modules/@envelop/parser-cache/node_modules/tiny-lru/lib/tiny-lru.js
var require_tiny_lru2 = __commonJS({
  "node_modules/@envelop/parser-cache/node_modules/tiny-lru/lib/tiny-lru.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    !function(t, e) {
      typeof exports == "object" && typeof module != "undefined" ? module.exports = e() : typeof define == "function" && define.amd ? define(e) : (t = t || self)["tiny-lru"] = e();
    }(exports, function() {
      "use strict";
      class t {
        constructor(t2 = 0, e = 0) {
          this.first = null, this.items = /* @__PURE__ */ Object.create(null), this.last = null, this.max = t2, this.size = 0, this.ttl = e;
        }
        has(t2) {
          return t2 in this.items;
        }
        clear() {
          return this.first = null, this.items = /* @__PURE__ */ Object.create(null), this.last = null, this.size = 0, this;
        }
        delete(t2) {
          if (this.has(t2)) {
            const e = this.items[t2];
            delete this.items[t2], this.size--, e.prev !== null && (e.prev.next = e.next), e.next !== null && (e.next.prev = e.prev), this.first === e && (this.first = e.next), this.last === e && (this.last = e.prev);
          }
          return this;
        }
        evict() {
          const t2 = this.first;
          return delete this.items[t2.key], this.first = t2.next, this.first.prev = null, this.size--, this;
        }
        get(t2) {
          let e;
          if (this.has(t2)) {
            const s = this.items[t2];
            this.ttl > 0 && s.expiry <= new Date().getTime() ? this.delete(t2) : (e = s.value, this.set(t2, e, true));
          }
          return e;
        }
        keys() {
          return Object.keys(this.items);
        }
        set(t2, e, s = false) {
          let i;
          if (s || this.has(t2)) {
            if (i = this.items[t2], i.value = e, s === false && (i.expiry = this.ttl > 0 ? new Date().getTime() + this.ttl : this.ttl), this.last !== i) {
              const t3 = this.last, e2 = i.next, s2 = i.prev;
              this.first === i && (this.first = i.next), i.next = null, i.prev = this.last, t3.next = i, s2 !== null && (s2.next = e2), e2 !== null && (e2.prev = s2);
            }
          } else
            this.max > 0 && this.size === this.max && this.evict(), i = this.items[t2] = { expiry: this.ttl > 0 ? new Date().getTime() + this.ttl : this.ttl, key: t2, prev: this.last, next: null, value: e }, ++this.size == 1 ? this.first = i : this.last.next = i;
          return this.last = i, this;
        }
      }
      return function(e = 1e3, s = 0) {
        if (isNaN(e) || e < 0)
          throw new TypeError("Invalid max value");
        if (isNaN(s) || s < 0)
          throw new TypeError("Invalid ttl value");
        return new t(e, s);
      };
    });
  }
});

// node_modules/cross-undici-fetch/dist/global-ponyfill.js
var require_global_ponyfill = __commonJS({
  "node_modules/cross-undici-fetch/dist/global-ponyfill.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    module.exports.fetch = globalThis.fetch;
    module.exports.Headers = globalThis.Headers;
    module.exports.Request = globalThis.Request;
    module.exports.Response = globalThis.Response;
    module.exports.FormData = globalThis.FormData;
    module.exports.AbortController = globalThis.AbortController;
    module.exports.ReadableStream = globalThis.ReadableStream;
    module.exports.WritableStream = globalThis.WritableStream;
    module.exports.TransformStream = globalThis.TransformStream;
    module.exports.Blob = globalThis.Blob;
    module.exports.File = globalThis.File;
    module.exports.crypto = globalThis.crypto;
    module.exports.create = () => globalThis;
  }
});

// node_modules/http-cache-semantics/index.js
var require_http_cache_semantics = __commonJS({
  "node_modules/http-cache-semantics/index.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var statusCodeCacheableByDefault = /* @__PURE__ */ new Set([
      200,
      203,
      204,
      206,
      300,
      301,
      404,
      405,
      410,
      414,
      501
    ]);
    var understoodStatuses = /* @__PURE__ */ new Set([
      200,
      203,
      204,
      300,
      301,
      302,
      303,
      307,
      308,
      404,
      405,
      410,
      414,
      501
    ]);
    var errorStatusCodes = /* @__PURE__ */ new Set([
      500,
      502,
      503,
      504
    ]);
    var hopByHopHeaders = {
      date: true,
      connection: true,
      "keep-alive": true,
      "proxy-authenticate": true,
      "proxy-authorization": true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true
    };
    var excludedFromRevalidationUpdate = {
      "content-length": true,
      "content-encoding": true,
      "transfer-encoding": true,
      "content-range": true
    };
    function toNumberOrZero(s) {
      const n = parseInt(s, 10);
      return isFinite(n) ? n : 0;
    }
    function isErrorResponse(response) {
      if (!response) {
        return true;
      }
      return errorStatusCodes.has(response.status);
    }
    function parseCacheControl(header) {
      const cc = {};
      if (!header)
        return cc;
      const parts = header.trim().split(/\s*,\s*/);
      for (const part of parts) {
        const [k, v] = part.split(/\s*=\s*/, 2);
        cc[k] = v === void 0 ? true : v.replace(/^"|"$/g, "");
      }
      return cc;
    }
    function formatCacheControl(cc) {
      let parts = [];
      for (const k in cc) {
        const v = cc[k];
        parts.push(v === true ? k : k + "=" + v);
      }
      if (!parts.length) {
        return void 0;
      }
      return parts.join(", ");
    }
    module.exports = class CachePolicy {
      constructor(req, res, {
        shared,
        cacheHeuristic,
        immutableMinTimeToLive,
        ignoreCargoCult,
        _fromObject
      } = {}) {
        if (_fromObject) {
          this._fromObject(_fromObject);
          return;
        }
        if (!res || !res.headers) {
          throw Error("Response headers missing");
        }
        this._assertRequestHasHeaders(req);
        this._responseTime = this.now();
        this._isShared = shared !== false;
        this._cacheHeuristic = cacheHeuristic !== void 0 ? cacheHeuristic : 0.1;
        this._immutableMinTtl = immutableMinTimeToLive !== void 0 ? immutableMinTimeToLive : 24 * 3600 * 1e3;
        this._status = "status" in res ? res.status : 200;
        this._resHeaders = res.headers;
        this._rescc = parseCacheControl(res.headers["cache-control"]);
        this._method = "method" in req ? req.method : "GET";
        this._url = req.url;
        this._host = req.headers.host;
        this._noAuthorization = !req.headers.authorization;
        this._reqHeaders = res.headers.vary ? req.headers : null;
        this._reqcc = parseCacheControl(req.headers["cache-control"]);
        if (ignoreCargoCult && "pre-check" in this._rescc && "post-check" in this._rescc) {
          delete this._rescc["pre-check"];
          delete this._rescc["post-check"];
          delete this._rescc["no-cache"];
          delete this._rescc["no-store"];
          delete this._rescc["must-revalidate"];
          this._resHeaders = Object.assign({}, this._resHeaders, {
            "cache-control": formatCacheControl(this._rescc)
          });
          delete this._resHeaders.expires;
          delete this._resHeaders.pragma;
        }
        if (res.headers["cache-control"] == null && /no-cache/.test(res.headers.pragma)) {
          this._rescc["no-cache"] = true;
        }
      }
      now() {
        return Date.now();
      }
      storable() {
        return !!(!this._reqcc["no-store"] && (this._method === "GET" || this._method === "HEAD" || this._method === "POST" && this._hasExplicitExpiration()) && understoodStatuses.has(this._status) && !this._rescc["no-store"] && (!this._isShared || !this._rescc.private) && (!this._isShared || this._noAuthorization || this._allowsStoringAuthenticated()) && (this._resHeaders.expires || this._rescc["max-age"] || this._isShared && this._rescc["s-maxage"] || this._rescc.public || statusCodeCacheableByDefault.has(this._status)));
      }
      _hasExplicitExpiration() {
        return this._isShared && this._rescc["s-maxage"] || this._rescc["max-age"] || this._resHeaders.expires;
      }
      _assertRequestHasHeaders(req) {
        if (!req || !req.headers) {
          throw Error("Request headers missing");
        }
      }
      satisfiesWithoutRevalidation(req) {
        this._assertRequestHasHeaders(req);
        const requestCC = parseCacheControl(req.headers["cache-control"]);
        if (requestCC["no-cache"] || /no-cache/.test(req.headers.pragma)) {
          return false;
        }
        if (requestCC["max-age"] && this.age() > requestCC["max-age"]) {
          return false;
        }
        if (requestCC["min-fresh"] && this.timeToLive() < 1e3 * requestCC["min-fresh"]) {
          return false;
        }
        if (this.stale()) {
          const allowsStale = requestCC["max-stale"] && !this._rescc["must-revalidate"] && (requestCC["max-stale"] === true || requestCC["max-stale"] > this.age() - this.maxAge());
          if (!allowsStale) {
            return false;
          }
        }
        return this._requestMatches(req, false);
      }
      _requestMatches(req, allowHeadMethod) {
        return (!this._url || this._url === req.url) && this._host === req.headers.host && (!req.method || this._method === req.method || allowHeadMethod && req.method === "HEAD") && this._varyMatches(req);
      }
      _allowsStoringAuthenticated() {
        return this._rescc["must-revalidate"] || this._rescc.public || this._rescc["s-maxage"];
      }
      _varyMatches(req) {
        if (!this._resHeaders.vary) {
          return true;
        }
        if (this._resHeaders.vary === "*") {
          return false;
        }
        const fields = this._resHeaders.vary.trim().toLowerCase().split(/\s*,\s*/);
        for (const name of fields) {
          if (req.headers[name] !== this._reqHeaders[name])
            return false;
        }
        return true;
      }
      _copyWithoutHopByHopHeaders(inHeaders) {
        const headers = {};
        for (const name in inHeaders) {
          if (hopByHopHeaders[name])
            continue;
          headers[name] = inHeaders[name];
        }
        if (inHeaders.connection) {
          const tokens = inHeaders.connection.trim().split(/\s*,\s*/);
          for (const name of tokens) {
            delete headers[name];
          }
        }
        if (headers.warning) {
          const warnings = headers.warning.split(/,/).filter((warning) => {
            return !/^\s*1[0-9][0-9]/.test(warning);
          });
          if (!warnings.length) {
            delete headers.warning;
          } else {
            headers.warning = warnings.join(",").trim();
          }
        }
        return headers;
      }
      responseHeaders() {
        const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);
        const age = this.age();
        if (age > 3600 * 24 && !this._hasExplicitExpiration() && this.maxAge() > 3600 * 24) {
          headers.warning = (headers.warning ? `${headers.warning}, ` : "") + '113 - "rfc7234 5.5.4"';
        }
        headers.age = `${Math.round(age)}`;
        headers.date = new Date(this.now()).toUTCString();
        return headers;
      }
      date() {
        const serverDate = Date.parse(this._resHeaders.date);
        if (isFinite(serverDate)) {
          return serverDate;
        }
        return this._responseTime;
      }
      age() {
        let age = this._ageValue();
        const residentTime = (this.now() - this._responseTime) / 1e3;
        return age + residentTime;
      }
      _ageValue() {
        return toNumberOrZero(this._resHeaders.age);
      }
      maxAge() {
        if (!this.storable() || this._rescc["no-cache"]) {
          return 0;
        }
        if (this._isShared && (this._resHeaders["set-cookie"] && !this._rescc.public && !this._rescc.immutable)) {
          return 0;
        }
        if (this._resHeaders.vary === "*") {
          return 0;
        }
        if (this._isShared) {
          if (this._rescc["proxy-revalidate"]) {
            return 0;
          }
          if (this._rescc["s-maxage"]) {
            return toNumberOrZero(this._rescc["s-maxage"]);
          }
        }
        if (this._rescc["max-age"]) {
          return toNumberOrZero(this._rescc["max-age"]);
        }
        const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;
        const serverDate = this.date();
        if (this._resHeaders.expires) {
          const expires = Date.parse(this._resHeaders.expires);
          if (Number.isNaN(expires) || expires < serverDate) {
            return 0;
          }
          return Math.max(defaultMinTtl, (expires - serverDate) / 1e3);
        }
        if (this._resHeaders["last-modified"]) {
          const lastModified = Date.parse(this._resHeaders["last-modified"]);
          if (isFinite(lastModified) && serverDate > lastModified) {
            return Math.max(defaultMinTtl, (serverDate - lastModified) / 1e3 * this._cacheHeuristic);
          }
        }
        return defaultMinTtl;
      }
      timeToLive() {
        const age = this.maxAge() - this.age();
        const staleIfErrorAge = age + toNumberOrZero(this._rescc["stale-if-error"]);
        const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc["stale-while-revalidate"]);
        return Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1e3;
      }
      stale() {
        return this.maxAge() <= this.age();
      }
      _useStaleIfError() {
        return this.maxAge() + toNumberOrZero(this._rescc["stale-if-error"]) > this.age();
      }
      useStaleWhileRevalidate() {
        return this.maxAge() + toNumberOrZero(this._rescc["stale-while-revalidate"]) > this.age();
      }
      static fromObject(obj) {
        return new this(void 0, void 0, { _fromObject: obj });
      }
      _fromObject(obj) {
        if (this._responseTime)
          throw Error("Reinitialized");
        if (!obj || obj.v !== 1)
          throw Error("Invalid serialization");
        this._responseTime = obj.t;
        this._isShared = obj.sh;
        this._cacheHeuristic = obj.ch;
        this._immutableMinTtl = obj.imm !== void 0 ? obj.imm : 24 * 3600 * 1e3;
        this._status = obj.st;
        this._resHeaders = obj.resh;
        this._rescc = obj.rescc;
        this._method = obj.m;
        this._url = obj.u;
        this._host = obj.h;
        this._noAuthorization = obj.a;
        this._reqHeaders = obj.reqh;
        this._reqcc = obj.reqcc;
      }
      toObject() {
        return {
          v: 1,
          t: this._responseTime,
          sh: this._isShared,
          ch: this._cacheHeuristic,
          imm: this._immutableMinTtl,
          st: this._status,
          resh: this._resHeaders,
          rescc: this._rescc,
          m: this._method,
          u: this._url,
          h: this._host,
          a: this._noAuthorization,
          reqh: this._reqHeaders,
          reqcc: this._reqcc
        };
      }
      revalidationHeaders(incomingReq) {
        this._assertRequestHasHeaders(incomingReq);
        const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);
        delete headers["if-range"];
        if (!this._requestMatches(incomingReq, true) || !this.storable()) {
          delete headers["if-none-match"];
          delete headers["if-modified-since"];
          return headers;
        }
        if (this._resHeaders.etag) {
          headers["if-none-match"] = headers["if-none-match"] ? `${headers["if-none-match"]}, ${this._resHeaders.etag}` : this._resHeaders.etag;
        }
        const forbidsWeakValidators = headers["accept-ranges"] || headers["if-match"] || headers["if-unmodified-since"] || this._method && this._method != "GET";
        if (forbidsWeakValidators) {
          delete headers["if-modified-since"];
          if (headers["if-none-match"]) {
            const etags = headers["if-none-match"].split(/,/).filter((etag) => {
              return !/^\s*W\//.test(etag);
            });
            if (!etags.length) {
              delete headers["if-none-match"];
            } else {
              headers["if-none-match"] = etags.join(",").trim();
            }
          }
        } else if (this._resHeaders["last-modified"] && !headers["if-modified-since"]) {
          headers["if-modified-since"] = this._resHeaders["last-modified"];
        }
        return headers;
      }
      revalidatedPolicy(request, response) {
        this._assertRequestHasHeaders(request);
        if (this._useStaleIfError() && isErrorResponse(response)) {
          return {
            modified: false,
            matches: false,
            policy: this
          };
        }
        if (!response || !response.headers) {
          throw Error("Response headers missing");
        }
        let matches = false;
        if (response.status !== void 0 && response.status != 304) {
          matches = false;
        } else if (response.headers.etag && !/^\s*W\//.test(response.headers.etag)) {
          matches = this._resHeaders.etag && this._resHeaders.etag.replace(/^\s*W\//, "") === response.headers.etag;
        } else if (this._resHeaders.etag && response.headers.etag) {
          matches = this._resHeaders.etag.replace(/^\s*W\//, "") === response.headers.etag.replace(/^\s*W\//, "");
        } else if (this._resHeaders["last-modified"]) {
          matches = this._resHeaders["last-modified"] === response.headers["last-modified"];
        } else {
          if (!this._resHeaders.etag && !this._resHeaders["last-modified"] && !response.headers.etag && !response.headers["last-modified"]) {
            matches = true;
          }
        }
        if (!matches) {
          return {
            policy: new this.constructor(request, response),
            modified: response.status != 304,
            matches: false
          };
        }
        const headers = {};
        for (const k in this._resHeaders) {
          headers[k] = k in response.headers && !excludedFromRevalidationUpdate[k] ? response.headers[k] : this._resHeaders[k];
        }
        const newResponse = Object.assign({}, response, {
          status: this._status,
          method: this._method,
          headers
        });
        return {
          policy: new this.constructor(request, newResponse, {
            shared: this._isShared,
            cacheHeuristic: this._cacheHeuristic,
            immutableMinTimeToLive: this._immutableMinTtl
          }),
          modified: false,
          matches: true
        };
      }
    };
  }
});

// node_modules/is-url/index.js
var require_is_url = __commonJS({
  "node_modules/is-url/index.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    module.exports = isUrl2;
    var protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
    var localhostDomainRE = /^localhost[\:?\d]*(?:[^\:?\d]\S*)?$/;
    var nonLocalhostDomainRE = /^[^\s\.]+\.\S{2,}$/;
    function isUrl2(string) {
      if (typeof string !== "string") {
        return false;
      }
      var match = string.match(protocolAndDomainRE);
      if (!match) {
        return false;
      }
      var everythingAfterProtocol = match[1];
      if (!everythingAfterProtocol) {
        return false;
      }
      if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {
        return true;
      }
      return false;
    }
  }
});

// node_modules/path-browserify/index.js
var require_path_browserify = __commonJS({
  "node_modules/path-browserify/index.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    function assertPath(path2) {
      if (typeof path2 !== "string") {
        throw new TypeError("Path must be a string. Received " + JSON.stringify(path2));
      }
    }
    function normalizeStringPosix(path2, allowAboveRoot) {
      var res = "";
      var lastSegmentLength = 0;
      var lastSlash = -1;
      var dots = 0;
      var code;
      for (var i = 0; i <= path2.length; ++i) {
        if (i < path2.length)
          code = path2.charCodeAt(i);
        else if (code === 47)
          break;
        else
          code = 47;
        if (code === 47) {
          if (lastSlash === i - 1 || dots === 1) {
          } else if (lastSlash !== i - 1 && dots === 2) {
            if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
              if (res.length > 2) {
                var lastSlashIndex = res.lastIndexOf("/");
                if (lastSlashIndex !== res.length - 1) {
                  if (lastSlashIndex === -1) {
                    res = "";
                    lastSegmentLength = 0;
                  } else {
                    res = res.slice(0, lastSlashIndex);
                    lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                  }
                  lastSlash = i;
                  dots = 0;
                  continue;
                }
              } else if (res.length === 2 || res.length === 1) {
                res = "";
                lastSegmentLength = 0;
                lastSlash = i;
                dots = 0;
                continue;
              }
            }
            if (allowAboveRoot) {
              if (res.length > 0)
                res += "/..";
              else
                res = "..";
              lastSegmentLength = 2;
            }
          } else {
            if (res.length > 0)
              res += "/" + path2.slice(lastSlash + 1, i);
            else
              res = path2.slice(lastSlash + 1, i);
            lastSegmentLength = i - lastSlash - 1;
          }
          lastSlash = i;
          dots = 0;
        } else if (code === 46 && dots !== -1) {
          ++dots;
        } else {
          dots = -1;
        }
      }
      return res;
    }
    function _format(sep2, pathObject) {
      var dir = pathObject.dir || pathObject.root;
      var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
      if (!dir) {
        return base;
      }
      if (dir === pathObject.root) {
        return dir + base;
      }
      return dir + sep2 + base;
    }
    var posix = {
      resolve: function resolve2() {
        var resolvedPath = "";
        var resolvedAbsolute = false;
        var cwd2;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path2;
          if (i >= 0)
            path2 = arguments[i];
          else {
            if (cwd2 === void 0)
              cwd2 = process.cwd();
            path2 = cwd2;
          }
          assertPath(path2);
          if (path2.length === 0) {
            continue;
          }
          resolvedPath = path2 + "/" + resolvedPath;
          resolvedAbsolute = path2.charCodeAt(0) === 47;
        }
        resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
        if (resolvedAbsolute) {
          if (resolvedPath.length > 0)
            return "/" + resolvedPath;
          else
            return "/";
        } else if (resolvedPath.length > 0) {
          return resolvedPath;
        } else {
          return ".";
        }
      },
      normalize: function normalize2(path2) {
        assertPath(path2);
        if (path2.length === 0)
          return ".";
        var isAbsolute2 = path2.charCodeAt(0) === 47;
        var trailingSeparator = path2.charCodeAt(path2.length - 1) === 47;
        path2 = normalizeStringPosix(path2, !isAbsolute2);
        if (path2.length === 0 && !isAbsolute2)
          path2 = ".";
        if (path2.length > 0 && trailingSeparator)
          path2 += "/";
        if (isAbsolute2)
          return "/" + path2;
        return path2;
      },
      isAbsolute: function isAbsolute2(path2) {
        assertPath(path2);
        return path2.length > 0 && path2.charCodeAt(0) === 47;
      },
      join: function join5() {
        if (arguments.length === 0)
          return ".";
        var joined;
        for (var i = 0; i < arguments.length; ++i) {
          var arg = arguments[i];
          assertPath(arg);
          if (arg.length > 0) {
            if (joined === void 0)
              joined = arg;
            else
              joined += "/" + arg;
          }
        }
        if (joined === void 0)
          return ".";
        return posix.normalize(joined);
      },
      relative: function relative2(from2, to) {
        assertPath(from2);
        assertPath(to);
        if (from2 === to)
          return "";
        from2 = posix.resolve(from2);
        to = posix.resolve(to);
        if (from2 === to)
          return "";
        var fromStart = 1;
        for (; fromStart < from2.length; ++fromStart) {
          if (from2.charCodeAt(fromStart) !== 47)
            break;
        }
        var fromEnd = from2.length;
        var fromLen = fromEnd - fromStart;
        var toStart = 1;
        for (; toStart < to.length; ++toStart) {
          if (to.charCodeAt(toStart) !== 47)
            break;
        }
        var toEnd = to.length;
        var toLen = toEnd - toStart;
        var length = fromLen < toLen ? fromLen : toLen;
        var lastCommonSep = -1;
        var i = 0;
        for (; i <= length; ++i) {
          if (i === length) {
            if (toLen > length) {
              if (to.charCodeAt(toStart + i) === 47) {
                return to.slice(toStart + i + 1);
              } else if (i === 0) {
                return to.slice(toStart + i);
              }
            } else if (fromLen > length) {
              if (from2.charCodeAt(fromStart + i) === 47) {
                lastCommonSep = i;
              } else if (i === 0) {
                lastCommonSep = 0;
              }
            }
            break;
          }
          var fromCode = from2.charCodeAt(fromStart + i);
          var toCode = to.charCodeAt(toStart + i);
          if (fromCode !== toCode)
            break;
          else if (fromCode === 47)
            lastCommonSep = i;
        }
        var out = "";
        for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
          if (i === fromEnd || from2.charCodeAt(i) === 47) {
            if (out.length === 0)
              out += "..";
            else
              out += "/..";
          }
        }
        if (out.length > 0)
          return out + to.slice(toStart + lastCommonSep);
        else {
          toStart += lastCommonSep;
          if (to.charCodeAt(toStart) === 47)
            ++toStart;
          return to.slice(toStart);
        }
      },
      _makeLong: function _makeLong(path2) {
        return path2;
      },
      dirname: function dirname2(path2) {
        assertPath(path2);
        if (path2.length === 0)
          return ".";
        var code = path2.charCodeAt(0);
        var hasRoot = code === 47;
        var end = -1;
        var matchedSlash = true;
        for (var i = path2.length - 1; i >= 1; --i) {
          code = path2.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              end = i;
              break;
            }
          } else {
            matchedSlash = false;
          }
        }
        if (end === -1)
          return hasRoot ? "/" : ".";
        if (hasRoot && end === 1)
          return "//";
        return path2.slice(0, end);
      },
      basename: function basename2(path2, ext) {
        if (ext !== void 0 && typeof ext !== "string")
          throw new TypeError('"ext" argument must be a string');
        assertPath(path2);
        var start = 0;
        var end = -1;
        var matchedSlash = true;
        var i;
        if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {
          if (ext.length === path2.length && ext === path2)
            return "";
          var extIdx = ext.length - 1;
          var firstNonSlashEnd = -1;
          for (i = path2.length - 1; i >= 0; --i) {
            var code = path2.charCodeAt(i);
            if (code === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else {
              if (firstNonSlashEnd === -1) {
                matchedSlash = false;
                firstNonSlashEnd = i + 1;
              }
              if (extIdx >= 0) {
                if (code === ext.charCodeAt(extIdx)) {
                  if (--extIdx === -1) {
                    end = i;
                  }
                } else {
                  extIdx = -1;
                  end = firstNonSlashEnd;
                }
              }
            }
          }
          if (start === end)
            end = firstNonSlashEnd;
          else if (end === -1)
            end = path2.length;
          return path2.slice(start, end);
        } else {
          for (i = path2.length - 1; i >= 0; --i) {
            if (path2.charCodeAt(i) === 47) {
              if (!matchedSlash) {
                start = i + 1;
                break;
              }
            } else if (end === -1) {
              matchedSlash = false;
              end = i + 1;
            }
          }
          if (end === -1)
            return "";
          return path2.slice(start, end);
        }
      },
      extname: function extname2(path2) {
        assertPath(path2);
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var preDotState = 0;
        for (var i = path2.length - 1; i >= 0; --i) {
          var code = path2.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }
            continue;
          }
          if (end === -1) {
            matchedSlash = false;
            end = i + 1;
          }
          if (code === 46) {
            if (startDot === -1)
              startDot = i;
            else if (preDotState !== 1)
              preDotState = 1;
          } else if (startDot !== -1) {
            preDotState = -1;
          }
        }
        if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          return "";
        }
        return path2.slice(startDot, end);
      },
      format: function format(pathObject) {
        if (pathObject === null || typeof pathObject !== "object") {
          throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
        }
        return _format("/", pathObject);
      },
      parse: function parse2(path2) {
        assertPath(path2);
        var ret = { root: "", dir: "", base: "", ext: "", name: "" };
        if (path2.length === 0)
          return ret;
        var code = path2.charCodeAt(0);
        var isAbsolute2 = code === 47;
        var start;
        if (isAbsolute2) {
          ret.root = "/";
          start = 1;
        } else {
          start = 0;
        }
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var i = path2.length - 1;
        var preDotState = 0;
        for (; i >= start; --i) {
          code = path2.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              startPart = i + 1;
              break;
            }
            continue;
          }
          if (end === -1) {
            matchedSlash = false;
            end = i + 1;
          }
          if (code === 46) {
            if (startDot === -1)
              startDot = i;
            else if (preDotState !== 1)
              preDotState = 1;
          } else if (startDot !== -1) {
            preDotState = -1;
          }
        }
        if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
          if (end !== -1) {
            if (startPart === 0 && isAbsolute2)
              ret.base = ret.name = path2.slice(1, end);
            else
              ret.base = ret.name = path2.slice(startPart, end);
          }
        } else {
          if (startPart === 0 && isAbsolute2) {
            ret.name = path2.slice(1, startDot);
            ret.base = path2.slice(1, end);
          } else {
            ret.name = path2.slice(startPart, startDot);
            ret.base = path2.slice(startPart, end);
          }
          ret.ext = path2.slice(startDot, end);
        }
        if (startPart > 0)
          ret.dir = path2.slice(0, startPart - 1);
        else if (isAbsolute2)
          ret.dir = "/";
        return ret;
      },
      sep: "/",
      delimiter: ":",
      win32: null,
      posix: null
    };
    posix.posix = posix;
    module.exports = posix;
  }
});

// node_modules/tiny-lru/lib/tiny-lru.js
var require_tiny_lru3 = __commonJS({
  "node_modules/tiny-lru/lib/tiny-lru.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    !function(t, e) {
      typeof exports == "object" && typeof module != "undefined" ? module.exports = e() : typeof define == "function" && define.amd ? define(e) : (t = typeof globalThis != "undefined" ? globalThis : t || self)["tiny-lru"] = e();
    }(exports, function() {
      "use strict";
      class t {
        constructor(t2 = 0, e = 0) {
          this.first = null, this.items = /* @__PURE__ */ Object.create(null), this.last = null, this.max = t2, this.size = 0, this.ttl = e;
        }
        has(t2) {
          return t2 in this.items;
        }
        clear() {
          return this.first = null, this.items = /* @__PURE__ */ Object.create(null), this.last = null, this.size = 0, this;
        }
        delete(t2) {
          if (this.has(t2)) {
            const e = this.items[t2];
            delete this.items[t2], this.size--, e.prev !== null && (e.prev.next = e.next), e.next !== null && (e.next.prev = e.prev), this.first === e && (this.first = e.next), this.last === e && (this.last = e.prev);
          }
          return this;
        }
        evict(t2 = false) {
          if (t2 || this.size > 0) {
            const t3 = this.first;
            delete this.items[t3.key], this.size--, this.size === 0 ? (this.first = null, this.last = null) : (this.first = t3.next, this.first.prev = null);
          }
          return this;
        }
        get(t2) {
          let e;
          if (this.has(t2)) {
            const s = this.items[t2];
            this.ttl > 0 && s.expiry <= new Date().getTime() ? this.delete(t2) : (e = s.value, this.set(t2, e, true));
          }
          return e;
        }
        keys() {
          return Object.keys(this.items);
        }
        set(t2, e, s = false) {
          let i;
          if (s || this.has(t2)) {
            if (i = this.items[t2], i.value = e, this.last !== i) {
              const t3 = this.last, e2 = i.next, s2 = i.prev;
              this.first === i && (this.first = i.next), i.next = null, i.prev = this.last, t3.next = i, s2 !== null && (s2.next = e2), e2 !== null && (e2.prev = s2);
            }
          } else
            this.max > 0 && this.size === this.max && this.evict(true), i = this.items[t2] = { expiry: this.ttl > 0 ? new Date().getTime() + this.ttl : this.ttl, key: t2, prev: this.last, next: null, value: e }, ++this.size == 1 ? this.first = i : this.last.next = i;
          return this.last = i, this;
        }
      }
      return function(e = 1e3, s = 0) {
        if (isNaN(e) || e < 0)
          throw new TypeError("Invalid max value");
        if (isNaN(s) || s < 0)
          throw new TypeError("Invalid ttl value");
        return new t(e, s);
      };
    });
  }
});

// node_modules/iterall/index.js
var require_iterall = __commonJS({
  "node_modules/iterall/index.js"(exports) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    exports.isIterable = isIterable;
    exports.isArrayLike = isArrayLike;
    exports.isCollection = isCollection;
    exports.getIterator = getIterator;
    exports.getIteratorMethod = getIteratorMethod;
    exports.createIterator = createIterator;
    exports.forEach = forEach;
    exports.isAsyncIterable = isAsyncIterable5;
    exports.getAsyncIterator = getAsyncIterator;
    exports.getAsyncIteratorMethod = getAsyncIteratorMethod;
    exports.createAsyncIterator = createAsyncIterator;
    exports.forAwaitEach = forAwaitEach;
    var SYMBOL = typeof Symbol === "function" ? Symbol : void 0;
    var SYMBOL_ITERATOR = SYMBOL && SYMBOL.iterator;
    var $$iterator = exports.$$iterator = SYMBOL_ITERATOR || "@@iterator";
    function isIterable(obj) {
      return !!getIteratorMethod(obj);
    }
    function isArrayLike(obj) {
      var length = obj != null && obj.length;
      return typeof length === "number" && length >= 0 && length % 1 === 0;
    }
    function isCollection(obj) {
      return Object(obj) === obj && (isArrayLike(obj) || isIterable(obj));
    }
    function getIterator(iterable) {
      var method = getIteratorMethod(iterable);
      if (method) {
        return method.call(iterable);
      }
    }
    function getIteratorMethod(iterable) {
      if (iterable != null) {
        var method = SYMBOL_ITERATOR && iterable[SYMBOL_ITERATOR] || iterable["@@iterator"];
        if (typeof method === "function") {
          return method;
        }
      }
    }
    function createIterator(collection) {
      if (collection != null) {
        var iterator = getIterator(collection);
        if (iterator) {
          return iterator;
        }
        if (isArrayLike(collection)) {
          return new ArrayLikeIterator(collection);
        }
      }
    }
    function ArrayLikeIterator(obj) {
      this._o = obj;
      this._i = 0;
    }
    ArrayLikeIterator.prototype[$$iterator] = function() {
      return this;
    };
    ArrayLikeIterator.prototype.next = function() {
      if (this._o === void 0 || this._i >= this._o.length) {
        this._o = void 0;
        return { value: void 0, done: true };
      }
      return { value: this._o[this._i++], done: false };
    };
    function forEach(collection, callback, thisArg) {
      if (collection != null) {
        if (typeof collection.forEach === "function") {
          return collection.forEach(callback, thisArg);
        }
        var i = 0;
        var iterator = getIterator(collection);
        if (iterator) {
          var step;
          while (!(step = iterator.next()).done) {
            callback.call(thisArg, step.value, i++, collection);
            if (i > 9999999) {
              throw new TypeError("Near-infinite iteration.");
            }
          }
        } else if (isArrayLike(collection)) {
          for (; i < collection.length; i++) {
            if (collection.hasOwnProperty(i)) {
              callback.call(thisArg, collection[i], i, collection);
            }
          }
        }
      }
    }
    var SYMBOL_ASYNC_ITERATOR = SYMBOL && SYMBOL.asyncIterator;
    var $$asyncIterator = exports.$$asyncIterator = SYMBOL_ASYNC_ITERATOR || "@@asyncIterator";
    function isAsyncIterable5(obj) {
      return !!getAsyncIteratorMethod(obj);
    }
    function getAsyncIterator(asyncIterable) {
      var method = getAsyncIteratorMethod(asyncIterable);
      if (method) {
        return method.call(asyncIterable);
      }
    }
    function getAsyncIteratorMethod(asyncIterable) {
      if (asyncIterable != null) {
        var method = SYMBOL_ASYNC_ITERATOR && asyncIterable[SYMBOL_ASYNC_ITERATOR] || asyncIterable["@@asyncIterator"];
        if (typeof method === "function") {
          return method;
        }
      }
    }
    function createAsyncIterator(source) {
      if (source != null) {
        var asyncIterator = getAsyncIterator(source);
        if (asyncIterator) {
          return asyncIterator;
        }
        var iterator = createIterator(source);
        if (iterator) {
          return new AsyncFromSyncIterator(iterator);
        }
      }
    }
    function AsyncFromSyncIterator(iterator) {
      this._i = iterator;
    }
    AsyncFromSyncIterator.prototype[$$asyncIterator] = function() {
      return this;
    };
    AsyncFromSyncIterator.prototype.next = function(value) {
      return unwrapAsyncFromSync(this._i, "next", value);
    };
    AsyncFromSyncIterator.prototype.return = function(value) {
      return this._i.return ? unwrapAsyncFromSync(this._i, "return", value) : Promise.resolve({ value, done: true });
    };
    AsyncFromSyncIterator.prototype.throw = function(value) {
      return this._i.throw ? unwrapAsyncFromSync(this._i, "throw", value) : Promise.reject(value);
    };
    function unwrapAsyncFromSync(iterator, fn, value) {
      var step;
      return new Promise(function(resolve2) {
        step = iterator[fn](value);
        resolve2(step.value);
      }).then(function(value2) {
        return { value: value2, done: step.done };
      });
    }
    function forAwaitEach(source, callback, thisArg) {
      var asyncIterator = createAsyncIterator(source);
      if (asyncIterator) {
        var i = 0;
        return new Promise(function(resolve2, reject3) {
          function next() {
            asyncIterator.next().then(function(step) {
              if (!step.done) {
                Promise.resolve(callback.call(thisArg, step.value, i++, source)).then(next).catch(reject3);
              } else {
                resolve2();
              }
              return null;
            }).catch(reject3);
            return null;
          }
          next();
        });
      }
    }
  }
});

// node_modules/graphql-subscriptions/dist/pubsub-async-iterator.js
var require_pubsub_async_iterator = __commonJS({
  "node_modules/graphql-subscriptions/dist/pubsub-async-iterator.js"(exports) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var __awaiter3 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve2) {
          resolve2(value);
        });
      }
      return new (P || (P = Promise))(function(resolve2, reject3) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject3(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject3(e);
          }
        }
        function step(result) {
          result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator3 = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PubSubAsyncIterator = void 0;
    var iterall_1 = require_iterall();
    var PubSubAsyncIterator = function() {
      function PubSubAsyncIterator2(pubsub, eventNames2) {
        this.pubsub = pubsub;
        this.pullQueue = [];
        this.pushQueue = [];
        this.running = true;
        this.allSubscribed = null;
        this.eventsArray = typeof eventNames2 === "string" ? [eventNames2] : eventNames2;
      }
      PubSubAsyncIterator2.prototype.next = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if (!!this.allSubscribed)
                  return [3, 2];
                return [4, this.allSubscribed = this.subscribeAll()];
              case 1:
                _a2.sent();
                _a2.label = 2;
              case 2:
                return [2, this.pullValue()];
            }
          });
        });
      };
      PubSubAsyncIterator2.prototype.return = function() {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, this.emptyQueue()];
              case 1:
                _a2.sent();
                return [2, { value: void 0, done: true }];
            }
          });
        });
      };
      PubSubAsyncIterator2.prototype.throw = function(error) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, this.emptyQueue()];
              case 1:
                _a2.sent();
                return [2, Promise.reject(error)];
            }
          });
        });
      };
      PubSubAsyncIterator2.prototype[iterall_1.$$asyncIterator] = function() {
        return this;
      };
      PubSubAsyncIterator2.prototype.pushValue = function(event) {
        return __awaiter3(this, void 0, void 0, function() {
          return __generator3(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, this.allSubscribed];
              case 1:
                _a2.sent();
                if (this.pullQueue.length !== 0) {
                  this.pullQueue.shift()(this.running ? { value: event, done: false } : { value: void 0, done: true });
                } else {
                  this.pushQueue.push(event);
                }
                return [2];
            }
          });
        });
      };
      PubSubAsyncIterator2.prototype.pullValue = function() {
        var _this = this;
        return new Promise(function(resolve2) {
          if (_this.pushQueue.length !== 0) {
            resolve2(_this.running ? { value: _this.pushQueue.shift(), done: false } : { value: void 0, done: true });
          } else {
            _this.pullQueue.push(resolve2);
          }
        });
      };
      PubSubAsyncIterator2.prototype.emptyQueue = function() {
        return __awaiter3(this, void 0, void 0, function() {
          var subscriptionIds;
          return __generator3(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                if (!this.running)
                  return [3, 2];
                this.running = false;
                this.pullQueue.forEach(function(resolve2) {
                  return resolve2({ value: void 0, done: true });
                });
                this.pullQueue.length = 0;
                this.pushQueue.length = 0;
                return [4, this.allSubscribed];
              case 1:
                subscriptionIds = _a2.sent();
                if (subscriptionIds) {
                  this.unsubscribeAll(subscriptionIds);
                }
                _a2.label = 2;
              case 2:
                return [2];
            }
          });
        });
      };
      PubSubAsyncIterator2.prototype.subscribeAll = function() {
        var _this = this;
        return Promise.all(this.eventsArray.map(function(eventName) {
          return _this.pubsub.subscribe(eventName, _this.pushValue.bind(_this), {});
        }));
      };
      PubSubAsyncIterator2.prototype.unsubscribeAll = function(subscriptionIds) {
        for (var _i = 0, subscriptionIds_1 = subscriptionIds; _i < subscriptionIds_1.length; _i++) {
          var subscriptionId = subscriptionIds_1[_i];
          this.pubsub.unsubscribe(subscriptionId);
        }
      };
      return PubSubAsyncIterator2;
    }();
    exports.PubSubAsyncIterator = PubSubAsyncIterator;
  }
});

// node_modules/graphql-subscriptions/dist/pubsub-engine.js
var require_pubsub_engine = __commonJS({
  "node_modules/graphql-subscriptions/dist/pubsub-engine.js"(exports) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PubSubEngine = void 0;
    var pubsub_async_iterator_1 = require_pubsub_async_iterator();
    var PubSubEngine = function() {
      function PubSubEngine2() {
      }
      PubSubEngine2.prototype.asyncIterator = function(triggers) {
        return new pubsub_async_iterator_1.PubSubAsyncIterator(this, triggers);
      };
      return PubSubEngine2;
    }();
    exports.PubSubEngine = PubSubEngine;
  }
});

// node-modules-polyfills:events
var events_exports = {};
__export(events_exports, {
  EventEmitter: () => EventEmitter,
  default: () => events_default
});
function EventHandlers() {
}
function EventEmitter() {
  EventEmitter.init.call(this);
}
function $getMaxListeners(that) {
  if (that._maxListeners === void 0)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
function emitNone(handler, isFn, self2) {
  if (isFn)
    handler.call(self2);
  else {
    var len = handler.length;
    var listeners2 = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners2[i].call(self2);
  }
}
function emitOne(handler, isFn, self2, arg1) {
  if (isFn)
    handler.call(self2, arg1);
  else {
    var len = handler.length;
    var listeners2 = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners2[i].call(self2, arg1);
  }
}
function emitTwo(handler, isFn, self2, arg1, arg2) {
  if (isFn)
    handler.call(self2, arg1, arg2);
  else {
    var len = handler.length;
    var listeners2 = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners2[i].call(self2, arg1, arg2);
  }
}
function emitThree(handler, isFn, self2, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self2, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners2 = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners2[i].call(self2, arg1, arg2, arg3);
  }
}
function emitMany(handler, isFn, self2, args) {
  if (isFn)
    handler.apply(self2, args);
  else {
    var len = handler.length;
    var listeners2 = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners2[i].apply(self2, args);
  }
}
function _addListener(target, type2, listener, prepend) {
  var m;
  var events;
  var existing;
  if (typeof listener !== "function")
    throw new TypeError('"listener" argument must be a function');
  events = target._events;
  if (!events) {
    events = target._events = new EventHandlers();
    target._eventsCount = 0;
  } else {
    if (events.newListener) {
      target.emit("newListener", type2, listener.listener ? listener.listener : listener);
      events = target._events;
    }
    existing = events[type2];
  }
  if (!existing) {
    existing = events[type2] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === "function") {
      existing = events[type2] = prepend ? [listener, existing] : [existing, listener];
    } else {
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + type2 + " listeners added. Use emitter.setMaxListeners() to increase limit");
        w.name = "MaxListenersExceededWarning";
        w.emitter = target;
        w.type = type2;
        w.count = existing.length;
        emitWarning(w);
      }
    }
  }
  return target;
}
function emitWarning(e) {
  typeof console.warn === "function" ? console.warn(e) : console.log(e);
}
function _onceWrap(target, type2, listener) {
  var fired = false;
  function g() {
    target.removeListener(type2, g);
    if (!fired) {
      fired = true;
      listener.apply(target, arguments);
    }
  }
  g.listener = listener;
  return g;
}
function listenerCount(type2) {
  var events = this._events;
  if (events) {
    var evlistener = events[type2];
    if (typeof evlistener === "function") {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }
  return 0;
}
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}
function arrayClone(arr, i) {
  var copy2 = new Array(i);
  while (i--)
    copy2[i] = arr[i];
  return copy2;
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
var domain, events_default;
var init_events = __esm({
  "node-modules-polyfills:events"() {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    EventHandlers.prototype = /* @__PURE__ */ Object.create(null);
    events_default = EventEmitter;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.usingDomains = false;
    EventEmitter.prototype.domain = void 0;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._maxListeners = void 0;
    EventEmitter.defaultMaxListeners = 10;
    EventEmitter.init = function() {
      this.domain = null;
      if (EventEmitter.usingDomains) {
        if (domain.active && !(this instanceof domain.Domain)) {
          this.domain = domain.active;
        }
      }
      if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
        this._events = new EventHandlers();
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || isNaN(n))
        throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n;
      return this;
    };
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit2(type2) {
      var er, handler, len, args, i, events, domain2;
      var needDomainExit = false;
      var doError = type2 === "error";
      events = this._events;
      if (events)
        doError = doError && events.error == null;
      else if (!doError)
        return false;
      domain2 = this.domain;
      if (doError) {
        er = arguments[1];
        if (domain2) {
          if (!er)
            er = new Error('Uncaught, unspecified "error" event');
          er.domainEmitter = this;
          er.domain = domain2;
          er.domainThrown = false;
          domain2.emit("error", er);
        } else if (er instanceof Error) {
          throw er;
        } else {
          var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
          err.context = er;
          throw err;
        }
        return false;
      }
      handler = events[type2];
      if (!handler)
        return false;
      var isFn = typeof handler === "function";
      len = arguments.length;
      switch (len) {
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
        default:
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          emitMany(handler, isFn, this, args);
      }
      if (needDomainExit)
        domain2.exit();
      return true;
    };
    EventEmitter.prototype.addListener = function addListener2(type2, listener) {
      return _addListener(this, type2, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type2, listener) {
      return _addListener(this, type2, listener, true);
    };
    EventEmitter.prototype.once = function once2(type2, listener) {
      if (typeof listener !== "function")
        throw new TypeError('"listener" argument must be a function');
      this.on(type2, _onceWrap(this, type2, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type2, listener) {
      if (typeof listener !== "function")
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type2, _onceWrap(this, type2, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener2(type2, listener) {
      var list, events, position, i, originalListener;
      if (typeof listener !== "function")
        throw new TypeError('"listener" argument must be a function');
      events = this._events;
      if (!events)
        return this;
      list = events[type2];
      if (!list)
        return this;
      if (list === listener || list.listener && list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = new EventHandlers();
        else {
          delete events[type2];
          if (events.removeListener)
            this.emit("removeListener", type2, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length; i-- > 0; ) {
          if (list[i] === listener || list[i].listener && list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (list.length === 1) {
          list[0] = void 0;
          if (--this._eventsCount === 0) {
            this._events = new EventHandlers();
            return this;
          } else {
            delete events[type2];
          }
        } else {
          spliceOne(list, position);
        }
        if (events.removeListener)
          this.emit("removeListener", type2, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function removeAllListeners2(type2) {
      var listeners2, events;
      events = this._events;
      if (!events)
        return this;
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = new EventHandlers();
          this._eventsCount = 0;
        } else if (events[type2]) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else
            delete events[type2];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        for (var i = 0, key; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener")
            continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = new EventHandlers();
        this._eventsCount = 0;
        return this;
      }
      listeners2 = events[type2];
      if (typeof listeners2 === "function") {
        this.removeListener(type2, listeners2);
      } else if (listeners2) {
        do {
          this.removeListener(type2, listeners2[listeners2.length - 1]);
        } while (listeners2[0]);
      }
      return this;
    };
    EventEmitter.prototype.listeners = function listeners(type2) {
      var evlistener;
      var ret;
      var events = this._events;
      if (!events)
        ret = [];
      else {
        evlistener = events[type2];
        if (!evlistener)
          ret = [];
        else if (typeof evlistener === "function")
          ret = [evlistener.listener || evlistener];
        else
          ret = unwrapListeners(evlistener);
      }
      return ret;
    };
    EventEmitter.listenerCount = function(emitter, type2) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type2);
      } else {
        return listenerCount.call(emitter, type2);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    };
  }
});

// node-modules-polyfills-commonjs:events
var require_events = __commonJS({
  "node-modules-polyfills-commonjs:events"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var polyfill = (init_events(), __toCommonJS(events_exports));
    if (polyfill && polyfill.default) {
      module.exports = polyfill.default;
      for (let k in polyfill) {
        module.exports[k] = polyfill[k];
      }
    } else if (polyfill) {
      module.exports = polyfill;
    }
  }
});

// node_modules/graphql-subscriptions/dist/pubsub.js
var require_pubsub = __commonJS({
  "node_modules/graphql-subscriptions/dist/pubsub.js"(exports) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var __extends3 = exports && exports.__extends || function() {
      var extendStatics2 = function(d, b) {
        extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics2(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics2(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PubSub = void 0;
    var events_1 = require_events();
    var pubsub_engine_1 = require_pubsub_engine();
    var PubSub2 = function(_super) {
      __extends3(PubSub3, _super);
      function PubSub3(options) {
        if (options === void 0) {
          options = {};
        }
        var _this = _super.call(this) || this;
        _this.ee = options.eventEmitter || new events_1.EventEmitter();
        _this.subscriptions = {};
        _this.subIdCounter = 0;
        return _this;
      }
      PubSub3.prototype.publish = function(triggerName, payload) {
        this.ee.emit(triggerName, payload);
        return Promise.resolve();
      };
      PubSub3.prototype.subscribe = function(triggerName, onMessage) {
        this.ee.addListener(triggerName, onMessage);
        this.subIdCounter = this.subIdCounter + 1;
        this.subscriptions[this.subIdCounter] = [triggerName, onMessage];
        return Promise.resolve(this.subIdCounter);
      };
      PubSub3.prototype.unsubscribe = function(subId) {
        var _a2 = this.subscriptions[subId], triggerName = _a2[0], onMessage = _a2[1];
        delete this.subscriptions[subId];
        this.ee.removeListener(triggerName, onMessage);
      };
      return PubSub3;
    }(pubsub_engine_1.PubSubEngine);
    exports.PubSub = PubSub2;
  }
});

// node_modules/graphql-subscriptions/dist/with-filter.js
var require_with_filter = __commonJS({
  "node_modules/graphql-subscriptions/dist/with-filter.js"(exports) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withFilter = void 0;
    var iterall_1 = require_iterall();
    var withFilter2 = function(asyncIteratorFn, filterFn) {
      return function(rootValue, args, context, info) {
        var _a2;
        var asyncIterator = asyncIteratorFn(rootValue, args, context, info);
        var getNextPromise = function() {
          return new Promise(function(resolve2, reject3) {
            var inner = function() {
              asyncIterator.next().then(function(payload) {
                if (payload.done === true) {
                  resolve2(payload);
                  return;
                }
                Promise.resolve(filterFn(payload.value, args, context, info)).catch(function() {
                  return false;
                }).then(function(filterResult) {
                  if (filterResult === true) {
                    resolve2(payload);
                    return;
                  }
                  inner();
                  return;
                });
              }).catch(function(err) {
                reject3(err);
                return;
              });
            };
            inner();
          });
        };
        var asyncIterator2 = (_a2 = {
          next: function() {
            return getNextPromise();
          },
          return: function() {
            return asyncIterator.return();
          },
          throw: function(error) {
            return asyncIterator.throw(error);
          }
        }, _a2[iterall_1.$$asyncIterator] = function() {
          return this;
        }, _a2);
        return asyncIterator2;
      };
    };
    exports.withFilter = withFilter2;
  }
});

// node_modules/graphql-subscriptions/dist/index.js
var require_dist = __commonJS({
  "node_modules/graphql-subscriptions/dist/index.js"(exports) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withFilter = exports.PubSub = exports.PubSubEngine = void 0;
    var pubsub_engine_1 = require_pubsub_engine();
    Object.defineProperty(exports, "PubSubEngine", { enumerable: true, get: function() {
      return pubsub_engine_1.PubSubEngine;
    } });
    var pubsub_1 = require_pubsub();
    Object.defineProperty(exports, "PubSub", { enumerable: true, get: function() {
      return pubsub_1.PubSub;
    } });
    var with_filter_1 = require_with_filter();
    Object.defineProperty(exports, "withFilter", { enumerable: true, get: function() {
      return with_filter_1.withFilter;
    } });
  }
});

// node_modules/lodash.get/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.get/index.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var freeGlobal = typeof globalThis == "object" && globalThis && globalThis.Object === Object && globalThis;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty3 = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Symbol2 = root.Symbol;
    var splice = arrayProto.splice;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty3.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty3.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object, path2) {
      path2 = isKey(path2, object) ? [path2] : castPath(path2);
      var index = 0, length = path2.length;
      while (object != null && index < length) {
        object = object[toKey(path2[index++])];
      }
      return index && index == length ? object : void 0;
    }
    function baseIsNative(value) {
      if (!isObject4(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type2 = typeof value;
      if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type2 = typeof value;
      return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var stringToPath = memoize(function(string) {
      string = toString3(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArray = Array.isArray;
    function isFunction(value) {
      var tag = isObject4(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject4(value) {
      var type2 = typeof value;
      return !!value && (type2 == "object" || type2 == "function");
    }
    function isObjectLike3(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike3(value) && objectToString.call(value) == symbolTag;
    }
    function toString3(value) {
      return value == null ? "" : baseToString(value);
    }
    function get(object, path2, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path2);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get;
  }
});

// node_modules/lodash.set/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.set/index.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var freeGlobal = typeof globalThis == "object" && globalThis && globalThis.Object === Object && globalThis;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty3 = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Symbol2 = root.Symbol;
    var splice = arrayProto.splice;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty3.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty3.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty3.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        object[key] = value;
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseIsNative(value) {
      if (!isObject4(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseSet(object, path2, value, customizer) {
      if (!isObject4(object)) {
        return object;
      }
      path2 = isKey(path2, object) ? [path2] : castPath(path2);
      var index = -1, length = path2.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index < length) {
        var key = toKey(path2[index]), newValue = value;
        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject4(objValue) ? objValue : isIndex(path2[index + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type2 = typeof value;
      if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type2 = typeof value;
      return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var stringToPath = memoize(function(string) {
      string = toString3(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArray = Array.isArray;
    function isFunction(value) {
      var tag = isObject4(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject4(value) {
      var type2 = typeof value;
      return !!value && (type2 == "object" || type2 == "function");
    }
    function isObjectLike3(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike3(value) && objectToString.call(value) == symbolTag;
    }
    function toString3(value) {
      return value == null ? "" : baseToString(value);
    }
    function set2(object, path2, value) {
      return object == null ? object : baseSet(object, path2, value);
    }
    module.exports = set2;
  }
});

// node_modules/lodash.topath/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.topath/index.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var freeGlobal = typeof globalThis == "object" && globalThis && globalThis.Object === Object && globalThis;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function arrayMap(array, iteratee) {
      var index = -1, length = array ? array.length : 0, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty3 = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Symbol2 = root.Symbol;
    var splice = arrayProto.splice;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty3.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty3.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseIsNative(value) {
      if (!isObject4(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function getMapData(map2, key) {
      var data = map2.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function isKeyable(value) {
      var type2 = typeof value;
      return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var stringToPath = memoize(function(string) {
      string = toString3(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArray = Array.isArray;
    function isFunction(value) {
      var tag = isObject4(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject4(value) {
      var type2 = typeof value;
      return !!value && (type2 == "object" || type2 == "function");
    }
    function isObjectLike3(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike3(value) && objectToString.call(value) == symbolTag;
    }
    function toString3(value) {
      return value == null ? "" : baseToString(value);
    }
    function toPath2(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
    }
    module.exports = toPath2;
  }
});

// node_modules/foreach/index.js
var require_foreach = __commonJS({
  "node_modules/foreach/index.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var hasOwn = Object.prototype.hasOwnProperty;
    var toString3 = Object.prototype.toString;
    module.exports = function forEach(obj, fn, ctx) {
      if (toString3.call(fn) !== "[object Function]") {
        throw new TypeError("iterator must be a function");
      }
      var l = obj.length;
      if (l === +l) {
        for (var i = 0; i < l; i++) {
          fn.call(ctx, obj[i], i, obj);
        }
      } else {
        for (var k in obj) {
          if (hasOwn.call(obj, k)) {
            fn.call(ctx, obj[k], k, obj);
          }
        }
      }
    };
  }
});

// node_modules/json-pointer/index.js
var require_json_pointer = __commonJS({
  "node_modules/json-pointer/index.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var each = require_foreach();
    module.exports = api;
    function api(obj, pointer, value) {
      if (arguments.length === 3) {
        return api.set(obj, pointer, value);
      }
      if (arguments.length === 2) {
        return api.get(obj, pointer);
      }
      var wrapped = api.bind(api, obj);
      for (var name in api) {
        if (api.hasOwnProperty(name)) {
          wrapped[name] = api[name].bind(wrapped, obj);
        }
      }
      return wrapped;
    }
    api.get = function get(obj, pointer) {
      var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer);
      for (var i = 0; i < refTokens.length; ++i) {
        var tok = refTokens[i];
        if (!(typeof obj == "object" && tok in obj)) {
          throw new Error("Invalid reference token: " + tok);
        }
        obj = obj[tok];
      }
      return obj;
    };
    api.set = function set2(obj, pointer, value) {
      var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer), nextTok = refTokens[0];
      if (refTokens.length === 0) {
        throw Error("Can not set the root object");
      }
      for (var i = 0; i < refTokens.length - 1; ++i) {
        var tok = refTokens[i];
        if (typeof tok !== "string" && typeof tok !== "number") {
          tok = String(tok);
        }
        if (tok === "__proto__" || tok === "constructor" || tok === "prototype") {
          continue;
        }
        if (tok === "-" && Array.isArray(obj)) {
          tok = obj.length;
        }
        nextTok = refTokens[i + 1];
        if (!(tok in obj)) {
          if (nextTok.match(/^(\d+|-)$/)) {
            obj[tok] = [];
          } else {
            obj[tok] = {};
          }
        }
        obj = obj[tok];
      }
      if (nextTok === "-" && Array.isArray(obj)) {
        nextTok = obj.length;
      }
      obj[nextTok] = value;
      return this;
    };
    api.remove = function(obj, pointer) {
      var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer);
      var finalToken = refTokens[refTokens.length - 1];
      if (finalToken === void 0) {
        throw new Error('Invalid JSON pointer for remove: "' + pointer + '"');
      }
      var parent = api.get(obj, refTokens.slice(0, -1));
      if (Array.isArray(parent)) {
        var index = +finalToken;
        if (finalToken === "" && isNaN(index)) {
          throw new Error('Invalid array index: "' + finalToken + '"');
        }
        Array.prototype.splice.call(parent, index, 1);
      } else {
        delete parent[finalToken];
      }
    };
    api.dict = function dict(obj, descend) {
      var results = {};
      api.walk(obj, function(value, pointer) {
        results[pointer] = value;
      }, descend);
      return results;
    };
    api.walk = function walk(obj, iterator, descend) {
      var refTokens = [];
      descend = descend || function(value) {
        var type2 = Object.prototype.toString.call(value);
        return type2 === "[object Object]" || type2 === "[object Array]";
      };
      (function next(cur) {
        each(cur, function(value, key) {
          refTokens.push(String(key));
          if (descend(value)) {
            next(value);
          } else {
            iterator(value, api.compile(refTokens));
          }
          refTokens.pop();
        });
      })(obj);
    };
    api.has = function has(obj, pointer) {
      try {
        api.get(obj, pointer);
      } catch (e) {
        return false;
      }
      return true;
    };
    api.escape = function escape(str2) {
      return str2.toString().replace(/~/g, "~0").replace(/\//g, "~1");
    };
    api.unescape = function unescape(str2) {
      return str2.replace(/~1/g, "/").replace(/~0/g, "~");
    };
    api.parse = function parse2(pointer) {
      if (pointer === "") {
        return [];
      }
      if (pointer.charAt(0) !== "/") {
        throw new Error("Invalid JSON pointer: " + pointer);
      }
      return pointer.substring(1).split(/\//).map(api.unescape);
    };
    api.compile = function compile(refTokens) {
      if (refTokens.length === 0) {
        return "";
      }
      return "/" + refTokens.map(api.escape).join("/");
    };
  }
});

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    !function(t, e) {
      typeof exports == "object" && typeof module != "undefined" ? module.exports = e() : typeof define == "function" && define.amd ? define(e) : (t = typeof globalThis != "undefined" ? globalThis : t || self).dayjs = e();
    }(exports, function() {
      "use strict";
      var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h = "quarter", c = "year", d = "date", $ = "Invalid Date", l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, m = function(t2, e2, n2) {
        var r2 = String(t2);
        return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
      }, g = { s: m, z: function(t2) {
        var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
        return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
      }, m: function t2(e2, n2) {
        if (e2.date() < n2.date())
          return -t2(n2, e2);
        var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, f), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), f);
        return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
      }, a: function(t2) {
        return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
      }, p: function(t2) {
        return { M: f, y: c, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: h }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t2) {
        return t2 === void 0;
      } }, v = "en", D = {};
      D[v] = M;
      var p = function(t2) {
        return t2 instanceof _;
      }, S = function t2(e2, n2, r2) {
        var i2;
        if (!e2)
          return v;
        if (typeof e2 == "string") {
          var s2 = e2.toLowerCase();
          D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
          var u2 = e2.split("-");
          if (!i2 && u2.length > 1)
            return t2(u2[0]);
        } else {
          var a2 = e2.name;
          D[a2] = e2, i2 = a2;
        }
        return !r2 && i2 && (v = i2), i2 || !r2 && v;
      }, w = function(t2, e2) {
        if (p(t2))
          return t2.clone();
        var n2 = typeof e2 == "object" ? e2 : {};
        return n2.date = t2, n2.args = arguments, new _(n2);
      }, O = g;
      O.l = S, O.i = p, O.w = function(t2, e2) {
        return w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      var _ = function() {
        function M2(t2) {
          this.$L = S(t2.locale, null, true), this.parse(t2);
        }
        var m2 = M2.prototype;
        return m2.parse = function(t2) {
          this.$d = function(t3) {
            var e2 = t3.date, n2 = t3.utc;
            if (e2 === null)
              return new Date(NaN);
            if (O.u(e2))
              return new Date();
            if (e2 instanceof Date)
              return new Date(e2);
            if (typeof e2 == "string" && !/Z$/i.test(e2)) {
              var r2 = e2.match(l);
              if (r2) {
                var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
                return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
              }
            }
            return new Date(e2);
          }(t2), this.$x = t2.x || {}, this.init();
        }, m2.init = function() {
          var t2 = this.$d;
          this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
        }, m2.$utils = function() {
          return O;
        }, m2.isValid = function() {
          return !(this.$d.toString() === $);
        }, m2.isSame = function(t2, e2) {
          var n2 = w(t2);
          return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
        }, m2.isAfter = function(t2, e2) {
          return w(t2) < this.startOf(e2);
        }, m2.isBefore = function(t2, e2) {
          return this.endOf(e2) < w(t2);
        }, m2.$g = function(t2, e2, n2) {
          return O.u(t2) ? this[e2] : this.set(n2, t2);
        }, m2.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf = function() {
          return this.$d.getTime();
        }, m2.startOf = function(t2, e2) {
          var n2 = this, r2 = !!O.u(e2) || e2, h2 = O.p(t2), $2 = function(t3, e3) {
            var i2 = O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
            return r2 ? i2 : i2.endOf(a);
          }, l2 = function(t3, e3) {
            return O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
          }, y2 = this.$W, M3 = this.$M, m3 = this.$D, g2 = "set" + (this.$u ? "UTC" : "");
          switch (h2) {
            case c:
              return r2 ? $2(1, 0) : $2(31, 11);
            case f:
              return r2 ? $2(1, M3) : $2(0, M3 + 1);
            case o:
              var v2 = this.$locale().weekStart || 0, D2 = (y2 < v2 ? y2 + 7 : y2) - v2;
              return $2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
            case a:
            case d:
              return l2(g2 + "Hours", 0);
            case u:
              return l2(g2 + "Minutes", 1);
            case s:
              return l2(g2 + "Seconds", 2);
            case i:
              return l2(g2 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m2.endOf = function(t2) {
          return this.startOf(t2, false);
        }, m2.$set = function(t2, e2) {
          var n2, o2 = O.p(t2), h2 = "set" + (this.$u ? "UTC" : ""), $2 = (n2 = {}, n2[a] = h2 + "Date", n2[d] = h2 + "Date", n2[f] = h2 + "Month", n2[c] = h2 + "FullYear", n2[u] = h2 + "Hours", n2[s] = h2 + "Minutes", n2[i] = h2 + "Seconds", n2[r] = h2 + "Milliseconds", n2)[o2], l2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
          if (o2 === f || o2 === c) {
            var y2 = this.clone().set(d, 1);
            y2.$d[$2](l2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
          } else
            $2 && this.$d[$2](l2);
          return this.init(), this;
        }, m2.set = function(t2, e2) {
          return this.clone().$set(t2, e2);
        }, m2.get = function(t2) {
          return this[O.p(t2)]();
        }, m2.add = function(r2, h2) {
          var d2, $2 = this;
          r2 = Number(r2);
          var l2 = O.p(h2), y2 = function(t2) {
            var e2 = w($2);
            return O.w(e2.date(e2.date() + Math.round(t2 * r2)), $2);
          };
          if (l2 === f)
            return this.set(f, this.$M + r2);
          if (l2 === c)
            return this.set(c, this.$y + r2);
          if (l2 === a)
            return y2(1);
          if (l2 === o)
            return y2(7);
          var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[l2] || 1, m3 = this.$d.getTime() + r2 * M3;
          return O.w(m3, this);
        }, m2.subtract = function(t2, e2) {
          return this.add(-1 * t2, e2);
        }, m2.format = function(t2) {
          var e2 = this, n2 = this.$locale();
          if (!this.isValid())
            return n2.invalidDate || $;
          var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = O.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, f2 = n2.months, h2 = function(t3, n3, i3, s3) {
            return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].slice(0, s3);
          }, c2 = function(t3) {
            return O.s(s2 % 12 || 12, t3, "0");
          }, d2 = n2.meridiem || function(t3, e3, n3) {
            var r3 = t3 < 12 ? "AM" : "PM";
            return n3 ? r3.toLowerCase() : r3;
          }, l2 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a2 + 1, MM: O.s(a2 + 1, 2, "0"), MMM: h2(n2.monthsShort, a2, f2, 3), MMMM: h2(f2, a2), D: this.$D, DD: O.s(this.$D, 2, "0"), d: String(this.$W), dd: h2(n2.weekdaysMin, this.$W, o2, 2), ddd: h2(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s2), HH: O.s(s2, 2, "0"), h: c2(1), hh: c2(2), a: d2(s2, u2, true), A: d2(s2, u2, false), m: String(u2), mm: O.s(u2, 2, "0"), s: String(this.$s), ss: O.s(this.$s, 2, "0"), SSS: O.s(this.$ms, 3, "0"), Z: i2 };
          return r2.replace(y, function(t3, e3) {
            return e3 || l2[t3] || i2.replace(":", "");
          });
        }, m2.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.diff = function(r2, d2, $2) {
          var l2, y2 = O.p(d2), M3 = w(r2), m3 = (M3.utcOffset() - this.utcOffset()) * e, g2 = this - M3, v2 = O.m(this, M3);
          return v2 = (l2 = {}, l2[c] = v2 / 12, l2[f] = v2, l2[h] = v2 / 3, l2[o] = (g2 - m3) / 6048e5, l2[a] = (g2 - m3) / 864e5, l2[u] = g2 / n, l2[s] = g2 / e, l2[i] = g2 / t, l2)[y2] || g2, $2 ? v2 : O.a(v2);
        }, m2.daysInMonth = function() {
          return this.endOf(f).$D;
        }, m2.$locale = function() {
          return D[this.$L];
        }, m2.locale = function(t2, e2) {
          if (!t2)
            return this.$L;
          var n2 = this.clone(), r2 = S(t2, e2, true);
          return r2 && (n2.$L = r2), n2;
        }, m2.clone = function() {
          return O.w(this.$d, this);
        }, m2.toDate = function() {
          return new Date(this.valueOf());
        }, m2.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m2.toISOString = function() {
          return this.$d.toISOString();
        }, m2.toString = function() {
          return this.$d.toUTCString();
        }, M2;
      }(), T = _.prototype;
      return w.prototype = T, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function(t2) {
        T[t2[1]] = function(e2) {
          return this.$g(e2, t2[0], t2[1]);
        };
      }), w.extend = function(t2, e2) {
        return t2.$i || (t2(e2, _, w), t2.$i = true), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function(t2) {
        return w(1e3 * t2);
      }, w.en = D[v], w.Ls = D, w.p = {}, w;
    });
  }
});

// node_modules/color-name/index.js
var require_color_name = __commonJS({
  "node_modules/color-name/index.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    module.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "node_modules/color-convert/conversions.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var cssKeywords = require_color_name();
    var reverseKeywords = {};
    for (const key of Object.keys(cssKeywords)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
    var convert = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    module.exports = convert;
    for (const model of Object.keys(convert)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      const { channels, labels } = convert[model];
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", { value: channels });
      Object.defineProperty(convert[model], "labels", { value: labels });
    }
    convert.rgb.hsl = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const min = Math.min(r, g, b);
      const max = Math.max(r, g, b);
      const delta = max - min;
      let h;
      let s;
      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h = Math.min(h * 60, 360);
      if (h < 0) {
        h += 360;
      }
      const l = (min + max) / 2;
      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }
      return [h, s * 100, l * 100];
    };
    convert.rgb.hsv = function(rgb) {
      let rdif;
      let gdif;
      let bdif;
      let h;
      let s;
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const v = Math.max(r, g, b);
      const diff2 = v - Math.min(r, g, b);
      const diffc = function(c) {
        return (v - c) / 6 / diff2 + 1 / 2;
      };
      if (diff2 === 0) {
        h = 0;
        s = 0;
      } else {
        s = diff2 / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }
      return [
        h * 360,
        s * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      const r = rgb[0];
      const g = rgb[1];
      let b = rgb[2];
      const h = convert.rgb.hsl(rgb)[0];
      const w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const k = Math.min(1 - r, 1 - g, 1 - b);
      const c = (1 - r - k) / (1 - k) || 0;
      const m = (1 - g - k) / (1 - k) || 0;
      const y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    function comparativeDistance(x, y) {
      return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
    }
    convert.rgb.keyword = function(rgb) {
      const reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      let currentClosestDistance = Infinity;
      let currentClosestKeyword;
      for (const keyword of Object.keys(cssKeywords)) {
        const value = cssKeywords[keyword];
        const distance = comparativeDistance(rgb, value);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      let r = rgb[0] / 255;
      let g = rgb[1] / 255;
      let b = rgb[2] / 255;
      r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
      g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
      b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
      const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      const xyz = convert.rgb.xyz(rgb);
      let x = xyz[0];
      let y = xyz[1];
      let z = xyz[2];
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
      const l = 116 * y - 16;
      const a = 500 * (x - y);
      const b = 200 * (y - z);
      return [l, a, b];
    };
    convert.hsl.rgb = function(hsl) {
      const h = hsl[0] / 360;
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      let t2;
      let t3;
      let val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      const t1 = 2 * l - t2;
      const rgb = [0, 0, 0];
      for (let i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      const h = hsl[0];
      let s = hsl[1] / 100;
      let l = hsl[2] / 100;
      let smin = s;
      const lmin = Math.max(l, 0.01);
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      const v = (l + s) / 2;
      const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      const h = hsv[0] / 60;
      const s = hsv[1] / 100;
      let v = hsv[2] / 100;
      const hi = Math.floor(h) % 6;
      const f = h - Math.floor(h);
      const p = 255 * v * (1 - s);
      const q = 255 * v * (1 - s * f);
      const t = 255 * v * (1 - s * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    };
    convert.hsv.hsl = function(hsv) {
      const h = hsv[0];
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const vmin = Math.max(v, 0.01);
      let sl;
      let l;
      l = (2 - s) * v;
      const lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    };
    convert.hwb.rgb = function(hwb) {
      const h = hwb[0] / 360;
      let wh = hwb[1] / 100;
      let bl = hwb[2] / 100;
      const ratio = wh + bl;
      let f;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      const i = Math.floor(6 * h);
      const v = 1 - bl;
      f = 6 * h - i;
      if ((i & 1) !== 0) {
        f = 1 - f;
      }
      const n = wh + f * (v - wh);
      let r;
      let g;
      let b;
      switch (i) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      const c = cmyk[0] / 100;
      const m = cmyk[1] / 100;
      const y = cmyk[2] / 100;
      const k = cmyk[3] / 100;
      const r = 1 - Math.min(1, c * (1 - k) + k);
      const g = 1 - Math.min(1, m * (1 - k) + k);
      const b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      const x = xyz[0] / 100;
      const y = xyz[1] / 100;
      const z = xyz[2] / 100;
      let r;
      let g;
      let b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      let x = xyz[0];
      let y = xyz[1];
      let z = xyz[2];
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
      const l = 116 * y - 16;
      const a = 500 * (x - y);
      const b = 200 * (y - z);
      return [l, a, b];
    };
    convert.lab.xyz = function(lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let x;
      let y;
      let z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      const y2 = y ** 3;
      const x2 = x ** 3;
      const z2 = z ** 3;
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };
    convert.lab.lch = function(lab) {
      const l = lab[0];
      const a = lab[1];
      const b = lab[2];
      let h;
      const hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      const c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };
    convert.lch.lab = function(lch) {
      const l = lch[0];
      const c = lch[1];
      const h = lch[2];
      const hr = h / 360 * 2 * Math.PI;
      const a = c * Math.cos(hr);
      const b = c * Math.sin(hr);
      return [l, a, b];
    };
    convert.rgb.ansi16 = function(args, saturation = null) {
      const [r, g, b] = args;
      let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      const r = args[0];
      const g = args[1];
      const b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      let color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      const mult = (~~(args > 50) + 1) * 0.5;
      const r = (color & 1) * mult * 255;
      const g = (color >> 1 & 1) * mult * 255;
      const b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        const c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      let rem;
      const r = Math.floor(args / 36) / 5 * 255;
      const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      const b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert.rgb.hex = function(args) {
      const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      let colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map((char) => {
          return char + char;
        }).join("");
      }
      const integer = parseInt(colorString, 16);
      const r = integer >> 16 & 255;
      const g = integer >> 8 & 255;
      const b = integer & 255;
      return [r, g, b];
    };
    convert.rgb.hcg = function(rgb) {
      const r = rgb[0] / 255;
      const g = rgb[1] / 255;
      const b = rgb[2] / 255;
      const max = Math.max(Math.max(r, g), b);
      const min = Math.min(Math.min(r, g), b);
      const chroma = max - min;
      let grayscale;
      let hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      const s = hsl[1] / 100;
      const l = hsl[2] / 100;
      const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
      let f = 0;
      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      const s = hsv[1] / 100;
      const v = hsv[2] / 100;
      const c = s * v;
      let f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      const h = hcg[0] / 360;
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      const pure = [0, 0, 0];
      const hi = h % 1 * 6;
      const v = hi % 1;
      const w = 1 - v;
      let mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1 - c);
      let f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const l = g * (1 - c) + 0.5 * c;
      let s = 0;
      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert.hcg.hwb = function(hcg) {
      const c = hcg[1] / 100;
      const g = hcg[2] / 100;
      const v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      const w = hwb[1] / 100;
      const b = hwb[2] / 100;
      const v = 1 - b;
      const c = v - w;
      let g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hsv = convert.gray.hsl;
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      const val = Math.round(gray[0] / 100 * 255) & 255;
      const integer = (val << 16) + (val << 8) + val;
      const string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// node_modules/color-convert/route.js
var require_route = __commonJS({
  "node_modules/color-convert/route.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var conversions = require_conversions();
    function buildGraph() {
      const graph = {};
      const models = Object.keys(conversions);
      for (let len = models.length, i = 0; i < len; i++) {
        graph[models[i]] = {
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      const graph = buildGraph();
      const queue2 = [fromModel];
      graph[fromModel].distance = 0;
      while (queue2.length) {
        const current = queue2.pop();
        const adjacents = Object.keys(conversions[current]);
        for (let len = adjacents.length, i = 0; i < len; i++) {
          const adjacent = adjacents[i];
          const node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue2.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from2, to) {
      return function(args) {
        return to(from2(args));
      };
    }
    function wrapConversion(toModel, graph) {
      const path2 = [graph[toModel].parent, toModel];
      let fn = conversions[graph[toModel].parent][toModel];
      let cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path2.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path2;
      return fn;
    }
    module.exports = function(fromModel) {
      const graph = deriveBFS(fromModel);
      const conversion = {};
      const models = Object.keys(graph);
      for (let len = models.length, i = 0; i < len; i++) {
        const toModel = models[i];
        const node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "node_modules/color-convert/index.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      const wrappedFn = function(...args) {
        const arg0 = args[0];
        if (arg0 === void 0 || arg0 === null) {
          return arg0;
        }
        if (arg0.length > 1) {
          args = arg0;
        }
        const result = fn(args);
        if (typeof result === "object") {
          for (let len = result.length, i = 0; i < len; i++) {
            result[i] = Math.round(result[i]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach((fromModel) => {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      const routes = route(fromModel);
      const routeModels = Object.keys(routes);
      routeModels.forEach((toModel) => {
        const fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module.exports = convert;
  }
});

// node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS({
  "node_modules/ansi-styles/index.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var wrapAnsi16 = (fn, offset) => (...args) => {
      const code = fn(...args);
      return `\x1B[${code + offset}m`;
    };
    var wrapAnsi256 = (fn, offset) => (...args) => {
      const code = fn(...args);
      return `\x1B[${38 + offset};5;${code}m`;
    };
    var wrapAnsi16m = (fn, offset) => (...args) => {
      const rgb = fn(...args);
      return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };
    var ansi2ansi = (n) => n;
    var rgb2rgb = (r, g, b) => [r, g, b];
    var setLazyProperty = (object, property, get) => {
      Object.defineProperty(object, property, {
        get: () => {
          const value = get();
          Object.defineProperty(object, property, {
            value,
            enumerable: true,
            configurable: true
          });
          return value;
        },
        enumerable: true,
        configurable: true
      });
    };
    var colorConvert;
    var makeDynamicStyles = (wrap4, targetSpace, identity, isBackground) => {
      if (colorConvert === void 0) {
        colorConvert = require_color_convert();
      }
      const offset = isBackground ? 10 : 0;
      const styles = {};
      for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
        const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
        if (sourceSpace === targetSpace) {
          styles[name] = wrap4(identity, offset);
        } else if (typeof suite === "object") {
          styles[name] = wrap4(suite[targetSpace], offset);
        }
      }
      return styles;
    };
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      const styles = {
        modifier: {
          reset: [0, 0],
          bold: [1, 22],
          dim: [2, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          hidden: [8, 28],
          strikethrough: [9, 29]
        },
        color: {
          black: [30, 39],
          red: [31, 39],
          green: [32, 39],
          yellow: [33, 39],
          blue: [34, 39],
          magenta: [35, 39],
          cyan: [36, 39],
          white: [37, 39],
          blackBright: [90, 39],
          redBright: [91, 39],
          greenBright: [92, 39],
          yellowBright: [93, 39],
          blueBright: [94, 39],
          magentaBright: [95, 39],
          cyanBright: [96, 39],
          whiteBright: [97, 39]
        },
        bgColor: {
          bgBlack: [40, 49],
          bgRed: [41, 49],
          bgGreen: [42, 49],
          bgYellow: [43, 49],
          bgBlue: [44, 49],
          bgMagenta: [45, 49],
          bgCyan: [46, 49],
          bgWhite: [47, 49],
          bgBlackBright: [100, 49],
          bgRedBright: [101, 49],
          bgGreenBright: [102, 49],
          bgYellowBright: [103, 49],
          bgBlueBright: [104, 49],
          bgMagentaBright: [105, 49],
          bgCyanBright: [106, 49],
          bgWhiteBright: [107, 49]
        }
      };
      styles.color.gray = styles.color.blackBright;
      styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
      styles.color.grey = styles.color.blackBright;
      styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
      for (const [groupName, group] of Object.entries(styles)) {
        for (const [styleName, style] of Object.entries(group)) {
          styles[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
      }
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
      setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
      setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
      setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
      setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
      setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
      return styles;
    }
    Object.defineProperty(module, "exports", {
      enumerable: true,
      get: assembleStyles
    });
  }
});

// node_modules/supports-color/browser.js
var require_browser = __commonJS({
  "node_modules/supports-color/browser.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    module.exports = {
      stdout: false,
      stderr: false
    };
  }
});

// node_modules/chalk/source/util.js
var require_util = __commonJS({
  "node_modules/chalk/source/util.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var stringReplaceAll = (string, substring, replacer) => {
      let index = string.indexOf(substring);
      if (index === -1) {
        return string;
      }
      const substringLength = substring.length;
      let endIndex = 0;
      let returnValue = "";
      do {
        returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
        endIndex = index + substringLength;
        index = string.indexOf(substring, endIndex);
      } while (index !== -1);
      returnValue += string.substr(endIndex);
      return returnValue;
    };
    var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
      let endIndex = 0;
      let returnValue = "";
      do {
        const gotCR = string[index - 1] === "\r";
        returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
        endIndex = index + 1;
        index = string.indexOf("\n", endIndex);
      } while (index !== -1);
      returnValue += string.substr(endIndex);
      return returnValue;
    };
    module.exports = {
      stringReplaceAll,
      stringEncaseCRLFWithFirstIndex
    };
  }
});

// node_modules/chalk/source/templates.js
var require_templates = __commonJS({
  "node_modules/chalk/source/templates.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
    var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
    var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
    var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
    var ESCAPES = /* @__PURE__ */ new Map([
      ["n", "\n"],
      ["r", "\r"],
      ["t", "	"],
      ["b", "\b"],
      ["f", "\f"],
      ["v", "\v"],
      ["0", "\0"],
      ["\\", "\\"],
      ["e", "\x1B"],
      ["a", "\x07"]
    ]);
    function unescape(c) {
      const u = c[0] === "u";
      const bracket = c[1] === "{";
      if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
        return String.fromCharCode(parseInt(c.slice(1), 16));
      }
      if (u && bracket) {
        return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
      }
      return ESCAPES.get(c) || c;
    }
    function parseArguments(name, arguments_) {
      const results = [];
      const chunks = arguments_.trim().split(/\s*,\s*/g);
      let matches;
      for (const chunk of chunks) {
        const number = Number(chunk);
        if (!Number.isNaN(number)) {
          results.push(number);
        } else if (matches = chunk.match(STRING_REGEX)) {
          results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
        } else {
          throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
        }
      }
      return results;
    }
    function parseStyle(style) {
      STYLE_REGEX.lastIndex = 0;
      const results = [];
      let matches;
      while ((matches = STYLE_REGEX.exec(style)) !== null) {
        const name = matches[1];
        if (matches[2]) {
          const args = parseArguments(name, matches[2]);
          results.push([name].concat(args));
        } else {
          results.push([name]);
        }
      }
      return results;
    }
    function buildStyle(chalk2, styles) {
      const enabled = {};
      for (const layer of styles) {
        for (const style of layer.styles) {
          enabled[style[0]] = layer.inverse ? null : style.slice(1);
        }
      }
      let current = chalk2;
      for (const [styleName, styles2] of Object.entries(enabled)) {
        if (!Array.isArray(styles2)) {
          continue;
        }
        if (!(styleName in current)) {
          throw new Error(`Unknown Chalk style: ${styleName}`);
        }
        current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
      }
      return current;
    }
    module.exports = (chalk2, temporary) => {
      const styles = [];
      const chunks = [];
      let chunk = [];
      temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
        if (escapeCharacter) {
          chunk.push(unescape(escapeCharacter));
        } else if (style) {
          const string = chunk.join("");
          chunk = [];
          chunks.push(styles.length === 0 ? string : buildStyle(chalk2, styles)(string));
          styles.push({ inverse, styles: parseStyle(style) });
        } else if (close) {
          if (styles.length === 0) {
            throw new Error("Found extraneous } in Chalk template literal");
          }
          chunks.push(buildStyle(chalk2, styles)(chunk.join("")));
          chunk = [];
          styles.pop();
        } else {
          chunk.push(character);
        }
      });
      chunks.push(chunk.join(""));
      if (styles.length > 0) {
        const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
        throw new Error(errMessage);
      }
      return chunks.join("");
    };
  }
});

// node_modules/chalk/source/index.js
var require_source = __commonJS({
  "node_modules/chalk/source/index.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var ansiStyles = require_ansi_styles();
    var { stdout: stdoutColor, stderr: stderrColor } = require_browser();
    var {
      stringReplaceAll,
      stringEncaseCRLFWithFirstIndex
    } = require_util();
    var { isArray } = Array;
    var levelMapping = [
      "ansi",
      "ansi",
      "ansi256",
      "ansi16m"
    ];
    var styles = /* @__PURE__ */ Object.create(null);
    var applyOptions = (object, options = {}) => {
      if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
        throw new Error("The `level` option should be an integer from 0 to 3");
      }
      const colorLevel = stdoutColor ? stdoutColor.level : 0;
      object.level = options.level === void 0 ? colorLevel : options.level;
    };
    var ChalkClass = class {
      constructor(options) {
        return chalkFactory(options);
      }
    };
    var chalkFactory = (options) => {
      const chalk3 = {};
      applyOptions(chalk3, options);
      chalk3.template = (...arguments_) => chalkTag(chalk3.template, ...arguments_);
      Object.setPrototypeOf(chalk3, Chalk.prototype);
      Object.setPrototypeOf(chalk3.template, chalk3);
      chalk3.template.constructor = () => {
        throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
      };
      chalk3.template.Instance = ChalkClass;
      return chalk3.template;
    };
    function Chalk(options) {
      return chalkFactory(options);
    }
    for (const [styleName, style] of Object.entries(ansiStyles)) {
      styles[styleName] = {
        get() {
          const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
          Object.defineProperty(this, styleName, { value: builder });
          return builder;
        }
      };
    }
    styles.visible = {
      get() {
        const builder = createBuilder(this, this._styler, true);
        Object.defineProperty(this, "visible", { value: builder });
        return builder;
      }
    };
    var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
    for (const model of usedModels) {
      styles[model] = {
        get() {
          const { level } = this;
          return function(...arguments_) {
            const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        }
      };
    }
    for (const model of usedModels) {
      const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
      styles[bgModel] = {
        get() {
          const { level } = this;
          return function(...arguments_) {
            const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
            return createBuilder(this, styler, this._isEmpty);
          };
        }
      };
    }
    var proto = Object.defineProperties(() => {
    }, {
      ...styles,
      level: {
        enumerable: true,
        get() {
          return this._generator.level;
        },
        set(level) {
          this._generator.level = level;
        }
      }
    });
    var createStyler = (open, close, parent) => {
      let openAll;
      let closeAll;
      if (parent === void 0) {
        openAll = open;
        closeAll = close;
      } else {
        openAll = parent.openAll + open;
        closeAll = close + parent.closeAll;
      }
      return {
        open,
        close,
        openAll,
        closeAll,
        parent
      };
    };
    var createBuilder = (self2, _styler, _isEmpty) => {
      const builder = (...arguments_) => {
        if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
          return applyStyle(builder, chalkTag(builder, ...arguments_));
        }
        return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
      };
      Object.setPrototypeOf(builder, proto);
      builder._generator = self2;
      builder._styler = _styler;
      builder._isEmpty = _isEmpty;
      return builder;
    };
    var applyStyle = (self2, string) => {
      if (self2.level <= 0 || !string) {
        return self2._isEmpty ? "" : string;
      }
      let styler = self2._styler;
      if (styler === void 0) {
        return string;
      }
      const { openAll, closeAll } = styler;
      if (string.indexOf("\x1B") !== -1) {
        while (styler !== void 0) {
          string = stringReplaceAll(string, styler.close, styler.open);
          styler = styler.parent;
        }
      }
      const lfIndex = string.indexOf("\n");
      if (lfIndex !== -1) {
        string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
      }
      return openAll + string + closeAll;
    };
    var template;
    var chalkTag = (chalk3, ...strings) => {
      const [firstString] = strings;
      if (!isArray(firstString) || !isArray(firstString.raw)) {
        return strings.join(" ");
      }
      const arguments_ = strings.slice(1);
      const parts = [firstString.raw[0]];
      for (let i = 1; i < firstString.length; i++) {
        parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
      }
      if (template === void 0) {
        template = require_templates();
      }
      return template(chalk3, parts.join(""));
    };
    Object.defineProperties(Chalk.prototype, styles);
    var chalk2 = Chalk();
    chalk2.supportsColor = stdoutColor;
    chalk2.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
    chalk2.stderr.supportsColor = stderrColor;
    module.exports = chalk2;
  }
});

// node-modules-polyfills:path
var path_exports = {};
__export(path_exports, {
  basename: () => basename,
  default: () => path_default,
  delimiter: () => delimiter,
  dirname: () => dirname,
  extname: () => extname,
  isAbsolute: () => isAbsolute,
  join: () => join4,
  normalize: () => normalize,
  relative: () => relative,
  resolve: () => resolve,
  sep: () => sep
});
function normalizeArray(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === ".") {
      parts.splice(i, 1);
    } else if (last === "..") {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift("..");
    }
  }
  return parts;
}
function resolve() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path2 = i >= 0 ? arguments[i] : "/";
    if (typeof path2 !== "string") {
      throw new TypeError("Arguments to path.resolve must be strings");
    } else if (!path2) {
      continue;
    }
    resolvedPath = path2 + "/" + resolvedPath;
    resolvedAbsolute = path2.charAt(0) === "/";
  }
  resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
    return !!p;
  }), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
}
function normalize(path2) {
  var isPathAbsolute = isAbsolute(path2), trailingSlash = substr(path2, -1) === "/";
  path2 = normalizeArray(filter(path2.split("/"), function(p) {
    return !!p;
  }), !isPathAbsolute).join("/");
  if (!path2 && !isPathAbsolute) {
    path2 = ".";
  }
  if (path2 && trailingSlash) {
    path2 += "/";
  }
  return (isPathAbsolute ? "/" : "") + path2;
}
function isAbsolute(path2) {
  return path2.charAt(0) === "/";
}
function join4() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return normalize(filter(paths, function(p, index) {
    if (typeof p !== "string") {
      throw new TypeError("Arguments to path.join must be strings");
    }
    return p;
  }).join("/"));
}
function relative(from2, to) {
  from2 = resolve(from2).substr(1);
  to = resolve(to).substr(1);
  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== "")
        break;
    }
    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== "")
        break;
    }
    if (start > end)
      return [];
    return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from2.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
}
function dirname(path2) {
  var result = splitPath(path2), root = result[0], dir = result[1];
  if (!root && !dir) {
    return ".";
  }
  if (dir) {
    dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
}
function basename(path2, ext) {
  var f = splitPath(path2)[2];
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
}
function extname(path2) {
  return splitPath(path2)[3];
}
function filter(xs, f) {
  if (xs.filter)
    return xs.filter(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs))
      res.push(xs[i]);
  }
  return res;
}
var splitPathRe, splitPath, sep, delimiter, path_default, substr;
var init_path = __esm({
  "node-modules-polyfills:path"() {
    init_virtual_process_polyfill();
    init_buffer();
    splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    splitPath = function(filename) {
      return splitPathRe.exec(filename).slice(1);
    };
    sep = "/";
    delimiter = ":";
    path_default = {
      extname,
      basename,
      dirname,
      sep,
      delimiter,
      relative,
      join: join4,
      isAbsolute,
      normalize,
      resolve
    };
    substr = "ab".substr(-1) === "b" ? function(str2, start, len) {
      return str2.substr(start, len);
    } : function(str2, start, len) {
      if (start < 0)
        start = str2.length + start;
      return str2.substr(start, len);
    };
  }
});

// node-modules-polyfills-commonjs:path
var require_path = __commonJS({
  "node-modules-polyfills-commonjs:path"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var polyfill = (init_path(), __toCommonJS(path_exports));
    if (polyfill && polyfill.default) {
      module.exports = polyfill.default;
      for (let k in polyfill) {
        module.exports[k] = polyfill[k];
      }
    } else if (polyfill) {
      module.exports = polyfill;
    }
  }
});

// node_modules/file-uri-to-path/dist/src/index.js
var require_src = __commonJS({
  "node_modules/file-uri-to-path/dist/src/index.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var path_1 = require_path();
    function fileUriToPath2(uri) {
      if (typeof uri !== "string" || uri.length <= 7 || uri.substring(0, 7) !== "file://") {
        throw new TypeError("must pass in a file:// URI to convert to a file path");
      }
      const rest = decodeURI(uri.substring(7));
      const firstSlash = rest.indexOf("/");
      let host = rest.substring(0, firstSlash);
      let path2 = rest.substring(firstSlash + 1);
      if (host === "localhost") {
        host = "";
      }
      if (host) {
        host = path_1.sep + path_1.sep + host;
      }
      path2 = path2.replace(/^(.+)\|/, "$1:");
      if (path_1.sep === "\\") {
        path2 = path2.replace(/\//g, "\\");
      }
      if (/^.+:/.test(path2)) {
      } else {
        path2 = path_1.sep + path2;
      }
      return host + path2;
    }
    module.exports = fileUriToPath2;
  }
});

// node_modules/dataloader/index.js
var require_dataloader = __commonJS({
  "node_modules/dataloader/index.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var DataLoader3 = /* @__PURE__ */ function() {
      function DataLoader4(batchLoadFn, options) {
        if (typeof batchLoadFn !== "function") {
          throw new TypeError("DataLoader must be constructed with a function which accepts " + ("Array<key> and returns Promise<Array<value>>, but got: " + batchLoadFn + "."));
        }
        this._batchLoadFn = batchLoadFn;
        this._maxBatchSize = getValidMaxBatchSize(options);
        this._batchScheduleFn = getValidBatchScheduleFn(options);
        this._cacheKeyFn = getValidCacheKeyFn(options);
        this._cacheMap = getValidCacheMap(options);
        this._batch = null;
      }
      var _proto = DataLoader4.prototype;
      _proto.load = function load2(key) {
        if (key === null || key === void 0) {
          throw new TypeError("The loader.load() function must be called with a value, " + ("but got: " + String(key) + "."));
        }
        var batch = getCurrentBatch(this);
        var cacheMap = this._cacheMap;
        var cacheKey = this._cacheKeyFn(key);
        if (cacheMap) {
          var cachedPromise = cacheMap.get(cacheKey);
          if (cachedPromise) {
            var cacheHits = batch.cacheHits || (batch.cacheHits = []);
            return new Promise(function(resolve2) {
              cacheHits.push(function() {
                resolve2(cachedPromise);
              });
            });
          }
        }
        batch.keys.push(key);
        var promise = new Promise(function(resolve2, reject3) {
          batch.callbacks.push({
            resolve: resolve2,
            reject: reject3
          });
        });
        if (cacheMap) {
          cacheMap.set(cacheKey, promise);
        }
        return promise;
      };
      _proto.loadMany = function loadMany(keys) {
        if (!isArrayLike(keys)) {
          throw new TypeError("The loader.loadMany() function must be called with Array<key> " + ("but got: " + keys + "."));
        }
        var loadPromises = [];
        for (var i = 0; i < keys.length; i++) {
          loadPromises.push(this.load(keys[i])["catch"](function(error) {
            return error;
          }));
        }
        return Promise.all(loadPromises);
      };
      _proto.clear = function clear(key) {
        var cacheMap = this._cacheMap;
        if (cacheMap) {
          var cacheKey = this._cacheKeyFn(key);
          cacheMap["delete"](cacheKey);
        }
        return this;
      };
      _proto.clearAll = function clearAll() {
        var cacheMap = this._cacheMap;
        if (cacheMap) {
          cacheMap.clear();
        }
        return this;
      };
      _proto.prime = function prime(key, value) {
        var cacheMap = this._cacheMap;
        if (cacheMap) {
          var cacheKey = this._cacheKeyFn(key);
          if (cacheMap.get(cacheKey) === void 0) {
            var promise;
            if (value instanceof Error) {
              promise = Promise.reject(value);
              promise["catch"](function() {
              });
            } else {
              promise = Promise.resolve(value);
            }
            cacheMap.set(cacheKey, promise);
          }
        }
        return this;
      };
      return DataLoader4;
    }();
    var enqueuePostPromiseJob = typeof process === "object" && typeof process.nextTick === "function" ? function(fn) {
      if (!resolvedPromise) {
        resolvedPromise = Promise.resolve();
      }
      resolvedPromise.then(function() {
        process.nextTick(fn);
      });
    } : typeof setImmediate === "function" ? function(fn) {
      setImmediate(fn);
    } : function(fn) {
      setTimeout(fn);
    };
    var resolvedPromise;
    function getCurrentBatch(loader2) {
      var existingBatch = loader2._batch;
      if (existingBatch !== null && !existingBatch.hasDispatched && existingBatch.keys.length < loader2._maxBatchSize && (!existingBatch.cacheHits || existingBatch.cacheHits.length < loader2._maxBatchSize)) {
        return existingBatch;
      }
      var newBatch = {
        hasDispatched: false,
        keys: [],
        callbacks: []
      };
      loader2._batch = newBatch;
      loader2._batchScheduleFn(function() {
        dispatchBatch(loader2, newBatch);
      });
      return newBatch;
    }
    function dispatchBatch(loader2, batch) {
      batch.hasDispatched = true;
      if (batch.keys.length === 0) {
        resolveCacheHits(batch);
        return;
      }
      var batchPromise = loader2._batchLoadFn(batch.keys);
      if (!batchPromise || typeof batchPromise.then !== "function") {
        return failedDispatch(loader2, batch, new TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did " + ("not return a Promise: " + String(batchPromise) + ".")));
      }
      batchPromise.then(function(values) {
        if (!isArrayLike(values)) {
          throw new TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did " + ("not return a Promise of an Array: " + String(values) + "."));
        }
        if (values.length !== batch.keys.length) {
          throw new TypeError("DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array of the same length as the Array of keys." + ("\n\nKeys:\n" + String(batch.keys)) + ("\n\nValues:\n" + String(values)));
        }
        resolveCacheHits(batch);
        for (var i = 0; i < batch.callbacks.length; i++) {
          var value = values[i];
          if (value instanceof Error) {
            batch.callbacks[i].reject(value);
          } else {
            batch.callbacks[i].resolve(value);
          }
        }
      })["catch"](function(error) {
        failedDispatch(loader2, batch, error);
      });
    }
    function failedDispatch(loader2, batch, error) {
      resolveCacheHits(batch);
      for (var i = 0; i < batch.keys.length; i++) {
        loader2.clear(batch.keys[i]);
        batch.callbacks[i].reject(error);
      }
    }
    function resolveCacheHits(batch) {
      if (batch.cacheHits) {
        for (var i = 0; i < batch.cacheHits.length; i++) {
          batch.cacheHits[i]();
        }
      }
    }
    function getValidMaxBatchSize(options) {
      var shouldBatch = !options || options.batch !== false;
      if (!shouldBatch) {
        return 1;
      }
      var maxBatchSize = options && options.maxBatchSize;
      if (maxBatchSize === void 0) {
        return Infinity;
      }
      if (typeof maxBatchSize !== "number" || maxBatchSize < 1) {
        throw new TypeError("maxBatchSize must be a positive number: " + maxBatchSize);
      }
      return maxBatchSize;
    }
    function getValidBatchScheduleFn(options) {
      var batchScheduleFn = options && options.batchScheduleFn;
      if (batchScheduleFn === void 0) {
        return enqueuePostPromiseJob;
      }
      if (typeof batchScheduleFn !== "function") {
        throw new TypeError("batchScheduleFn must be a function: " + batchScheduleFn);
      }
      return batchScheduleFn;
    }
    function getValidCacheKeyFn(options) {
      var cacheKeyFn = options && options.cacheKeyFn;
      if (cacheKeyFn === void 0) {
        return function(key) {
          return key;
        };
      }
      if (typeof cacheKeyFn !== "function") {
        throw new TypeError("cacheKeyFn must be a function: " + cacheKeyFn);
      }
      return cacheKeyFn;
    }
    function getValidCacheMap(options) {
      var shouldCache = !options || options.cache !== false;
      if (!shouldCache) {
        return null;
      }
      var cacheMap = options && options.cacheMap;
      if (cacheMap === void 0) {
        return /* @__PURE__ */ new Map();
      }
      if (cacheMap !== null) {
        var cacheFunctions = ["get", "set", "delete", "clear"];
        var missingFunctions = cacheFunctions.filter(function(fnName) {
          return cacheMap && typeof cacheMap[fnName] !== "function";
        });
        if (missingFunctions.length !== 0) {
          throw new TypeError("Custom cacheMap missing methods: " + missingFunctions.join(", "));
        }
      }
      return cacheMap;
    }
    function isArrayLike(x) {
      return typeof x === "object" && x !== null && typeof x.length === "number" && (x.length === 0 || x.length > 0 && Object.prototype.hasOwnProperty.call(x, x.length - 1));
    }
    module.exports = DataLoader3;
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var __extends3;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter3;
    var __generator3;
    var __exportStar2;
    var __values3;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __spreadArray2;
    var __await3;
    var __asyncGenerator3;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __classPrivateFieldIn2;
    var __createBinding2;
    (function(factory) {
      var root = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends3 = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics2(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest2 = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter3 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          });
        }
        return new (P || (P = Promise))(function(resolve2, reject3) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject3(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject3(e);
            }
          }
          function step(result) {
            result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator3 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar2 = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding2(o, m, p);
      };
      __createBinding2 = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values3 = function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray2 = function(to, from2, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from2.length, ar; i < l; i++) {
            if (ar || !(i in from2)) {
              if (!ar)
                ar = Array.prototype.slice.call(from2, 0, i);
              ar[i] = from2[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from2));
      };
      __await3 = function(v) {
        return this instanceof __await3 ? (this.v = v, this) : new __await3(v);
      };
      __asyncGenerator3 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await3 ? Promise.resolve(r.value.v).then(fulfill, reject3) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject3(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator2 = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await3(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values3 === "function" ? __values3(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve2, reject3) {
              v = o[n](v), settle(resolve2, reject3, v.done, v.value);
            });
          };
        }
        function settle(resolve2, reject3, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve2({ value: v2, done: d });
          }, reject3);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding2(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn2 = function(state, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
      };
      exporter("__extends", __extends3);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter3);
      exporter("__generator", __generator3);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values3);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await3);
      exporter("__asyncGenerator", __asyncGenerator3);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
    });
  }
});

// (disabled):node_modules/object-inspect/util.inspect
var require_util2 = __commonJS({
  "(disabled):node_modules/object-inspect/util.inspect"() {
    init_virtual_process_polyfill();
    init_buffer();
  }
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS({
  "node_modules/object-inspect/index.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var hasMap = typeof Map === "function" && Map.prototype;
    var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
    var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
    var mapForEach = hasMap && Map.prototype.forEach;
    var hasSet = typeof Set === "function" && Set.prototype;
    var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
    var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
    var setForEach = hasSet && Set.prototype.forEach;
    var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
    var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
    var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
    var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
    var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
    var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
    var booleanValueOf = Boolean.prototype.valueOf;
    var objectToString = Object.prototype.toString;
    var functionToString = Function.prototype.toString;
    var match = String.prototype.match;
    var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
    var gOPS = Object.getOwnPropertySymbols;
    var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
    var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
    var isEnumerable = Object.prototype.propertyIsEnumerable;
    var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
      return O.__proto__;
    } : null);
    var inspectCustom = require_util2().custom;
    var inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;
    var toStringTag = typeof Symbol === "function" && typeof Symbol.toStringTag !== "undefined" ? Symbol.toStringTag : null;
    module.exports = function inspect_(obj, options, depth, seen) {
      var opts = options || {};
      if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
        throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
        throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
      if (typeof customInspect !== "boolean") {
        throw new TypeError('option "customInspect", if provided, must be `true` or `false`');
      }
      if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
        throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (typeof obj === "undefined") {
        return "undefined";
      }
      if (obj === null) {
        return "null";
      }
      if (typeof obj === "boolean") {
        return obj ? "true" : "false";
      }
      if (typeof obj === "string") {
        return inspectString(obj, opts);
      }
      if (typeof obj === "number") {
        if (obj === 0) {
          return Infinity / obj > 0 ? "0" : "-0";
        }
        return String(obj);
      }
      if (typeof obj === "bigint") {
        return String(obj) + "n";
      }
      var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
      if (typeof depth === "undefined") {
        depth = 0;
      }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
        return isArray(obj) ? "[Array]" : "[Object]";
      }
      var indent4 = getIndent(opts, depth);
      if (typeof seen === "undefined") {
        seen = [];
      } else if (indexOf2(seen, obj) >= 0) {
        return "[Circular]";
      }
      function inspect6(value, from2, noIndent) {
        if (from2) {
          seen = seen.slice();
          seen.push(from2);
        }
        if (noIndent) {
          var newOpts = {
            depth: opts.depth
          };
          if (has(opts, "quoteStyle")) {
            newOpts.quoteStyle = opts.quoteStyle;
          }
          return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
      }
      if (typeof obj === "function") {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect6);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + keys.join(", ") + " }" : "");
      }
      if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? String(obj).replace(/^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement(obj)) {
        var s = "<" + String(obj.nodeName).toLowerCase();
        var attrs = obj.attributes || [];
        for (var i = 0; i < attrs.length; i++) {
          s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        }
        s += ">";
        if (obj.childNodes && obj.childNodes.length) {
          s += "...";
        }
        s += "</" + String(obj.nodeName).toLowerCase() + ">";
        return s;
      }
      if (isArray(obj)) {
        if (obj.length === 0) {
          return "[]";
        }
        var xs = arrObjKeys(obj, inspect6);
        if (indent4 && !singleLineValues(xs)) {
          return "[" + indentedJoin(xs, indent4) + "]";
        }
        return "[ " + xs.join(", ") + " ]";
      }
      if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect6);
        if (parts.length === 0) {
          return "[" + String(obj) + "]";
        }
        return "{ [" + String(obj) + "] " + parts.join(", ") + " }";
      }
      if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function") {
          return obj[inspectSymbol]();
        } else if (typeof obj.inspect === "function") {
          return obj.inspect();
        }
      }
      if (isMap(obj)) {
        var mapParts = [];
        mapForEach.call(obj, function(value, key) {
          mapParts.push(inspect6(key, obj, true) + " => " + inspect6(value, obj));
        });
        return collectionOf("Map", mapSize.call(obj), mapParts, indent4);
      }
      if (isSet(obj)) {
        var setParts = [];
        setForEach.call(obj, function(value) {
          setParts.push(inspect6(value, obj));
        });
        return collectionOf("Set", setSize.call(obj), setParts, indent4);
      }
      if (isWeakMap(obj)) {
        return weakCollectionOf("WeakMap");
      }
      if (isWeakSet(obj)) {
        return weakCollectionOf("WeakSet");
      }
      if (isWeakRef(obj)) {
        return weakCollectionOf("WeakRef");
      }
      if (isNumber(obj)) {
        return markBoxed(inspect6(Number(obj)));
      }
      if (isBigInt(obj)) {
        return markBoxed(inspect6(bigIntValueOf.call(obj)));
      }
      if (isBoolean2(obj)) {
        return markBoxed(booleanValueOf.call(obj));
      }
      if (isString(obj)) {
        return markBoxed(inspect6(String(obj)));
      }
      if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect6);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? toStr(obj).slice(8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + [].concat(stringTag || [], protoTag || []).join(": ") + "] " : "");
        if (ys.length === 0) {
          return tag + "{}";
        }
        if (indent4) {
          return tag + "{" + indentedJoin(ys, indent4) + "}";
        }
        return tag + "{ " + ys.join(", ") + " }";
      }
      return String(obj);
    };
    function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
      return quoteChar + s + quoteChar;
    }
    function quote(s) {
      return String(s).replace(/"/g, "&quot;");
    }
    function isArray(obj) {
      return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isDate(obj) {
      return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isRegExp(obj) {
      return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isError(obj) {
      return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isString(obj) {
      return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isNumber(obj) {
      return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isBoolean2(obj) {
      return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
    }
    function isSymbol(obj) {
      if (hasShammedSymbols) {
        return obj && typeof obj === "object" && obj instanceof Symbol;
      }
      if (typeof obj === "symbol") {
        return true;
      }
      if (!obj || typeof obj !== "object" || !symToString) {
        return false;
      }
      try {
        symToString.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isBigInt(obj) {
      if (!obj || typeof obj !== "object" || !bigIntValueOf) {
        return false;
      }
      try {
        bigIntValueOf.call(obj);
        return true;
      } catch (e) {
      }
      return false;
    }
    var hasOwn = Object.prototype.hasOwnProperty || function(key) {
      return key in this;
    };
    function has(obj, key) {
      return hasOwn.call(obj, key);
    }
    function toStr(obj) {
      return objectToString.call(obj);
    }
    function nameOf(f) {
      if (f.name) {
        return f.name;
      }
      var m = match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) {
        return m[1];
      }
      return null;
    }
    function indexOf2(xs, x) {
      if (xs.indexOf) {
        return xs.indexOf(x);
      }
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) {
          return i;
        }
      }
      return -1;
    }
    function isMap(x) {
      if (!mapSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        mapSize.call(x);
        try {
          setSize.call(x);
        } catch (s) {
          return true;
        }
        return x instanceof Map;
      } catch (e) {
      }
      return false;
    }
    function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakMapHas.call(x, weakMapHas);
        try {
          weakSetHas.call(x, weakSetHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakMap;
      } catch (e) {
      }
      return false;
    }
    function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakRefDeref.call(x);
        return true;
      } catch (e) {
      }
      return false;
    }
    function isSet(x) {
      if (!setSize || !x || typeof x !== "object") {
        return false;
      }
      try {
        setSize.call(x);
        try {
          mapSize.call(x);
        } catch (m) {
          return true;
        }
        return x instanceof Set;
      } catch (e) {
      }
      return false;
    }
    function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== "object") {
        return false;
      }
      try {
        weakSetHas.call(x, weakSetHas);
        try {
          weakMapHas.call(x, weakMapHas);
        } catch (s) {
          return true;
        }
        return x instanceof WeakSet;
      } catch (e) {
      }
      return false;
    }
    function isElement(x) {
      if (!x || typeof x !== "object") {
        return false;
      }
      if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
        return true;
      }
      return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
    }
    function inspectString(str2, opts) {
      if (str2.length > opts.maxStringLength) {
        var remaining = str2.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString(str2.slice(0, opts.maxStringLength), opts) + trailer;
      }
      var s = str2.replace(/(['\\])/g, "\\$1").replace(/[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, "single", opts);
    }
    function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
      }[n];
      if (x) {
        return "\\" + x;
      }
      return "\\x" + (n < 16 ? "0" : "") + n.toString(16).toUpperCase();
    }
    function markBoxed(str2) {
      return "Object(" + str2 + ")";
    }
    function weakCollectionOf(type2) {
      return type2 + " { ? }";
    }
    function collectionOf(type2, size, entries, indent4) {
      var joinedEntries = indent4 ? indentedJoin(entries, indent4) : entries.join(", ");
      return type2 + " (" + size + ") {" + joinedEntries + "}";
    }
    function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
        if (indexOf2(xs[i], "\n") >= 0) {
          return false;
        }
      }
      return true;
    }
    function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === "	") {
        baseIndent = "	";
      } else if (typeof opts.indent === "number" && opts.indent > 0) {
        baseIndent = Array(opts.indent + 1).join(" ");
      } else {
        return null;
      }
      return {
        base: baseIndent,
        prev: Array(depth + 1).join(baseIndent)
      };
    }
    function indentedJoin(xs, indent4) {
      if (xs.length === 0) {
        return "";
      }
      var lineJoiner = "\n" + indent4.prev + indent4.base;
      return lineJoiner + xs.join("," + lineJoiner) + "\n" + indent4.prev;
    }
    function arrObjKeys(obj, inspect6) {
      var isArr = isArray(obj);
      var xs = [];
      if (isArr) {
        xs.length = obj.length;
        for (var i = 0; i < obj.length; i++) {
          xs[i] = has(obj, i) ? inspect6(obj[i], obj) : "";
        }
      }
      var syms = typeof gOPS === "function" ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
        symMap = {};
        for (var k = 0; k < syms.length; k++) {
          symMap["$" + syms[k]] = syms[k];
        }
      }
      for (var key in obj) {
        if (!has(obj, key)) {
          continue;
        }
        if (isArr && String(Number(key)) === key && key < obj.length) {
          continue;
        }
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
          continue;
        } else if (/[^\w$]/.test(key)) {
          xs.push(inspect6(key, obj) + ": " + inspect6(obj[key], obj));
        } else {
          xs.push(key + ": " + inspect6(obj[key], obj));
        }
      }
      if (typeof gOPS === "function") {
        for (var j = 0; j < syms.length; j++) {
          if (isEnumerable.call(obj, syms[j])) {
            xs.push("[" + inspect6(syms[j]) + "]: " + inspect6(obj[syms[j]], obj));
          }
        }
      }
      return xs;
    }
  }
});

// node_modules/dependency-graph/lib/dep_graph.js
var require_dep_graph = __commonJS({
  "node_modules/dependency-graph/lib/dep_graph.js"(exports) {
    init_virtual_process_polyfill();
    init_buffer();
    function createDFS(edges, leavesOnly, result, circular) {
      var visited = {};
      return function(start) {
        if (visited[start]) {
          return;
        }
        var inCurrentPath = {};
        var currentPath = [];
        var todo = [];
        todo.push({ node: start, processed: false });
        while (todo.length > 0) {
          var current = todo[todo.length - 1];
          var processed = current.processed;
          var node = current.node;
          if (!processed) {
            if (visited[node]) {
              todo.pop();
              continue;
            } else if (inCurrentPath[node]) {
              if (circular) {
                todo.pop();
                continue;
              }
              currentPath.push(node);
              throw new DepGraphCycleError(currentPath);
            }
            inCurrentPath[node] = true;
            currentPath.push(node);
            var nodeEdges = edges[node];
            for (var i = nodeEdges.length - 1; i >= 0; i--) {
              todo.push({ node: nodeEdges[i], processed: false });
            }
            current.processed = true;
          } else {
            todo.pop();
            currentPath.pop();
            inCurrentPath[node] = false;
            visited[node] = true;
            if (!leavesOnly || edges[node].length === 0) {
              result.push(node);
            }
          }
        }
      };
    }
    var DepGraph2 = exports.DepGraph = function DepGraph3(opts) {
      this.nodes = {};
      this.outgoingEdges = {};
      this.incomingEdges = {};
      this.circular = opts && !!opts.circular;
    };
    DepGraph2.prototype = {
      size: function() {
        return Object.keys(this.nodes).length;
      },
      addNode: function(node, data) {
        if (!this.hasNode(node)) {
          if (arguments.length === 2) {
            this.nodes[node] = data;
          } else {
            this.nodes[node] = node;
          }
          this.outgoingEdges[node] = [];
          this.incomingEdges[node] = [];
        }
      },
      removeNode: function(node) {
        if (this.hasNode(node)) {
          delete this.nodes[node];
          delete this.outgoingEdges[node];
          delete this.incomingEdges[node];
          [this.incomingEdges, this.outgoingEdges].forEach(function(edgeList) {
            Object.keys(edgeList).forEach(function(key) {
              var idx = edgeList[key].indexOf(node);
              if (idx >= 0) {
                edgeList[key].splice(idx, 1);
              }
            }, this);
          });
        }
      },
      hasNode: function(node) {
        return this.nodes.hasOwnProperty(node);
      },
      getNodeData: function(node) {
        if (this.hasNode(node)) {
          return this.nodes[node];
        } else {
          throw new Error("Node does not exist: " + node);
        }
      },
      setNodeData: function(node, data) {
        if (this.hasNode(node)) {
          this.nodes[node] = data;
        } else {
          throw new Error("Node does not exist: " + node);
        }
      },
      addDependency: function(from2, to) {
        if (!this.hasNode(from2)) {
          throw new Error("Node does not exist: " + from2);
        }
        if (!this.hasNode(to)) {
          throw new Error("Node does not exist: " + to);
        }
        if (this.outgoingEdges[from2].indexOf(to) === -1) {
          this.outgoingEdges[from2].push(to);
        }
        if (this.incomingEdges[to].indexOf(from2) === -1) {
          this.incomingEdges[to].push(from2);
        }
        return true;
      },
      removeDependency: function(from2, to) {
        var idx;
        if (this.hasNode(from2)) {
          idx = this.outgoingEdges[from2].indexOf(to);
          if (idx >= 0) {
            this.outgoingEdges[from2].splice(idx, 1);
          }
        }
        if (this.hasNode(to)) {
          idx = this.incomingEdges[to].indexOf(from2);
          if (idx >= 0) {
            this.incomingEdges[to].splice(idx, 1);
          }
        }
      },
      clone: function() {
        var source = this;
        var result = new DepGraph2();
        var keys = Object.keys(source.nodes);
        keys.forEach(function(n) {
          result.nodes[n] = source.nodes[n];
          result.outgoingEdges[n] = source.outgoingEdges[n].slice(0);
          result.incomingEdges[n] = source.incomingEdges[n].slice(0);
        });
        return result;
      },
      directDependenciesOf: function(node) {
        if (this.hasNode(node)) {
          return this.outgoingEdges[node].slice(0);
        } else {
          throw new Error("Node does not exist: " + node);
        }
      },
      directDependantsOf: function(node) {
        if (this.hasNode(node)) {
          return this.incomingEdges[node].slice(0);
        } else {
          throw new Error("Node does not exist: " + node);
        }
      },
      dependenciesOf: function(node, leavesOnly) {
        if (this.hasNode(node)) {
          var result = [];
          var DFS = createDFS(this.outgoingEdges, leavesOnly, result, this.circular);
          DFS(node);
          var idx = result.indexOf(node);
          if (idx >= 0) {
            result.splice(idx, 1);
          }
          return result;
        } else {
          throw new Error("Node does not exist: " + node);
        }
      },
      dependantsOf: function(node, leavesOnly) {
        if (this.hasNode(node)) {
          var result = [];
          var DFS = createDFS(this.incomingEdges, leavesOnly, result, this.circular);
          DFS(node);
          var idx = result.indexOf(node);
          if (idx >= 0) {
            result.splice(idx, 1);
          }
          return result;
        } else {
          throw new Error("Node does not exist: " + node);
        }
      },
      overallOrder: function(leavesOnly) {
        var self2 = this;
        var result = [];
        var keys = Object.keys(this.nodes);
        if (keys.length === 0) {
          return result;
        } else {
          if (!this.circular) {
            var CycleDFS = createDFS(this.outgoingEdges, false, [], this.circular);
            keys.forEach(function(n) {
              CycleDFS(n);
            });
          }
          var DFS = createDFS(this.outgoingEdges, leavesOnly, result, this.circular);
          keys.filter(function(node) {
            return self2.incomingEdges[node].length === 0;
          }).forEach(function(n) {
            DFS(n);
          });
          if (this.circular) {
            keys.filter(function(node) {
              return result.indexOf(node) === -1;
            }).forEach(function(n) {
              DFS(n);
            });
          }
          return result;
        }
      },
      entryNodes: function() {
        var self2 = this;
        return Object.keys(this.nodes).filter(function(node) {
          return self2.incomingEdges[node].length === 0;
        });
      }
    };
    DepGraph2.prototype.directDependentsOf = DepGraph2.prototype.directDependantsOf;
    DepGraph2.prototype.dependentsOf = DepGraph2.prototype.dependantsOf;
    var DepGraphCycleError = exports.DepGraphCycleError = function(cyclePath) {
      var message = "Dependency Cycle Found: " + cyclePath.join(" -> ");
      var instance = new Error(message);
      instance.cyclePath = cyclePath;
      Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
      if (Error.captureStackTrace) {
        Error.captureStackTrace(instance, DepGraphCycleError);
      }
      return instance;
    };
    DepGraphCycleError.prototype = Object.create(Error.prototype, {
      constructor: {
        value: Error,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(DepGraphCycleError, Error);
  }
});

// node_modules/localforage/dist/localforage.js
var require_localforage = __commonJS({
  "node_modules/localforage/dist/localforage.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    (function(f) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
      } else if (typeof define === "function" && define.amd) {
        define([], f);
      } else {
        var g;
        if (typeof window !== "undefined") {
          g = window;
        } else if (typeof globalThis !== "undefined") {
          g = globalThis;
        } else if (typeof self !== "undefined") {
          g = self;
        } else {
          g = this;
        }
        g.localforage = f();
      }
    })(function() {
      var define2, module2, exports2;
      return function e(t, n, r) {
        function s(o2, u) {
          if (!n[o2]) {
            if (!t[o2]) {
              var a = typeof __require == "function" && __require;
              if (!u && a)
                return a(o2, true);
              if (i)
                return i(o2, true);
              var f = new Error("Cannot find module '" + o2 + "'");
              throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o2] = { exports: {} };
            t[o2][0].call(l.exports, function(e2) {
              var n2 = t[o2][1][e2];
              return s(n2 ? n2 : e2);
            }, l, l.exports, e, t, n, r);
          }
          return n[o2].exports;
        }
        var i = typeof __require == "function" && __require;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s;
      }({ 1: [function(_dereq_, module3, exports3) {
        (function(global2) {
          "use strict";
          var Mutation = global2.MutationObserver || global2.WebKitMutationObserver;
          var scheduleDrain;
          {
            if (Mutation) {
              var called = 0;
              var observer = new Mutation(nextTick3);
              var element = global2.document.createTextNode("");
              observer.observe(element, {
                characterData: true
              });
              scheduleDrain = function() {
                element.data = called = ++called % 2;
              };
            } else if (!global2.setImmediate && typeof global2.MessageChannel !== "undefined") {
              var channel = new global2.MessageChannel();
              channel.port1.onmessage = nextTick3;
              scheduleDrain = function() {
                channel.port2.postMessage(0);
              };
            } else if ("document" in global2 && "onreadystatechange" in global2.document.createElement("script")) {
              scheduleDrain = function() {
                var scriptEl = global2.document.createElement("script");
                scriptEl.onreadystatechange = function() {
                  nextTick3();
                  scriptEl.onreadystatechange = null;
                  scriptEl.parentNode.removeChild(scriptEl);
                  scriptEl = null;
                };
                global2.document.documentElement.appendChild(scriptEl);
              };
            } else {
              scheduleDrain = function() {
                setTimeout(nextTick3, 0);
              };
            }
          }
          var draining2;
          var queue2 = [];
          function nextTick3() {
            draining2 = true;
            var i, oldQueue;
            var len = queue2.length;
            while (len) {
              oldQueue = queue2;
              queue2 = [];
              i = -1;
              while (++i < len) {
                oldQueue[i]();
              }
              len = queue2.length;
            }
            draining2 = false;
          }
          module3.exports = immediate;
          function immediate(task) {
            if (queue2.push(task) === 1 && !draining2) {
              scheduleDrain();
            }
          }
        }).call(this, typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 2: [function(_dereq_, module3, exports3) {
        "use strict";
        var immediate = _dereq_(1);
        function INTERNAL() {
        }
        var handlers = {};
        var REJECTED = ["REJECTED"];
        var FULFILLED = ["FULFILLED"];
        var PENDING = ["PENDING"];
        module3.exports = Promise2;
        function Promise2(resolver) {
          if (typeof resolver !== "function") {
            throw new TypeError("resolver must be a function");
          }
          this.state = PENDING;
          this.queue = [];
          this.outcome = void 0;
          if (resolver !== INTERNAL) {
            safelyResolveThenable(this, resolver);
          }
        }
        Promise2.prototype["catch"] = function(onRejected) {
          return this.then(null, onRejected);
        };
        Promise2.prototype.then = function(onFulfilled, onRejected) {
          if (typeof onFulfilled !== "function" && this.state === FULFILLED || typeof onRejected !== "function" && this.state === REJECTED) {
            return this;
          }
          var promise = new this.constructor(INTERNAL);
          if (this.state !== PENDING) {
            var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
            unwrap(promise, resolver, this.outcome);
          } else {
            this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
          }
          return promise;
        };
        function QueueItem(promise, onFulfilled, onRejected) {
          this.promise = promise;
          if (typeof onFulfilled === "function") {
            this.onFulfilled = onFulfilled;
            this.callFulfilled = this.otherCallFulfilled;
          }
          if (typeof onRejected === "function") {
            this.onRejected = onRejected;
            this.callRejected = this.otherCallRejected;
          }
        }
        QueueItem.prototype.callFulfilled = function(value) {
          handlers.resolve(this.promise, value);
        };
        QueueItem.prototype.otherCallFulfilled = function(value) {
          unwrap(this.promise, this.onFulfilled, value);
        };
        QueueItem.prototype.callRejected = function(value) {
          handlers.reject(this.promise, value);
        };
        QueueItem.prototype.otherCallRejected = function(value) {
          unwrap(this.promise, this.onRejected, value);
        };
        function unwrap(promise, func, value) {
          immediate(function() {
            var returnValue;
            try {
              returnValue = func(value);
            } catch (e) {
              return handlers.reject(promise, e);
            }
            if (returnValue === promise) {
              handlers.reject(promise, new TypeError("Cannot resolve promise with itself"));
            } else {
              handlers.resolve(promise, returnValue);
            }
          });
        }
        handlers.resolve = function(self2, value) {
          var result = tryCatch(getThen, value);
          if (result.status === "error") {
            return handlers.reject(self2, result.value);
          }
          var thenable = result.value;
          if (thenable) {
            safelyResolveThenable(self2, thenable);
          } else {
            self2.state = FULFILLED;
            self2.outcome = value;
            var i = -1;
            var len = self2.queue.length;
            while (++i < len) {
              self2.queue[i].callFulfilled(value);
            }
          }
          return self2;
        };
        handlers.reject = function(self2, error) {
          self2.state = REJECTED;
          self2.outcome = error;
          var i = -1;
          var len = self2.queue.length;
          while (++i < len) {
            self2.queue[i].callRejected(error);
          }
          return self2;
        };
        function getThen(obj) {
          var then = obj && obj.then;
          if (obj && (typeof obj === "object" || typeof obj === "function") && typeof then === "function") {
            return function appyThen() {
              then.apply(obj, arguments);
            };
          }
        }
        function safelyResolveThenable(self2, thenable) {
          var called = false;
          function onError(value) {
            if (called) {
              return;
            }
            called = true;
            handlers.reject(self2, value);
          }
          function onSuccess(value) {
            if (called) {
              return;
            }
            called = true;
            handlers.resolve(self2, value);
          }
          function tryToUnwrap() {
            thenable(onSuccess, onError);
          }
          var result = tryCatch(tryToUnwrap);
          if (result.status === "error") {
            onError(result.value);
          }
        }
        function tryCatch(func, value) {
          var out = {};
          try {
            out.value = func(value);
            out.status = "success";
          } catch (e) {
            out.status = "error";
            out.value = e;
          }
          return out;
        }
        Promise2.resolve = resolve2;
        function resolve2(value) {
          if (value instanceof this) {
            return value;
          }
          return handlers.resolve(new this(INTERNAL), value);
        }
        Promise2.reject = reject3;
        function reject3(reason) {
          var promise = new this(INTERNAL);
          return handlers.reject(promise, reason);
        }
        Promise2.all = all;
        function all(iterable) {
          var self2 = this;
          if (Object.prototype.toString.call(iterable) !== "[object Array]") {
            return this.reject(new TypeError("must be an array"));
          }
          var len = iterable.length;
          var called = false;
          if (!len) {
            return this.resolve([]);
          }
          var values = new Array(len);
          var resolved = 0;
          var i = -1;
          var promise = new this(INTERNAL);
          while (++i < len) {
            allResolver(iterable[i], i);
          }
          return promise;
          function allResolver(value, i2) {
            self2.resolve(value).then(resolveFromAll, function(error) {
              if (!called) {
                called = true;
                handlers.reject(promise, error);
              }
            });
            function resolveFromAll(outValue) {
              values[i2] = outValue;
              if (++resolved === len && !called) {
                called = true;
                handlers.resolve(promise, values);
              }
            }
          }
        }
        Promise2.race = race2;
        function race2(iterable) {
          var self2 = this;
          if (Object.prototype.toString.call(iterable) !== "[object Array]") {
            return this.reject(new TypeError("must be an array"));
          }
          var len = iterable.length;
          var called = false;
          if (!len) {
            return this.resolve([]);
          }
          var i = -1;
          var promise = new this(INTERNAL);
          while (++i < len) {
            resolver(iterable[i]);
          }
          return promise;
          function resolver(value) {
            self2.resolve(value).then(function(response) {
              if (!called) {
                called = true;
                handlers.resolve(promise, response);
              }
            }, function(error) {
              if (!called) {
                called = true;
                handlers.reject(promise, error);
              }
            });
          }
        }
      }, { "1": 1 }], 3: [function(_dereq_, module3, exports3) {
        (function(global2) {
          "use strict";
          if (typeof global2.Promise !== "function") {
            global2.Promise = _dereq_(2);
          }
        }).call(this, typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "2": 2 }], 4: [function(_dereq_, module3, exports3) {
        "use strict";
        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
          return typeof obj;
        } : function(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function getIDB() {
          try {
            if (typeof indexedDB !== "undefined") {
              return indexedDB;
            }
            if (typeof webkitIndexedDB !== "undefined") {
              return webkitIndexedDB;
            }
            if (typeof mozIndexedDB !== "undefined") {
              return mozIndexedDB;
            }
            if (typeof OIndexedDB !== "undefined") {
              return OIndexedDB;
            }
            if (typeof msIndexedDB !== "undefined") {
              return msIndexedDB;
            }
          } catch (e) {
            return;
          }
        }
        var idb = getIDB();
        function isIndexedDBValid() {
          try {
            if (!idb || !idb.open) {
              return false;
            }
            var isSafari = typeof openDatabase !== "undefined" && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);
            var hasFetch = typeof fetch === "function" && fetch.toString().indexOf("[native code") !== -1;
            return (!isSafari || hasFetch) && typeof indexedDB !== "undefined" && typeof IDBKeyRange !== "undefined";
          } catch (e) {
            return false;
          }
        }
        function createBlob(parts, properties) {
          parts = parts || [];
          properties = properties || {};
          try {
            return new Blob(parts, properties);
          } catch (e) {
            if (e.name !== "TypeError") {
              throw e;
            }
            var Builder = typeof BlobBuilder !== "undefined" ? BlobBuilder : typeof MSBlobBuilder !== "undefined" ? MSBlobBuilder : typeof MozBlobBuilder !== "undefined" ? MozBlobBuilder : WebKitBlobBuilder;
            var builder = new Builder();
            for (var i = 0; i < parts.length; i += 1) {
              builder.append(parts[i]);
            }
            return builder.getBlob(properties.type);
          }
        }
        if (typeof Promise === "undefined") {
          _dereq_(3);
        }
        var Promise$1 = Promise;
        function executeCallback(promise, callback) {
          if (callback) {
            promise.then(function(result) {
              callback(null, result);
            }, function(error) {
              callback(error);
            });
          }
        }
        function executeTwoCallbacks(promise, callback, errorCallback) {
          if (typeof callback === "function") {
            promise.then(callback);
          }
          if (typeof errorCallback === "function") {
            promise["catch"](errorCallback);
          }
        }
        function normalizeKey(key2) {
          if (typeof key2 !== "string") {
            console.warn(key2 + " used as a key, but it is not a string.");
            key2 = String(key2);
          }
          return key2;
        }
        function getCallback() {
          if (arguments.length && typeof arguments[arguments.length - 1] === "function") {
            return arguments[arguments.length - 1];
          }
        }
        var DETECT_BLOB_SUPPORT_STORE = "local-forage-detect-blob-support";
        var supportsBlobs = void 0;
        var dbContexts = {};
        var toString3 = Object.prototype.toString;
        var READ_ONLY = "readonly";
        var READ_WRITE = "readwrite";
        function _binStringToArrayBuffer(bin) {
          var length2 = bin.length;
          var buf = new ArrayBuffer(length2);
          var arr = new Uint8Array(buf);
          for (var i = 0; i < length2; i++) {
            arr[i] = bin.charCodeAt(i);
          }
          return buf;
        }
        function _checkBlobSupportWithoutCaching(idb2) {
          return new Promise$1(function(resolve2) {
            var txn = idb2.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
            var blob = createBlob([""]);
            txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, "key");
            txn.onabort = function(e) {
              e.preventDefault();
              e.stopPropagation();
              resolve2(false);
            };
            txn.oncomplete = function() {
              var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
              var matchedEdge = navigator.userAgent.match(/Edge\//);
              resolve2(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
            };
          })["catch"](function() {
            return false;
          });
        }
        function _checkBlobSupport(idb2) {
          if (typeof supportsBlobs === "boolean") {
            return Promise$1.resolve(supportsBlobs);
          }
          return _checkBlobSupportWithoutCaching(idb2).then(function(value) {
            supportsBlobs = value;
            return supportsBlobs;
          });
        }
        function _deferReadiness(dbInfo) {
          var dbContext = dbContexts[dbInfo.name];
          var deferredOperation = {};
          deferredOperation.promise = new Promise$1(function(resolve2, reject3) {
            deferredOperation.resolve = resolve2;
            deferredOperation.reject = reject3;
          });
          dbContext.deferredOperations.push(deferredOperation);
          if (!dbContext.dbReady) {
            dbContext.dbReady = deferredOperation.promise;
          } else {
            dbContext.dbReady = dbContext.dbReady.then(function() {
              return deferredOperation.promise;
            });
          }
        }
        function _advanceReadiness(dbInfo) {
          var dbContext = dbContexts[dbInfo.name];
          var deferredOperation = dbContext.deferredOperations.pop();
          if (deferredOperation) {
            deferredOperation.resolve();
            return deferredOperation.promise;
          }
        }
        function _rejectReadiness(dbInfo, err) {
          var dbContext = dbContexts[dbInfo.name];
          var deferredOperation = dbContext.deferredOperations.pop();
          if (deferredOperation) {
            deferredOperation.reject(err);
            return deferredOperation.promise;
          }
        }
        function _getConnection(dbInfo, upgradeNeeded) {
          return new Promise$1(function(resolve2, reject3) {
            dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();
            if (dbInfo.db) {
              if (upgradeNeeded) {
                _deferReadiness(dbInfo);
                dbInfo.db.close();
              } else {
                return resolve2(dbInfo.db);
              }
            }
            var dbArgs = [dbInfo.name];
            if (upgradeNeeded) {
              dbArgs.push(dbInfo.version);
            }
            var openreq = idb.open.apply(idb, dbArgs);
            if (upgradeNeeded) {
              openreq.onupgradeneeded = function(e) {
                var db = openreq.result;
                try {
                  db.createObjectStore(dbInfo.storeName);
                  if (e.oldVersion <= 1) {
                    db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
                  }
                } catch (ex) {
                  if (ex.name === "ConstraintError") {
                    console.warn('The database "' + dbInfo.name + '" has been upgraded from version ' + e.oldVersion + " to version " + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
                  } else {
                    throw ex;
                  }
                }
              };
            }
            openreq.onerror = function(e) {
              e.preventDefault();
              reject3(openreq.error);
            };
            openreq.onsuccess = function() {
              var db = openreq.result;
              db.onversionchange = function(e) {
                e.target.close();
              };
              resolve2(db);
              _advanceReadiness(dbInfo);
            };
          });
        }
        function _getOriginalConnection(dbInfo) {
          return _getConnection(dbInfo, false);
        }
        function _getUpgradedConnection(dbInfo) {
          return _getConnection(dbInfo, true);
        }
        function _isUpgradeNeeded(dbInfo, defaultVersion) {
          if (!dbInfo.db) {
            return true;
          }
          var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
          var isDowngrade = dbInfo.version < dbInfo.db.version;
          var isUpgrade = dbInfo.version > dbInfo.db.version;
          if (isDowngrade) {
            if (dbInfo.version !== defaultVersion) {
              console.warn('The database "' + dbInfo.name + `" can't be downgraded from version ` + dbInfo.db.version + " to version " + dbInfo.version + ".");
            }
            dbInfo.version = dbInfo.db.version;
          }
          if (isUpgrade || isNewStore) {
            if (isNewStore) {
              var incVersion = dbInfo.db.version + 1;
              if (incVersion > dbInfo.version) {
                dbInfo.version = incVersion;
              }
            }
            return true;
          }
          return false;
        }
        function _encodeBlob(blob) {
          return new Promise$1(function(resolve2, reject3) {
            var reader = new FileReader();
            reader.onerror = reject3;
            reader.onloadend = function(e) {
              var base64 = btoa(e.target.result || "");
              resolve2({
                __local_forage_encoded_blob: true,
                data: base64,
                type: blob.type
              });
            };
            reader.readAsBinaryString(blob);
          });
        }
        function _decodeBlob(encodedBlob) {
          var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
          return createBlob([arrayBuff], { type: encodedBlob.type });
        }
        function _isEncodedBlob(value) {
          return value && value.__local_forage_encoded_blob;
        }
        function _fullyReady(callback) {
          var self2 = this;
          var promise = self2._initReady().then(function() {
            var dbContext = dbContexts[self2._dbInfo.name];
            if (dbContext && dbContext.dbReady) {
              return dbContext.dbReady;
            }
          });
          executeTwoCallbacks(promise, callback, callback);
          return promise;
        }
        function _tryReconnect(dbInfo) {
          _deferReadiness(dbInfo);
          var dbContext = dbContexts[dbInfo.name];
          var forages = dbContext.forages;
          for (var i = 0; i < forages.length; i++) {
            var forage = forages[i];
            if (forage._dbInfo.db) {
              forage._dbInfo.db.close();
              forage._dbInfo.db = null;
            }
          }
          dbInfo.db = null;
          return _getOriginalConnection(dbInfo).then(function(db) {
            dbInfo.db = db;
            if (_isUpgradeNeeded(dbInfo)) {
              return _getUpgradedConnection(dbInfo);
            }
            return db;
          }).then(function(db) {
            dbInfo.db = dbContext.db = db;
            for (var i2 = 0; i2 < forages.length; i2++) {
              forages[i2]._dbInfo.db = db;
            }
          })["catch"](function(err) {
            _rejectReadiness(dbInfo, err);
            throw err;
          });
        }
        function createTransaction(dbInfo, mode, callback, retries) {
          if (retries === void 0) {
            retries = 1;
          }
          try {
            var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
            callback(null, tx);
          } catch (err) {
            if (retries > 0 && (!dbInfo.db || err.name === "InvalidStateError" || err.name === "NotFoundError")) {
              return Promise$1.resolve().then(function() {
                if (!dbInfo.db || err.name === "NotFoundError" && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
                  if (dbInfo.db) {
                    dbInfo.version = dbInfo.db.version + 1;
                  }
                  return _getUpgradedConnection(dbInfo);
                }
              }).then(function() {
                return _tryReconnect(dbInfo).then(function() {
                  createTransaction(dbInfo, mode, callback, retries - 1);
                });
              })["catch"](callback);
            }
            callback(err);
          }
        }
        function createDbContext() {
          return {
            forages: [],
            db: null,
            dbReady: null,
            deferredOperations: []
          };
        }
        function _initStorage(options) {
          var self2 = this;
          var dbInfo = {
            db: null
          };
          if (options) {
            for (var i in options) {
              dbInfo[i] = options[i];
            }
          }
          var dbContext = dbContexts[dbInfo.name];
          if (!dbContext) {
            dbContext = createDbContext();
            dbContexts[dbInfo.name] = dbContext;
          }
          dbContext.forages.push(self2);
          if (!self2._initReady) {
            self2._initReady = self2.ready;
            self2.ready = _fullyReady;
          }
          var initPromises = [];
          function ignoreErrors() {
            return Promise$1.resolve();
          }
          for (var j = 0; j < dbContext.forages.length; j++) {
            var forage = dbContext.forages[j];
            if (forage !== self2) {
              initPromises.push(forage._initReady()["catch"](ignoreErrors));
            }
          }
          var forages = dbContext.forages.slice(0);
          return Promise$1.all(initPromises).then(function() {
            dbInfo.db = dbContext.db;
            return _getOriginalConnection(dbInfo);
          }).then(function(db) {
            dbInfo.db = db;
            if (_isUpgradeNeeded(dbInfo, self2._defaultConfig.version)) {
              return _getUpgradedConnection(dbInfo);
            }
            return db;
          }).then(function(db) {
            dbInfo.db = dbContext.db = db;
            self2._dbInfo = dbInfo;
            for (var k = 0; k < forages.length; k++) {
              var forage2 = forages[k];
              if (forage2 !== self2) {
                forage2._dbInfo.db = dbInfo.db;
                forage2._dbInfo.version = dbInfo.version;
              }
            }
          });
        }
        function getItem(key2, callback) {
          var self2 = this;
          key2 = normalizeKey(key2);
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                if (err) {
                  return reject3(err);
                }
                try {
                  var store = transaction.objectStore(self2._dbInfo.storeName);
                  var req = store.get(key2);
                  req.onsuccess = function() {
                    var value = req.result;
                    if (value === void 0) {
                      value = null;
                    }
                    if (_isEncodedBlob(value)) {
                      value = _decodeBlob(value);
                    }
                    resolve2(value);
                  };
                  req.onerror = function() {
                    reject3(req.error);
                  };
                } catch (e) {
                  reject3(e);
                }
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function iterate(iterator, callback) {
          var self2 = this;
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                if (err) {
                  return reject3(err);
                }
                try {
                  var store = transaction.objectStore(self2._dbInfo.storeName);
                  var req = store.openCursor();
                  var iterationNumber = 1;
                  req.onsuccess = function() {
                    var cursor = req.result;
                    if (cursor) {
                      var value = cursor.value;
                      if (_isEncodedBlob(value)) {
                        value = _decodeBlob(value);
                      }
                      var result = iterator(value, cursor.key, iterationNumber++);
                      if (result !== void 0) {
                        resolve2(result);
                      } else {
                        cursor["continue"]();
                      }
                    } else {
                      resolve2();
                    }
                  };
                  req.onerror = function() {
                    reject3(req.error);
                  };
                } catch (e) {
                  reject3(e);
                }
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function setItem(key2, value, callback) {
          var self2 = this;
          key2 = normalizeKey(key2);
          var promise = new Promise$1(function(resolve2, reject3) {
            var dbInfo;
            self2.ready().then(function() {
              dbInfo = self2._dbInfo;
              if (toString3.call(value) === "[object Blob]") {
                return _checkBlobSupport(dbInfo.db).then(function(blobSupport) {
                  if (blobSupport) {
                    return value;
                  }
                  return _encodeBlob(value);
                });
              }
              return value;
            }).then(function(value2) {
              createTransaction(self2._dbInfo, READ_WRITE, function(err, transaction) {
                if (err) {
                  return reject3(err);
                }
                try {
                  var store = transaction.objectStore(self2._dbInfo.storeName);
                  if (value2 === null) {
                    value2 = void 0;
                  }
                  var req = store.put(value2, key2);
                  transaction.oncomplete = function() {
                    if (value2 === void 0) {
                      value2 = null;
                    }
                    resolve2(value2);
                  };
                  transaction.onabort = transaction.onerror = function() {
                    var err2 = req.error ? req.error : req.transaction.error;
                    reject3(err2);
                  };
                } catch (e) {
                  reject3(e);
                }
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function removeItem(key2, callback) {
          var self2 = this;
          key2 = normalizeKey(key2);
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              createTransaction(self2._dbInfo, READ_WRITE, function(err, transaction) {
                if (err) {
                  return reject3(err);
                }
                try {
                  var store = transaction.objectStore(self2._dbInfo.storeName);
                  var req = store["delete"](key2);
                  transaction.oncomplete = function() {
                    resolve2();
                  };
                  transaction.onerror = function() {
                    reject3(req.error);
                  };
                  transaction.onabort = function() {
                    var err2 = req.error ? req.error : req.transaction.error;
                    reject3(err2);
                  };
                } catch (e) {
                  reject3(e);
                }
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function clear(callback) {
          var self2 = this;
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              createTransaction(self2._dbInfo, READ_WRITE, function(err, transaction) {
                if (err) {
                  return reject3(err);
                }
                try {
                  var store = transaction.objectStore(self2._dbInfo.storeName);
                  var req = store.clear();
                  transaction.oncomplete = function() {
                    resolve2();
                  };
                  transaction.onabort = transaction.onerror = function() {
                    var err2 = req.error ? req.error : req.transaction.error;
                    reject3(err2);
                  };
                } catch (e) {
                  reject3(e);
                }
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function length(callback) {
          var self2 = this;
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                if (err) {
                  return reject3(err);
                }
                try {
                  var store = transaction.objectStore(self2._dbInfo.storeName);
                  var req = store.count();
                  req.onsuccess = function() {
                    resolve2(req.result);
                  };
                  req.onerror = function() {
                    reject3(req.error);
                  };
                } catch (e) {
                  reject3(e);
                }
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function key(n, callback) {
          var self2 = this;
          var promise = new Promise$1(function(resolve2, reject3) {
            if (n < 0) {
              resolve2(null);
              return;
            }
            self2.ready().then(function() {
              createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                if (err) {
                  return reject3(err);
                }
                try {
                  var store = transaction.objectStore(self2._dbInfo.storeName);
                  var advanced = false;
                  var req = store.openKeyCursor();
                  req.onsuccess = function() {
                    var cursor = req.result;
                    if (!cursor) {
                      resolve2(null);
                      return;
                    }
                    if (n === 0) {
                      resolve2(cursor.key);
                    } else {
                      if (!advanced) {
                        advanced = true;
                        cursor.advance(n);
                      } else {
                        resolve2(cursor.key);
                      }
                    }
                  };
                  req.onerror = function() {
                    reject3(req.error);
                  };
                } catch (e) {
                  reject3(e);
                }
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function keys(callback) {
          var self2 = this;
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              createTransaction(self2._dbInfo, READ_ONLY, function(err, transaction) {
                if (err) {
                  return reject3(err);
                }
                try {
                  var store = transaction.objectStore(self2._dbInfo.storeName);
                  var req = store.openKeyCursor();
                  var keys2 = [];
                  req.onsuccess = function() {
                    var cursor = req.result;
                    if (!cursor) {
                      resolve2(keys2);
                      return;
                    }
                    keys2.push(cursor.key);
                    cursor["continue"]();
                  };
                  req.onerror = function() {
                    reject3(req.error);
                  };
                } catch (e) {
                  reject3(e);
                }
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function dropInstance(options, callback) {
          callback = getCallback.apply(this, arguments);
          var currentConfig = this.config();
          options = typeof options !== "function" && options || {};
          if (!options.name) {
            options.name = options.name || currentConfig.name;
            options.storeName = options.storeName || currentConfig.storeName;
          }
          var self2 = this;
          var promise;
          if (!options.name) {
            promise = Promise$1.reject("Invalid arguments");
          } else {
            var isCurrentDb = options.name === currentConfig.name && self2._dbInfo.db;
            var dbPromise = isCurrentDb ? Promise$1.resolve(self2._dbInfo.db) : _getOriginalConnection(options).then(function(db) {
              var dbContext = dbContexts[options.name];
              var forages = dbContext.forages;
              dbContext.db = db;
              for (var i = 0; i < forages.length; i++) {
                forages[i]._dbInfo.db = db;
              }
              return db;
            });
            if (!options.storeName) {
              promise = dbPromise.then(function(db) {
                _deferReadiness(options);
                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;
                db.close();
                for (var i = 0; i < forages.length; i++) {
                  var forage = forages[i];
                  forage._dbInfo.db = null;
                }
                var dropDBPromise = new Promise$1(function(resolve2, reject3) {
                  var req = idb.deleteDatabase(options.name);
                  req.onerror = function() {
                    var db2 = req.result;
                    if (db2) {
                      db2.close();
                    }
                    reject3(req.error);
                  };
                  req.onblocked = function() {
                    console.warn('dropInstance blocked for database "' + options.name + '" until all open connections are closed');
                  };
                  req.onsuccess = function() {
                    var db2 = req.result;
                    if (db2) {
                      db2.close();
                    }
                    resolve2(db2);
                  };
                });
                return dropDBPromise.then(function(db2) {
                  dbContext.db = db2;
                  for (var i2 = 0; i2 < forages.length; i2++) {
                    var _forage = forages[i2];
                    _advanceReadiness(_forage._dbInfo);
                  }
                })["catch"](function(err) {
                  (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function() {
                  });
                  throw err;
                });
              });
            } else {
              promise = dbPromise.then(function(db) {
                if (!db.objectStoreNames.contains(options.storeName)) {
                  return;
                }
                var newVersion = db.version + 1;
                _deferReadiness(options);
                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;
                db.close();
                for (var i = 0; i < forages.length; i++) {
                  var forage = forages[i];
                  forage._dbInfo.db = null;
                  forage._dbInfo.version = newVersion;
                }
                var dropObjectPromise = new Promise$1(function(resolve2, reject3) {
                  var req = idb.open(options.name, newVersion);
                  req.onerror = function(err) {
                    var db2 = req.result;
                    db2.close();
                    reject3(err);
                  };
                  req.onupgradeneeded = function() {
                    var db2 = req.result;
                    db2.deleteObjectStore(options.storeName);
                  };
                  req.onsuccess = function() {
                    var db2 = req.result;
                    db2.close();
                    resolve2(db2);
                  };
                });
                return dropObjectPromise.then(function(db2) {
                  dbContext.db = db2;
                  for (var j = 0; j < forages.length; j++) {
                    var _forage2 = forages[j];
                    _forage2._dbInfo.db = db2;
                    _advanceReadiness(_forage2._dbInfo);
                  }
                })["catch"](function(err) {
                  (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function() {
                  });
                  throw err;
                });
              });
            }
          }
          executeCallback(promise, callback);
          return promise;
        }
        var asyncStorage = {
          _driver: "asyncStorage",
          _initStorage,
          _support: isIndexedDBValid(),
          iterate,
          getItem,
          setItem,
          removeItem,
          clear,
          length,
          key,
          keys,
          dropInstance
        };
        function isWebSQLValid() {
          return typeof openDatabase === "function";
        }
        var BASE_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var BLOB_TYPE_PREFIX = "~~local_forage_type~";
        var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;
        var SERIALIZED_MARKER = "__lfsc__:";
        var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;
        var TYPE_ARRAYBUFFER = "arbf";
        var TYPE_BLOB = "blob";
        var TYPE_INT8ARRAY = "si08";
        var TYPE_UINT8ARRAY = "ui08";
        var TYPE_UINT8CLAMPEDARRAY = "uic8";
        var TYPE_INT16ARRAY = "si16";
        var TYPE_INT32ARRAY = "si32";
        var TYPE_UINT16ARRAY = "ur16";
        var TYPE_UINT32ARRAY = "ui32";
        var TYPE_FLOAT32ARRAY = "fl32";
        var TYPE_FLOAT64ARRAY = "fl64";
        var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;
        var toString$1 = Object.prototype.toString;
        function stringToBuffer(serializedString) {
          var bufferLength = serializedString.length * 0.75;
          var len = serializedString.length;
          var i;
          var p = 0;
          var encoded1, encoded2, encoded3, encoded4;
          if (serializedString[serializedString.length - 1] === "=") {
            bufferLength--;
            if (serializedString[serializedString.length - 2] === "=") {
              bufferLength--;
            }
          }
          var buffer = new ArrayBuffer(bufferLength);
          var bytes = new Uint8Array(buffer);
          for (i = 0; i < len; i += 4) {
            encoded1 = BASE_CHARS.indexOf(serializedString[i]);
            encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
            encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
            encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);
            bytes[p++] = encoded1 << 2 | encoded2 >> 4;
            bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
            bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
          }
          return buffer;
        }
        function bufferToString(buffer) {
          var bytes = new Uint8Array(buffer);
          var base64String = "";
          var i;
          for (i = 0; i < bytes.length; i += 3) {
            base64String += BASE_CHARS[bytes[i] >> 2];
            base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
            base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
            base64String += BASE_CHARS[bytes[i + 2] & 63];
          }
          if (bytes.length % 3 === 2) {
            base64String = base64String.substring(0, base64String.length - 1) + "=";
          } else if (bytes.length % 3 === 1) {
            base64String = base64String.substring(0, base64String.length - 2) + "==";
          }
          return base64String;
        }
        function serialize(value, callback) {
          var valueType = "";
          if (value) {
            valueType = toString$1.call(value);
          }
          if (value && (valueType === "[object ArrayBuffer]" || value.buffer && toString$1.call(value.buffer) === "[object ArrayBuffer]")) {
            var buffer;
            var marker = SERIALIZED_MARKER;
            if (value instanceof ArrayBuffer) {
              buffer = value;
              marker += TYPE_ARRAYBUFFER;
            } else {
              buffer = value.buffer;
              if (valueType === "[object Int8Array]") {
                marker += TYPE_INT8ARRAY;
              } else if (valueType === "[object Uint8Array]") {
                marker += TYPE_UINT8ARRAY;
              } else if (valueType === "[object Uint8ClampedArray]") {
                marker += TYPE_UINT8CLAMPEDARRAY;
              } else if (valueType === "[object Int16Array]") {
                marker += TYPE_INT16ARRAY;
              } else if (valueType === "[object Uint16Array]") {
                marker += TYPE_UINT16ARRAY;
              } else if (valueType === "[object Int32Array]") {
                marker += TYPE_INT32ARRAY;
              } else if (valueType === "[object Uint32Array]") {
                marker += TYPE_UINT32ARRAY;
              } else if (valueType === "[object Float32Array]") {
                marker += TYPE_FLOAT32ARRAY;
              } else if (valueType === "[object Float64Array]") {
                marker += TYPE_FLOAT64ARRAY;
              } else {
                callback(new Error("Failed to get type for BinaryArray"));
              }
            }
            callback(marker + bufferToString(buffer));
          } else if (valueType === "[object Blob]") {
            var fileReader = new FileReader();
            fileReader.onload = function() {
              var str2 = BLOB_TYPE_PREFIX + value.type + "~" + bufferToString(this.result);
              callback(SERIALIZED_MARKER + TYPE_BLOB + str2);
            };
            fileReader.readAsArrayBuffer(value);
          } else {
            try {
              callback(JSON.stringify(value));
            } catch (e) {
              console.error("Couldn't convert value into a JSON string: ", value);
              callback(null, e);
            }
          }
        }
        function deserialize(value) {
          if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
            return JSON.parse(value);
          }
          var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
          var type2 = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);
          var blobType;
          if (type2 === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
            var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
            blobType = matcher[1];
            serializedString = serializedString.substring(matcher[0].length);
          }
          var buffer = stringToBuffer(serializedString);
          switch (type2) {
            case TYPE_ARRAYBUFFER:
              return buffer;
            case TYPE_BLOB:
              return createBlob([buffer], { type: blobType });
            case TYPE_INT8ARRAY:
              return new Int8Array(buffer);
            case TYPE_UINT8ARRAY:
              return new Uint8Array(buffer);
            case TYPE_UINT8CLAMPEDARRAY:
              return new Uint8ClampedArray(buffer);
            case TYPE_INT16ARRAY:
              return new Int16Array(buffer);
            case TYPE_UINT16ARRAY:
              return new Uint16Array(buffer);
            case TYPE_INT32ARRAY:
              return new Int32Array(buffer);
            case TYPE_UINT32ARRAY:
              return new Uint32Array(buffer);
            case TYPE_FLOAT32ARRAY:
              return new Float32Array(buffer);
            case TYPE_FLOAT64ARRAY:
              return new Float64Array(buffer);
            default:
              throw new Error("Unkown type: " + type2);
          }
        }
        var localforageSerializer = {
          serialize,
          deserialize,
          stringToBuffer,
          bufferToString
        };
        function createDbTable(t, dbInfo, callback, errorCallback) {
          t.executeSql("CREATE TABLE IF NOT EXISTS " + dbInfo.storeName + " (id INTEGER PRIMARY KEY, key unique, value)", [], callback, errorCallback);
        }
        function _initStorage$1(options) {
          var self2 = this;
          var dbInfo = {
            db: null
          };
          if (options) {
            for (var i in options) {
              dbInfo[i] = typeof options[i] !== "string" ? options[i].toString() : options[i];
            }
          }
          var dbInfoPromise = new Promise$1(function(resolve2, reject3) {
            try {
              dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
            } catch (e) {
              return reject3(e);
            }
            dbInfo.db.transaction(function(t) {
              createDbTable(t, dbInfo, function() {
                self2._dbInfo = dbInfo;
                resolve2();
              }, function(t2, error) {
                reject3(error);
              });
            }, reject3);
          });
          dbInfo.serializer = localforageSerializer;
          return dbInfoPromise;
        }
        function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
          t.executeSql(sqlStatement, args, callback, function(t2, error) {
            if (error.code === error.SYNTAX_ERR) {
              t2.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?", [dbInfo.storeName], function(t3, results) {
                if (!results.rows.length) {
                  createDbTable(t3, dbInfo, function() {
                    t3.executeSql(sqlStatement, args, callback, errorCallback);
                  }, errorCallback);
                } else {
                  errorCallback(t3, error);
                }
              }, errorCallback);
            } else {
              errorCallback(t2, error);
            }
          }, errorCallback);
        }
        function getItem$1(key2, callback) {
          var self2 = this;
          key2 = normalizeKey(key2);
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              dbInfo.db.transaction(function(t) {
                tryExecuteSql(t, dbInfo, "SELECT * FROM " + dbInfo.storeName + " WHERE key = ? LIMIT 1", [key2], function(t2, results) {
                  var result = results.rows.length ? results.rows.item(0).value : null;
                  if (result) {
                    result = dbInfo.serializer.deserialize(result);
                  }
                  resolve2(result);
                }, function(t2, error) {
                  reject3(error);
                });
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function iterate$1(iterator, callback) {
          var self2 = this;
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              dbInfo.db.transaction(function(t) {
                tryExecuteSql(t, dbInfo, "SELECT * FROM " + dbInfo.storeName, [], function(t2, results) {
                  var rows = results.rows;
                  var length2 = rows.length;
                  for (var i = 0; i < length2; i++) {
                    var item = rows.item(i);
                    var result = item.value;
                    if (result) {
                      result = dbInfo.serializer.deserialize(result);
                    }
                    result = iterator(result, item.key, i + 1);
                    if (result !== void 0) {
                      resolve2(result);
                      return;
                    }
                  }
                  resolve2();
                }, function(t2, error) {
                  reject3(error);
                });
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function _setItem(key2, value, callback, retriesLeft) {
          var self2 = this;
          key2 = normalizeKey(key2);
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              if (value === void 0) {
                value = null;
              }
              var originalValue = value;
              var dbInfo = self2._dbInfo;
              dbInfo.serializer.serialize(value, function(value2, error) {
                if (error) {
                  reject3(error);
                } else {
                  dbInfo.db.transaction(function(t) {
                    tryExecuteSql(t, dbInfo, "INSERT OR REPLACE INTO " + dbInfo.storeName + " (key, value) VALUES (?, ?)", [key2, value2], function() {
                      resolve2(originalValue);
                    }, function(t2, error2) {
                      reject3(error2);
                    });
                  }, function(sqlError) {
                    if (sqlError.code === sqlError.QUOTA_ERR) {
                      if (retriesLeft > 0) {
                        resolve2(_setItem.apply(self2, [key2, originalValue, callback, retriesLeft - 1]));
                        return;
                      }
                      reject3(sqlError);
                    }
                  });
                }
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function setItem$1(key2, value, callback) {
          return _setItem.apply(this, [key2, value, callback, 1]);
        }
        function removeItem$1(key2, callback) {
          var self2 = this;
          key2 = normalizeKey(key2);
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              dbInfo.db.transaction(function(t) {
                tryExecuteSql(t, dbInfo, "DELETE FROM " + dbInfo.storeName + " WHERE key = ?", [key2], function() {
                  resolve2();
                }, function(t2, error) {
                  reject3(error);
                });
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function clear$1(callback) {
          var self2 = this;
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              dbInfo.db.transaction(function(t) {
                tryExecuteSql(t, dbInfo, "DELETE FROM " + dbInfo.storeName, [], function() {
                  resolve2();
                }, function(t2, error) {
                  reject3(error);
                });
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function length$1(callback) {
          var self2 = this;
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              dbInfo.db.transaction(function(t) {
                tryExecuteSql(t, dbInfo, "SELECT COUNT(key) as c FROM " + dbInfo.storeName, [], function(t2, results) {
                  var result = results.rows.item(0).c;
                  resolve2(result);
                }, function(t2, error) {
                  reject3(error);
                });
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function key$1(n, callback) {
          var self2 = this;
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              dbInfo.db.transaction(function(t) {
                tryExecuteSql(t, dbInfo, "SELECT key FROM " + dbInfo.storeName + " WHERE id = ? LIMIT 1", [n + 1], function(t2, results) {
                  var result = results.rows.length ? results.rows.item(0).key : null;
                  resolve2(result);
                }, function(t2, error) {
                  reject3(error);
                });
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function keys$1(callback) {
          var self2 = this;
          var promise = new Promise$1(function(resolve2, reject3) {
            self2.ready().then(function() {
              var dbInfo = self2._dbInfo;
              dbInfo.db.transaction(function(t) {
                tryExecuteSql(t, dbInfo, "SELECT key FROM " + dbInfo.storeName, [], function(t2, results) {
                  var keys2 = [];
                  for (var i = 0; i < results.rows.length; i++) {
                    keys2.push(results.rows.item(i).key);
                  }
                  resolve2(keys2);
                }, function(t2, error) {
                  reject3(error);
                });
              });
            })["catch"](reject3);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function getAllStoreNames(db) {
          return new Promise$1(function(resolve2, reject3) {
            db.transaction(function(t) {
              t.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function(t2, results) {
                var storeNames = [];
                for (var i = 0; i < results.rows.length; i++) {
                  storeNames.push(results.rows.item(i).name);
                }
                resolve2({
                  db,
                  storeNames
                });
              }, function(t2, error) {
                reject3(error);
              });
            }, function(sqlError) {
              reject3(sqlError);
            });
          });
        }
        function dropInstance$1(options, callback) {
          callback = getCallback.apply(this, arguments);
          var currentConfig = this.config();
          options = typeof options !== "function" && options || {};
          if (!options.name) {
            options.name = options.name || currentConfig.name;
            options.storeName = options.storeName || currentConfig.storeName;
          }
          var self2 = this;
          var promise;
          if (!options.name) {
            promise = Promise$1.reject("Invalid arguments");
          } else {
            promise = new Promise$1(function(resolve2) {
              var db;
              if (options.name === currentConfig.name) {
                db = self2._dbInfo.db;
              } else {
                db = openDatabase(options.name, "", "", 0);
              }
              if (!options.storeName) {
                resolve2(getAllStoreNames(db));
              } else {
                resolve2({
                  db,
                  storeNames: [options.storeName]
                });
              }
            }).then(function(operationInfo) {
              return new Promise$1(function(resolve2, reject3) {
                operationInfo.db.transaction(function(t) {
                  function dropTable(storeName) {
                    return new Promise$1(function(resolve3, reject4) {
                      t.executeSql("DROP TABLE IF EXISTS " + storeName, [], function() {
                        resolve3();
                      }, function(t2, error) {
                        reject4(error);
                      });
                    });
                  }
                  var operations = [];
                  for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
                    operations.push(dropTable(operationInfo.storeNames[i]));
                  }
                  Promise$1.all(operations).then(function() {
                    resolve2();
                  })["catch"](function(e) {
                    reject3(e);
                  });
                }, function(sqlError) {
                  reject3(sqlError);
                });
              });
            });
          }
          executeCallback(promise, callback);
          return promise;
        }
        var webSQLStorage = {
          _driver: "webSQLStorage",
          _initStorage: _initStorage$1,
          _support: isWebSQLValid(),
          iterate: iterate$1,
          getItem: getItem$1,
          setItem: setItem$1,
          removeItem: removeItem$1,
          clear: clear$1,
          length: length$1,
          key: key$1,
          keys: keys$1,
          dropInstance: dropInstance$1
        };
        function isLocalStorageValid() {
          try {
            return typeof localStorage !== "undefined" && "setItem" in localStorage && !!localStorage.setItem;
          } catch (e) {
            return false;
          }
        }
        function _getKeyPrefix(options, defaultConfig) {
          var keyPrefix = options.name + "/";
          if (options.storeName !== defaultConfig.storeName) {
            keyPrefix += options.storeName + "/";
          }
          return keyPrefix;
        }
        function checkIfLocalStorageThrows() {
          var localStorageTestKey = "_localforage_support_test";
          try {
            localStorage.setItem(localStorageTestKey, true);
            localStorage.removeItem(localStorageTestKey);
            return false;
          } catch (e) {
            return true;
          }
        }
        function _isLocalStorageUsable() {
          return !checkIfLocalStorageThrows() || localStorage.length > 0;
        }
        function _initStorage$2(options) {
          var self2 = this;
          var dbInfo = {};
          if (options) {
            for (var i in options) {
              dbInfo[i] = options[i];
            }
          }
          dbInfo.keyPrefix = _getKeyPrefix(options, self2._defaultConfig);
          if (!_isLocalStorageUsable()) {
            return Promise$1.reject();
          }
          self2._dbInfo = dbInfo;
          dbInfo.serializer = localforageSerializer;
          return Promise$1.resolve();
        }
        function clear$2(callback) {
          var self2 = this;
          var promise = self2.ready().then(function() {
            var keyPrefix = self2._dbInfo.keyPrefix;
            for (var i = localStorage.length - 1; i >= 0; i--) {
              var key2 = localStorage.key(i);
              if (key2.indexOf(keyPrefix) === 0) {
                localStorage.removeItem(key2);
              }
            }
          });
          executeCallback(promise, callback);
          return promise;
        }
        function getItem$2(key2, callback) {
          var self2 = this;
          key2 = normalizeKey(key2);
          var promise = self2.ready().then(function() {
            var dbInfo = self2._dbInfo;
            var result = localStorage.getItem(dbInfo.keyPrefix + key2);
            if (result) {
              result = dbInfo.serializer.deserialize(result);
            }
            return result;
          });
          executeCallback(promise, callback);
          return promise;
        }
        function iterate$2(iterator, callback) {
          var self2 = this;
          var promise = self2.ready().then(function() {
            var dbInfo = self2._dbInfo;
            var keyPrefix = dbInfo.keyPrefix;
            var keyPrefixLength = keyPrefix.length;
            var length2 = localStorage.length;
            var iterationNumber = 1;
            for (var i = 0; i < length2; i++) {
              var key2 = localStorage.key(i);
              if (key2.indexOf(keyPrefix) !== 0) {
                continue;
              }
              var value = localStorage.getItem(key2);
              if (value) {
                value = dbInfo.serializer.deserialize(value);
              }
              value = iterator(value, key2.substring(keyPrefixLength), iterationNumber++);
              if (value !== void 0) {
                return value;
              }
            }
          });
          executeCallback(promise, callback);
          return promise;
        }
        function key$2(n, callback) {
          var self2 = this;
          var promise = self2.ready().then(function() {
            var dbInfo = self2._dbInfo;
            var result;
            try {
              result = localStorage.key(n);
            } catch (error) {
              result = null;
            }
            if (result) {
              result = result.substring(dbInfo.keyPrefix.length);
            }
            return result;
          });
          executeCallback(promise, callback);
          return promise;
        }
        function keys$2(callback) {
          var self2 = this;
          var promise = self2.ready().then(function() {
            var dbInfo = self2._dbInfo;
            var length2 = localStorage.length;
            var keys2 = [];
            for (var i = 0; i < length2; i++) {
              var itemKey = localStorage.key(i);
              if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
                keys2.push(itemKey.substring(dbInfo.keyPrefix.length));
              }
            }
            return keys2;
          });
          executeCallback(promise, callback);
          return promise;
        }
        function length$2(callback) {
          var self2 = this;
          var promise = self2.keys().then(function(keys2) {
            return keys2.length;
          });
          executeCallback(promise, callback);
          return promise;
        }
        function removeItem$2(key2, callback) {
          var self2 = this;
          key2 = normalizeKey(key2);
          var promise = self2.ready().then(function() {
            var dbInfo = self2._dbInfo;
            localStorage.removeItem(dbInfo.keyPrefix + key2);
          });
          executeCallback(promise, callback);
          return promise;
        }
        function setItem$2(key2, value, callback) {
          var self2 = this;
          key2 = normalizeKey(key2);
          var promise = self2.ready().then(function() {
            if (value === void 0) {
              value = null;
            }
            var originalValue = value;
            return new Promise$1(function(resolve2, reject3) {
              var dbInfo = self2._dbInfo;
              dbInfo.serializer.serialize(value, function(value2, error) {
                if (error) {
                  reject3(error);
                } else {
                  try {
                    localStorage.setItem(dbInfo.keyPrefix + key2, value2);
                    resolve2(originalValue);
                  } catch (e) {
                    if (e.name === "QuotaExceededError" || e.name === "NS_ERROR_DOM_QUOTA_REACHED") {
                      reject3(e);
                    }
                    reject3(e);
                  }
                }
              });
            });
          });
          executeCallback(promise, callback);
          return promise;
        }
        function dropInstance$2(options, callback) {
          callback = getCallback.apply(this, arguments);
          options = typeof options !== "function" && options || {};
          if (!options.name) {
            var currentConfig = this.config();
            options.name = options.name || currentConfig.name;
            options.storeName = options.storeName || currentConfig.storeName;
          }
          var self2 = this;
          var promise;
          if (!options.name) {
            promise = Promise$1.reject("Invalid arguments");
          } else {
            promise = new Promise$1(function(resolve2) {
              if (!options.storeName) {
                resolve2(options.name + "/");
              } else {
                resolve2(_getKeyPrefix(options, self2._defaultConfig));
              }
            }).then(function(keyPrefix) {
              for (var i = localStorage.length - 1; i >= 0; i--) {
                var key2 = localStorage.key(i);
                if (key2.indexOf(keyPrefix) === 0) {
                  localStorage.removeItem(key2);
                }
              }
            });
          }
          executeCallback(promise, callback);
          return promise;
        }
        var localStorageWrapper = {
          _driver: "localStorageWrapper",
          _initStorage: _initStorage$2,
          _support: isLocalStorageValid(),
          iterate: iterate$2,
          getItem: getItem$2,
          setItem: setItem$2,
          removeItem: removeItem$2,
          clear: clear$2,
          length: length$2,
          key: key$2,
          keys: keys$2,
          dropInstance: dropInstance$2
        };
        var sameValue = function sameValue2(x, y) {
          return x === y || typeof x === "number" && typeof y === "number" && isNaN(x) && isNaN(y);
        };
        var includes2 = function includes3(array, searchElement) {
          var len = array.length;
          var i = 0;
          while (i < len) {
            if (sameValue(array[i], searchElement)) {
              return true;
            }
            i++;
          }
          return false;
        };
        var isArray = Array.isArray || function(arg) {
          return Object.prototype.toString.call(arg) === "[object Array]";
        };
        var DefinedDrivers = {};
        var DriverSupport = {};
        var DefaultDrivers = {
          INDEXEDDB: asyncStorage,
          WEBSQL: webSQLStorage,
          LOCALSTORAGE: localStorageWrapper
        };
        var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];
        var OptionalDriverMethods = ["dropInstance"];
        var LibraryMethods = ["clear", "getItem", "iterate", "key", "keys", "length", "removeItem", "setItem"].concat(OptionalDriverMethods);
        var DefaultConfig = {
          description: "",
          driver: DefaultDriverOrder.slice(),
          name: "localforage",
          size: 4980736,
          storeName: "keyvaluepairs",
          version: 1
        };
        function callWhenReady(localForageInstance, libraryMethod) {
          localForageInstance[libraryMethod] = function() {
            var _args = arguments;
            return localForageInstance.ready().then(function() {
              return localForageInstance[libraryMethod].apply(localForageInstance, _args);
            });
          };
        }
        function extend3() {
          for (var i = 1; i < arguments.length; i++) {
            var arg = arguments[i];
            if (arg) {
              for (var _key in arg) {
                if (arg.hasOwnProperty(_key)) {
                  if (isArray(arg[_key])) {
                    arguments[0][_key] = arg[_key].slice();
                  } else {
                    arguments[0][_key] = arg[_key];
                  }
                }
              }
            }
          }
          return arguments[0];
        }
        var LocalForage2 = function() {
          function LocalForage3(options) {
            _classCallCheck(this, LocalForage3);
            for (var driverTypeKey in DefaultDrivers) {
              if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
                var driver = DefaultDrivers[driverTypeKey];
                var driverName = driver._driver;
                this[driverTypeKey] = driverName;
                if (!DefinedDrivers[driverName]) {
                  this.defineDriver(driver);
                }
              }
            }
            this._defaultConfig = extend3({}, DefaultConfig);
            this._config = extend3({}, this._defaultConfig, options);
            this._driverSet = null;
            this._initDriver = null;
            this._ready = false;
            this._dbInfo = null;
            this._wrapLibraryMethodsWithReady();
            this.setDriver(this._config.driver)["catch"](function() {
            });
          }
          LocalForage3.prototype.config = function config2(options) {
            if ((typeof options === "undefined" ? "undefined" : _typeof(options)) === "object") {
              if (this._ready) {
                return new Error("Can't call config() after localforage has been used.");
              }
              for (var i in options) {
                if (i === "storeName") {
                  options[i] = options[i].replace(/\W/g, "_");
                }
                if (i === "version" && typeof options[i] !== "number") {
                  return new Error("Database version must be a number.");
                }
                this._config[i] = options[i];
              }
              if ("driver" in options && options.driver) {
                return this.setDriver(this._config.driver);
              }
              return true;
            } else if (typeof options === "string") {
              return this._config[options];
            } else {
              return this._config;
            }
          };
          LocalForage3.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
            var promise = new Promise$1(function(resolve2, reject3) {
              try {
                var driverName = driverObject._driver;
                var complianceError = new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");
                if (!driverObject._driver) {
                  reject3(complianceError);
                  return;
                }
                var driverMethods = LibraryMethods.concat("_initStorage");
                for (var i = 0, len = driverMethods.length; i < len; i++) {
                  var driverMethodName = driverMethods[i];
                  var isRequired = !includes2(OptionalDriverMethods, driverMethodName);
                  if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== "function") {
                    reject3(complianceError);
                    return;
                  }
                }
                var configureMissingMethods = function configureMissingMethods2() {
                  var methodNotImplementedFactory = function methodNotImplementedFactory2(methodName) {
                    return function() {
                      var error = new Error("Method " + methodName + " is not implemented by the current driver");
                      var promise2 = Promise$1.reject(error);
                      executeCallback(promise2, arguments[arguments.length - 1]);
                      return promise2;
                    };
                  };
                  for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
                    var optionalDriverMethod = OptionalDriverMethods[_i];
                    if (!driverObject[optionalDriverMethod]) {
                      driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
                    }
                  }
                };
                configureMissingMethods();
                var setDriverSupport = function setDriverSupport2(support) {
                  if (DefinedDrivers[driverName]) {
                    console.info("Redefining LocalForage driver: " + driverName);
                  }
                  DefinedDrivers[driverName] = driverObject;
                  DriverSupport[driverName] = support;
                  resolve2();
                };
                if ("_support" in driverObject) {
                  if (driverObject._support && typeof driverObject._support === "function") {
                    driverObject._support().then(setDriverSupport, reject3);
                  } else {
                    setDriverSupport(!!driverObject._support);
                  }
                } else {
                  setDriverSupport(true);
                }
              } catch (e) {
                reject3(e);
              }
            });
            executeTwoCallbacks(promise, callback, errorCallback);
            return promise;
          };
          LocalForage3.prototype.driver = function driver() {
            return this._driver || null;
          };
          LocalForage3.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
            var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error("Driver not found."));
            executeTwoCallbacks(getDriverPromise, callback, errorCallback);
            return getDriverPromise;
          };
          LocalForage3.prototype.getSerializer = function getSerializer(callback) {
            var serializerPromise = Promise$1.resolve(localforageSerializer);
            executeTwoCallbacks(serializerPromise, callback);
            return serializerPromise;
          };
          LocalForage3.prototype.ready = function ready(callback) {
            var self2 = this;
            var promise = self2._driverSet.then(function() {
              if (self2._ready === null) {
                self2._ready = self2._initDriver();
              }
              return self2._ready;
            });
            executeTwoCallbacks(promise, callback, callback);
            return promise;
          };
          LocalForage3.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
            var self2 = this;
            if (!isArray(drivers)) {
              drivers = [drivers];
            }
            var supportedDrivers = this._getSupportedDrivers(drivers);
            function setDriverToConfig() {
              self2._config.driver = self2.driver();
            }
            function extendSelfWithDriver(driver) {
              self2._extend(driver);
              setDriverToConfig();
              self2._ready = self2._initStorage(self2._config);
              return self2._ready;
            }
            function initDriver(supportedDrivers2) {
              return function() {
                var currentDriverIndex = 0;
                function driverPromiseLoop() {
                  while (currentDriverIndex < supportedDrivers2.length) {
                    var driverName = supportedDrivers2[currentDriverIndex];
                    currentDriverIndex++;
                    self2._dbInfo = null;
                    self2._ready = null;
                    return self2.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
                  }
                  setDriverToConfig();
                  var error = new Error("No available storage method found.");
                  self2._driverSet = Promise$1.reject(error);
                  return self2._driverSet;
                }
                return driverPromiseLoop();
              };
            }
            var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function() {
              return Promise$1.resolve();
            }) : Promise$1.resolve();
            this._driverSet = oldDriverSetDone.then(function() {
              var driverName = supportedDrivers[0];
              self2._dbInfo = null;
              self2._ready = null;
              return self2.getDriver(driverName).then(function(driver) {
                self2._driver = driver._driver;
                setDriverToConfig();
                self2._wrapLibraryMethodsWithReady();
                self2._initDriver = initDriver(supportedDrivers);
              });
            })["catch"](function() {
              setDriverToConfig();
              var error = new Error("No available storage method found.");
              self2._driverSet = Promise$1.reject(error);
              return self2._driverSet;
            });
            executeTwoCallbacks(this._driverSet, callback, errorCallback);
            return this._driverSet;
          };
          LocalForage3.prototype.supports = function supports(driverName) {
            return !!DriverSupport[driverName];
          };
          LocalForage3.prototype._extend = function _extend(libraryMethodsAndProperties) {
            extend3(this, libraryMethodsAndProperties);
          };
          LocalForage3.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
            var supportedDrivers = [];
            for (var i = 0, len = drivers.length; i < len; i++) {
              var driverName = drivers[i];
              if (this.supports(driverName)) {
                supportedDrivers.push(driverName);
              }
            }
            return supportedDrivers;
          };
          LocalForage3.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
            for (var i = 0, len = LibraryMethods.length; i < len; i++) {
              callWhenReady(this, LibraryMethods[i]);
            }
          };
          LocalForage3.prototype.createInstance = function createInstance(options) {
            return new LocalForage3(options);
          };
          return LocalForage3;
        }();
        var localforage_js = new LocalForage2();
        module3.exports = localforage_js;
      }, { "3": 3 }] }, {}, [4])(4);
    });
  }
});

// node_modules/isomorphic-ws/browser.js
var require_browser2 = __commonJS({
  "node_modules/isomorphic-ws/browser.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var ws = null;
    if (typeof WebSocket !== "undefined") {
      ws = WebSocket;
    } else if (typeof MozWebSocket !== "undefined") {
      ws = MozWebSocket;
    } else if (typeof globalThis !== "undefined") {
      ws = globalThis.WebSocket || globalThis.MozWebSocket;
    } else if (typeof window !== "undefined") {
      ws = window.WebSocket || window.MozWebSocket;
    } else if (typeof self !== "undefined") {
      ws = self.WebSocket || self.MozWebSocket;
    }
    module.exports = ws;
  }
});

// node_modules/extract-files/public/ReactNativeFile.js
var require_ReactNativeFile = __commonJS({
  "node_modules/extract-files/public/ReactNativeFile.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    module.exports = class ReactNativeFile {
      constructor({ uri, name, type: type2 }) {
        this.uri = uri;
        this.name = name;
        this.type = type2;
      }
    };
  }
});

// node_modules/extract-files/public/isExtractableFile.js
var require_isExtractableFile = __commonJS({
  "node_modules/extract-files/public/isExtractableFile.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var ReactNativeFile = require_ReactNativeFile();
    module.exports = function isExtractableFile(value) {
      return typeof File !== "undefined" && value instanceof File || typeof Blob !== "undefined" && value instanceof Blob || value instanceof ReactNativeFile;
    };
  }
});

// node_modules/extract-files/public/extractFiles.js
var require_extractFiles = __commonJS({
  "node_modules/extract-files/public/extractFiles.js"(exports, module) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var defaultIsExtractableFile = require_isExtractableFile();
    module.exports = function extractFiles(value, path2 = "", isExtractableFile = defaultIsExtractableFile) {
      const files = /* @__PURE__ */ new Map();
      const clones = /* @__PURE__ */ new Map();
      function recurse(value2, path3, recursed) {
        let clone = value2;
        if (isExtractableFile(value2)) {
          clone = null;
          const filePaths = files.get(value2);
          filePaths ? filePaths.push(path3) : files.set(value2, [path3]);
        } else {
          const isList = Array.isArray(value2) || typeof FileList !== "undefined" && value2 instanceof FileList;
          const isObject4 = value2 && value2.constructor === Object;
          if (isList || isObject4) {
            const hasClone = clones.has(value2);
            if (hasClone)
              clone = clones.get(value2);
            else {
              clone = isList ? [] : {};
              clones.set(value2, clone);
            }
            if (!recursed.has(value2)) {
              const pathPrefix = path3 ? `${path3}.` : "";
              const recursedDeeper = new Set(recursed).add(value2);
              if (isList) {
                let index = 0;
                for (const item of value2) {
                  const itemClone = recurse(item, pathPrefix + index++, recursedDeeper);
                  if (!hasClone)
                    clone.push(itemClone);
                }
              } else
                for (const key in value2) {
                  const propertyClone = recurse(value2[key], pathPrefix + key, recursedDeeper);
                  if (!hasClone)
                    clone[key] = propertyClone;
                }
            }
          }
        }
        return clone;
      }
      return {
        clone: recurse(value, path2, /* @__PURE__ */ new Set()),
        files
      };
    };
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    exports.byteLength = byteLength2;
    exports.toByteArray = toByteArray;
    exports.fromByteArray = fromByteArray;
    var lookup2 = [];
    var revLookup2 = [];
    var Arr2 = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup2[i] = code[i];
      revLookup2[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup2["-".charCodeAt(0)] = 62;
    revLookup2["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength2(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr2(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup2[b64.charCodeAt(i2)] << 18 | revLookup2[b64.charCodeAt(i2 + 1)] << 12 | revLookup2[b64.charCodeAt(i2 + 2)] << 6 | revLookup2[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup2[b64.charCodeAt(i2)] << 2 | revLookup2[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup2[b64.charCodeAt(i2)] << 10 | revLookup2[b64.charCodeAt(i2 + 1)] << 4 | revLookup2[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase642(num) {
      return lookup2[num >> 18 & 63] + lookup2[num >> 12 & 63] + lookup2[num >> 6 & 63] + lookup2[num & 63];
    }
    function encodeChunk2(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase642(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk2(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(lookup2[tmp >> 2] + lookup2[tmp << 4 & 63] + "==");
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(lookup2[tmp >> 10] + lookup2[tmp >> 4 & 63] + lookup2[tmp << 2 & 63] + "=");
      }
      return parts.join("");
    }
  }
});

// node_modules/ieee754/index.js
var require_ieee754 = __commonJS({
  "node_modules/ieee754/index.js"(exports) {
    init_virtual_process_polyfill();
    init_buffer();
    exports.read = function(buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? nBytes - 1 : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];
      i += d;
      e = s & (1 << -nBits) - 1;
      s >>= -nBits;
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
      }
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : (s ? -1 : 1) * Infinity;
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    };
    exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
      var i = isLE ? 0 : nBytes - 1;
      var d = isLE ? 1 : -1;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      value = Math.abs(value);
      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
      }
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
      }
      buffer[offset + i - d] |= s * 128;
    };
  }
});

// node_modules/buffer/index.js
var require_buffer = __commonJS({
  "node_modules/buffer/index.js"(exports) {
    "use strict";
    init_virtual_process_polyfill();
    init_buffer();
    var base64 = require_base64_js();
    var ieee754 = require_ieee754();
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer3;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    }
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        var proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer3.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer3.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer3.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer3.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer2(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      var buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer3.prototype);
      return buf;
    }
    function Buffer3(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError('The "string" argument must be of type string. Received type number');
        }
        return allocUnsafe2(arg);
      }
      return from2(arg, encodingOrOffset, length);
    }
    Buffer3.poolSize = 8192;
    function from2(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString2(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer2(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer2(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type number');
      }
      var valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer3.from(valueOf, encodingOrOffset, length);
      }
      var b = fromObject2(value);
      if (b)
        return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer3.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    }
    Buffer3.from = function(value, encodingOrOffset, length) {
      return from2(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer3, Uint8Array);
    function assertSize2(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc2(size, fill2, encoding) {
      assertSize2(size);
      if (size <= 0) {
        return createBuffer2(size);
      }
      if (fill2 !== void 0) {
        return typeof encoding === "string" ? createBuffer2(size).fill(fill2, encoding) : createBuffer2(size).fill(fill2);
      }
      return createBuffer2(size);
    }
    Buffer3.alloc = function(size, fill2, encoding) {
      return alloc2(size, fill2, encoding);
    };
    function allocUnsafe2(size) {
      assertSize2(size);
      return createBuffer2(size < 0 ? 0 : checked2(size) | 0);
    }
    Buffer3.allocUnsafe = function(size) {
      return allocUnsafe2(size);
    };
    Buffer3.allocUnsafeSlow = function(size) {
      return allocUnsafe2(size);
    };
    function fromString2(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer3.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      var length = byteLength2(string, encoding) | 0;
      var buf = createBuffer2(length);
      var actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike2(array) {
      var length = array.length < 0 ? 0 : checked2(array.length) | 0;
      var buf = createBuffer2(length);
      for (var i = 0; i < length; i += 1) {
        buf[i] = array[i] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        var copy2 = new Uint8Array(arrayView);
        return fromArrayBuffer2(copy2.buffer, copy2.byteOffset, copy2.byteLength);
      }
      return fromArrayLike2(arrayView);
    }
    function fromArrayBuffer2(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      var buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer3.prototype);
      return buf;
    }
    function fromObject2(obj) {
      if (Buffer3.isBuffer(obj)) {
        var len = checked2(obj.length) | 0;
        var buf = createBuffer2(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer2(0);
        }
        return fromArrayLike2(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike2(obj.data);
      }
    }
    function checked2(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer3.alloc(+length);
    }
    Buffer3.isBuffer = function isBuffer2(b) {
      return b != null && b._isBuffer === true && b !== Buffer3.prototype;
    };
    Buffer3.compare = function compare3(a, b) {
      if (isInstance(a, Uint8Array))
        a = Buffer3.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array))
        b = Buffer3.from(b, b.offset, b.byteLength);
      if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b)) {
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      }
      if (a === b)
        return 0;
      var x = a.length;
      var y = b.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    Buffer3.isEncoding = function isEncoding2(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer3.concat = function concat3(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer3.alloc(0);
      }
      var i;
      if (length === void 0) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }
      var buffer = Buffer3.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer.length) {
            Buffer3.from(buf).copy(buffer, pos);
          } else {
            Uint8Array.prototype.set.call(buffer, buf, pos);
          }
        } else if (!Buffer3.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer, pos);
        }
        pos += buf.length;
      }
      return buffer;
    };
    function byteLength2(string, encoding) {
      if (Buffer3.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
      }
      var len = string.length;
      var mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes2(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes2(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes2(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer3.byteLength = byteLength2;
    function slowToString2(encoding, start, end) {
      var loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice2(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice2(this, start, end);
          case "ascii":
            return asciiSlice2(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice2(this, start, end);
          case "base64":
            return base64Slice2(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice2(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer3.prototype._isBuffer = true;
    function swap2(b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }
    Buffer3.prototype.swap16 = function swap162() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i = 0; i < len; i += 2) {
        swap2(this, i, i + 1);
      }
      return this;
    };
    Buffer3.prototype.swap32 = function swap322() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i = 0; i < len; i += 4) {
        swap2(this, i, i + 3);
        swap2(this, i + 1, i + 2);
      }
      return this;
    };
    Buffer3.prototype.swap64 = function swap642() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i = 0; i < len; i += 8) {
        swap2(this, i, i + 7);
        swap2(this, i + 1, i + 6);
        swap2(this, i + 2, i + 5);
        swap2(this, i + 3, i + 4);
      }
      return this;
    };
    Buffer3.prototype.toString = function toString3() {
      var length = this.length;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice2(this, 0, length);
      return slowToString2.apply(this, arguments);
    };
    Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
    Buffer3.prototype.equals = function equals2(b) {
      if (!Buffer3.isBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer3.compare(this, b) === 0;
    };
    Buffer3.prototype.inspect = function inspect6() {
      var str2 = "";
      var max = exports.INSPECT_MAX_BYTES;
      str2 = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max)
        str2 += " ... ";
      return "<Buffer " + str2 + ">";
    };
    if (customInspectSymbol) {
      Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;
    }
    Buffer3.prototype.compare = function compare3(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer3.from(target, target.offset, target.byteLength);
      }
      if (!Buffer3.isBuffer(target)) {
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break;
        }
      }
      if (x < y)
        return -1;
      if (y < x)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf2(buffer, val, byteOffset, encoding, dir) {
      if (buffer.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer3.from(val, encoding);
      }
      if (Buffer3.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf2(buffer, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
          }
        }
        return arrayIndexOf2(buffer, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf2(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i2) {
        if (indexSize === 1) {
          return buf[i2];
        } else {
          return buf.readUInt16BE(i2 * indexSize);
        }
      }
      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i;
            if (i - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found)
            return i;
        }
      }
      return -1;
    }
    Buffer3.prototype.includes = function includes2(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer3.prototype.indexOf = function indexOf2(val, byteOffset, encoding) {
      return bidirectionalIndexOf2(this, val, byteOffset, encoding, true);
    };
    Buffer3.prototype.lastIndexOf = function lastIndexOf2(val, byteOffset, encoding) {
      return bidirectionalIndexOf2(this, val, byteOffset, encoding, false);
    };
    function hexWrite2(buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      var strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i;
        buf[offset + i] = parsed;
      }
      return i;
    }
    function utf8Write2(buf, string, offset, length) {
      return blitBuffer2(utf8ToBytes2(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite2(buf, string, offset, length) {
      return blitBuffer2(asciiToBytes2(string), buf, offset, length);
    }
    function base64Write2(buf, string, offset, length) {
      return blitBuffer2(base64ToBytes2(string), buf, offset, length);
    }
    function ucs2Write2(buf, string, offset, length) {
      return blitBuffer2(utf16leToBytes2(string, buf.length - offset), buf, offset, length);
    }
    Buffer3.prototype.write = function write2(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite2(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write2(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite2(this, string, offset, length);
          case "base64":
            return base64Write2(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write2(this, string, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer3.prototype.toJSON = function toJSON2() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice2(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice2(buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];
      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
      }
      return decodeCodePointsArray2(res);
    }
    var MAX_ARGUMENTS_LENGTH2 = 4096;
    function decodeCodePointsArray2(codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH2) {
        return String.fromCharCode.apply(String, codePoints);
      }
      var res = "";
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH2));
      }
      return res;
    }
    function asciiSlice2(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 127);
      }
      return ret;
    }
    function latin1Slice2(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret;
    }
    function hexSlice2(buf, start, end) {
      var len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      var out = "";
      for (var i = start; i < end; ++i) {
        out += hexSliceLookupTable[buf[i]];
      }
      return out;
    }
    function utf16leSlice2(buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = "";
      for (var i = 0; i < bytes.length - 1; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res;
    }
    Buffer3.prototype.slice = function slice2(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      var newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer3.prototype);
      return newBuf;
    };
    function checkOffset2(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE2(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset2(offset, byteLength3, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength3 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      return val;
    };
    Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE2(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        checkOffset2(offset, byteLength3, this.length);
      }
      var val = this[offset + --byteLength3];
      var mul = 1;
      while (byteLength3 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength3] * mul;
      }
      return val;
    };
    Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt82(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 1, this.length);
      return this[offset];
    };
    Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer3.prototype.readIntLE = function readIntLE2(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset2(offset, byteLength3, this.length);
      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength3 && (mul *= 256)) {
        val += this[offset + i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer3.prototype.readIntBE = function readIntBE2(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset2(offset, byteLength3, this.length);
      var i = byteLength3;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 256)) {
        val += this[offset + --i] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer3.prototype.readInt8 = function readInt82(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer3.prototype.readInt16LE = function readInt16LE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer3.prototype.readInt16BE = function readInt16BE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer3.prototype.readInt32LE = function readInt32LE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer3.prototype.readInt32BE = function readInt32BE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer3.prototype.readFloatLE = function readFloatLE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer3.prototype.readFloatBE = function readFloatBE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer3.prototype.readDoubleLE = function readDoubleLE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer3.prototype.readDoubleBE = function readDoubleBE2(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset2(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt2(buf, value, offset, ext, max, min) {
      if (!Buffer3.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE2(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt2(this, value, offset, byteLength3, maxBytes, 0);
      }
      var mul = 1;
      var i = 0;
      this[offset] = value & 255;
      while (++i < byteLength3 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE2(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt2(this, value, offset, byteLength3, maxBytes, 0);
      }
      var i = byteLength3 - 1;
      var mul = 1;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        this[offset + i] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt82(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt2(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE2(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt2(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE2(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt2(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE2(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt2(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE2(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt2(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer3.prototype.writeIntLE = function writeIntLE2(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength3 - 1);
        checkInt2(this, value, offset, byteLength3, limit - 1, -limit);
      }
      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i < byteLength3 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeIntBE = function writeIntBE2(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength3 - 1);
        checkInt2(this, value, offset, byteLength3, limit - 1, -limit);
      }
      var i = byteLength3 - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 255;
      while (--i >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer3.prototype.writeInt8 = function writeInt82(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt2(this, value, offset, 1, 127, -128);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer3.prototype.writeInt16LE = function writeInt16LE2(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt2(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer3.prototype.writeInt16BE = function writeInt16BE2(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt2(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer3.prototype.writeInt32LE = function writeInt32LE2(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt2(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer3.prototype.writeInt32BE = function writeInt32BE2(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt2(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function checkIEEE7542(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat2(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE7542(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer3.prototype.writeFloatLE = function writeFloatLE2(value, offset, noAssert) {
      return writeFloat2(this, value, offset, true, noAssert);
    };
    Buffer3.prototype.writeFloatBE = function writeFloatBE2(value, offset, noAssert) {
      return writeFloat2(this, value, offset, false, noAssert);
    };
    function writeDouble2(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE7542(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer3.prototype.writeDoubleLE = function writeDoubleLE2(value, offset, noAssert) {
      return writeDouble2(this, value, offset, true, noAssert);
    };
    Buffer3.prototype.writeDoubleBE = function writeDoubleBE2(value, offset, noAssert) {
      return writeDouble2(this, value, offset, false, noAssert);
    };
    Buffer3.prototype.copy = function copy2(target, targetStart, start, end) {
      if (!Buffer3.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("Index out of range");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
      }
      return len;
    };
    Buffer3.prototype.fill = function fill2(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (encoding === "utf8" && code < 128 || encoding === "latin1") {
            val = code;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      var i;
      if (typeof val === "number") {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);
        var len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }
      return this;
    };
    var INVALID_BASE64_RE2 = /[^+/0-9A-Za-z-_]/g;
    function base64clean2(str2) {
      str2 = str2.split("=")[0];
      str2 = str2.trim().replace(INVALID_BASE64_RE2, "");
      if (str2.length < 2)
        return "";
      while (str2.length % 4 !== 0) {
        str2 = str2 + "=";
      }
      return str2;
    }
    function utf8ToBytes2(string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes2(str2) {
      var byteArray = [];
      for (var i = 0; i < str2.length; ++i) {
        byteArray.push(str2.charCodeAt(i) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes2(str2, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str2.length; ++i) {
        if ((units -= 2) < 0)
          break;
        c = str2.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes2(str2) {
      return base64.toByteArray(base64clean2(str2));
    }
    function blitBuffer2(src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if (i + offset >= dst.length || i >= src.length)
          break;
        dst[i + offset] = src[i];
      }
      return i;
    }
    function isInstance(obj, type2) {
      return obj instanceof type2 || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type2.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      var alphabet = "0123456789abcdef";
      var table = new Array(256);
      for (var i = 0; i < 16; ++i) {
        var i16 = i * 16;
        for (var j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i] + alphabet[j];
        }
      }
      return table;
    }();
  }
});

// node_modules/sync-fetch/browser.js
var require_browser3 = __commonJS({
  "node_modules/sync-fetch/browser.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    var { Buffer: Buffer3 } = require_buffer();
    function syncFetch(...args) {
      const request = new syncFetch.Request(...args);
      const xhr = new XMLHttpRequest();
      xhr.withCredentials = request.credentials === "include";
      xhr.timeout = request[INTERNALS].timeout;
      xhr.open(request.method, request.url, false);
      try {
        xhr.responseType = "arraybuffer";
      } catch (e) {
      }
      for (const header of request.headers) {
        xhr.setRequestHeader(...header);
      }
      xhr.send(request.body || null);
      let headers = xhr.getAllResponseHeaders();
      headers = headers && headers.split("\r\n").filter(Boolean).map((header) => header.split(": ", 2));
      const response = new syncFetch.Response(xhr.response, {
        headers,
        status: xhr.status,
        statusText: xhr.statusText
      });
      response[INTERNALS].url = xhr.responseURL;
      response[INTERNALS].redirected = xhr.responseURL !== request.url;
      return response;
    }
    var INTERNALS = Symbol("SyncFetch Internals");
    var REQ_UNSUPPORTED = ["mode", "cache", "redirect", "referrer", "integrity"];
    var HTTP_STATUS = {
      100: "Continue",
      101: "Switching Protocols",
      200: "OK",
      201: "Created",
      202: "Accepted",
      203: "Non-Authoritative Information",
      204: "No Content",
      205: "Reset Content",
      206: "Partial Content",
      300: "Multiple Choices",
      301: "Moved Permanently",
      302: "Found",
      303: "See Other",
      304: "Not Modified",
      305: "Use Proxy",
      307: "Temporary Redirect",
      400: "Bad Request",
      401: "Unauthorized",
      402: "Payment Required",
      403: "Forbidden",
      404: "Not Found",
      405: "Method Not Allowed",
      406: "Not Acceptable",
      407: "Proxy Authentication Required",
      408: "Request Timeout",
      409: "Conflict",
      410: "Gone",
      411: "Length Required",
      412: "Precondition Failed",
      413: "Payload Too Large",
      414: "URI Too Long",
      415: "Unsupported Media Type",
      416: "Range Not Satisfiable",
      417: "Expectation Failed",
      426: "Upgrade Required",
      500: "Internal Server Error",
      501: "Not Implemented",
      502: "Bad Gateway",
      503: "Service Unavailable",
      504: "Gateway Timeout",
      505: "HTTP Version Not Supported"
    };
    var SyncRequest = class {
      constructor(resource, init2 = {}) {
        for (const option of REQ_UNSUPPORTED) {
          if (option in init2) {
            throw new TypeError(`option ${option} not supported`);
          }
        }
        if (init2.credentials === "same-origin") {
          throw new TypeError("option credentials with value 'same-origin' not supported");
        }
        this[INTERNALS] = {
          method: init2.method || "GET",
          headers: new syncFetch.Headers(init2.headers),
          body: init2.body ? Buffer3.from(init2.body) : null,
          credentials: init2.credentials || "omit",
          timeout: init2.timeout || 0
        };
        if (typeof resource === "string") {
          this[INTERNALS].url = resource;
        } else if (resource instanceof SyncRequest) {
          this[INTERNALS].url = resource.url;
          if (!init2.method) {
            this[INTERNALS].method = resource.method;
          }
          if (!init2.headers) {
            this[INTERNALS].headers = resource.headers;
          }
          if (!init2.body) {
            this[INTERNALS].body = resource[INTERNALS].body;
          }
          if (!init2.credentials) {
            this[INTERNALS].credentials = resource.credentials;
          }
        } else {
          throw new TypeError("Request input should be a URL string or a Request object");
        }
      }
      get cache() {
        return "default";
      }
      get credentials() {
        return this[INTERNALS].credentials;
      }
      get destination() {
        return "";
      }
      get headers() {
        return this[INTERNALS].headers;
      }
      get integrity() {
        return "";
      }
      get method() {
        return this[INTERNALS].method;
      }
      get mode() {
        return "cors";
      }
      get priority() {
        return "auto";
      }
      get redirect() {
        return "follow";
      }
      get referrer() {
        return "about:client";
      }
      get referrerPolicy() {
        return "";
      }
      get url() {
        return this[INTERNALS].url;
      }
      clone() {
        checkBody(this);
        return new SyncRequest(this.url, this[INTERNALS]);
      }
    };
    var SyncResponse = class {
      constructor(body, init2 = {}) {
        this[INTERNALS] = {
          body: body ? Buffer3.from(body) : null,
          bodyUsed: false,
          headers: new syncFetch.Headers(init2.headers),
          status: init2.status,
          statusText: init2.statusText
        };
      }
      get headers() {
        return this[INTERNALS].headers;
      }
      get ok() {
        const status = this[INTERNALS].status;
        return status >= 200 && status < 300;
      }
      get redirected() {
        return this[INTERNALS].redirected;
      }
      get status() {
        return this[INTERNALS].status;
      }
      get statusText() {
        return this[INTERNALS].statusText;
      }
      get url() {
        return this[INTERNALS].url;
      }
      clone() {
        return this.redirect(this[INTERNALS].url, this[INTERNALS].status);
      }
      redirect(url, status) {
        checkBody(this);
        const response = new SyncResponse(this[INTERNALS].body, {
          headers: this[INTERNALS].headers,
          status: status || this[INTERNALS].status,
          statusText: HTTP_STATUS[status] || this[INTERNALS].statusText
        });
        response[INTERNALS].url = url || this[INTERNALS].url;
        response[INTERNALS].redirected = this[INTERNALS].redirected;
        return response;
      }
    };
    var Body = class {
      constructor(body) {
        this[INTERNALS] = {
          body: Buffer3.from(body),
          bodyUsed: false
        };
      }
      get bodyUsed() {
        return this[INTERNALS].bodyUsed;
      }
      static mixin(prototype) {
        for (const name of Object.getOwnPropertyNames(Body.prototype)) {
          if (name === "constructor") {
            continue;
          }
          const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(prototype, name, { ...desc, enumerable: true });
        }
      }
      arrayBuffer() {
        const buffer = consumeBody(this);
        return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);
      }
      blob() {
        const type2 = this.headers && this.headers.get("content-type");
        return new Blob([consumeBody(this)], type2 && { type: type2 });
      }
      text() {
        return consumeBody(this).toString();
      }
      json() {
        try {
          return JSON.parse(consumeBody(this).toString());
        } catch (err) {
          throw new TypeError(`invalid json response body at ${this.url} reason: ${err.message}`, "invalid-json");
        }
      }
      buffer() {
        return consumeBody(this).clone();
      }
    };
    function checkBody(body) {
      if (body.bodyUsed) {
        throw new TypeError(`body used already for: ${body.url}`);
      }
    }
    function consumeBody(body) {
      checkBody(body);
      body[INTERNALS].bodyUsed = true;
      return body[INTERNALS].body || Buffer3.alloc(0);
    }
    Body.mixin(SyncRequest.prototype);
    Body.mixin(SyncResponse.prototype);
    var Headers = class {
      constructor(headers) {
        if (headers instanceof syncFetch.Headers) {
          this[INTERNALS] = { ...headers[INTERNALS] };
        } else {
          this[INTERNALS] = {};
          if (Array.isArray(headers)) {
            for (const [name, value] of headers) {
              this.append(name, value);
            }
          } else if (typeof headers === "object") {
            for (const name in headers) {
              this.set(name, headers[name]);
            }
          }
        }
      }
      append(name, value) {
        name = name.toLowerCase();
        if (!this[INTERNALS][name]) {
          this[INTERNALS][name] = [];
        }
        this[INTERNALS][name].push(value);
      }
      delete(name) {
        delete this[INTERNALS][name.toLowerCase()];
      }
      set(name, value) {
        this[INTERNALS][name.toLowerCase()] = [value];
      }
      entries() {
        const pairs2 = [];
        for (const name in this[INTERNALS]) {
          for (const value of this[INTERNALS][name]) {
            pairs2.push([name, value]);
          }
        }
        return pairs2;
      }
      get(name) {
        name = name.toLowerCase();
        return name in this[INTERNALS] ? this[INTERNALS][name].join(", ") : null;
      }
      keys() {
        return Object.keys(this[INTERNALS]);
      }
      has(name) {
        return name.toLowerCase() in this[INTERNALS];
      }
      values() {
        const values = [];
        for (const name in this[INTERNALS]) {
          for (const value of this[INTERNALS][name]) {
            values.push(value);
          }
        }
        return values;
      }
      *[Symbol.iterator]() {
        for (const name in this[INTERNALS]) {
          for (const value of this[INTERNALS][name]) {
            yield [name, value];
          }
        }
      }
    };
    syncFetch.Headers = Headers;
    syncFetch.Request = SyncRequest;
    syncFetch.Response = SyncResponse;
    module.exports = syncFetch;
  }
});

// .mesh/sources/Countries/introspectionSchema.ts
var introspectionSchema_exports = {};
__export(introspectionSchema_exports, {
  default: () => introspectionSchema_default
});
var schemaAST, introspectionSchema_default;
var init_introspectionSchema = __esm({
  ".mesh/sources/Countries/introspectionSchema.ts"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_graphql();
    schemaAST = {
      "kind": "Document",
      "definitions": [
        {
          "kind": "SchemaDefinition",
          "operationTypes": [
            {
              "kind": "OperationTypeDefinition",
              "operation": "query",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Query"
                }
              }
            }
          ],
          "directives": []
        },
        {
          "kind": "DirectiveDefinition",
          "name": {
            "kind": "Name",
            "value": "key"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "fields"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "repeatable": false,
          "locations": [
            {
              "kind": "Name",
              "value": "OBJECT"
            },
            {
              "kind": "Name",
              "value": "INTERFACE"
            }
          ]
        },
        {
          "kind": "DirectiveDefinition",
          "name": {
            "kind": "Name",
            "value": "extends"
          },
          "arguments": [],
          "repeatable": false,
          "locations": [
            {
              "kind": "Name",
              "value": "OBJECT"
            },
            {
              "kind": "Name",
              "value": "INTERFACE"
            }
          ]
        },
        {
          "kind": "DirectiveDefinition",
          "name": {
            "kind": "Name",
            "value": "external"
          },
          "arguments": [],
          "repeatable": false,
          "locations": [
            {
              "kind": "Name",
              "value": "OBJECT"
            },
            {
              "kind": "Name",
              "value": "FIELD_DEFINITION"
            }
          ]
        },
        {
          "kind": "DirectiveDefinition",
          "name": {
            "kind": "Name",
            "value": "requires"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "fields"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "repeatable": false,
          "locations": [
            {
              "kind": "Name",
              "value": "FIELD_DEFINITION"
            }
          ]
        },
        {
          "kind": "DirectiveDefinition",
          "name": {
            "kind": "Name",
            "value": "provides"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "fields"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "repeatable": false,
          "locations": [
            {
              "kind": "Name",
              "value": "FIELD_DEFINITION"
            }
          ]
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "Country"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "native"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "phone"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "continent"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Continent"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "capital"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "currency"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "languages"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "Language"
                      }
                    }
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "emoji"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "emojiU"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "states"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "State"
                      }
                    }
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "Continent"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "countries"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "Country"
                      }
                    }
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "Language"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "native"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "rtl"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Boolean"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "State"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "country"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Country"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "InputObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "StringQueryOperatorInput"
          },
          "fields": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "eq"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "ne"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "in"
              },
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "nin"
              },
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "regex"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "glob"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            }
          ],
          "directives": []
        },
        {
          "kind": "InputObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "CountryFilterInput"
          },
          "fields": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StringQueryOperatorInput"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "currency"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StringQueryOperatorInput"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "continent"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StringQueryOperatorInput"
                }
              },
              "directives": []
            }
          ],
          "directives": []
        },
        {
          "kind": "InputObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "ContinentFilterInput"
          },
          "fields": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StringQueryOperatorInput"
                }
              },
              "directives": []
            }
          ],
          "directives": []
        },
        {
          "kind": "InputObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "LanguageFilterInput"
          },
          "fields": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StringQueryOperatorInput"
                }
              },
              "directives": []
            }
          ],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "Query"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "_entities"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "representations"
                  },
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "ListType",
                      "type": {
                        "kind": "NonNullType",
                        "type": {
                          "kind": "NamedType",
                          "name": {
                            "kind": "Name",
                            "value": "_Any"
                          }
                        }
                      }
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "_Entity"
                    }
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "_service"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "_Service"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "countries"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "filter"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "CountryFilterInput"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "Country"
                      }
                    }
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "country"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "code"
                  },
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "ID"
                      }
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Country"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "continents"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "filter"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ContinentFilterInput"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "Continent"
                      }
                    }
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "continent"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "code"
                  },
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "ID"
                      }
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Continent"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "languages"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "filter"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "LanguageFilterInput"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "Language"
                      }
                    }
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "language"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "code"
                  },
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "ID"
                      }
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Language"
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "UnionTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "_Entity"
          },
          "directives": [],
          "types": [
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Country"
              }
            },
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Continent"
              }
            },
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Language"
              }
            }
          ]
        },
        {
          "kind": "ScalarTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "_Any"
          },
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "_Service"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "sdl"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        }
      ]
    };
    introspectionSchema_default = buildASTSchema(schemaAST, {
      assumeValid: true,
      assumeValidSDL: true
    });
  }
});

// .mesh/sources/Star wars/introspectionSchema.ts
var introspectionSchema_exports2 = {};
__export(introspectionSchema_exports2, {
  default: () => introspectionSchema_default2
});
var schemaAST2, introspectionSchema_default2;
var init_introspectionSchema2 = __esm({
  ".mesh/sources/Star wars/introspectionSchema.ts"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_graphql();
    schemaAST2 = {
      "kind": "Document",
      "definitions": [
        {
          "kind": "SchemaDefinition",
          "operationTypes": [
            {
              "kind": "OperationTypeDefinition",
              "operation": "query",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Root"
                }
              }
            }
          ],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "Root"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "allFilms"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "FilmsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "film"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "id"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "filmID"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Film"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "allPeople"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PeopleConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "person"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "id"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "personID"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Person"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "allPlanets"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PlanetsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "planet"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "id"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "planetID"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Planet"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "allSpecies"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "SpeciesConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "species"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "id"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "speciesID"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Species"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "allStarships"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StarshipsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "starship"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "id"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "starshipID"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Starship"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "allVehicles"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VehiclesConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "vehicle"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "id"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "vehicleID"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ID"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Vehicle"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Fetches an object given its ID",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "description": {
                    "kind": "StringValue",
                    "value": "The ID of an object",
                    "block": true
                  },
                  "name": {
                    "kind": "Name",
                    "value": "id"
                  },
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "ID"
                      }
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Node"
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "FilmsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "films"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Film"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "Information about pagination in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PageInfo"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "When paginating forwards, are there more items?",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "hasNextPage"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Boolean"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "When paginating backwards, are there more items?",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "hasPreviousPage"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Boolean"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "When paginating backwards, the cursor to continue.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "startCursor"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "When paginating forwards, the cursor to continue.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "endCursor"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Film"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A single film.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "Film"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The title of this film.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "title"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The episode number of this film.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "episodeID"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The opening paragraphs at the beginning of this film.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "openingCrawl"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The name of the director of this film.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "director"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The name(s) of the producer(s) of this film.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "producers"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of film release at original creator country.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "releaseDate"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "speciesConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "FilmSpeciesConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "starshipConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "FilmStarshipsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "vehicleConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "FilmVehiclesConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "characterConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "FilmCharactersConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "planetConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "FilmPlanetsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was created.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "created"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was edited.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edited"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ID of an object",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Node"
              }
            }
          ],
          "directives": []
        },
        {
          "kind": "InterfaceTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An object with an ID",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "Node"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The id of the object.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            }
          ],
          "directives": [],
          "interfaces": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmSpeciesConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "FilmSpeciesEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "species"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Species"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmSpeciesEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Species"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A type of person or character within the Star Wars Universe.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "Species"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The name of this species.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The classification of this species, such as "mammal" or "reptile".',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "classification"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The designation of this species, such as "sentient".',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "designation"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The average height of this species in centimeters.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "averageHeight"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Float"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The average lifespan of this species in years, null if unknown.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "averageLifespan"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Common eye colors for this species, null if this species does not typically\nhave eyes.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "eyeColors"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Common hair colors for this species, null if this species does not typically\nhave hair.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "hairColors"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Common skin colors for this species, null if this species does not typically\nhave skin.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "skinColors"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The language commonly spoken by this species.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "language"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A planet that this species originates from.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "homeworld"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Planet"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "personConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "SpeciesPeopleConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "filmConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "SpeciesFilmsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was created.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "created"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was edited.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edited"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ID of an object",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Node"
              }
            }
          ],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A large mass, planet or planetoid in the Star Wars Universe, at the time of\n0 ABY.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "Planet"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The name of this planet.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The diameter of this planet in kilometers.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "diameter"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The number of standard hours it takes for this planet to complete a single\nrotation on its axis.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "rotationPeriod"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The number of standard days it takes for this planet to complete a single orbit\nof its local star.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "orbitalPeriod"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A number denoting the gravity of this planet, where "1" is normal or 1 standard\nG. "2" is twice or 2 standard Gs. "0.5" is half or 0.5 standard Gs.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "gravity"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The average population of sentient beings inhabiting this planet.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "population"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Float"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The climates of this planet.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "climates"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The terrains of this planet.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "terrains"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The percentage of the planet surface that is naturally occurring water or bodies\nof water.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "surfaceWater"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Float"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "residentConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PlanetResidentsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "filmConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PlanetFilmsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was created.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "created"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was edited.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edited"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ID of an object",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Node"
              }
            }
          ],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PlanetResidentsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PlanetResidentsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "residents"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Person"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PlanetResidentsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Person"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An individual person or character within the Star Wars universe.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "Person"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The name of this person.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The birth year of the person, using the in-universe standard of BBY or ABY -\nBefore the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is\na battle that occurs at the end of Star Wars episode IV: A New Hope.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "birthYear"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The eye color of this person. Will be "unknown" if not known or "n/a" if the\nperson does not have an eye.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "eyeColor"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The gender of this person. Either "Male", "Female" or "unknown",\n"n/a" if the person does not have a gender.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "gender"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The hair color of this person. Will be "unknown" if not known or "n/a" if the\nperson does not have hair.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "hairColor"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The height of the person in centimeters.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "height"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The mass of the person in kilograms.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "mass"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Float"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The skin color of this person.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "skinColor"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A planet that this person was born on or inhabits.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "homeworld"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Planet"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "filmConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PersonFilmsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The species that this person belongs to, or null if unknown.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "species"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Species"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "starshipConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PersonStarshipsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "vehicleConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "PersonVehiclesConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was created.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "created"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was edited.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edited"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ID of an object",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Node"
              }
            }
          ],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PersonFilmsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PersonFilmsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "films"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Film"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PersonFilmsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Film"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PersonStarshipsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PersonStarshipsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "starships"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Starship"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PersonStarshipsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Starship"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A single transport craft that has hyperdrive capability.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "Starship"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The name of this starship. The common name, such as "Death Star".',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The model or official name of this starship. Such as "T-65 X-wing" or "DS-1\nOrbital Battle Station".',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "model"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The class of this starship, such as "Starfighter" or "Deep Space Mobile\nBattlestation"',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "starshipClass"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The manufacturers of this starship.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "manufacturers"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The cost of this starship new, in galactic credits.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "costInCredits"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Float"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The length of this starship in meters.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "length"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Float"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The number of personnel needed to run or pilot this starship.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "crew"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The number of non-essential people this starship can transport.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "passengers"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The maximum speed of this starship in atmosphere. null if this starship is\nincapable of atmosphering flight.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "maxAtmospheringSpeed"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The class of this starships hyperdrive.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "hyperdriveRating"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Float"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The Maximum number of Megalights this starship can travel in a standard hour.\nA "Megalight" is a standard unit of distance and has never been defined before\nwithin the Star Wars universe. This figure is only really useful for measuring\nthe difference in speed of starships. We can assume it is similar to AU, the\ndistance between our Sun (Sol) and Earth.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "MGLT"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The maximum number of kilograms that this starship can transport.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cargoCapacity"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Float"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The maximum length of time that this starship can provide consumables for its\nentire crew without having to resupply.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "consumables"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "pilotConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StarshipPilotsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "filmConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StarshipFilmsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was created.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "created"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was edited.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edited"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ID of an object",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Node"
              }
            }
          ],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "StarshipPilotsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "StarshipPilotsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pilots"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Person"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "StarshipPilotsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Person"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "StarshipFilmsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "StarshipFilmsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "films"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Film"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "StarshipFilmsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Film"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PersonVehiclesConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PersonVehiclesEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "vehicles"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Vehicle"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PersonVehiclesEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Vehicle"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A single transport craft that does not have hyperdrive capability",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "Vehicle"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The name of this vehicle. The common name, such as "Sand Crawler" or "Speeder\nbike".',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The model or official name of this vehicle. Such as "All-Terrain Attack\nTransport".',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "model"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'The class of this vehicle, such as "Wheeled" or "Repulsorcraft".',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "vehicleClass"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The manufacturers of this vehicle.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "manufacturers"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The cost of this vehicle new, in Galactic Credits.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "costInCredits"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Float"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The length of this vehicle in meters.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "length"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Float"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The number of personnel needed to run or pilot this vehicle.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "crew"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The number of non-essential people this vehicle can transport.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "passengers"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The maximum speed of this vehicle in atmosphere.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "maxAtmospheringSpeed"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The maximum number of kilograms that this vehicle can transport.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cargoCapacity"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Float"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The maximum length of time that this vehicle can provide consumables for its\nentire crew without having to resupply.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "consumables"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "pilotConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VehiclePilotsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "filmConnection"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "after"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "first"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "before"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  },
                  "directives": []
                },
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "last"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "Int"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "VehicleFilmsConnection"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was created.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "created"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ISO 8601 date format of the time that this resource was edited.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edited"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The ID of an object",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "id"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Node"
              }
            }
          ],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "VehiclePilotsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "VehiclePilotsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pilots"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Person"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "VehiclePilotsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Person"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "VehicleFilmsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "VehicleFilmsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "films"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Film"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "VehicleFilmsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Film"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PlanetFilmsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PlanetFilmsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "films"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Film"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PlanetFilmsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Film"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "SpeciesPeopleConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "SpeciesPeopleEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "people"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Person"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "SpeciesPeopleEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Person"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "SpeciesFilmsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "SpeciesFilmsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "films"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Film"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "SpeciesFilmsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Film"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmStarshipsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "FilmStarshipsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "starships"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Starship"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmStarshipsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Starship"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmVehiclesConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "FilmVehiclesEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "vehicles"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Vehicle"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmVehiclesEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Vehicle"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmCharactersConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "FilmCharactersEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "characters"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Person"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmCharactersEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Person"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmPlanetsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "FilmPlanetsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "planets"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Planet"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "FilmPlanetsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Planet"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PeopleConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PeopleEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "people"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Person"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PeopleEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Person"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PlanetsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PlanetsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "planets"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Planet"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "PlanetsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Planet"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "SpeciesConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "SpeciesEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "species"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Species"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "SpeciesEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Species"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "StarshipsConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "StarshipsEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "starships"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Starship"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "StarshipsEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Starship"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "A connection to a list of items.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "VehiclesConnection"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "Information to aid in pagination.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "pageInfo"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "PageInfo"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A list of edges.",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "edges"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "VehiclesEdge"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A count of the total number of objects in this connection, ignoring pagination.\nThis allows a client to fetch the first five objects by passing "5" as the\nargument to "first", then fetch the total count so it could display "5 of 83",\nfor example.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "totalCount"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Int"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": 'A list of all of the objects returned in the connection. This is a convenience\nfield provided for quickly exploring the API; rather than querying for\n"{ edges { node } }" when no edge data is needed, this field can be be used\ninstead. Note that when clients like Relay need to fetch the "cursor" field on\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\nfull "{ edges { node } }" version should be used instead.',
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "vehicles"
              },
              "arguments": [],
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Vehicle"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "description": {
            "kind": "StringValue",
            "value": "An edge in a connection.",
            "block": true
          },
          "name": {
            "kind": "Name",
            "value": "VehiclesEdge"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "The item at the end of the edge",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "node"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Vehicle"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "description": {
                "kind": "StringValue",
                "value": "A cursor for use in pagination",
                "block": true
              },
              "name": {
                "kind": "Name",
                "value": "cursor"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        }
      ]
    };
    introspectionSchema_default2 = buildASTSchema(schemaAST2, {
      assumeValid: true,
      assumeValidSDL: true
    });
  }
});

// .mesh/stitchingMerger/Countries_stitching.ts
var Countries_stitching_exports = {};
__export(Countries_stitching_exports, {
  default: () => Countries_stitching_default
});
var schemaAST3, Countries_stitching_default;
var init_Countries_stitching = __esm({
  ".mesh/stitchingMerger/Countries_stitching.ts"() {
    init_virtual_process_polyfill();
    init_buffer();
    init_graphql();
    schemaAST3 = {
      "kind": "Document",
      "definitions": [
        {
          "kind": "SchemaDefinition",
          "operationTypes": [
            {
              "kind": "OperationTypeDefinition",
              "operation": "query",
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Query"
                }
              }
            }
          ],
          "directives": []
        },
        {
          "kind": "DirectiveDefinition",
          "name": {
            "kind": "Name",
            "value": "key"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "selectionSet"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "repeatable": false,
          "locations": [
            {
              "kind": "Name",
              "value": "OBJECT"
            }
          ]
        },
        {
          "kind": "DirectiveDefinition",
          "name": {
            "kind": "Name",
            "value": "computed"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "selectionSet"
              },
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            }
          ],
          "repeatable": false,
          "locations": [
            {
              "kind": "Name",
              "value": "FIELD_DEFINITION"
            }
          ]
        },
        {
          "kind": "DirectiveDefinition",
          "name": {
            "kind": "Name",
            "value": "merge"
          },
          "arguments": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "argsExpr"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "keyArg"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "keyField"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "key"
              },
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NonNullType",
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "String"
                    }
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "additionalArgs"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            }
          ],
          "repeatable": false,
          "locations": [
            {
              "kind": "Name",
              "value": "FIELD_DEFINITION"
            }
          ]
        },
        {
          "kind": "DirectiveDefinition",
          "name": {
            "kind": "Name",
            "value": "canonical"
          },
          "arguments": [],
          "repeatable": false,
          "locations": [
            {
              "kind": "Name",
              "value": "OBJECT"
            },
            {
              "kind": "Name",
              "value": "INTERFACE"
            },
            {
              "kind": "Name",
              "value": "INPUT_OBJECT"
            },
            {
              "kind": "Name",
              "value": "UNION"
            },
            {
              "kind": "Name",
              "value": "ENUM"
            },
            {
              "kind": "Name",
              "value": "SCALAR"
            },
            {
              "kind": "Name",
              "value": "FIELD_DEFINITION"
            },
            {
              "kind": "Name",
              "value": "INPUT_FIELD_DEFINITION"
            }
          ]
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "Country"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "native"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "phone"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "continent"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Continent"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "capital"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "currency"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "languages"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "Language"
                      }
                    }
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "emoji"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "emojiU"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "states"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "State"
                      }
                    }
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": [
            {
              "kind": "Directive",
              "name": {
                "kind": "Name",
                "value": "key",
                "loc": {
                  "start": 380,
                  "end": 383
                }
              },
              "arguments": [
                {
                  "kind": "Argument",
                  "name": {
                    "kind": "Name",
                    "value": "selectionSet",
                    "loc": {
                      "start": 384,
                      "end": 396
                    }
                  },
                  "value": {
                    "kind": "StringValue",
                    "value": "{ code }",
                    "block": false,
                    "loc": {
                      "start": 398,
                      "end": 408
                    }
                  },
                  "loc": {
                    "start": 384,
                    "end": 408
                  }
                }
              ],
              "loc": {
                "start": 379,
                "end": 409
              }
            }
          ]
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "Continent"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "countries"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "Country"
                      }
                    }
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": [
            {
              "kind": "Directive",
              "name": {
                "kind": "Name",
                "value": "key",
                "loc": {
                  "start": 636,
                  "end": 639
                }
              },
              "arguments": [
                {
                  "kind": "Argument",
                  "name": {
                    "kind": "Name",
                    "value": "selectionSet",
                    "loc": {
                      "start": 640,
                      "end": 652
                    }
                  },
                  "value": {
                    "kind": "StringValue",
                    "value": "{ code }",
                    "block": false,
                    "loc": {
                      "start": 654,
                      "end": 664
                    }
                  },
                  "loc": {
                    "start": 640,
                    "end": 664
                  }
                }
              ],
              "loc": {
                "start": 635,
                "end": 665
              }
            }
          ]
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "Language"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "ID"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "native"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "rtl"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Boolean"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": [
            {
              "kind": "Directive",
              "name": {
                "kind": "Name",
                "value": "key",
                "loc": {
                  "start": 739,
                  "end": 742
                }
              },
              "arguments": [
                {
                  "kind": "Argument",
                  "name": {
                    "kind": "Name",
                    "value": "selectionSet",
                    "loc": {
                      "start": 743,
                      "end": 755
                    }
                  },
                  "value": {
                    "kind": "StringValue",
                    "value": "{ code }",
                    "block": false,
                    "loc": {
                      "start": 757,
                      "end": 767
                    }
                  },
                  "loc": {
                    "start": 743,
                    "end": 767
                  }
                }
              ],
              "loc": {
                "start": 738,
                "end": 768
              }
            }
          ]
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "State"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "arguments": [],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "name"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "country"
              },
              "arguments": [],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "Country"
                  }
                }
              },
              "directives": []
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "InputObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "StringQueryOperatorInput"
          },
          "fields": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "eq"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "ne"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "in"
              },
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "nin"
              },
              "type": {
                "kind": "ListType",
                "type": {
                  "kind": "NamedType",
                  "name": {
                    "kind": "Name",
                    "value": "String"
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "regex"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "glob"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "String"
                }
              },
              "directives": []
            }
          ],
          "directives": []
        },
        {
          "kind": "InputObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "CountryFilterInput"
          },
          "fields": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StringQueryOperatorInput"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "currency"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StringQueryOperatorInput"
                }
              },
              "directives": []
            },
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "continent"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StringQueryOperatorInput"
                }
              },
              "directives": []
            }
          ],
          "directives": []
        },
        {
          "kind": "InputObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "ContinentFilterInput"
          },
          "fields": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StringQueryOperatorInput"
                }
              },
              "directives": []
            }
          ],
          "directives": []
        },
        {
          "kind": "InputObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "LanguageFilterInput"
          },
          "fields": [
            {
              "kind": "InputValueDefinition",
              "name": {
                "kind": "Name",
                "value": "code"
              },
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "StringQueryOperatorInput"
                }
              },
              "directives": []
            }
          ],
          "directives": []
        },
        {
          "kind": "ObjectTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "Query"
          },
          "fields": [
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "countries"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "filter"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "CountryFilterInput"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "Country"
                      }
                    }
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "country"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "code"
                  },
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "ID"
                      }
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Country"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "continents"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "filter"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "ContinentFilterInput"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "Continent"
                      }
                    }
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "continent"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "code"
                  },
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "ID"
                      }
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Continent"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "languages"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "filter"
                  },
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "LanguageFilterInput"
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "Language"
                      }
                    }
                  }
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "language"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "code"
                  },
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "NamedType",
                      "name": {
                        "kind": "Name",
                        "value": "ID"
                      }
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NamedType",
                "name": {
                  "kind": "Name",
                  "value": "Language"
                }
              },
              "directives": []
            },
            {
              "kind": "FieldDefinition",
              "name": {
                "kind": "Name",
                "value": "_entities"
              },
              "arguments": [
                {
                  "kind": "InputValueDefinition",
                  "name": {
                    "kind": "Name",
                    "value": "representations"
                  },
                  "type": {
                    "kind": "NonNullType",
                    "type": {
                      "kind": "ListType",
                      "type": {
                        "kind": "NonNullType",
                        "type": {
                          "kind": "NamedType",
                          "name": {
                            "kind": "Name",
                            "value": "_Any"
                          }
                        }
                      }
                    }
                  },
                  "directives": []
                }
              ],
              "type": {
                "kind": "NonNullType",
                "type": {
                  "kind": "ListType",
                  "type": {
                    "kind": "NamedType",
                    "name": {
                      "kind": "Name",
                      "value": "_Entity"
                    }
                  }
                }
              },
              "directives": [
                {
                  "kind": "Directive",
                  "name": {
                    "kind": "Name",
                    "value": "merge",
                    "loc": {
                      "start": 1619,
                      "end": 1624
                    }
                  },
                  "arguments": [],
                  "loc": {
                    "start": 1618,
                    "end": 1624
                  }
                }
              ]
            }
          ],
          "interfaces": [],
          "directives": []
        },
        {
          "kind": "ScalarTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "_Any"
          },
          "directives": []
        },
        {
          "kind": "UnionTypeDefinition",
          "name": {
            "kind": "Name",
            "value": "_Entity"
          },
          "directives": [],
          "types": [
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Country"
              }
            },
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Continent"
              }
            },
            {
              "kind": "NamedType",
              "name": {
                "kind": "Name",
                "value": "Language"
              }
            }
          ]
        }
      ]
    };
    Countries_stitching_default = buildASTSchema(schemaAST3, {
      assumeValid: true,
      assumeValidSDL: true
    });
  }
});

// src/index.ts
init_virtual_process_polyfill();
init_buffer();

// node_modules/@graphql-yoga/common/index.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/@envelop/core/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var EnableIfBranded;
(function(EnableIfBranded2) {
  EnableIfBranded2[EnableIfBranded2["DisabledPlugin"] = 0] = "DisabledPlugin";
})(EnableIfBranded || (EnableIfBranded = {}));
function isPluginEnabled(t) {
  return t !== EnableIfBranded.DisabledPlugin && t !== null;
}
function enableIf(condition, plugin) {
  if (condition) {
    return typeof plugin === "function" ? plugin() : plugin;
  }
  return EnableIfBranded.DisabledPlugin;
}
var trackedSchemaSymbol = Symbol("TRACKED_SCHEMA");
var resolversHooksSymbol = Symbol("RESOLVERS_HOOKS");
function prepareTracedSchema(schema2) {
  if (!schema2 || schema2[trackedSchemaSymbol]) {
    return;
  }
  schema2[trackedSchemaSymbol] = true;
  const entries = Object.values(schema2.getTypeMap());
  for (const type2 of entries) {
    if (!isIntrospectionType(type2) && isObjectType(type2)) {
      const fields = Object.values(type2.getFields());
      for (const field of fields) {
        let resolverFn = field.resolve || defaultFieldResolver;
        field.resolve = async (root, args, context, info) => {
          if (context && context[resolversHooksSymbol]) {
            const hooks = context[resolversHooksSymbol];
            const afterCalls = [];
            for (const hook of hooks) {
              const afterFn = await hook({
                root,
                args,
                context,
                info,
                resolverFn,
                replaceResolverFn: (newFn) => {
                  resolverFn = newFn;
                }
              });
              afterFn && afterCalls.push(afterFn);
            }
            try {
              let result = await resolverFn(root, args, context, info);
              for (const afterFn of afterCalls) {
                afterFn({
                  result,
                  setResult: (newResult) => {
                    result = newResult;
                  }
                });
              }
              return result;
            } catch (e) {
              let resultErr = e;
              for (const afterFn of afterCalls) {
                afterFn({
                  result: resultErr,
                  setResult: (newResult) => {
                    resultErr = newResult;
                  }
                });
              }
              throw resultErr;
            }
          } else {
            return resolverFn(root, args, context, info);
          }
        };
      }
    }
  }
}
var envelopIsIntrospectionSymbol = Symbol("ENVELOP_IS_INTROSPECTION");
function isIntrospectionOperationString(operation) {
  return (typeof operation === "string" ? operation : operation.body).indexOf("__schema") !== -1;
}
function getSubscribeArgs(args) {
  return args.length === 1 ? args[0] : {
    schema: args[0],
    document: args[1],
    rootValue: args[2],
    contextValue: args[3],
    variableValues: args[4],
    operationName: args[5],
    fieldResolver: args[6],
    subscribeFieldResolver: args[7]
  };
}
var makeSubscribe = (subscribeFn) => (...polyArgs) => subscribeFn(getSubscribeArgs(polyArgs));
function mapAsyncIterator2(source, mapper) {
  const iterator = source[Symbol.asyncIterator]();
  async function mapResult(result) {
    var _a2;
    if (result.done) {
      return result;
    }
    try {
      return { value: await mapper(result.value), done: false };
    } catch (error) {
      try {
        await ((_a2 = iterator.return) === null || _a2 === void 0 ? void 0 : _a2.call(iterator));
      } catch (_error) {
      }
      throw error;
    }
  }
  const stream = {
    [Symbol.asyncIterator]() {
      return stream;
    },
    async next() {
      return await mapResult(await iterator.next());
    },
    async return() {
      var _a2;
      const promise = (_a2 = iterator.return) === null || _a2 === void 0 ? void 0 : _a2.call(iterator);
      return promise ? await mapResult(await promise) : { value: void 0, done: true };
    },
    async throw(error) {
      var _a2;
      const promise = (_a2 = iterator.throw) === null || _a2 === void 0 ? void 0 : _a2.call(iterator);
      if (promise) {
        return await mapResult(await promise);
      }
      throw error;
    }
  };
  return stream;
}
function getExecuteArgs(args) {
  return args.length === 1 ? args[0] : {
    schema: args[0],
    document: args[1],
    rootValue: args[2],
    contextValue: args[3],
    variableValues: args[4],
    operationName: args[5],
    fieldResolver: args[6],
    typeResolver: args[7]
  };
}
var makeExecute = (executeFn) => (...polyArgs) => executeFn(getExecuteArgs(polyArgs));
function isAsyncIterable2(maybeAsyncIterable) {
  return typeof maybeAsyncIterable === "object" && maybeAsyncIterable != null && typeof maybeAsyncIterable[Symbol.asyncIterator] === "function";
}
function handleStreamOrSingleExecutionResult(payload, fn) {
  if (isAsyncIterable2(payload.result)) {
    return { onNext: fn };
  }
  fn({
    args: payload.args,
    result: payload.result,
    setResult: payload.setResult
  });
  return void 0;
}
function finalAsyncIterator(source, onFinal) {
  const iterator = source[Symbol.asyncIterator]();
  let isDone = false;
  const stream = {
    [Symbol.asyncIterator]() {
      return stream;
    },
    async next() {
      const result = await iterator.next();
      if (result.done && isDone === false) {
        isDone = true;
        onFinal();
      }
      return result;
    },
    async return() {
      var _a2;
      const promise = (_a2 = iterator.return) === null || _a2 === void 0 ? void 0 : _a2.call(iterator);
      if (isDone === false) {
        isDone = true;
        onFinal();
      }
      return promise ? await promise : { done: true, value: void 0 };
    },
    async throw(error) {
      var _a2;
      const promise = (_a2 = iterator.throw) === null || _a2 === void 0 ? void 0 : _a2.call(iterator);
      if (promise) {
        return await promise;
      }
      throw error;
    }
  };
  return stream;
}
function errorAsyncIterator(source, onError) {
  const iterator = source[Symbol.asyncIterator]();
  const stream = {
    [Symbol.asyncIterator]() {
      return stream;
    },
    async next() {
      try {
        return await iterator.next();
      } catch (error) {
        onError(error);
        return { done: true, value: void 0 };
      }
    },
    async return() {
      var _a2;
      const promise = (_a2 = iterator.return) === null || _a2 === void 0 ? void 0 : _a2.call(iterator);
      return promise ? await promise : { done: true, value: void 0 };
    },
    async throw(error) {
      var _a2;
      const promise = (_a2 = iterator.throw) === null || _a2 === void 0 ? void 0 : _a2.call(iterator);
      if (promise) {
        return await promise;
      }
      throw error;
    }
  };
  return stream;
}
function createEnvelopOrchestrator(plugins) {
  let schema2 = null;
  let initDone = false;
  const onResolversHandlers = [];
  for (const plugin of plugins) {
    if (plugin.onResolverCalled) {
      onResolversHandlers.push(plugin.onResolverCalled);
    }
  }
  const replaceSchema = (newSchema, ignorePluginIndex = -1) => {
    if (onResolversHandlers.length) {
      prepareTracedSchema(newSchema);
    }
    schema2 = newSchema;
    if (initDone) {
      for (const [i, plugin] of plugins.entries()) {
        if (i !== ignorePluginIndex) {
          plugin.onSchemaChange && plugin.onSchemaChange({
            schema: schema2,
            replaceSchema: (schemaToSet) => {
              replaceSchema(schemaToSet, i);
            }
          });
        }
      }
    }
  };
  const contextErrorHandlers = [];
  for (const [i, plugin] of plugins.entries()) {
    plugin.onPluginInit && plugin.onPluginInit({
      plugins,
      addPlugin: (newPlugin) => {
        plugins.push(newPlugin);
      },
      setSchema: (modifiedSchema) => replaceSchema(modifiedSchema, i),
      registerContextErrorHandler: (handler) => contextErrorHandlers.push(handler)
    });
  }
  const beforeCallbacks = {
    init: [],
    parse: [],
    validate: [],
    subscribe: [],
    execute: [],
    context: []
  };
  for (const { onContextBuilding, onExecute, onParse, onSubscribe, onValidate, onEnveloped } of plugins) {
    onEnveloped && beforeCallbacks.init.push(onEnveloped);
    onContextBuilding && beforeCallbacks.context.push(onContextBuilding);
    onExecute && beforeCallbacks.execute.push(onExecute);
    onParse && beforeCallbacks.parse.push(onParse);
    onSubscribe && beforeCallbacks.subscribe.push(onSubscribe);
    onValidate && beforeCallbacks.validate.push(onValidate);
  }
  const init2 = (initialContext) => {
    for (const [i, onEnveloped] of beforeCallbacks.init.entries()) {
      onEnveloped({
        context: initialContext,
        extendContext: (extension) => {
          if (!initialContext) {
            return;
          }
          Object.assign(initialContext, extension);
        },
        setSchema: (modifiedSchema) => replaceSchema(modifiedSchema, i)
      });
    }
  };
  const customParse = beforeCallbacks.parse.length ? (initialContext) => (source, parseOptions) => {
    let result = null;
    let parseFn = parse;
    const context = initialContext;
    const afterCalls = [];
    for (const onParse of beforeCallbacks.parse) {
      const afterFn = onParse({
        context,
        extendContext: (extension) => {
          Object.assign(context, extension);
        },
        params: { source, options: parseOptions },
        parseFn,
        setParseFn: (newFn) => {
          parseFn = newFn;
        },
        setParsedDocument: (newDoc) => {
          result = newDoc;
        }
      });
      afterFn && afterCalls.push(afterFn);
    }
    if (result === null) {
      try {
        result = parseFn(source, parseOptions);
      } catch (e) {
        result = e;
      }
    }
    for (const afterCb of afterCalls) {
      afterCb({
        context,
        extendContext: (extension) => {
          Object.assign(context, extension);
        },
        replaceParseResult: (newResult) => {
          result = newResult;
        },
        result
      });
    }
    if (result === null) {
      throw new Error(`Failed to parse document.`);
    }
    if (result instanceof Error) {
      throw result;
    }
    return result;
  } : () => parse;
  const customValidate = beforeCallbacks.validate.length ? (initialContext) => (schema3, documentAST, rules, typeInfo, validationOptions) => {
    let actualRules = rules ? [...rules] : void 0;
    let validateFn = validate;
    let result = null;
    const context = initialContext;
    const afterCalls = [];
    for (const onValidate of beforeCallbacks.validate) {
      const afterFn = onValidate({
        context,
        extendContext: (extension) => {
          Object.assign(context, extension);
        },
        params: {
          schema: schema3,
          documentAST,
          rules: actualRules,
          typeInfo,
          options: validationOptions
        },
        validateFn,
        addValidationRule: (rule) => {
          if (!actualRules) {
            actualRules = [...specifiedRules];
          }
          actualRules.push(rule);
        },
        setValidationFn: (newFn) => {
          validateFn = newFn;
        },
        setResult: (newResults) => {
          result = newResults;
        }
      });
      afterFn && afterCalls.push(afterFn);
    }
    if (!result) {
      result = validateFn(schema3, documentAST, actualRules, typeInfo, validationOptions);
    }
    const valid = result.length === 0;
    for (const afterCb of afterCalls) {
      afterCb({
        valid,
        result,
        context,
        extendContext: (extension) => {
          Object.assign(context, extension);
        },
        setResult: (newResult) => {
          result = newResult;
        }
      });
    }
    return result;
  } : () => validate;
  const customContextFactory = beforeCallbacks.context.length ? (initialContext) => async (orchestratorCtx) => {
    const afterCalls = [];
    let context = orchestratorCtx ? { ...initialContext, ...orchestratorCtx } : initialContext;
    try {
      let isBreakingContextBuilding = false;
      for (const onContext of beforeCallbacks.context) {
        const afterHookResult = await onContext({
          context,
          extendContext: (extension) => {
            context = { ...context, ...extension };
          },
          breakContextBuilding: () => {
            isBreakingContextBuilding = true;
          }
        });
        if (typeof afterHookResult === "function") {
          afterCalls.push(afterHookResult);
        }
        if (isBreakingContextBuilding === true) {
          break;
        }
      }
      for (const afterCb of afterCalls) {
        afterCb({
          context,
          extendContext: (extension) => {
            context = { ...context, ...extension };
          }
        });
      }
      return context;
    } catch (err) {
      let error = err;
      for (const errorCb of contextErrorHandlers) {
        errorCb({
          context,
          error,
          setError: (err2) => {
            error = err2;
          }
        });
      }
      throw error;
    }
  } : (initialContext) => (orchestratorCtx) => orchestratorCtx ? { ...initialContext, ...orchestratorCtx } : initialContext;
  const useCustomSubscribe = beforeCallbacks.subscribe.length || onResolversHandlers.length;
  const customSubscribe = useCustomSubscribe ? makeSubscribe(async (args) => {
    let subscribeFn = subscribe;
    const afterCalls = [];
    const subscribeErrorHandlers = [];
    let context = args.contextValue || {};
    let result;
    for (const onSubscribe of beforeCallbacks.subscribe) {
      const after = await onSubscribe({
        subscribeFn,
        setSubscribeFn: (newSubscribeFn) => {
          subscribeFn = newSubscribeFn;
        },
        extendContext: (extension) => {
          context = { ...context, ...extension };
        },
        args,
        setResultAndStopExecution: (stopResult) => {
          result = stopResult;
        }
      });
      if (after) {
        if (after.onSubscribeResult) {
          afterCalls.push(after.onSubscribeResult);
        }
        if (after.onSubscribeError) {
          subscribeErrorHandlers.push(after.onSubscribeError);
        }
      }
      if (result !== void 0) {
        break;
      }
    }
    if (onResolversHandlers.length) {
      context[resolversHooksSymbol] = onResolversHandlers;
    }
    if (result === void 0) {
      result = await subscribeFn({
        ...args,
        contextValue: context
      });
    }
    const onNextHandler = [];
    const onEndHandler = [];
    for (const afterCb of afterCalls) {
      const hookResult = afterCb({
        args,
        result,
        setResult: (newResult) => {
          result = newResult;
        }
      });
      if (hookResult) {
        if (hookResult.onNext) {
          onNextHandler.push(hookResult.onNext);
        }
        if (hookResult.onEnd) {
          onEndHandler.push(hookResult.onEnd);
        }
      }
    }
    if (onNextHandler.length && isAsyncIterable2(result)) {
      result = mapAsyncIterator2(result, async (result2) => {
        for (const onNext of onNextHandler) {
          await onNext({
            args,
            result: result2,
            setResult: (newResult) => result2 = newResult
          });
        }
        return result2;
      });
    }
    if (onEndHandler.length && isAsyncIterable2(result)) {
      result = finalAsyncIterator(result, () => {
        for (const onEnd of onEndHandler) {
          onEnd();
        }
      });
    }
    if (subscribeErrorHandlers.length && isAsyncIterable2(result)) {
      result = errorAsyncIterator(result, (err) => {
        let error = err;
        for (const handler of subscribeErrorHandlers) {
          handler({
            error,
            setError: (err2) => {
              error = err2;
            }
          });
        }
        throw error;
      });
    }
    return result;
  }) : makeSubscribe(subscribe);
  const useCustomExecute = beforeCallbacks.execute.length || onResolversHandlers.length;
  const customExecute = useCustomExecute ? makeExecute(async (args) => {
    let executeFn = execute;
    let result;
    const afterCalls = [];
    let context = args.contextValue || {};
    for (const onExecute of beforeCallbacks.execute) {
      const after = await onExecute({
        executeFn,
        setExecuteFn: (newExecuteFn) => {
          executeFn = newExecuteFn;
        },
        setResultAndStopExecution: (stopResult) => {
          result = stopResult;
        },
        extendContext: (extension) => {
          if (typeof extension === "object") {
            context = {
              ...context || {},
              ...extension
            };
          } else {
            throw new Error(`Invalid context extension provided! Expected "object", got: "${JSON.stringify(extension)}" (${typeof extension})`);
          }
        },
        args
      });
      if (after === null || after === void 0 ? void 0 : after.onExecuteDone) {
        afterCalls.push(after.onExecuteDone);
      }
      if (result !== void 0) {
        break;
      }
    }
    if (onResolversHandlers.length) {
      context[resolversHooksSymbol] = onResolversHandlers;
    }
    if (result === void 0) {
      result = await executeFn({
        ...args,
        contextValue: context
      });
    }
    const onNextHandler = [];
    const onEndHandler = [];
    for (const afterCb of afterCalls) {
      const hookResult = await afterCb({
        args,
        result,
        setResult: (newResult) => {
          result = newResult;
        }
      });
      if (hookResult) {
        if (hookResult.onNext) {
          onNextHandler.push(hookResult.onNext);
        }
        if (hookResult.onEnd) {
          onEndHandler.push(hookResult.onEnd);
        }
      }
    }
    if (onNextHandler.length && isAsyncIterable2(result)) {
      result = mapAsyncIterator2(result, async (result2) => {
        for (const onNext of onNextHandler) {
          await onNext({
            args,
            result: result2,
            setResult: (newResult) => {
              result2 = newResult;
            }
          });
        }
        return result2;
      });
    }
    if (onEndHandler.length && isAsyncIterable2(result)) {
      result = finalAsyncIterator(result, () => {
        for (const onEnd of onEndHandler) {
          onEnd();
        }
      });
    }
    return result;
  }) : makeExecute(execute);
  initDone = true;
  if (schema2) {
    for (const [i, plugin] of plugins.entries()) {
      plugin.onSchemaChange && plugin.onSchemaChange({
        schema: schema2,
        replaceSchema: (modifiedSchema) => replaceSchema(modifiedSchema, i)
      });
    }
  }
  return {
    getCurrentSchema() {
      return schema2;
    },
    init: init2,
    parse: customParse,
    validate: customValidate,
    execute: customExecute,
    subscribe: customSubscribe,
    contextFactory: customContextFactory
  };
}
var _a;
var getTimestamp = typeof globalThis !== "undefined" && ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.performance) === null || _a === void 0 ? void 0 : _a.now) ? () => performance.now() : () => Date.now();
var measure = () => {
  const start = getTimestamp();
  return () => {
    const end = getTimestamp();
    return end - start;
  };
};
var tracingSymbol = Symbol("envelopTracing");
function traceOrchestrator(orchestrator) {
  const createTracer = (name, ctx) => {
    const end = measure();
    return () => {
      ctx[tracingSymbol][name] = end();
    };
  };
  return {
    ...orchestrator,
    init: (ctx = {}) => {
      ctx[tracingSymbol] = ctx[tracingSymbol] || {};
      const done = createTracer("init", ctx || {});
      try {
        return orchestrator.init(ctx);
      } finally {
        done();
      }
    },
    parse: (ctx = {}) => {
      ctx[tracingSymbol] = ctx[tracingSymbol] || {};
      const actualFn = orchestrator.parse(ctx);
      return (...args) => {
        const done = createTracer("parse", ctx);
        try {
          return actualFn(...args);
        } finally {
          done();
        }
      };
    },
    validate: (ctx = {}) => {
      ctx[tracingSymbol] = ctx[tracingSymbol] || {};
      const actualFn = orchestrator.validate(ctx);
      return (...args) => {
        const done = createTracer("validate", ctx);
        try {
          return actualFn(...args);
        } finally {
          done();
        }
      };
    },
    execute: async (argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) => {
      const args = argsOrSchema instanceof GraphQLSchema ? {
        schema: argsOrSchema,
        document,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        typeResolver
      } : argsOrSchema;
      const done = createTracer("execute", args.contextValue || {});
      try {
        const result = await orchestrator.execute(args);
        done();
        if (!isAsyncIterable2(result)) {
          result.extensions = result.extensions || {};
          result.extensions.envelopTracing = args.contextValue[tracingSymbol];
        } else {
          console.warn(`"traceOrchestrator" encountered a AsyncIterator which is not supported yet, so tracing data is not available for the operation.`);
        }
        return result;
      } catch (e) {
        done();
        throw e;
      }
    },
    subscribe: async (argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) => {
      const args = argsOrSchema instanceof GraphQLSchema ? {
        schema: argsOrSchema,
        document,
        rootValue,
        contextValue,
        variableValues,
        operationName,
        fieldResolver,
        subscribeFieldResolver
      } : argsOrSchema;
      const done = createTracer("subscribe", args.contextValue || {});
      try {
        return await orchestrator.subscribe(args);
      } finally {
        done();
      }
    },
    contextFactory: (ctx = {}) => {
      const actualFn = orchestrator.contextFactory(ctx);
      return async (childCtx) => {
        const done = createTracer("contextFactory", ctx);
        try {
          return await actualFn(childCtx);
        } finally {
          done();
        }
      };
    }
  };
}
function envelop(options) {
  const plugins = options.plugins.filter(isPluginEnabled);
  let orchestrator = createEnvelopOrchestrator(plugins);
  if (options.enableInternalTracing) {
    orchestrator = traceOrchestrator(orchestrator);
  }
  const getEnveloped = (initialContext = {}) => {
    const typedOrchestrator = orchestrator;
    typedOrchestrator.init(initialContext);
    return {
      parse: typedOrchestrator.parse(initialContext),
      validate: typedOrchestrator.validate(initialContext),
      contextFactory: typedOrchestrator.contextFactory(initialContext),
      execute: typedOrchestrator.execute,
      subscribe: typedOrchestrator.subscribe,
      schema: typedOrchestrator.getCurrentSchema()
    };
  };
  getEnveloped._plugins = plugins;
  return getEnveloped;
}
var DEFAULT_OPTIONS = {
  logFn: console.log
};
var useLogger = (rawOptions = DEFAULT_OPTIONS) => {
  const options = {
    DEFAULT_OPTIONS,
    ...rawOptions
  };
  return {
    onParse({ extendContext, params }) {
      if (options.skipIntrospection && isIntrospectionOperationString(params.source)) {
        extendContext({
          [envelopIsIntrospectionSymbol]: true
        });
      }
    },
    onExecute({ args }) {
      if (args.contextValue[envelopIsIntrospectionSymbol]) {
        return;
      }
      options.logFn("execute-start", { args });
      return {
        onExecuteDone: ({ result }) => {
          options.logFn("execute-end", { args, result });
        }
      };
    },
    onSubscribe({ args }) {
      if (args.contextValue[envelopIsIntrospectionSymbol]) {
        return;
      }
      options.logFn("subscribe-start", { args });
      return {
        onSubscribeResult: ({ result }) => {
          options.logFn("subscribe-end", { args, result });
        }
      };
    }
  };
};
var useSchema = (schema2) => {
  return {
    onPluginInit({ setSchema }) {
      setSchema(schema2);
    }
  };
};
var useExtendContext = (contextFactory) => ({
  async onContextBuilding({ context, extendContext }) {
    extendContext(await contextFactory(context));
  }
});
var DEFAULT_ERROR_MESSAGE = "Unexpected error.";
var EnvelopError = class extends GraphQLError {
  constructor(message, extensions) {
    super(message, void 0, void 0, void 0, void 0, void 0, extensions);
  }
};
var formatError2 = (err, message, isDev) => {
  var _a2, _b, _c, _d;
  if (err instanceof GraphQLError) {
    if (err.originalError && err.originalError instanceof EnvelopError === false || err.originalError === void 0 && err instanceof EnvelopError === false) {
      return new GraphQLError(message, err.nodes, err.source, err.positions, err.path, void 0, isDev ? {
        originalError: {
          message: (_b = (_a2 = err.originalError) === null || _a2 === void 0 ? void 0 : _a2.message) !== null && _b !== void 0 ? _b : err.message,
          stack: (_d = (_c = err.originalError) === null || _c === void 0 ? void 0 : _c.stack) !== null && _d !== void 0 ? _d : err.stack
        }
      } : void 0);
    }
    return err;
  }
  return new GraphQLError(message);
};
var makeHandleResult$2 = (format, message, isDev) => ({ result, setResult }) => {
  if (result.errors != null) {
    setResult({ ...result, errors: result.errors.map((error) => format(error, message, isDev)) });
  }
};
var useMaskedErrors = (opts) => {
  var _a2, _b;
  const format = (_a2 = opts === null || opts === void 0 ? void 0 : opts.formatError) !== null && _a2 !== void 0 ? _a2 : formatError2;
  const message = (opts === null || opts === void 0 ? void 0 : opts.errorMessage) || DEFAULT_ERROR_MESSAGE;
  const isDev = (_b = opts === null || opts === void 0 ? void 0 : opts.isDev) !== null && _b !== void 0 ? _b : typeof process !== "undefined" ? false : false;
  const handleResult = makeHandleResult$2(format, message, isDev);
  return {
    onParse: (opts === null || opts === void 0 ? void 0 : opts.handleParseErrors) === true ? function onParse() {
      return function onParseEnd({ result, replaceParseResult }) {
        if (result instanceof Error) {
          replaceParseResult(format(result, message, isDev));
        }
      };
    } : void 0,
    onValidate: (opts === null || opts === void 0 ? void 0 : opts.handleValidationErrors) === true ? function onValidate() {
      return function onValidateEnd({ valid, result, setResult }) {
        if (valid === false) {
          setResult(result.map((error) => format(error, message, isDev)));
        }
      };
    } : void 0,
    onPluginInit(context) {
      context.registerContextErrorHandler(({ error, setError }) => {
        setError(formatError2(error, message, isDev));
      });
    },
    onExecute() {
      return {
        onExecuteDone(payload) {
          return handleStreamOrSingleExecutionResult(payload, handleResult);
        }
      };
    },
    onSubscribe() {
      return {
        onSubscribeResult(payload) {
          return handleStreamOrSingleExecutionResult(payload, handleResult);
        },
        onSubscribeError({ error, setError }) {
          setError(formatError2(error, message, isDev));
        }
      };
    }
  };
};
var fastIntroSpectionSymbol = Symbol("fastIntrospection");

// node_modules/@graphql-tools/utils/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var asArray = (fns) => Array.isArray(fns) ? fns : fns ? [fns] : [];
function compareStrings(a, b) {
  if (String(a) < String(b)) {
    return -1;
  }
  if (String(a) > String(b)) {
    return 1;
  }
  return 0;
}
function nodeToString(a) {
  var _a2, _b;
  let name;
  if ("alias" in a) {
    name = (_a2 = a.alias) === null || _a2 === void 0 ? void 0 : _a2.value;
  }
  if (name == null && "name" in a) {
    name = (_b = a.name) === null || _b === void 0 ? void 0 : _b.value;
  }
  if (name == null) {
    name = a.kind;
  }
  return name;
}
function compareNodes(a, b, customFn) {
  const aStr = nodeToString(a);
  const bStr = nodeToString(b);
  if (typeof customFn === "function") {
    return customFn(aStr, bStr);
  }
  return compareStrings(aStr, bStr);
}
function isSome(input) {
  return input != null;
}
function createGraphQLError(message, options) {
  if (versionInfo.major >= 17) {
    return new GraphQLError(message, options);
  }
  return new GraphQLError(message, options === null || options === void 0 ? void 0 : options.nodes, options === null || options === void 0 ? void 0 : options.source, options === null || options === void 0 ? void 0 : options.positions, options === null || options === void 0 ? void 0 : options.path, options === null || options === void 0 ? void 0 : options.originalError, options === null || options === void 0 ? void 0 : options.extensions);
}
function relocatedError(originalError, path2) {
  return createGraphQLError(originalError.message, {
    nodes: originalError.nodes,
    source: originalError.source,
    positions: originalError.positions,
    path: path2 == null ? originalError.path : path2,
    originalError,
    extensions: originalError.extensions
  });
}
var AggregateErrorImpl;
if (typeof AggregateError === "undefined") {
  class AggregateErrorClass extends Error {
    constructor(errors, message = "") {
      super(message);
      this.errors = errors;
      this.name = "AggregateError";
      Error.captureStackTrace(this, AggregateErrorClass);
    }
  }
  AggregateErrorImpl = function(errors, message) {
    return new AggregateErrorClass(errors, message);
  };
} else {
  AggregateErrorImpl = AggregateError;
}
function isAggregateError(error) {
  return "errors" in error && Array.isArray(error["errors"]);
}
var MAX_RECURSIVE_DEPTH2 = 3;
function inspect2(value) {
  return formatValue2(value, []);
}
function formatValue2(value, seenValues) {
  switch (typeof value) {
    case "string":
      return JSON.stringify(value);
    case "function":
      return value.name ? `[function ${value.name}]` : "[function]";
    case "object":
      return formatObjectValue2(value, seenValues);
    default:
      return String(value);
  }
}
function formatError3(value) {
  if (value instanceof GraphQLError) {
    return value.toString();
  }
  return `${value.name}: ${value.message};
 ${value.stack}`;
}
function formatObjectValue2(value, previouslySeenValues) {
  if (value === null) {
    return "null";
  }
  if (value instanceof Error) {
    if (isAggregateError(value)) {
      return formatError3(value) + "\n" + formatArray2(value.errors, previouslySeenValues);
    }
    return formatError3(value);
  }
  if (previouslySeenValues.includes(value)) {
    return "[Circular]";
  }
  const seenValues = [...previouslySeenValues, value];
  if (isJSONable2(value)) {
    const jsonValue = value.toJSON();
    if (jsonValue !== value) {
      return typeof jsonValue === "string" ? jsonValue : formatValue2(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray2(value, seenValues);
  }
  return formatObject2(value, seenValues);
}
function isJSONable2(value) {
  return typeof value.toJSON === "function";
}
function formatObject2(object, seenValues) {
  const entries = Object.entries(object);
  if (entries.length === 0) {
    return "{}";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH2) {
    return "[" + getObjectTag2(object) + "]";
  }
  const properties = entries.map(([key, value]) => key + ": " + formatValue2(value, seenValues));
  return "{ " + properties.join(", ") + " }";
}
function formatArray2(array, seenValues) {
  if (array.length === 0) {
    return "[]";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH2) {
    return "[Array]";
  }
  const len = array.length;
  const remaining = array.length;
  const items = [];
  for (let i = 0; i < len; ++i) {
    items.push(formatValue2(array[i], seenValues));
  }
  if (remaining === 1) {
    items.push("... 1 more item");
  } else if (remaining > 1) {
    items.push(`... ${remaining} more items`);
  }
  return "[" + items.join(", ") + "]";
}
function getObjectTag2(object) {
  const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
  if (tag === "Object" && typeof object.constructor === "function") {
    const name = object.constructor.name;
    if (typeof name === "string" && name !== "") {
      return name;
    }
  }
  return tag;
}
function getArgumentValues2(def, node, variableValues = {}) {
  var _a2;
  const variableMap = Object.entries(variableValues).reduce((prev, [key, value]) => ({
    ...prev,
    [key]: value
  }), {});
  const coercedValues = {};
  const argumentNodes = (_a2 = node.arguments) !== null && _a2 !== void 0 ? _a2 : [];
  const argNodeMap = argumentNodes.reduce((prev, arg) => ({
    ...prev,
    [arg.name.value]: arg
  }), {});
  for (const { name, type: argType, defaultValue } of def.args) {
    const argumentNode = argNodeMap[name];
    if (!argumentNode) {
      if (defaultValue !== void 0) {
        coercedValues[name] = defaultValue;
      } else if (isNonNullType(argType)) {
        throw createGraphQLError(`Argument "${name}" of required type "${inspect2(argType)}" was not provided.`, {
          nodes: [node]
        });
      }
      continue;
    }
    const valueNode = argumentNode.value;
    let isNull2 = valueNode.kind === Kind.NULL;
    if (valueNode.kind === Kind.VARIABLE) {
      const variableName = valueNode.name.value;
      if (variableValues == null || variableMap[variableName] == null) {
        if (defaultValue !== void 0) {
          coercedValues[name] = defaultValue;
        } else if (isNonNullType(argType)) {
          throw createGraphQLError(`Argument "${name}" of required type "${inspect2(argType)}" was provided the variable "$${variableName}" which was not provided a runtime value.`, {
            nodes: [valueNode]
          });
        }
        continue;
      }
      isNull2 = variableValues[variableName] == null;
    }
    if (isNull2 && isNonNullType(argType)) {
      throw createGraphQLError(`Argument "${name}" of non-null type "${inspect2(argType)}" must not be null.`, {
        nodes: [valueNode]
      });
    }
    const coercedValue = valueFromAST(valueNode, argType, variableValues);
    if (coercedValue === void 0) {
      throw createGraphQLError(`Argument "${name}" has invalid value ${print(valueNode)}.`, {
        nodes: [valueNode]
      });
    }
    coercedValues[name] = coercedValue;
  }
  return coercedValues;
}
function getDirectivesInExtensions(node, pathToDirectivesInExtensions = ["directives"]) {
  return pathToDirectivesInExtensions.reduce((acc, pathSegment) => acc == null ? acc : acc[pathSegment], node === null || node === void 0 ? void 0 : node.extensions);
}
function _getDirectiveInExtensions(directivesInExtensions, directiveName) {
  const directiveInExtensions = directivesInExtensions.filter((directiveAnnotation) => directiveAnnotation.name === directiveName);
  if (!directiveInExtensions.length) {
    return void 0;
  }
  return directiveInExtensions.map((directive) => {
    var _a2;
    return (_a2 = directive.args) !== null && _a2 !== void 0 ? _a2 : {};
  });
}
function getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions = ["directives"]) {
  const directivesInExtensions = pathToDirectivesInExtensions.reduce((acc, pathSegment) => acc == null ? acc : acc[pathSegment], node === null || node === void 0 ? void 0 : node.extensions);
  if (directivesInExtensions === void 0) {
    return void 0;
  }
  if (Array.isArray(directivesInExtensions)) {
    return _getDirectiveInExtensions(directivesInExtensions, directiveName);
  }
  const reformattedDirectivesInExtensions = [];
  for (const [name, argsOrArrayOfArgs] of Object.entries(directivesInExtensions)) {
    if (Array.isArray(argsOrArrayOfArgs)) {
      for (const args of argsOrArrayOfArgs) {
        reformattedDirectivesInExtensions.push({ name, args });
      }
    } else {
      reformattedDirectivesInExtensions.push({ name, args: argsOrArrayOfArgs });
    }
  }
  return _getDirectiveInExtensions(reformattedDirectivesInExtensions, directiveName);
}
function getDirective(schema2, node, directiveName, pathToDirectivesInExtensions = ["directives"]) {
  const directiveInExtensions = getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions);
  if (directiveInExtensions != null) {
    return directiveInExtensions;
  }
  const schemaDirective = schema2 && schema2.getDirective ? schema2.getDirective(directiveName) : void 0;
  if (schemaDirective == null) {
    return void 0;
  }
  let astNodes = [];
  if (node.astNode) {
    astNodes.push(node.astNode);
  }
  if ("extensionASTNodes" in node && node.extensionASTNodes) {
    astNodes = [...astNodes, ...node.extensionASTNodes];
  }
  const result = [];
  for (const astNode of astNodes) {
    if (astNode.directives) {
      for (const directiveNode of astNode.directives) {
        if (directiveNode.name.value === directiveName) {
          result.push(getArgumentValues2(schemaDirective, directiveNode));
        }
      }
    }
  }
  if (!result.length) {
    return void 0;
  }
  return result;
}
function getImplementingTypes(interfaceName, schema2) {
  const allTypesMap = schema2.getTypeMap();
  const result = [];
  for (const graphqlTypeName in allTypesMap) {
    const graphqlType = allTypesMap[graphqlTypeName];
    if (isObjectType(graphqlType)) {
      const allInterfaces = graphqlType.getInterfaces();
      if (allInterfaces.find((int2) => int2.name === interfaceName)) {
        result.push(graphqlType.name);
      }
    }
  }
  return result;
}
function astFromType(type2) {
  if (isNonNullType(type2)) {
    const innerType = astFromType(type2.ofType);
    if (innerType.kind === Kind.NON_NULL_TYPE) {
      throw new Error(`Invalid type node ${inspect2(type2)}. Inner type of non-null type cannot be a non-null type.`);
    }
    return {
      kind: Kind.NON_NULL_TYPE,
      type: innerType
    };
  } else if (isListType(type2)) {
    return {
      kind: Kind.LIST_TYPE,
      type: astFromType(type2.ofType)
    };
  }
  return {
    kind: Kind.NAMED_TYPE,
    name: {
      kind: Kind.NAME,
      value: type2.name
    }
  };
}
function astFromValueUntyped(value) {
  if (value === null) {
    return { kind: Kind.NULL };
  }
  if (value === void 0) {
    return null;
  }
  if (Array.isArray(value)) {
    const valuesNodes = [];
    for (const item of value) {
      const itemNode = astFromValueUntyped(item);
      if (itemNode != null) {
        valuesNodes.push(itemNode);
      }
    }
    return { kind: Kind.LIST, values: valuesNodes };
  }
  if (typeof value === "object") {
    const fieldNodes = [];
    for (const fieldName in value) {
      const fieldValue = value[fieldName];
      const ast = astFromValueUntyped(fieldValue);
      if (ast) {
        fieldNodes.push({
          kind: Kind.OBJECT_FIELD,
          name: { kind: Kind.NAME, value: fieldName },
          value: ast
        });
      }
    }
    return { kind: Kind.OBJECT, fields: fieldNodes };
  }
  if (typeof value === "boolean") {
    return { kind: Kind.BOOLEAN, value };
  }
  if (typeof value === "number" && isFinite(value)) {
    const stringNum = String(value);
    return integerStringRegExp2.test(stringNum) ? { kind: Kind.INT, value: stringNum } : { kind: Kind.FLOAT, value: stringNum };
  }
  if (typeof value === "string") {
    return { kind: Kind.STRING, value };
  }
  throw new TypeError(`Cannot convert value to AST: ${value}.`);
}
var integerStringRegExp2 = /^-?(?:0|[1-9][0-9]*)$/;
function memoize1(fn) {
  const memoize1cache = /* @__PURE__ */ new WeakMap();
  return function memoized(a1) {
    const cachedValue = memoize1cache.get(a1);
    if (cachedValue === void 0) {
      const newValue = fn(a1);
      memoize1cache.set(a1, newValue);
      return newValue;
    }
    return cachedValue;
  };
}
function memoize2(fn) {
  const memoize2cache = /* @__PURE__ */ new WeakMap();
  return function memoized(a1, a2) {
    let cache2 = memoize2cache.get(a1);
    if (!cache2) {
      cache2 = /* @__PURE__ */ new WeakMap();
      memoize2cache.set(a1, cache2);
      const newValue = fn(a1, a2);
      cache2.set(a2, newValue);
      return newValue;
    }
    const cachedValue = cache2.get(a2);
    if (cachedValue === void 0) {
      const newValue = fn(a1, a2);
      cache2.set(a2, newValue);
      return newValue;
    }
    return cachedValue;
  };
}
function memoize32(fn) {
  const memoize3Cache = /* @__PURE__ */ new WeakMap();
  return function memoized(a1, a2, a3) {
    let cache2 = memoize3Cache.get(a1);
    if (!cache2) {
      cache2 = /* @__PURE__ */ new WeakMap();
      memoize3Cache.set(a1, cache2);
      const cache32 = /* @__PURE__ */ new WeakMap();
      cache2.set(a2, cache32);
      const newValue = fn(a1, a2, a3);
      cache32.set(a3, newValue);
      return newValue;
    }
    let cache3 = cache2.get(a2);
    if (!cache3) {
      cache3 = /* @__PURE__ */ new WeakMap();
      cache2.set(a2, cache3);
      const newValue = fn(a1, a2, a3);
      cache3.set(a3, newValue);
      return newValue;
    }
    const cachedValue = cache3.get(a3);
    if (cachedValue === void 0) {
      const newValue = fn(a1, a2, a3);
      cache3.set(a3, newValue);
      return newValue;
    }
    return cachedValue;
  };
}
function memoize5(fn) {
  const memoize5Cache = /* @__PURE__ */ new WeakMap();
  return function memoized(a1, a2, a3, a4, a5) {
    let cache2 = memoize5Cache.get(a1);
    if (!cache2) {
      cache2 = /* @__PURE__ */ new WeakMap();
      memoize5Cache.set(a1, cache2);
      const cache32 = /* @__PURE__ */ new WeakMap();
      cache2.set(a2, cache32);
      const cache42 = /* @__PURE__ */ new WeakMap();
      cache32.set(a3, cache42);
      const cache52 = /* @__PURE__ */ new WeakMap();
      cache42.set(a4, cache52);
      const newValue = fn(a1, a2, a3, a4, a5);
      cache52.set(a5, newValue);
      return newValue;
    }
    let cache3 = cache2.get(a2);
    if (!cache3) {
      cache3 = /* @__PURE__ */ new WeakMap();
      cache2.set(a2, cache3);
      const cache42 = /* @__PURE__ */ new WeakMap();
      cache3.set(a3, cache42);
      const cache52 = /* @__PURE__ */ new WeakMap();
      cache42.set(a4, cache52);
      const newValue = fn(a1, a2, a3, a4, a5);
      cache52.set(a5, newValue);
      return newValue;
    }
    let cache4 = cache3.get(a3);
    if (!cache4) {
      cache4 = /* @__PURE__ */ new WeakMap();
      cache3.set(a3, cache4);
      const cache52 = /* @__PURE__ */ new WeakMap();
      cache4.set(a4, cache52);
      const newValue = fn(a1, a2, a3, a4, a5);
      cache52.set(a5, newValue);
      return newValue;
    }
    let cache5 = cache4.get(a4);
    if (!cache5) {
      cache5 = /* @__PURE__ */ new WeakMap();
      cache4.set(a4, cache5);
      const newValue = fn(a1, a2, a3, a4, a5);
      cache5.set(a5, newValue);
      return newValue;
    }
    const cachedValue = cache5.get(a5);
    if (cachedValue === void 0) {
      const newValue = fn(a1, a2, a3, a4, a5);
      cache5.set(a5, newValue);
      return newValue;
    }
    return cachedValue;
  };
}
var memoize2of4cache = /* @__PURE__ */ new WeakMap();
function memoize2of4(fn) {
  return function memoized(a1, a2, a3, a4) {
    let cache2 = memoize2of4cache.get(a1);
    if (!cache2) {
      cache2 = /* @__PURE__ */ new WeakMap();
      memoize2of4cache.set(a1, cache2);
      const newValue = fn(a1, a2, a3, a4);
      cache2.set(a2, newValue);
      return newValue;
    }
    const cachedValue = cache2.get(a2);
    if (cachedValue === void 0) {
      const newValue = fn(a1, a2, a3, a4);
      cache2.set(a2, newValue);
      return newValue;
    }
    return cachedValue;
  };
}
function getDefinedRootType(schema2, operation) {
  const rootTypeMap = getRootTypeMap(schema2);
  const rootType = rootTypeMap.get(operation);
  if (rootType == null) {
    throw new Error(`Root type for operation "${operation}" not defined by the given schema.`);
  }
  return rootType;
}
var getRootTypeNames = memoize1(function getRootTypeNames2(schema2) {
  const rootTypes = getRootTypes(schema2);
  return new Set([...rootTypes].map((type2) => type2.name));
});
var getRootTypes = memoize1(function getRootTypes2(schema2) {
  const rootTypeMap = getRootTypeMap(schema2);
  return new Set(rootTypeMap.values());
});
var getRootTypeMap = memoize1(function getRootTypeMap2(schema2) {
  const rootTypeMap = /* @__PURE__ */ new Map();
  const queryType = schema2.getQueryType();
  if (queryType) {
    rootTypeMap.set("query", queryType);
  }
  const mutationType = schema2.getMutationType();
  if (mutationType) {
    rootTypeMap.set("mutation", mutationType);
  }
  const subscriptionType = schema2.getSubscriptionType();
  if (subscriptionType) {
    rootTypeMap.set("subscription", subscriptionType);
  }
  return rootTypeMap;
});
function getDocumentNodeFromSchema(schema2, options = {}) {
  const pathToDirectivesInExtensions = options.pathToDirectivesInExtensions;
  const typesMap = schema2.getTypeMap();
  const schemaNode = astFromSchema(schema2, pathToDirectivesInExtensions);
  const definitions = schemaNode != null ? [schemaNode] : [];
  const directives = schema2.getDirectives();
  for (const directive of directives) {
    if (isSpecifiedDirective(directive)) {
      continue;
    }
    definitions.push(astFromDirective(directive, schema2, pathToDirectivesInExtensions));
  }
  for (const typeName in typesMap) {
    const type2 = typesMap[typeName];
    const isPredefinedScalar = isSpecifiedScalarType(type2);
    const isIntrospection = isIntrospectionType(type2);
    if (isPredefinedScalar || isIntrospection) {
      continue;
    }
    if (isObjectType(type2)) {
      definitions.push(astFromObjectType(type2, schema2, pathToDirectivesInExtensions));
    } else if (isInterfaceType(type2)) {
      definitions.push(astFromInterfaceType(type2, schema2, pathToDirectivesInExtensions));
    } else if (isUnionType(type2)) {
      definitions.push(astFromUnionType(type2, schema2, pathToDirectivesInExtensions));
    } else if (isInputObjectType(type2)) {
      definitions.push(astFromInputObjectType(type2, schema2, pathToDirectivesInExtensions));
    } else if (isEnumType(type2)) {
      definitions.push(astFromEnumType(type2, schema2, pathToDirectivesInExtensions));
    } else if (isScalarType(type2)) {
      definitions.push(astFromScalarType(type2, schema2, pathToDirectivesInExtensions));
    } else {
      throw new Error(`Unknown type ${type2}.`);
    }
  }
  return {
    kind: Kind.DOCUMENT,
    definitions
  };
}
function astFromSchema(schema2, pathToDirectivesInExtensions) {
  var _a2, _b;
  const operationTypeMap = /* @__PURE__ */ new Map([
    ["query", void 0],
    ["mutation", void 0],
    ["subscription", void 0]
  ]);
  const nodes = [];
  if (schema2.astNode != null) {
    nodes.push(schema2.astNode);
  }
  if (schema2.extensionASTNodes != null) {
    for (const extensionASTNode of schema2.extensionASTNodes) {
      nodes.push(extensionASTNode);
    }
  }
  for (const node of nodes) {
    if (node.operationTypes) {
      for (const operationTypeDefinitionNode of node.operationTypes) {
        operationTypeMap.set(operationTypeDefinitionNode.operation, operationTypeDefinitionNode);
      }
    }
  }
  const rootTypeMap = getRootTypeMap(schema2);
  for (const [operationTypeNode, operationTypeDefinitionNode] of operationTypeMap) {
    const rootType = rootTypeMap.get(operationTypeNode);
    if (rootType != null) {
      const rootTypeAST = astFromType(rootType);
      if (operationTypeDefinitionNode != null) {
        operationTypeDefinitionNode.type = rootTypeAST;
      } else {
        operationTypeMap.set(operationTypeNode, {
          kind: Kind.OPERATION_TYPE_DEFINITION,
          operation: operationTypeNode,
          type: rootTypeAST
        });
      }
    }
  }
  const operationTypes = [...operationTypeMap.values()].filter(isSome);
  const directives = getDirectiveNodes(schema2, schema2, pathToDirectivesInExtensions);
  if (!operationTypes.length && !directives.length) {
    return null;
  }
  const schemaNode = {
    kind: operationTypes != null ? Kind.SCHEMA_DEFINITION : Kind.SCHEMA_EXTENSION,
    operationTypes,
    directives
  };
  schemaNode.description = ((_b = (_a2 = schema2.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : schema2.description != null) ? {
    kind: Kind.STRING,
    value: schema2.description,
    block: true
  } : void 0;
  return schemaNode;
}
function astFromDirective(directive, schema2, pathToDirectivesInExtensions) {
  var _a2, _b, _c, _d;
  return {
    kind: Kind.DIRECTIVE_DEFINITION,
    description: (_b = (_a2 = directive.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : directive.description ? {
      kind: Kind.STRING,
      value: directive.description
    } : void 0,
    name: {
      kind: Kind.NAME,
      value: directive.name
    },
    arguments: (_c = directive.args) === null || _c === void 0 ? void 0 : _c.map((arg) => astFromArg(arg, schema2, pathToDirectivesInExtensions)),
    repeatable: directive.isRepeatable,
    locations: ((_d = directive.locations) === null || _d === void 0 ? void 0 : _d.map((location) => ({
      kind: Kind.NAME,
      value: location
    }))) || []
  };
}
function getDirectiveNodes(entity, schema2, pathToDirectivesInExtensions) {
  const directivesInExtensions = getDirectivesInExtensions(entity, pathToDirectivesInExtensions);
  let nodes = [];
  if (entity.astNode != null) {
    nodes.push(entity.astNode);
  }
  if ("extensionASTNodes" in entity && entity.extensionASTNodes != null) {
    nodes = nodes.concat(entity.extensionASTNodes);
  }
  let directives;
  if (directivesInExtensions != null) {
    directives = makeDirectiveNodes(schema2, directivesInExtensions);
  } else {
    directives = [];
    for (const node of nodes) {
      if (node.directives) {
        directives.push(...node.directives);
      }
    }
  }
  return directives;
}
function getDeprecatableDirectiveNodes(entity, schema2, pathToDirectivesInExtensions) {
  var _a2, _b;
  let directiveNodesBesidesDeprecated = [];
  let deprecatedDirectiveNode = null;
  const directivesInExtensions = getDirectivesInExtensions(entity, pathToDirectivesInExtensions);
  let directives;
  if (directivesInExtensions != null) {
    directives = makeDirectiveNodes(schema2, directivesInExtensions);
  } else {
    directives = (_a2 = entity.astNode) === null || _a2 === void 0 ? void 0 : _a2.directives;
  }
  if (directives != null) {
    directiveNodesBesidesDeprecated = directives.filter((directive) => directive.name.value !== "deprecated");
    if (entity.deprecationReason != null) {
      deprecatedDirectiveNode = (_b = directives.filter((directive) => directive.name.value === "deprecated")) === null || _b === void 0 ? void 0 : _b[0];
    }
  }
  if (entity.deprecationReason != null && deprecatedDirectiveNode == null) {
    deprecatedDirectiveNode = makeDeprecatedDirective(entity.deprecationReason);
  }
  return deprecatedDirectiveNode == null ? directiveNodesBesidesDeprecated : [deprecatedDirectiveNode].concat(directiveNodesBesidesDeprecated);
}
function astFromArg(arg, schema2, pathToDirectivesInExtensions) {
  var _a2, _b, _c;
  return {
    kind: Kind.INPUT_VALUE_DEFINITION,
    description: (_b = (_a2 = arg.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : arg.description ? {
      kind: Kind.STRING,
      value: arg.description,
      block: true
    } : void 0,
    name: {
      kind: Kind.NAME,
      value: arg.name
    },
    type: astFromType(arg.type),
    defaultValue: arg.defaultValue !== void 0 ? (_c = astFromValue(arg.defaultValue, arg.type)) !== null && _c !== void 0 ? _c : void 0 : void 0,
    directives: getDeprecatableDirectiveNodes(arg, schema2, pathToDirectivesInExtensions)
  };
}
function astFromObjectType(type2, schema2, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: Kind.OBJECT_TYPE_DEFINITION,
    description: (_b = (_a2 = type2.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type2.description ? {
      kind: Kind.STRING,
      value: type2.description,
      block: true
    } : void 0,
    name: {
      kind: Kind.NAME,
      value: type2.name
    },
    fields: Object.values(type2.getFields()).map((field) => astFromField(field, schema2, pathToDirectivesInExtensions)),
    interfaces: Object.values(type2.getInterfaces()).map((iFace) => astFromType(iFace)),
    directives: getDirectiveNodes(type2, schema2, pathToDirectivesInExtensions)
  };
}
function astFromInterfaceType(type2, schema2, pathToDirectivesInExtensions) {
  var _a2, _b;
  const node = {
    kind: Kind.INTERFACE_TYPE_DEFINITION,
    description: (_b = (_a2 = type2.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type2.description ? {
      kind: Kind.STRING,
      value: type2.description,
      block: true
    } : void 0,
    name: {
      kind: Kind.NAME,
      value: type2.name
    },
    fields: Object.values(type2.getFields()).map((field) => astFromField(field, schema2, pathToDirectivesInExtensions)),
    directives: getDirectiveNodes(type2, schema2, pathToDirectivesInExtensions)
  };
  if ("getInterfaces" in type2) {
    node.interfaces = Object.values(type2.getInterfaces()).map((iFace) => astFromType(iFace));
  }
  return node;
}
function astFromUnionType(type2, schema2, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: Kind.UNION_TYPE_DEFINITION,
    description: (_b = (_a2 = type2.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type2.description ? {
      kind: Kind.STRING,
      value: type2.description,
      block: true
    } : void 0,
    name: {
      kind: Kind.NAME,
      value: type2.name
    },
    directives: getDirectiveNodes(type2, schema2, pathToDirectivesInExtensions),
    types: type2.getTypes().map((type3) => astFromType(type3))
  };
}
function astFromInputObjectType(type2, schema2, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
    description: (_b = (_a2 = type2.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type2.description ? {
      kind: Kind.STRING,
      value: type2.description,
      block: true
    } : void 0,
    name: {
      kind: Kind.NAME,
      value: type2.name
    },
    fields: Object.values(type2.getFields()).map((field) => astFromInputField(field, schema2, pathToDirectivesInExtensions)),
    directives: getDirectiveNodes(type2, schema2, pathToDirectivesInExtensions)
  };
}
function astFromEnumType(type2, schema2, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: Kind.ENUM_TYPE_DEFINITION,
    description: (_b = (_a2 = type2.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type2.description ? {
      kind: Kind.STRING,
      value: type2.description,
      block: true
    } : void 0,
    name: {
      kind: Kind.NAME,
      value: type2.name
    },
    values: Object.values(type2.getValues()).map((value) => astFromEnumValue(value, schema2, pathToDirectivesInExtensions)),
    directives: getDirectiveNodes(type2, schema2, pathToDirectivesInExtensions)
  };
}
function astFromScalarType(type2, schema2, pathToDirectivesInExtensions) {
  var _a2, _b, _c;
  const directivesInExtensions = getDirectivesInExtensions(type2, pathToDirectivesInExtensions);
  const directives = directivesInExtensions ? makeDirectiveNodes(schema2, directivesInExtensions) : ((_a2 = type2.astNode) === null || _a2 === void 0 ? void 0 : _a2.directives) || [];
  const specifiedByValue = type2["specifiedByUrl"] || type2["specifiedByURL"];
  if (specifiedByValue && !directives.some((directiveNode) => directiveNode.name.value === "specifiedBy")) {
    const specifiedByArgs = {
      url: specifiedByValue
    };
    directives.push(makeDirectiveNode("specifiedBy", specifiedByArgs));
  }
  return {
    kind: Kind.SCALAR_TYPE_DEFINITION,
    description: (_c = (_b = type2.astNode) === null || _b === void 0 ? void 0 : _b.description) !== null && _c !== void 0 ? _c : type2.description ? {
      kind: Kind.STRING,
      value: type2.description,
      block: true
    } : void 0,
    name: {
      kind: Kind.NAME,
      value: type2.name
    },
    directives
  };
}
function astFromField(field, schema2, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: Kind.FIELD_DEFINITION,
    description: (_b = (_a2 = field.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : field.description ? {
      kind: Kind.STRING,
      value: field.description,
      block: true
    } : void 0,
    name: {
      kind: Kind.NAME,
      value: field.name
    },
    arguments: field.args.map((arg) => astFromArg(arg, schema2, pathToDirectivesInExtensions)),
    type: astFromType(field.type),
    directives: getDeprecatableDirectiveNodes(field, schema2, pathToDirectivesInExtensions)
  };
}
function astFromInputField(field, schema2, pathToDirectivesInExtensions) {
  var _a2, _b, _c;
  return {
    kind: Kind.INPUT_VALUE_DEFINITION,
    description: (_b = (_a2 = field.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : field.description ? {
      kind: Kind.STRING,
      value: field.description,
      block: true
    } : void 0,
    name: {
      kind: Kind.NAME,
      value: field.name
    },
    type: astFromType(field.type),
    directives: getDeprecatableDirectiveNodes(field, schema2, pathToDirectivesInExtensions),
    defaultValue: (_c = astFromValue(field.defaultValue, field.type)) !== null && _c !== void 0 ? _c : void 0
  };
}
function astFromEnumValue(value, schema2, pathToDirectivesInExtensions) {
  var _a2, _b;
  return {
    kind: Kind.ENUM_VALUE_DEFINITION,
    description: (_b = (_a2 = value.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : value.description ? {
      kind: Kind.STRING,
      value: value.description,
      block: true
    } : void 0,
    name: {
      kind: Kind.NAME,
      value: value.name
    },
    directives: getDeprecatableDirectiveNodes(value, schema2, pathToDirectivesInExtensions)
  };
}
function makeDeprecatedDirective(deprecationReason) {
  return makeDirectiveNode("deprecated", { reason: deprecationReason }, GraphQLDeprecatedDirective);
}
function makeDirectiveNode(name, args, directive) {
  const directiveArguments = [];
  if (directive != null) {
    for (const arg of directive.args) {
      const argName = arg.name;
      const argValue = args[argName];
      if (argValue !== void 0) {
        const value = astFromValue(argValue, arg.type);
        if (value) {
          directiveArguments.push({
            kind: Kind.ARGUMENT,
            name: {
              kind: Kind.NAME,
              value: argName
            },
            value
          });
        }
      }
    }
  } else {
    for (const argName in args) {
      const argValue = args[argName];
      const value = astFromValueUntyped(argValue);
      if (value) {
        directiveArguments.push({
          kind: Kind.ARGUMENT,
          name: {
            kind: Kind.NAME,
            value: argName
          },
          value
        });
      }
    }
  }
  return {
    kind: Kind.DIRECTIVE,
    name: {
      kind: Kind.NAME,
      value: name
    },
    arguments: directiveArguments
  };
}
function makeDirectiveNodes(schema2, directiveValues) {
  const directiveNodes = [];
  for (const directiveName in directiveValues) {
    const arrayOrSingleValue = directiveValues[directiveName];
    const directive = schema2 === null || schema2 === void 0 ? void 0 : schema2.getDirective(directiveName);
    if (Array.isArray(arrayOrSingleValue)) {
      for (const value of arrayOrSingleValue) {
        directiveNodes.push(makeDirectiveNode(directiveName, value, directive));
      }
    } else {
      directiveNodes.push(makeDirectiveNode(directiveName, arrayOrSingleValue, directive));
    }
  }
  return directiveNodes;
}
var MAX_LINE_LENGTH2 = 80;
var commentsRegistry = {};
function resetComments() {
  commentsRegistry = {};
}
function collectComment(node) {
  var _a2;
  const entityName = (_a2 = node.name) === null || _a2 === void 0 ? void 0 : _a2.value;
  if (entityName == null) {
    return;
  }
  pushComment(node, entityName);
  switch (node.kind) {
    case "EnumTypeDefinition":
      if (node.values) {
        for (const value of node.values) {
          pushComment(value, entityName, value.name.value);
        }
      }
      break;
    case "ObjectTypeDefinition":
    case "InputObjectTypeDefinition":
    case "InterfaceTypeDefinition":
      if (node.fields) {
        for (const field of node.fields) {
          pushComment(field, entityName, field.name.value);
          if (isFieldDefinitionNode(field) && field.arguments) {
            for (const arg of field.arguments) {
              pushComment(arg, entityName, field.name.value, arg.name.value);
            }
          }
        }
      }
      break;
  }
}
function pushComment(node, entity, field, argument) {
  const comment = getComment(node);
  if (typeof comment !== "string" || comment.length === 0) {
    return;
  }
  const keys = [entity];
  if (field) {
    keys.push(field);
    if (argument) {
      keys.push(argument);
    }
  }
  const path2 = keys.join(".");
  if (!commentsRegistry[path2]) {
    commentsRegistry[path2] = [];
  }
  commentsRegistry[path2].push(comment);
}
function printComment(comment) {
  return "\n# " + comment.replace(/\n/g, "\n# ");
}
function join2(maybeArray, separator3) {
  return maybeArray ? maybeArray.filter((x) => x).join(separator3 || "") : "";
}
function hasMultilineItems2(maybeArray) {
  var _a2;
  return (_a2 = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str2) => str2.includes("\n"))) !== null && _a2 !== void 0 ? _a2 : false;
}
function addDescription(cb) {
  return (node, _key, _parent, path2, ancestors) => {
    var _a2;
    const keys = [];
    const parent = path2.reduce((prev, key2) => {
      if (["fields", "arguments", "values"].includes(key2) && prev.name) {
        keys.push(prev.name.value);
      }
      return prev[key2];
    }, ancestors[0]);
    const key = [...keys, (_a2 = parent === null || parent === void 0 ? void 0 : parent.name) === null || _a2 === void 0 ? void 0 : _a2.value].filter(Boolean).join(".");
    const items = [];
    if (node.kind.includes("Definition") && commentsRegistry[key]) {
      items.push(...commentsRegistry[key]);
    }
    return join2([...items.map(printComment), node.description, cb(node, _key, _parent, path2, ancestors)], "\n");
  };
}
function indent2(maybeString) {
  return maybeString && `  ${maybeString.replace(/\n/g, "\n  ")}`;
}
function block2(array) {
  return array && array.length !== 0 ? `{
${indent2(join2(array, "\n"))}
}` : "";
}
function wrap2(start, maybeString, end) {
  return maybeString ? start + maybeString + (end || "") : "";
}
function printBlockString2(value, isDescription = false) {
  const escaped = value.replace(/"""/g, '\\"""');
  return (value[0] === " " || value[0] === "	") && value.indexOf("\n") === -1 ? `"""${escaped.replace(/"$/, '"\n')}"""` : `"""
${isDescription ? escaped : indent2(escaped)}
"""`;
}
var printDocASTReducer2 = {
  Name: { leave: (node) => node.value },
  Variable: { leave: (node) => "$" + node.name },
  Document: {
    leave: (node) => join2(node.definitions, "\n\n")
  },
  OperationDefinition: {
    leave: (node) => {
      const varDefs = wrap2("(", join2(node.variableDefinitions, ", "), ")");
      const prefix = join2([node.operation, join2([node.name, varDefs]), join2(node.directives, " ")], " ");
      return prefix + " " + node.selectionSet;
    }
  },
  VariableDefinition: {
    leave: ({ variable, type: type2, defaultValue, directives }) => variable + ": " + type2 + wrap2(" = ", defaultValue) + wrap2(" ", join2(directives, " "))
  },
  SelectionSet: { leave: ({ selections }) => block2(selections) },
  Field: {
    leave({ alias, name, arguments: args, directives, selectionSet }) {
      const prefix = wrap2("", alias, ": ") + name;
      let argsLine = prefix + wrap2("(", join2(args, ", "), ")");
      if (argsLine.length > MAX_LINE_LENGTH2) {
        argsLine = prefix + wrap2("(\n", indent2(join2(args, "\n")), "\n)");
      }
      return join2([argsLine, join2(directives, " "), selectionSet], " ");
    }
  },
  Argument: { leave: ({ name, value }) => name + ": " + value },
  FragmentSpread: {
    leave: ({ name, directives }) => "..." + name + wrap2(" ", join2(directives, " "))
  },
  InlineFragment: {
    leave: ({ typeCondition, directives, selectionSet }) => join2(["...", wrap2("on ", typeCondition), join2(directives, " "), selectionSet], " ")
  },
  FragmentDefinition: {
    leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => `fragment ${name}${wrap2("(", join2(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap2("", join2(directives, " "), " ")}` + selectionSet
  },
  IntValue: { leave: ({ value }) => value },
  FloatValue: { leave: ({ value }) => value },
  StringValue: {
    leave: ({ value, block: isBlockString }) => {
      if (isBlockString) {
        return printBlockString2(value);
      }
      return JSON.stringify(value);
    }
  },
  BooleanValue: { leave: ({ value }) => value ? "true" : "false" },
  NullValue: { leave: () => "null" },
  EnumValue: { leave: ({ value }) => value },
  ListValue: { leave: ({ values }) => "[" + join2(values, ", ") + "]" },
  ObjectValue: { leave: ({ fields }) => "{" + join2(fields, ", ") + "}" },
  ObjectField: { leave: ({ name, value }) => name + ": " + value },
  Directive: {
    leave: ({ name, arguments: args }) => "@" + name + wrap2("(", join2(args, ", "), ")")
  },
  NamedType: { leave: ({ name }) => name },
  ListType: { leave: ({ type: type2 }) => "[" + type2 + "]" },
  NonNullType: { leave: ({ type: type2 }) => type2 + "!" },
  SchemaDefinition: {
    leave: ({ directives, operationTypes }) => join2(["schema", join2(directives, " "), block2(operationTypes)], " ")
  },
  OperationTypeDefinition: {
    leave: ({ operation, type: type2 }) => operation + ": " + type2
  },
  ScalarTypeDefinition: {
    leave: ({ name, directives }) => join2(["scalar", name, join2(directives, " ")], " ")
  },
  ObjectTypeDefinition: {
    leave: ({ name, interfaces, directives, fields }) => join2(["type", name, wrap2("implements ", join2(interfaces, " & ")), join2(directives, " "), block2(fields)], " ")
  },
  FieldDefinition: {
    leave: ({ name, arguments: args, type: type2, directives }) => name + (hasMultilineItems2(args) ? wrap2("(\n", indent2(join2(args, "\n")), "\n)") : wrap2("(", join2(args, ", "), ")")) + ": " + type2 + wrap2(" ", join2(directives, " "))
  },
  InputValueDefinition: {
    leave: ({ name, type: type2, defaultValue, directives }) => join2([name + ": " + type2, wrap2("= ", defaultValue), join2(directives, " ")], " ")
  },
  InterfaceTypeDefinition: {
    leave: ({ name, interfaces, directives, fields }) => join2(["interface", name, wrap2("implements ", join2(interfaces, " & ")), join2(directives, " "), block2(fields)], " ")
  },
  UnionTypeDefinition: {
    leave: ({ name, directives, types }) => join2(["union", name, join2(directives, " "), wrap2("= ", join2(types, " | "))], " ")
  },
  EnumTypeDefinition: {
    leave: ({ name, directives, values }) => join2(["enum", name, join2(directives, " "), block2(values)], " ")
  },
  EnumValueDefinition: {
    leave: ({ name, directives }) => join2([name, join2(directives, " ")], " ")
  },
  InputObjectTypeDefinition: {
    leave: ({ name, directives, fields }) => join2(["input", name, join2(directives, " "), block2(fields)], " ")
  },
  DirectiveDefinition: {
    leave: ({ name, arguments: args, repeatable, locations }) => "directive @" + name + (hasMultilineItems2(args) ? wrap2("(\n", indent2(join2(args, "\n")), "\n)") : wrap2("(", join2(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join2(locations, " | ")
  },
  SchemaExtension: {
    leave: ({ directives, operationTypes }) => join2(["extend schema", join2(directives, " "), block2(operationTypes)], " ")
  },
  ScalarTypeExtension: {
    leave: ({ name, directives }) => join2(["extend scalar", name, join2(directives, " ")], " ")
  },
  ObjectTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) => join2(["extend type", name, wrap2("implements ", join2(interfaces, " & ")), join2(directives, " "), block2(fields)], " ")
  },
  InterfaceTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) => join2(["extend interface", name, wrap2("implements ", join2(interfaces, " & ")), join2(directives, " "), block2(fields)], " ")
  },
  UnionTypeExtension: {
    leave: ({ name, directives, types }) => join2(["extend union", name, join2(directives, " "), wrap2("= ", join2(types, " | "))], " ")
  },
  EnumTypeExtension: {
    leave: ({ name, directives, values }) => join2(["extend enum", name, join2(directives, " "), block2(values)], " ")
  },
  InputObjectTypeExtension: {
    leave: ({ name, directives, fields }) => join2(["extend input", name, join2(directives, " "), block2(fields)], " ")
  }
};
var printDocASTReducerWithComments = Object.keys(printDocASTReducer2).reduce((prev, key) => ({
  ...prev,
  [key]: {
    leave: addDescription(printDocASTReducer2[key].leave)
  }
}), {});
function printWithComments(ast) {
  return visit(ast, printDocASTReducerWithComments);
}
function isFieldDefinitionNode(node) {
  return node.kind === "FieldDefinition";
}
function getDescription(node, options) {
  if (node.description != null) {
    return node.description.value;
  }
  if (options === null || options === void 0 ? void 0 : options.commentDescriptions) {
    return getComment(node);
  }
}
function getComment(node) {
  const rawValue = getLeadingCommentBlock(node);
  if (rawValue !== void 0) {
    return dedentBlockStringValue(`
${rawValue}`);
  }
}
function getLeadingCommentBlock(node) {
  const loc = node.loc;
  if (!loc) {
    return;
  }
  const comments = [];
  let token = loc.startToken.prev;
  while (token != null && token.kind === TokenKind.COMMENT && token.next != null && token.prev != null && token.line + 1 === token.next.line && token.line !== token.prev.line) {
    const value = String(token.value);
    comments.push(value);
    token = token.prev;
  }
  return comments.length > 0 ? comments.reverse().join("\n") : void 0;
}
function dedentBlockStringValue(rawString) {
  const lines = rawString.split(/\r\n|[\n\r]/g);
  const commonIndent = getBlockStringIndentation(lines);
  if (commonIndent !== 0) {
    for (let i = 1; i < lines.length; i++) {
      lines[i] = lines[i].slice(commonIndent);
    }
  }
  while (lines.length > 0 && isBlank(lines[0])) {
    lines.shift();
  }
  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {
    lines.pop();
  }
  return lines.join("\n");
}
function getBlockStringIndentation(lines) {
  let commonIndent = null;
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i];
    const indent4 = leadingWhitespace2(line);
    if (indent4 === line.length) {
      continue;
    }
    if (commonIndent === null || indent4 < commonIndent) {
      commonIndent = indent4;
      if (commonIndent === 0) {
        break;
      }
    }
  }
  return commonIndent === null ? 0 : commonIndent;
}
function leadingWhitespace2(str2) {
  let i = 0;
  while (i < str2.length && (str2[i] === " " || str2[i] === "	")) {
    i++;
  }
  return i;
}
function isBlank(str2) {
  return leadingWhitespace2(str2) === str2.length;
}
function parseGraphQLSDL(location, rawSDL, options = {}) {
  let document;
  try {
    if (options.commentDescriptions && rawSDL.includes("#")) {
      document = transformCommentsToDescriptions(rawSDL, options);
      if (options.noLocation) {
        document = parse(print(document), options);
      }
    } else {
      document = parse(new Source(rawSDL, location), options);
    }
  } catch (e) {
    if (e.message.includes("EOF") && rawSDL.replace(/(\#[^*]*)/g, "").trim() === "") {
      document = {
        kind: Kind.DOCUMENT,
        definitions: []
      };
    } else {
      throw e;
    }
  }
  return {
    location,
    document
  };
}
function transformCommentsToDescriptions(sourceSdl, options = {}) {
  const parsedDoc = parse(sourceSdl, {
    ...options,
    noLocation: false
  });
  const modifiedDoc = visit(parsedDoc, {
    leave: (node) => {
      if (isDescribable(node)) {
        const rawValue = getLeadingCommentBlock(node);
        if (rawValue !== void 0) {
          const commentsBlock = dedentBlockStringValue("\n" + rawValue);
          const isBlock = commentsBlock.includes("\n");
          if (!node.description) {
            return {
              ...node,
              description: {
                kind: Kind.STRING,
                value: commentsBlock,
                block: isBlock
              }
            };
          } else {
            return {
              ...node,
              description: {
                ...node.description,
                value: node.description.value + "\n" + commentsBlock,
                block: true
              }
            };
          }
        }
      }
    }
  });
  return modifiedDoc;
}
function isDescribable(node) {
  return isTypeSystemDefinitionNode(node) || node.kind === Kind.FIELD_DEFINITION || node.kind === Kind.INPUT_VALUE_DEFINITION || node.kind === Kind.ENUM_VALUE_DEFINITION;
}
var DirectiveLocation2;
(function(DirectiveLocation4) {
  DirectiveLocation4["QUERY"] = "QUERY";
  DirectiveLocation4["MUTATION"] = "MUTATION";
  DirectiveLocation4["SUBSCRIPTION"] = "SUBSCRIPTION";
  DirectiveLocation4["FIELD"] = "FIELD";
  DirectiveLocation4["FRAGMENT_DEFINITION"] = "FRAGMENT_DEFINITION";
  DirectiveLocation4["FRAGMENT_SPREAD"] = "FRAGMENT_SPREAD";
  DirectiveLocation4["INLINE_FRAGMENT"] = "INLINE_FRAGMENT";
  DirectiveLocation4["VARIABLE_DEFINITION"] = "VARIABLE_DEFINITION";
  DirectiveLocation4["SCHEMA"] = "SCHEMA";
  DirectiveLocation4["SCALAR"] = "SCALAR";
  DirectiveLocation4["OBJECT"] = "OBJECT";
  DirectiveLocation4["FIELD_DEFINITION"] = "FIELD_DEFINITION";
  DirectiveLocation4["ARGUMENT_DEFINITION"] = "ARGUMENT_DEFINITION";
  DirectiveLocation4["INTERFACE"] = "INTERFACE";
  DirectiveLocation4["UNION"] = "UNION";
  DirectiveLocation4["ENUM"] = "ENUM";
  DirectiveLocation4["ENUM_VALUE"] = "ENUM_VALUE";
  DirectiveLocation4["INPUT_OBJECT"] = "INPUT_OBJECT";
  DirectiveLocation4["INPUT_FIELD_DEFINITION"] = "INPUT_FIELD_DEFINITION";
})(DirectiveLocation2 || (DirectiveLocation2 = {}));
var MapperKind;
(function(MapperKind3) {
  MapperKind3["TYPE"] = "MapperKind.TYPE";
  MapperKind3["SCALAR_TYPE"] = "MapperKind.SCALAR_TYPE";
  MapperKind3["ENUM_TYPE"] = "MapperKind.ENUM_TYPE";
  MapperKind3["COMPOSITE_TYPE"] = "MapperKind.COMPOSITE_TYPE";
  MapperKind3["OBJECT_TYPE"] = "MapperKind.OBJECT_TYPE";
  MapperKind3["INPUT_OBJECT_TYPE"] = "MapperKind.INPUT_OBJECT_TYPE";
  MapperKind3["ABSTRACT_TYPE"] = "MapperKind.ABSTRACT_TYPE";
  MapperKind3["UNION_TYPE"] = "MapperKind.UNION_TYPE";
  MapperKind3["INTERFACE_TYPE"] = "MapperKind.INTERFACE_TYPE";
  MapperKind3["ROOT_OBJECT"] = "MapperKind.ROOT_OBJECT";
  MapperKind3["QUERY"] = "MapperKind.QUERY";
  MapperKind3["MUTATION"] = "MapperKind.MUTATION";
  MapperKind3["SUBSCRIPTION"] = "MapperKind.SUBSCRIPTION";
  MapperKind3["DIRECTIVE"] = "MapperKind.DIRECTIVE";
  MapperKind3["FIELD"] = "MapperKind.FIELD";
  MapperKind3["COMPOSITE_FIELD"] = "MapperKind.COMPOSITE_FIELD";
  MapperKind3["OBJECT_FIELD"] = "MapperKind.OBJECT_FIELD";
  MapperKind3["ROOT_FIELD"] = "MapperKind.ROOT_FIELD";
  MapperKind3["QUERY_ROOT_FIELD"] = "MapperKind.QUERY_ROOT_FIELD";
  MapperKind3["MUTATION_ROOT_FIELD"] = "MapperKind.MUTATION_ROOT_FIELD";
  MapperKind3["SUBSCRIPTION_ROOT_FIELD"] = "MapperKind.SUBSCRIPTION_ROOT_FIELD";
  MapperKind3["INTERFACE_FIELD"] = "MapperKind.INTERFACE_FIELD";
  MapperKind3["INPUT_OBJECT_FIELD"] = "MapperKind.INPUT_OBJECT_FIELD";
  MapperKind3["ARGUMENT"] = "MapperKind.ARGUMENT";
  MapperKind3["ENUM_VALUE"] = "MapperKind.ENUM_VALUE";
})(MapperKind || (MapperKind = {}));
function getObjectTypeFromTypeMap(typeMap, type2) {
  if (type2) {
    const maybeObjectType = typeMap[type2.name];
    if (isObjectType(maybeObjectType)) {
      return maybeObjectType;
    }
  }
}
function createNamedStub(name, type2) {
  let constructor;
  if (type2 === "object") {
    constructor = GraphQLObjectType;
  } else if (type2 === "interface") {
    constructor = GraphQLInterfaceType;
  } else {
    constructor = GraphQLInputObjectType;
  }
  return new constructor({
    name,
    fields: {
      _fake: {
        type: GraphQLString
      }
    }
  });
}
function createStub(node, type2) {
  switch (node.kind) {
    case Kind.LIST_TYPE:
      return new GraphQLList(createStub(node.type, type2));
    case Kind.NON_NULL_TYPE:
      return new GraphQLNonNull(createStub(node.type, type2));
    default:
      if (type2 === "output") {
        return createNamedStub(node.name.value, "object");
      }
      return createNamedStub(node.name.value, "input");
  }
}
function isNamedStub(type2) {
  if ("getFields" in type2) {
    const fields = type2.getFields();
    for (const fieldName in fields) {
      const field = fields[fieldName];
      return field.name === "_fake";
    }
  }
  return false;
}
function getBuiltInForStub(type2) {
  switch (type2.name) {
    case GraphQLInt.name:
      return GraphQLInt;
    case GraphQLFloat.name:
      return GraphQLFloat;
    case GraphQLString.name:
      return GraphQLString;
    case GraphQLBoolean.name:
      return GraphQLBoolean;
    case GraphQLID.name:
      return GraphQLID;
    default:
      return type2;
  }
}
function rewireTypes(originalTypeMap, directives) {
  const referenceTypeMap = /* @__PURE__ */ Object.create(null);
  for (const typeName in originalTypeMap) {
    referenceTypeMap[typeName] = originalTypeMap[typeName];
  }
  const newTypeMap = /* @__PURE__ */ Object.create(null);
  for (const typeName in referenceTypeMap) {
    const namedType = referenceTypeMap[typeName];
    if (namedType == null || typeName.startsWith("__")) {
      continue;
    }
    const newName = namedType.name;
    if (newName.startsWith("__")) {
      continue;
    }
    if (newTypeMap[newName] != null) {
      throw new Error(`Duplicate schema type name ${newName}`);
    }
    newTypeMap[newName] = namedType;
  }
  for (const typeName in newTypeMap) {
    newTypeMap[typeName] = rewireNamedType(newTypeMap[typeName]);
  }
  const newDirectives = directives.map((directive) => rewireDirective(directive));
  return {
    typeMap: newTypeMap,
    directives: newDirectives
  };
  function rewireDirective(directive) {
    if (isSpecifiedDirective(directive)) {
      return directive;
    }
    const directiveConfig = directive.toConfig();
    directiveConfig.args = rewireArgs(directiveConfig.args);
    return new GraphQLDirective(directiveConfig);
  }
  function rewireArgs(args) {
    const rewiredArgs = {};
    for (const argName in args) {
      const arg = args[argName];
      const rewiredArgType = rewireType(arg.type);
      if (rewiredArgType != null) {
        arg.type = rewiredArgType;
        rewiredArgs[argName] = arg;
      }
    }
    return rewiredArgs;
  }
  function rewireNamedType(type2) {
    if (isObjectType(type2)) {
      const config2 = type2.toConfig();
      const newConfig = {
        ...config2,
        fields: () => rewireFields(config2.fields),
        interfaces: () => rewireNamedTypes(config2.interfaces)
      };
      return new GraphQLObjectType(newConfig);
    } else if (isInterfaceType(type2)) {
      const config2 = type2.toConfig();
      const newConfig = {
        ...config2,
        fields: () => rewireFields(config2.fields)
      };
      if ("interfaces" in newConfig) {
        newConfig.interfaces = () => rewireNamedTypes(config2.interfaces);
      }
      return new GraphQLInterfaceType(newConfig);
    } else if (isUnionType(type2)) {
      const config2 = type2.toConfig();
      const newConfig = {
        ...config2,
        types: () => rewireNamedTypes(config2.types)
      };
      return new GraphQLUnionType(newConfig);
    } else if (isInputObjectType(type2)) {
      const config2 = type2.toConfig();
      const newConfig = {
        ...config2,
        fields: () => rewireInputFields(config2.fields)
      };
      return new GraphQLInputObjectType(newConfig);
    } else if (isEnumType(type2)) {
      const enumConfig = type2.toConfig();
      return new GraphQLEnumType(enumConfig);
    } else if (isScalarType(type2)) {
      if (isSpecifiedScalarType(type2)) {
        return type2;
      }
      const scalarConfig = type2.toConfig();
      return new GraphQLScalarType(scalarConfig);
    }
    throw new Error(`Unexpected schema type: ${type2}`);
  }
  function rewireFields(fields) {
    const rewiredFields = {};
    for (const fieldName in fields) {
      const field = fields[fieldName];
      const rewiredFieldType = rewireType(field.type);
      if (rewiredFieldType != null && field.args) {
        field.type = rewiredFieldType;
        field.args = rewireArgs(field.args);
        rewiredFields[fieldName] = field;
      }
    }
    return rewiredFields;
  }
  function rewireInputFields(fields) {
    const rewiredFields = {};
    for (const fieldName in fields) {
      const field = fields[fieldName];
      const rewiredFieldType = rewireType(field.type);
      if (rewiredFieldType != null) {
        field.type = rewiredFieldType;
        rewiredFields[fieldName] = field;
      }
    }
    return rewiredFields;
  }
  function rewireNamedTypes(namedTypes) {
    const rewiredTypes = [];
    for (const namedType of namedTypes) {
      const rewiredType = rewireType(namedType);
      if (rewiredType != null) {
        rewiredTypes.push(rewiredType);
      }
    }
    return rewiredTypes;
  }
  function rewireType(type2) {
    if (isListType(type2)) {
      const rewiredType = rewireType(type2.ofType);
      return rewiredType != null ? new GraphQLList(rewiredType) : null;
    } else if (isNonNullType(type2)) {
      const rewiredType = rewireType(type2.ofType);
      return rewiredType != null ? new GraphQLNonNull(rewiredType) : null;
    } else if (isNamedType(type2)) {
      let rewiredType = referenceTypeMap[type2.name];
      if (rewiredType === void 0) {
        rewiredType = isNamedStub(type2) ? getBuiltInForStub(type2) : rewireNamedType(type2);
        newTypeMap[rewiredType.name] = referenceTypeMap[type2.name] = rewiredType;
      }
      return rewiredType != null ? newTypeMap[rewiredType.name] : null;
    }
    return null;
  }
}
function transformInputValue(type2, value, inputLeafValueTransformer = null, inputObjectValueTransformer = null) {
  if (value == null) {
    return value;
  }
  const nullableType = getNullableType(type2);
  if (isLeafType(nullableType)) {
    return inputLeafValueTransformer != null ? inputLeafValueTransformer(nullableType, value) : value;
  } else if (isListType(nullableType)) {
    return value.map((listMember) => transformInputValue(nullableType.ofType, listMember, inputLeafValueTransformer, inputObjectValueTransformer));
  } else if (isInputObjectType(nullableType)) {
    const fields = nullableType.getFields();
    const newValue = {};
    for (const key in value) {
      const field = fields[key];
      if (field != null) {
        newValue[key] = transformInputValue(field.type, value[key], inputLeafValueTransformer, inputObjectValueTransformer);
      }
    }
    return inputObjectValueTransformer != null ? inputObjectValueTransformer(nullableType, newValue) : newValue;
  }
}
function serializeInputValue(type2, value) {
  return transformInputValue(type2, value, (t, v) => {
    try {
      return t.serialize(v);
    } catch (_a2) {
      return v;
    }
  });
}
function parseInputValue(type2, value) {
  return transformInputValue(type2, value, (t, v) => {
    try {
      return t.parseValue(v);
    } catch (_a2) {
      return v;
    }
  });
}
function mapSchema(schema2, schemaMapper = {}) {
  const newTypeMap = mapArguments(mapFields(mapTypes(mapDefaultValues(mapEnumValues(mapTypes(mapDefaultValues(schema2.getTypeMap(), schema2, serializeInputValue), schema2, schemaMapper, (type2) => isLeafType(type2)), schema2, schemaMapper), schema2, parseInputValue), schema2, schemaMapper, (type2) => !isLeafType(type2)), schema2, schemaMapper), schema2, schemaMapper);
  const originalDirectives = schema2.getDirectives();
  const newDirectives = mapDirectives(originalDirectives, schema2, schemaMapper);
  const { typeMap, directives } = rewireTypes(newTypeMap, newDirectives);
  return new GraphQLSchema({
    ...schema2.toConfig(),
    query: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema2.getQueryType())),
    mutation: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema2.getMutationType())),
    subscription: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema2.getSubscriptionType())),
    types: Object.values(typeMap),
    directives
  });
}
function mapTypes(originalTypeMap, schema2, schemaMapper, testFn = () => true) {
  const newTypeMap = {};
  for (const typeName in originalTypeMap) {
    if (!typeName.startsWith("__")) {
      const originalType = originalTypeMap[typeName];
      if (originalType == null || !testFn(originalType)) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const typeMapper = getTypeMapper(schema2, schemaMapper, typeName);
      if (typeMapper == null) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const maybeNewType = typeMapper(originalType, schema2);
      if (maybeNewType === void 0) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      newTypeMap[typeName] = maybeNewType;
    }
  }
  return newTypeMap;
}
function mapEnumValues(originalTypeMap, schema2, schemaMapper) {
  const enumValueMapper = getEnumValueMapper(schemaMapper);
  if (!enumValueMapper) {
    return originalTypeMap;
  }
  return mapTypes(originalTypeMap, schema2, {
    [MapperKind.ENUM_TYPE]: (type2) => {
      const config2 = type2.toConfig();
      const originalEnumValueConfigMap = config2.values;
      const newEnumValueConfigMap = {};
      for (const externalValue in originalEnumValueConfigMap) {
        const originalEnumValueConfig = originalEnumValueConfigMap[externalValue];
        const mappedEnumValue = enumValueMapper(originalEnumValueConfig, type2.name, schema2, externalValue);
        if (mappedEnumValue === void 0) {
          newEnumValueConfigMap[externalValue] = originalEnumValueConfig;
        } else if (Array.isArray(mappedEnumValue)) {
          const [newExternalValue, newEnumValueConfig] = mappedEnumValue;
          newEnumValueConfigMap[newExternalValue] = newEnumValueConfig === void 0 ? originalEnumValueConfig : newEnumValueConfig;
        } else if (mappedEnumValue !== null) {
          newEnumValueConfigMap[externalValue] = mappedEnumValue;
        }
      }
      return correctASTNodes(new GraphQLEnumType({
        ...config2,
        values: newEnumValueConfigMap
      }));
    }
  }, (type2) => isEnumType(type2));
}
function mapDefaultValues(originalTypeMap, schema2, fn) {
  const newTypeMap = mapArguments(originalTypeMap, schema2, {
    [MapperKind.ARGUMENT]: (argumentConfig) => {
      if (argumentConfig.defaultValue === void 0) {
        return argumentConfig;
      }
      const maybeNewType = getNewType(originalTypeMap, argumentConfig.type);
      if (maybeNewType != null) {
        return {
          ...argumentConfig,
          defaultValue: fn(maybeNewType, argumentConfig.defaultValue)
        };
      }
    }
  });
  return mapFields(newTypeMap, schema2, {
    [MapperKind.INPUT_OBJECT_FIELD]: (inputFieldConfig) => {
      if (inputFieldConfig.defaultValue === void 0) {
        return inputFieldConfig;
      }
      const maybeNewType = getNewType(newTypeMap, inputFieldConfig.type);
      if (maybeNewType != null) {
        return {
          ...inputFieldConfig,
          defaultValue: fn(maybeNewType, inputFieldConfig.defaultValue)
        };
      }
    }
  });
}
function getNewType(newTypeMap, type2) {
  if (isListType(type2)) {
    const newType = getNewType(newTypeMap, type2.ofType);
    return newType != null ? new GraphQLList(newType) : null;
  } else if (isNonNullType(type2)) {
    const newType = getNewType(newTypeMap, type2.ofType);
    return newType != null ? new GraphQLNonNull(newType) : null;
  } else if (isNamedType(type2)) {
    const newType = newTypeMap[type2.name];
    return newType != null ? newType : null;
  }
  return null;
}
function mapFields(originalTypeMap, schema2, schemaMapper) {
  const newTypeMap = {};
  for (const typeName in originalTypeMap) {
    if (!typeName.startsWith("__")) {
      const originalType = originalTypeMap[typeName];
      if (!isObjectType(originalType) && !isInterfaceType(originalType) && !isInputObjectType(originalType)) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const fieldMapper = getFieldMapper(schema2, schemaMapper, typeName);
      if (fieldMapper == null) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const config2 = originalType.toConfig();
      const originalFieldConfigMap = config2.fields;
      const newFieldConfigMap = {};
      for (const fieldName in originalFieldConfigMap) {
        const originalFieldConfig = originalFieldConfigMap[fieldName];
        const mappedField = fieldMapper(originalFieldConfig, fieldName, typeName, schema2);
        if (mappedField === void 0) {
          newFieldConfigMap[fieldName] = originalFieldConfig;
        } else if (Array.isArray(mappedField)) {
          const [newFieldName, newFieldConfig] = mappedField;
          if (newFieldConfig.astNode != null) {
            newFieldConfig.astNode = {
              ...newFieldConfig.astNode,
              name: {
                ...newFieldConfig.astNode.name,
                value: newFieldName
              }
            };
          }
          newFieldConfigMap[newFieldName] = newFieldConfig === void 0 ? originalFieldConfig : newFieldConfig;
        } else if (mappedField !== null) {
          newFieldConfigMap[fieldName] = mappedField;
        }
      }
      if (isObjectType(originalType)) {
        newTypeMap[typeName] = correctASTNodes(new GraphQLObjectType({
          ...config2,
          fields: newFieldConfigMap
        }));
      } else if (isInterfaceType(originalType)) {
        newTypeMap[typeName] = correctASTNodes(new GraphQLInterfaceType({
          ...config2,
          fields: newFieldConfigMap
        }));
      } else {
        newTypeMap[typeName] = correctASTNodes(new GraphQLInputObjectType({
          ...config2,
          fields: newFieldConfigMap
        }));
      }
    }
  }
  return newTypeMap;
}
function mapArguments(originalTypeMap, schema2, schemaMapper) {
  const newTypeMap = {};
  for (const typeName in originalTypeMap) {
    if (!typeName.startsWith("__")) {
      const originalType = originalTypeMap[typeName];
      if (!isObjectType(originalType) && !isInterfaceType(originalType)) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const argumentMapper = getArgumentMapper(schemaMapper);
      if (argumentMapper == null) {
        newTypeMap[typeName] = originalType;
        continue;
      }
      const config2 = originalType.toConfig();
      const originalFieldConfigMap = config2.fields;
      const newFieldConfigMap = {};
      for (const fieldName in originalFieldConfigMap) {
        const originalFieldConfig = originalFieldConfigMap[fieldName];
        const originalArgumentConfigMap = originalFieldConfig.args;
        if (originalArgumentConfigMap == null) {
          newFieldConfigMap[fieldName] = originalFieldConfig;
          continue;
        }
        const argumentNames = Object.keys(originalArgumentConfigMap);
        if (!argumentNames.length) {
          newFieldConfigMap[fieldName] = originalFieldConfig;
          continue;
        }
        const newArgumentConfigMap = {};
        for (const argumentName of argumentNames) {
          const originalArgumentConfig = originalArgumentConfigMap[argumentName];
          const mappedArgument = argumentMapper(originalArgumentConfig, fieldName, typeName, schema2);
          if (mappedArgument === void 0) {
            newArgumentConfigMap[argumentName] = originalArgumentConfig;
          } else if (Array.isArray(mappedArgument)) {
            const [newArgumentName, newArgumentConfig] = mappedArgument;
            newArgumentConfigMap[newArgumentName] = newArgumentConfig;
          } else if (mappedArgument !== null) {
            newArgumentConfigMap[argumentName] = mappedArgument;
          }
        }
        newFieldConfigMap[fieldName] = {
          ...originalFieldConfig,
          args: newArgumentConfigMap
        };
      }
      if (isObjectType(originalType)) {
        newTypeMap[typeName] = new GraphQLObjectType({
          ...config2,
          fields: newFieldConfigMap
        });
      } else if (isInterfaceType(originalType)) {
        newTypeMap[typeName] = new GraphQLInterfaceType({
          ...config2,
          fields: newFieldConfigMap
        });
      } else {
        newTypeMap[typeName] = new GraphQLInputObjectType({
          ...config2,
          fields: newFieldConfigMap
        });
      }
    }
  }
  return newTypeMap;
}
function mapDirectives(originalDirectives, schema2, schemaMapper) {
  const directiveMapper = getDirectiveMapper(schemaMapper);
  if (directiveMapper == null) {
    return originalDirectives.slice();
  }
  const newDirectives = [];
  for (const directive of originalDirectives) {
    const mappedDirective = directiveMapper(directive, schema2);
    if (mappedDirective === void 0) {
      newDirectives.push(directive);
    } else if (mappedDirective !== null) {
      newDirectives.push(mappedDirective);
    }
  }
  return newDirectives;
}
function getTypeSpecifiers(schema2, typeName) {
  var _a2, _b, _c;
  const type2 = schema2.getType(typeName);
  const specifiers = [MapperKind.TYPE];
  if (isObjectType(type2)) {
    specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.OBJECT_TYPE);
    if (typeName === ((_a2 = schema2.getQueryType()) === null || _a2 === void 0 ? void 0 : _a2.name)) {
      specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.QUERY);
    } else if (typeName === ((_b = schema2.getMutationType()) === null || _b === void 0 ? void 0 : _b.name)) {
      specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.MUTATION);
    } else if (typeName === ((_c = schema2.getSubscriptionType()) === null || _c === void 0 ? void 0 : _c.name)) {
      specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.SUBSCRIPTION);
    }
  } else if (isInputObjectType(type2)) {
    specifiers.push(MapperKind.INPUT_OBJECT_TYPE);
  } else if (isInterfaceType(type2)) {
    specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.INTERFACE_TYPE);
  } else if (isUnionType(type2)) {
    specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.UNION_TYPE);
  } else if (isEnumType(type2)) {
    specifiers.push(MapperKind.ENUM_TYPE);
  } else if (isScalarType(type2)) {
    specifiers.push(MapperKind.SCALAR_TYPE);
  }
  return specifiers;
}
function getTypeMapper(schema2, schemaMapper, typeName) {
  const specifiers = getTypeSpecifiers(schema2, typeName);
  let typeMapper;
  const stack = [...specifiers];
  while (!typeMapper && stack.length > 0) {
    const next = stack.pop();
    typeMapper = schemaMapper[next];
  }
  return typeMapper != null ? typeMapper : null;
}
function getFieldSpecifiers(schema2, typeName) {
  var _a2, _b, _c;
  const type2 = schema2.getType(typeName);
  const specifiers = [MapperKind.FIELD];
  if (isObjectType(type2)) {
    specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.OBJECT_FIELD);
    if (typeName === ((_a2 = schema2.getQueryType()) === null || _a2 === void 0 ? void 0 : _a2.name)) {
      specifiers.push(MapperKind.ROOT_FIELD, MapperKind.QUERY_ROOT_FIELD);
    } else if (typeName === ((_b = schema2.getMutationType()) === null || _b === void 0 ? void 0 : _b.name)) {
      specifiers.push(MapperKind.ROOT_FIELD, MapperKind.MUTATION_ROOT_FIELD);
    } else if (typeName === ((_c = schema2.getSubscriptionType()) === null || _c === void 0 ? void 0 : _c.name)) {
      specifiers.push(MapperKind.ROOT_FIELD, MapperKind.SUBSCRIPTION_ROOT_FIELD);
    }
  } else if (isInterfaceType(type2)) {
    specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.INTERFACE_FIELD);
  } else if (isInputObjectType(type2)) {
    specifiers.push(MapperKind.INPUT_OBJECT_FIELD);
  }
  return specifiers;
}
function getFieldMapper(schema2, schemaMapper, typeName) {
  const specifiers = getFieldSpecifiers(schema2, typeName);
  let fieldMapper;
  const stack = [...specifiers];
  while (!fieldMapper && stack.length > 0) {
    const next = stack.pop();
    fieldMapper = schemaMapper[next];
  }
  return fieldMapper !== null && fieldMapper !== void 0 ? fieldMapper : null;
}
function getArgumentMapper(schemaMapper) {
  const argumentMapper = schemaMapper[MapperKind.ARGUMENT];
  return argumentMapper != null ? argumentMapper : null;
}
function getDirectiveMapper(schemaMapper) {
  const directiveMapper = schemaMapper[MapperKind.DIRECTIVE];
  return directiveMapper != null ? directiveMapper : null;
}
function getEnumValueMapper(schemaMapper) {
  const enumValueMapper = schemaMapper[MapperKind.ENUM_VALUE];
  return enumValueMapper != null ? enumValueMapper : null;
}
function correctASTNodes(type2) {
  if (isObjectType(type2)) {
    const config2 = type2.toConfig();
    if (config2.astNode != null) {
      const fields = [];
      for (const fieldName in config2.fields) {
        const fieldConfig = config2.fields[fieldName];
        if (fieldConfig.astNode != null) {
          fields.push(fieldConfig.astNode);
        }
      }
      config2.astNode = {
        ...config2.astNode,
        kind: Kind.OBJECT_TYPE_DEFINITION,
        fields
      };
    }
    if (config2.extensionASTNodes != null) {
      config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
        ...node,
        kind: Kind.OBJECT_TYPE_EXTENSION,
        fields: void 0
      }));
    }
    return new GraphQLObjectType(config2);
  } else if (isInterfaceType(type2)) {
    const config2 = type2.toConfig();
    if (config2.astNode != null) {
      const fields = [];
      for (const fieldName in config2.fields) {
        const fieldConfig = config2.fields[fieldName];
        if (fieldConfig.astNode != null) {
          fields.push(fieldConfig.astNode);
        }
      }
      config2.astNode = {
        ...config2.astNode,
        kind: Kind.INTERFACE_TYPE_DEFINITION,
        fields
      };
    }
    if (config2.extensionASTNodes != null) {
      config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
        ...node,
        kind: Kind.INTERFACE_TYPE_EXTENSION,
        fields: void 0
      }));
    }
    return new GraphQLInterfaceType(config2);
  } else if (isInputObjectType(type2)) {
    const config2 = type2.toConfig();
    if (config2.astNode != null) {
      const fields = [];
      for (const fieldName in config2.fields) {
        const fieldConfig = config2.fields[fieldName];
        if (fieldConfig.astNode != null) {
          fields.push(fieldConfig.astNode);
        }
      }
      config2.astNode = {
        ...config2.astNode,
        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
        fields
      };
    }
    if (config2.extensionASTNodes != null) {
      config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
        ...node,
        kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
        fields: void 0
      }));
    }
    return new GraphQLInputObjectType(config2);
  } else if (isEnumType(type2)) {
    const config2 = type2.toConfig();
    if (config2.astNode != null) {
      const values = [];
      for (const enumKey in config2.values) {
        const enumValueConfig = config2.values[enumKey];
        if (enumValueConfig.astNode != null) {
          values.push(enumValueConfig.astNode);
        }
      }
      config2.astNode = {
        ...config2.astNode,
        values
      };
    }
    if (config2.extensionASTNodes != null) {
      config2.extensionASTNodes = config2.extensionASTNodes.map((node) => ({
        ...node,
        values: void 0
      }));
    }
    return new GraphQLEnumType(config2);
  } else {
    return type2;
  }
}
function filterSchema({ schema: schema2, typeFilter = () => true, fieldFilter = void 0, rootFieldFilter = void 0, objectFieldFilter = void 0, interfaceFieldFilter = void 0, inputObjectFieldFilter = void 0, argumentFilter = void 0 }) {
  const filteredSchema = mapSchema(schema2, {
    [MapperKind.QUERY]: (type2) => filterRootFields(type2, "Query", rootFieldFilter, argumentFilter),
    [MapperKind.MUTATION]: (type2) => filterRootFields(type2, "Mutation", rootFieldFilter, argumentFilter),
    [MapperKind.SUBSCRIPTION]: (type2) => filterRootFields(type2, "Subscription", rootFieldFilter, argumentFilter),
    [MapperKind.OBJECT_TYPE]: (type2) => typeFilter(type2.name, type2) ? filterElementFields(GraphQLObjectType, type2, objectFieldFilter || fieldFilter, argumentFilter) : null,
    [MapperKind.INTERFACE_TYPE]: (type2) => typeFilter(type2.name, type2) ? filterElementFields(GraphQLInterfaceType, type2, interfaceFieldFilter || fieldFilter, argumentFilter) : null,
    [MapperKind.INPUT_OBJECT_TYPE]: (type2) => typeFilter(type2.name, type2) ? filterElementFields(GraphQLInputObjectType, type2, inputObjectFieldFilter || fieldFilter) : null,
    [MapperKind.UNION_TYPE]: (type2) => typeFilter(type2.name, type2) ? void 0 : null,
    [MapperKind.ENUM_TYPE]: (type2) => typeFilter(type2.name, type2) ? void 0 : null,
    [MapperKind.SCALAR_TYPE]: (type2) => typeFilter(type2.name, type2) ? void 0 : null
  });
  return filteredSchema;
}
function filterRootFields(type2, operation, rootFieldFilter, argumentFilter) {
  if (rootFieldFilter || argumentFilter) {
    const config2 = type2.toConfig();
    for (const fieldName in config2.fields) {
      const field = config2.fields[fieldName];
      if (rootFieldFilter && !rootFieldFilter(operation, fieldName, config2.fields[fieldName])) {
        delete config2.fields[fieldName];
      } else if (argumentFilter && field.args) {
        for (const argName in field.args) {
          if (!argumentFilter(operation, fieldName, argName, field.args[argName])) {
            delete field.args[argName];
          }
        }
      }
    }
    return new GraphQLObjectType(config2);
  }
  return type2;
}
function filterElementFields(ElementConstructor, type2, fieldFilter, argumentFilter) {
  if (fieldFilter || argumentFilter) {
    const config2 = type2.toConfig();
    for (const fieldName in config2.fields) {
      const field = config2.fields[fieldName];
      if (fieldFilter && !fieldFilter(type2.name, fieldName, config2.fields[fieldName])) {
        delete config2.fields[fieldName];
      } else if (argumentFilter && "args" in field) {
        for (const argName in field.args) {
          if (!argumentFilter(type2.name, fieldName, argName, field.args[argName])) {
            delete field.args[argName];
          }
        }
      }
    }
    return new ElementConstructor(config2);
  }
}
function healSchema(schema2) {
  healTypes(schema2.getTypeMap(), schema2.getDirectives());
  return schema2;
}
function healTypes(originalTypeMap, directives) {
  const actualNamedTypeMap = /* @__PURE__ */ Object.create(null);
  for (const typeName in originalTypeMap) {
    const namedType = originalTypeMap[typeName];
    if (namedType == null || typeName.startsWith("__")) {
      continue;
    }
    const actualName = namedType.name;
    if (actualName.startsWith("__")) {
      continue;
    }
    if (actualName in actualNamedTypeMap) {
      throw new Error(`Duplicate schema type name ${actualName}`);
    }
    actualNamedTypeMap[actualName] = namedType;
  }
  for (const typeName in actualNamedTypeMap) {
    const namedType = actualNamedTypeMap[typeName];
    originalTypeMap[typeName] = namedType;
  }
  for (const decl of directives) {
    decl.args = decl.args.filter((arg) => {
      arg.type = healType(arg.type);
      return arg.type !== null;
    });
  }
  for (const typeName in originalTypeMap) {
    const namedType = originalTypeMap[typeName];
    if (!typeName.startsWith("__") && typeName in actualNamedTypeMap) {
      if (namedType != null) {
        healNamedType(namedType);
      }
    }
  }
  for (const typeName in originalTypeMap) {
    if (!typeName.startsWith("__") && !(typeName in actualNamedTypeMap)) {
      delete originalTypeMap[typeName];
    }
  }
  function healNamedType(type2) {
    if (isObjectType(type2)) {
      healFields(type2);
      healInterfaces(type2);
      return;
    } else if (isInterfaceType(type2)) {
      healFields(type2);
      if ("getInterfaces" in type2) {
        healInterfaces(type2);
      }
      return;
    } else if (isUnionType(type2)) {
      healUnderlyingTypes(type2);
      return;
    } else if (isInputObjectType(type2)) {
      healInputFields(type2);
      return;
    } else if (isLeafType(type2)) {
      return;
    }
    throw new Error(`Unexpected schema type: ${type2}`);
  }
  function healFields(type2) {
    const fieldMap = type2.getFields();
    for (const [key, field] of Object.entries(fieldMap)) {
      field.args.map((arg) => {
        arg.type = healType(arg.type);
        return arg.type === null ? null : arg;
      }).filter(Boolean);
      field.type = healType(field.type);
      if (field.type === null) {
        delete fieldMap[key];
      }
    }
  }
  function healInterfaces(type2) {
    if ("getInterfaces" in type2) {
      const interfaces = type2.getInterfaces();
      interfaces.push(...interfaces.splice(0).map((iface) => healType(iface)).filter(Boolean));
    }
  }
  function healInputFields(type2) {
    const fieldMap = type2.getFields();
    for (const [key, field] of Object.entries(fieldMap)) {
      field.type = healType(field.type);
      if (field.type === null) {
        delete fieldMap[key];
      }
    }
  }
  function healUnderlyingTypes(type2) {
    const types = type2.getTypes();
    types.push(...types.splice(0).map((t) => healType(t)).filter(Boolean));
  }
  function healType(type2) {
    if (isListType(type2)) {
      const healedType = healType(type2.ofType);
      return healedType != null ? new GraphQLList(healedType) : null;
    } else if (isNonNullType(type2)) {
      const healedType = healType(type2.ofType);
      return healedType != null ? new GraphQLNonNull(healedType) : null;
    } else if (isNamedType(type2)) {
      const officialType = originalTypeMap[type2.name];
      if (officialType && type2 !== officialType) {
        return officialType;
      }
    }
    return type2;
  }
}
function getResolversFromSchema(schema2) {
  var _a2, _b;
  const resolvers = /* @__PURE__ */ Object.create(null);
  const typeMap = schema2.getTypeMap();
  for (const typeName in typeMap) {
    if (!typeName.startsWith("__")) {
      const type2 = typeMap[typeName];
      if (isScalarType(type2)) {
        if (!isSpecifiedScalarType(type2)) {
          const config2 = type2.toConfig();
          delete config2.astNode;
          resolvers[typeName] = new GraphQLScalarType(config2);
        }
      } else if (isEnumType(type2)) {
        resolvers[typeName] = {};
        const values = type2.getValues();
        for (const value of values) {
          resolvers[typeName][value.name] = value.value;
        }
      } else if (isInterfaceType(type2)) {
        if (type2.resolveType != null) {
          resolvers[typeName] = {
            __resolveType: type2.resolveType
          };
        }
      } else if (isUnionType(type2)) {
        if (type2.resolveType != null) {
          resolvers[typeName] = {
            __resolveType: type2.resolveType
          };
        }
      } else if (isObjectType(type2)) {
        resolvers[typeName] = {};
        if (type2.isTypeOf != null) {
          resolvers[typeName].__isTypeOf = type2.isTypeOf;
        }
        const fields = type2.getFields();
        for (const fieldName in fields) {
          const field = fields[fieldName];
          if (field.subscribe != null) {
            resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};
            resolvers[typeName][fieldName].subscribe = field.subscribe;
          }
          if (field.resolve != null && ((_a2 = field.resolve) === null || _a2 === void 0 ? void 0 : _a2.name) !== "defaultFieldResolver" && ((_b = field.resolve) === null || _b === void 0 ? void 0 : _b.name) !== "defaultMergedResolver") {
            resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};
            resolvers[typeName][fieldName].resolve = field.resolve;
          }
        }
      }
    }
  }
  return resolvers;
}
function forEachField(schema2, fn) {
  const typeMap = schema2.getTypeMap();
  for (const typeName in typeMap) {
    const type2 = typeMap[typeName];
    if (!getNamedType(type2).name.startsWith("__") && isObjectType(type2)) {
      const fields = type2.getFields();
      for (const fieldName in fields) {
        const field = fields[fieldName];
        fn(field, typeName, fieldName);
      }
    }
  }
}
function forEachDefaultValue(schema2, fn) {
  const typeMap = schema2.getTypeMap();
  for (const typeName in typeMap) {
    const type2 = typeMap[typeName];
    if (!getNamedType(type2).name.startsWith("__")) {
      if (isObjectType(type2)) {
        const fields = type2.getFields();
        for (const fieldName in fields) {
          const field = fields[fieldName];
          for (const arg of field.args) {
            arg.defaultValue = fn(arg.type, arg.defaultValue);
          }
        }
      } else if (isInputObjectType(type2)) {
        const fields = type2.getFields();
        for (const fieldName in fields) {
          const field = fields[fieldName];
          field.defaultValue = fn(field.type, field.defaultValue);
        }
      }
    }
  }
}
function pruneSchema(schema2, options = {}) {
  const { skipEmptyCompositeTypePruning, skipEmptyUnionPruning, skipPruning, skipUnimplementedInterfacesPruning, skipUnusedTypesPruning } = options;
  let prunedTypes = [];
  let prunedSchema = schema2;
  do {
    let visited = visitSchema(prunedSchema);
    if (skipPruning) {
      const revisit = [];
      for (const typeName in prunedSchema.getTypeMap()) {
        if (typeName.startsWith("__")) {
          continue;
        }
        const type2 = prunedSchema.getType(typeName);
        if (type2 && skipPruning(type2)) {
          revisit.push(typeName);
        }
      }
      visited = visitQueue(revisit, prunedSchema, visited);
    }
    prunedTypes = [];
    prunedSchema = mapSchema(prunedSchema, {
      [MapperKind.TYPE]: (type2) => {
        if (!visited.has(type2.name) && !isSpecifiedScalarType(type2)) {
          if (isUnionType(type2) || isInputObjectType(type2) || isInterfaceType(type2) || isObjectType(type2) || isScalarType(type2)) {
            if (skipUnusedTypesPruning) {
              return type2;
            }
            if (isUnionType(type2) && skipEmptyUnionPruning && !Object.keys(type2.getTypes()).length) {
              return type2;
            }
            if (isInputObjectType(type2) || isInterfaceType(type2) || isObjectType(type2)) {
              if (skipEmptyCompositeTypePruning && !Object.keys(type2.getFields()).length) {
                return type2;
              }
            }
            if (isInterfaceType(type2) && skipUnimplementedInterfacesPruning) {
              return type2;
            }
          }
          prunedTypes.push(type2.name);
          visited.delete(type2.name);
          return null;
        }
        return type2;
      }
    });
  } while (prunedTypes.length);
  return prunedSchema;
}
function visitSchema(schema2) {
  const queue2 = [];
  for (const type2 of getRootTypes(schema2)) {
    queue2.push(type2.name);
  }
  return visitQueue(queue2, schema2);
}
function visitQueue(queue2, schema2, visited = /* @__PURE__ */ new Set()) {
  const revisit = /* @__PURE__ */ new Map();
  while (queue2.length) {
    const typeName = queue2.pop();
    if (visited.has(typeName) && revisit[typeName] !== true) {
      continue;
    }
    const type2 = schema2.getType(typeName);
    if (type2) {
      if (isUnionType(type2)) {
        queue2.push(...type2.getTypes().map((type3) => type3.name));
      }
      if (isInterfaceType(type2) && revisit[typeName] === true) {
        queue2.push(...getImplementingTypes(type2.name, schema2));
        revisit[typeName] = false;
      }
      if ("getInterfaces" in type2) {
        queue2.push(...type2.getInterfaces().map((iface) => iface.name));
      }
      if ("getFields" in type2) {
        const fields = type2.getFields();
        const entries = Object.entries(fields);
        if (!entries.length) {
          continue;
        }
        for (const [, field] of entries) {
          if (isObjectType(type2)) {
            queue2.push(...field.args.map((arg) => getNamedType(arg.type).name));
          }
          const namedType = getNamedType(field.type);
          queue2.push(namedType.name);
          if (isInterfaceType(namedType) && !(namedType.name in revisit)) {
            revisit[namedType.name] = true;
          }
        }
      }
      visited.add(typeName);
    }
  }
  return visited;
}
function mergeDeep(sources, respectPrototype = false) {
  const target = sources[0] || {};
  const output = {};
  if (respectPrototype) {
    Object.setPrototypeOf(output, Object.create(Object.getPrototypeOf(target)));
  }
  for (const source of sources) {
    if (isObject(target) && isObject(source)) {
      if (respectPrototype) {
        const outputPrototype = Object.getPrototypeOf(output);
        const sourcePrototype = Object.getPrototypeOf(source);
        if (sourcePrototype) {
          for (const key of Object.getOwnPropertyNames(sourcePrototype)) {
            const descriptor = Object.getOwnPropertyDescriptor(sourcePrototype, key);
            if (isSome(descriptor)) {
              Object.defineProperty(outputPrototype, key, descriptor);
            }
          }
        }
      }
      for (const key in source) {
        if (isObject(source[key])) {
          if (!(key in output)) {
            Object.assign(output, { [key]: source[key] });
          } else {
            output[key] = mergeDeep([output[key], source[key]], respectPrototype);
          }
        } else {
          Object.assign(output, { [key]: source[key] });
        }
      }
    }
  }
  return output;
}
function isObject(item) {
  return item && typeof item === "object" && !Array.isArray(item);
}
function parseSelectionSet(selectionSet, options) {
  const query = parse(selectionSet, options).definitions[0];
  return query.selectionSet;
}
function getResponseKeyFromInfo(info) {
  return info.fieldNodes[0].alias != null ? info.fieldNodes[0].alias.value : info.fieldName;
}
function mapAsyncIterator3(iterator, callback, rejectCallback) {
  let $return;
  let abruptClose;
  if (typeof iterator.return === "function") {
    $return = iterator.return;
    abruptClose = (error) => {
      const rethrow = () => Promise.reject(error);
      return $return.call(iterator).then(rethrow, rethrow);
    };
  }
  function mapResult(result) {
    return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);
  }
  let mapReject;
  if (rejectCallback) {
    const reject3 = rejectCallback;
    mapReject = (error) => asyncMapValue(error, reject3).then(iteratorResult, abruptClose);
  }
  return {
    next() {
      return iterator.next().then(mapResult, mapReject);
    },
    return() {
      return $return ? $return.call(iterator).then(mapResult, mapReject) : Promise.resolve({ value: void 0, done: true });
    },
    throw(error) {
      if (typeof iterator.throw === "function") {
        return iterator.throw(error).then(mapResult, mapReject);
      }
      return Promise.reject(error).catch(abruptClose);
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
function asyncMapValue(value, callback) {
  return new Promise((resolve2) => resolve2(callback(value)));
}
function iteratorResult(value) {
  return { value, done: false };
}
function updateArgument(argumentNodes, variableDefinitionsMap, variableValues, argName, varName, type2, value) {
  argumentNodes[argName] = {
    kind: Kind.ARGUMENT,
    name: {
      kind: Kind.NAME,
      value: argName
    },
    value: {
      kind: Kind.VARIABLE,
      name: {
        kind: Kind.NAME,
        value: varName
      }
    }
  };
  variableDefinitionsMap[varName] = {
    kind: Kind.VARIABLE_DEFINITION,
    variable: {
      kind: Kind.VARIABLE,
      name: {
        kind: Kind.NAME,
        value: varName
      }
    },
    type: astFromType(type2)
  };
  if (value !== void 0) {
    variableValues[varName] = value;
    return;
  }
  if (varName in variableValues) {
    delete variableValues[varName];
  }
}
function createVariableNameGenerator(variableDefinitionMap) {
  let varCounter = 0;
  return (argName) => {
    let varName;
    do {
      varName = `_v${(varCounter++).toString()}_${argName}`;
    } while (varName in variableDefinitionMap);
    return varName;
  };
}
function implementsAbstractType(schema2, typeA, typeB) {
  if (typeB == null || typeA == null) {
    return false;
  } else if (typeA === typeB) {
    return true;
  } else if (isCompositeType(typeA) && isCompositeType(typeB)) {
    return doTypesOverlap(schema2, typeA, typeB);
  }
  return false;
}
function observableToAsyncIterable(observable) {
  const pullQueue = [];
  const pushQueue = [];
  let listening = true;
  const pushValue = (value) => {
    if (pullQueue.length !== 0) {
      pullQueue.shift()({ value, done: false });
    } else {
      pushQueue.push({ value, done: false });
    }
  };
  const pushError = (error) => {
    if (pullQueue.length !== 0) {
      pullQueue.shift()({ value: { errors: [error] }, done: false });
    } else {
      pushQueue.push({ value: { errors: [error] }, done: false });
    }
  };
  const pushDone = () => {
    if (pullQueue.length !== 0) {
      pullQueue.shift()({ done: true });
    } else {
      pushQueue.push({ done: true });
    }
  };
  const pullValue = () => new Promise((resolve2) => {
    if (pushQueue.length !== 0) {
      const element = pushQueue.shift();
      resolve2(element);
    } else {
      pullQueue.push(resolve2);
    }
  });
  const subscription = observable.subscribe({
    next(value) {
      pushValue(value);
    },
    error(err) {
      pushError(err);
    },
    complete() {
      pushDone();
    }
  });
  const emptyQueue = () => {
    if (listening) {
      listening = false;
      subscription.unsubscribe();
      for (const resolve2 of pullQueue) {
        resolve2({ value: void 0, done: true });
      }
      pullQueue.length = 0;
      pushQueue.length = 0;
    }
  };
  return {
    next() {
      return listening ? pullValue() : this.return();
    },
    return() {
      emptyQueue();
      return Promise.resolve({ value: void 0, done: true });
    },
    throw(error) {
      emptyQueue();
      return Promise.reject(error);
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}
function getOperationASTFromDocument(documentNode, operationName) {
  const doc = getOperationAST(documentNode, operationName);
  if (!doc) {
    throw new Error(`Cannot infer operation ${operationName || ""}`);
  }
  return doc;
}
var getOperationASTFromRequest = memoize1(function getOperationASTFromRequest2(request) {
  return getOperationASTFromDocument(request.document, request.operationName);
});
function collectFields2(schema2, fragments, variableValues, runtimeType, selectionSet, fields, visitedFragmentNames) {
  for (const selection of selectionSet.selections) {
    switch (selection.kind) {
      case Kind.FIELD: {
        if (!shouldIncludeNode2(variableValues, selection)) {
          continue;
        }
        const name = getFieldEntryKey2(selection);
        const fieldList = fields.get(name);
        if (fieldList !== void 0) {
          fieldList.push(selection);
        } else {
          fields.set(name, [selection]);
        }
        break;
      }
      case Kind.INLINE_FRAGMENT: {
        if (!shouldIncludeNode2(variableValues, selection) || !doesFragmentConditionMatch2(schema2, selection, runtimeType)) {
          continue;
        }
        collectFields2(schema2, fragments, variableValues, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
        break;
      }
      case Kind.FRAGMENT_SPREAD: {
        const fragName = selection.name.value;
        if (visitedFragmentNames.has(fragName) || !shouldIncludeNode2(variableValues, selection)) {
          continue;
        }
        visitedFragmentNames.add(fragName);
        const fragment = fragments[fragName];
        if (!fragment || !doesFragmentConditionMatch2(schema2, fragment, runtimeType)) {
          continue;
        }
        collectFields2(schema2, fragments, variableValues, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
        break;
      }
    }
  }
  return fields;
}
function shouldIncludeNode2(variableValues, node) {
  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);
  if ((skip === null || skip === void 0 ? void 0 : skip["if"]) === true) {
    return false;
  }
  const include = getDirectiveValues(GraphQLIncludeDirective, node, variableValues);
  if ((include === null || include === void 0 ? void 0 : include["if"]) === false) {
    return false;
  }
  return true;
}
function doesFragmentConditionMatch2(schema2, fragment, type2) {
  const typeConditionNode = fragment.typeCondition;
  if (!typeConditionNode) {
    return true;
  }
  const conditionalType = typeFromAST(schema2, typeConditionNode);
  if (conditionalType === type2) {
    return true;
  }
  if (isAbstractType(conditionalType)) {
    const possibleTypes = schema2.getPossibleTypes(conditionalType);
    return possibleTypes.includes(type2);
  }
  return false;
}
function getFieldEntryKey2(node) {
  return node.alias ? node.alias.value : node.name.value;
}
var collectSubFields = memoize5(function collectSubFields2(schema2, fragments, variableValues, type2, fieldNodes) {
  const subFieldNodes = /* @__PURE__ */ new Map();
  const visitedFragmentNames = /* @__PURE__ */ new Set();
  for (const fieldNode of fieldNodes) {
    if (fieldNode.selectionSet) {
      collectFields2(schema2, fragments, variableValues, type2, fieldNode.selectionSet, subFieldNodes, visitedFragmentNames);
    }
  }
  return subFieldNodes;
});
function visitData(data, enter, leave) {
  if (Array.isArray(data)) {
    return data.map((value) => visitData(value, enter, leave));
  } else if (typeof data === "object") {
    const newData = enter != null ? enter(data) : data;
    if (newData != null) {
      for (const key in newData) {
        const value = newData[key];
        Object.defineProperty(newData, key, {
          value: visitData(value, enter, leave)
        });
      }
    }
    return leave != null ? leave(newData) : newData;
  }
  return data;
}
function isAsyncIterable3(value) {
  return typeof value === "object" && value != null && Symbol.asyncIterator in value && typeof value[Symbol.asyncIterator] === "function";
}
function isDocumentNode(object) {
  return object && typeof object === "object" && "kind" in object && object.kind === Kind.DOCUMENT;
}
async function defaultAsyncIteratorReturn(value) {
  return { value, done: true };
}
var proxyMethodFactory = memoize2(function proxyMethodFactory2(target, targetMethod) {
  return function proxyMethod(...args) {
    return Reflect.apply(targetMethod, target, args);
  };
});
function getAsyncIteratorWithCancel(asyncIterator, onCancel) {
  return new Proxy(asyncIterator, {
    has(asyncIterator2, prop) {
      if (prop === "return") {
        return true;
      }
      return Reflect.has(asyncIterator2, prop);
    },
    get(asyncIterator2, prop, receiver) {
      const existingPropValue = Reflect.get(asyncIterator2, prop, receiver);
      if (prop === "return") {
        const existingReturn = existingPropValue || defaultAsyncIteratorReturn;
        return async function returnWithCancel(value) {
          const returnValue = await onCancel(value);
          return Reflect.apply(existingReturn, asyncIterator2, [returnValue]);
        };
      } else if (typeof existingPropValue === "function") {
        return proxyMethodFactory(asyncIterator2, existingPropValue);
      }
      return existingPropValue;
    }
  });
}
function getAsyncIterableWithCancel(asyncIterable, onCancel) {
  return new Proxy(asyncIterable, {
    get(asyncIterable2, prop, receiver) {
      const existingPropValue = Reflect.get(asyncIterable2, prop, receiver);
      if (Symbol.asyncIterator === prop) {
        return function asyncIteratorFactory() {
          const asyncIterator = Reflect.apply(existingPropValue, asyncIterable2, []);
          return getAsyncIteratorWithCancel(asyncIterator, onCancel);
        };
      } else if (typeof existingPropValue === "function") {
        return proxyMethodFactory(asyncIterable2, existingPropValue);
      }
      return existingPropValue;
    }
  });
}

// node_modules/@graphql-yoga/common/index.mjs
init_graphql();

// node_modules/@envelop/validation-cache/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var import_tiny_lru = __toESM(require_tiny_lru(), 1);
var DEFAULT_MAX = 1e3;
var DEFAULT_TTL = 36e5;
var rawDocumentSymbol = Symbol("rawDocument");
var useValidationCache = (pluginOptions = {}) => {
  const resultCache = typeof pluginOptions.cache !== "undefined" ? pluginOptions.cache : (0, import_tiny_lru.default)(DEFAULT_MAX, DEFAULT_TTL);
  return {
    onSchemaChange() {
      resultCache.clear();
    },
    onParse({ params, extendContext }) {
      extendContext({ [rawDocumentSymbol]: params.source.toString() });
    },
    onValidate({ params, context, setResult }) {
      var _a2;
      const key = (_a2 = context[rawDocumentSymbol]) !== null && _a2 !== void 0 ? _a2 : print(params.documentAST);
      const cachedResult = resultCache.get(key);
      if (cachedResult !== void 0) {
        setResult(cachedResult);
      }
      return ({ result }) => {
        resultCache.set(key, result);
      };
    }
  };
};

// node_modules/@envelop/parser-cache/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var import_tiny_lru2 = __toESM(require_tiny_lru2(), 1);
var DEFAULT_MAX2 = 1e3;
var DEFAULT_TTL2 = 36e5;
var useParserCache = (pluginOptions = {}) => {
  const documentCache = typeof pluginOptions.documentCache !== "undefined" ? pluginOptions.documentCache : (0, import_tiny_lru2.default)(DEFAULT_MAX2, DEFAULT_TTL2);
  const errorCache = typeof pluginOptions.errorCache !== "undefined" ? pluginOptions.errorCache : (0, import_tiny_lru2.default)(DEFAULT_MAX2, DEFAULT_TTL2);
  return {
    onParse({ params, setParsedDocument }) {
      const { source } = params;
      const key = source instanceof Source ? source.body : source;
      const cachedError = errorCache.get(key);
      if (cachedError !== void 0) {
        throw cachedError;
      }
      const cachedDocument = documentCache.get(key);
      if (cachedDocument !== void 0) {
        setParsedDocument(cachedDocument);
      }
      return ({ result }) => {
        if (result instanceof Error) {
          errorCache.set(key, result);
        } else if (result !== null) {
          documentCache.set(key, result);
        }
      };
    }
  };
};

// node_modules/@graphql-tools/schema/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();

// node_modules/@graphql-tools/merge/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
function mergeResolvers(resolversDefinitions, options) {
  if (!resolversDefinitions || Array.isArray(resolversDefinitions) && resolversDefinitions.length === 0) {
    return {};
  }
  if (!Array.isArray(resolversDefinitions)) {
    return resolversDefinitions;
  }
  if (resolversDefinitions.length === 1) {
    return resolversDefinitions[0] || {};
  }
  const resolvers = new Array();
  for (let resolversDefinition of resolversDefinitions) {
    if (Array.isArray(resolversDefinition)) {
      resolversDefinition = mergeResolvers(resolversDefinition);
    }
    if (typeof resolversDefinition === "object" && resolversDefinition) {
      resolvers.push(resolversDefinition);
    }
  }
  const result = mergeDeep(resolvers, true);
  if (options === null || options === void 0 ? void 0 : options.exclusions) {
    for (const exclusion of options.exclusions) {
      const [typeName, fieldName] = exclusion.split(".");
      if (!fieldName || fieldName === "*") {
        delete result[typeName];
      } else if (result[typeName]) {
        delete result[typeName][fieldName];
      }
    }
  }
  return result;
}
function mergeArguments(args1, args2, config2) {
  const result = deduplicateArguments([...args2, ...args1].filter(isSome));
  if (config2 && config2.sort) {
    result.sort(compareNodes);
  }
  return result;
}
function deduplicateArguments(args) {
  return args.reduce((acc, current) => {
    const dup = acc.find((arg) => arg.name.value === current.name.value);
    if (!dup) {
      return acc.concat([current]);
    }
    return acc;
  }, []);
}
function directiveAlreadyExists(directivesArr, otherDirective) {
  return !!directivesArr.find((directive) => directive.name.value === otherDirective.name.value);
}
function nameAlreadyExists(name, namesArr) {
  return namesArr.some(({ value }) => value === name.value);
}
function mergeArguments$1(a1, a2) {
  const result = [...a2];
  for (const argument of a1) {
    const existingIndex = result.findIndex((a) => a.name.value === argument.name.value);
    if (existingIndex > -1) {
      const existingArg = result[existingIndex];
      if (existingArg.value.kind === "ListValue") {
        const source = existingArg.value.values;
        const target = argument.value.values;
        existingArg.value.values = deduplicateLists(source, target, (targetVal, source2) => {
          const value = targetVal.value;
          return !value || !source2.some((sourceVal) => sourceVal.value === value);
        });
      } else {
        existingArg.value = argument.value;
      }
    } else {
      result.push(argument);
    }
  }
  return result;
}
function deduplicateDirectives(directives) {
  return directives.map((directive, i, all) => {
    const firstAt = all.findIndex((d) => d.name.value === directive.name.value);
    if (firstAt !== i) {
      const dup = all[firstAt];
      directive.arguments = mergeArguments$1(directive.arguments, dup.arguments);
      return null;
    }
    return directive;
  }).filter(isSome);
}
function mergeDirectives(d1 = [], d2 = [], config2) {
  const reverseOrder = config2 && config2.reverseDirectives;
  const asNext = reverseOrder ? d1 : d2;
  const asFirst = reverseOrder ? d2 : d1;
  const result = deduplicateDirectives([...asNext]);
  for (const directive of asFirst) {
    if (directiveAlreadyExists(result, directive)) {
      const existingDirectiveIndex = result.findIndex((d) => d.name.value === directive.name.value);
      const existingDirective = result[existingDirectiveIndex];
      result[existingDirectiveIndex].arguments = mergeArguments$1(directive.arguments || [], existingDirective.arguments || []);
    } else {
      result.push(directive);
    }
  }
  return result;
}
function validateInputs(node, existingNode) {
  const printedNode = print({
    ...node,
    description: void 0
  });
  const printedExistingNode = print({
    ...existingNode,
    description: void 0
  });
  const leaveInputs = new RegExp("(directive @w*d*)|( on .*$)", "g");
  const sameArguments = printedNode.replace(leaveInputs, "") === printedExistingNode.replace(leaveInputs, "");
  if (!sameArguments) {
    throw new Error(`Unable to merge GraphQL directive "${node.name.value}". 
Existing directive:  
	${printedExistingNode} 
Received directive: 
	${printedNode}`);
  }
}
function mergeDirective(node, existingNode) {
  if (existingNode) {
    validateInputs(node, existingNode);
    return {
      ...node,
      locations: [
        ...existingNode.locations,
        ...node.locations.filter((name) => !nameAlreadyExists(name, existingNode.locations))
      ]
    };
  }
  return node;
}
function deduplicateLists(source, target, filterFn) {
  return source.concat(target.filter((val) => filterFn(val, source)));
}
function mergeEnumValues(first, second, config2) {
  if (config2 === null || config2 === void 0 ? void 0 : config2.consistentEnumMerge) {
    const reversed = [];
    if (first) {
      reversed.push(...first);
    }
    first = second;
    second = reversed;
  }
  const enumValueMap = /* @__PURE__ */ new Map();
  if (first) {
    for (const firstValue of first) {
      enumValueMap.set(firstValue.name.value, firstValue);
    }
  }
  if (second) {
    for (const secondValue of second) {
      const enumValue = secondValue.name.value;
      if (enumValueMap.has(enumValue)) {
        const firstValue = enumValueMap.get(enumValue);
        firstValue.description = secondValue.description || firstValue.description;
        firstValue.directives = mergeDirectives(secondValue.directives, firstValue.directives);
      } else {
        enumValueMap.set(enumValue, secondValue);
      }
    }
  }
  const result = [...enumValueMap.values()];
  if (config2 && config2.sort) {
    result.sort(compareNodes);
  }
  return result;
}
function mergeEnum(e1, e2, config2) {
  if (e2) {
    return {
      name: e1.name,
      description: e1["description"] || e2["description"],
      kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || e1.kind === "EnumTypeDefinition" || e2.kind === "EnumTypeDefinition" ? "EnumTypeDefinition" : "EnumTypeExtension",
      loc: e1.loc,
      directives: mergeDirectives(e1.directives, e2.directives, config2),
      values: mergeEnumValues(e1.values, e2.values, config2)
    };
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...e1,
    kind: Kind.ENUM_TYPE_DEFINITION
  } : e1;
}
function isStringTypes(types) {
  return typeof types === "string";
}
function isSourceTypes(types) {
  return types instanceof Source;
}
function extractType(type2) {
  let visitedType = type2;
  while (visitedType.kind === Kind.LIST_TYPE || visitedType.kind === "NonNullType") {
    visitedType = visitedType.type;
  }
  return visitedType;
}
function isWrappingTypeNode(type2) {
  return type2.kind !== Kind.NAMED_TYPE;
}
function isListTypeNode(type2) {
  return type2.kind === Kind.LIST_TYPE;
}
function isNonNullTypeNode(type2) {
  return type2.kind === Kind.NON_NULL_TYPE;
}
function printTypeNode(type2) {
  if (isListTypeNode(type2)) {
    return `[${printTypeNode(type2.type)}]`;
  }
  if (isNonNullTypeNode(type2)) {
    return `${printTypeNode(type2.type)}!`;
  }
  return type2.name.value;
}
var CompareVal;
(function(CompareVal2) {
  CompareVal2[CompareVal2["A_SMALLER_THAN_B"] = -1] = "A_SMALLER_THAN_B";
  CompareVal2[CompareVal2["A_EQUALS_B"] = 0] = "A_EQUALS_B";
  CompareVal2[CompareVal2["A_GREATER_THAN_B"] = 1] = "A_GREATER_THAN_B";
})(CompareVal || (CompareVal = {}));
function defaultStringComparator(a, b) {
  if (a == null && b == null) {
    return CompareVal.A_EQUALS_B;
  }
  if (a == null) {
    return CompareVal.A_SMALLER_THAN_B;
  }
  if (b == null) {
    return CompareVal.A_GREATER_THAN_B;
  }
  if (a < b)
    return CompareVal.A_SMALLER_THAN_B;
  if (a > b)
    return CompareVal.A_GREATER_THAN_B;
  return CompareVal.A_EQUALS_B;
}
function fieldAlreadyExists(fieldsArr, otherField, config2) {
  const result = fieldsArr.find((field) => field.name.value === otherField.name.value);
  if (result && !(config2 === null || config2 === void 0 ? void 0 : config2.ignoreFieldConflicts)) {
    const t1 = extractType(result.type);
    const t2 = extractType(otherField.type);
    if (t1.name.value !== t2.name.value) {
      throw new Error(`Field "${otherField.name.value}" already defined with a different type. Declared as "${t1.name.value}", but you tried to override with "${t2.name.value}"`);
    }
  }
  return !!result;
}
function mergeFields(type2, f1, f2, config2) {
  const result = [];
  if (f2 != null) {
    result.push(...f2);
  }
  if (f1 != null) {
    for (const field of f1) {
      if (fieldAlreadyExists(result, field, config2)) {
        const existing = result.find((f) => f.name.value === field.name.value);
        if (!(config2 === null || config2 === void 0 ? void 0 : config2.ignoreFieldConflicts)) {
          if (config2 === null || config2 === void 0 ? void 0 : config2.throwOnConflict) {
            preventConflicts(type2, existing, field, false);
          } else {
            preventConflicts(type2, existing, field, true);
          }
          if (isNonNullTypeNode(field.type) && !isNonNullTypeNode(existing.type)) {
            existing.type = field.type;
          }
        }
        existing.arguments = mergeArguments(field["arguments"] || [], existing.arguments || [], config2);
        existing.directives = mergeDirectives(field.directives, existing.directives, config2);
        existing.description = field.description || existing.description;
      } else {
        result.push(field);
      }
    }
  }
  if (config2 && config2.sort) {
    result.sort(compareNodes);
  }
  if (config2 && config2.exclusions) {
    const exclusions = config2.exclusions;
    return result.filter((field) => !exclusions.includes(`${type2.name.value}.${field.name.value}`));
  }
  return result;
}
function preventConflicts(type2, a, b, ignoreNullability = false) {
  const aType = printTypeNode(a.type);
  const bType = printTypeNode(b.type);
  if (aType !== bType && !safeChangeForFieldType(a.type, b.type, ignoreNullability)) {
    throw new Error(`Field '${type2.name.value}.${a.name.value}' changed type from '${aType}' to '${bType}'`);
  }
}
function safeChangeForFieldType(oldType, newType, ignoreNullability = false) {
  if (!isWrappingTypeNode(oldType) && !isWrappingTypeNode(newType)) {
    return oldType.toString() === newType.toString();
  }
  if (isNonNullTypeNode(newType)) {
    const ofType = isNonNullTypeNode(oldType) ? oldType.type : oldType;
    return safeChangeForFieldType(ofType, newType.type);
  }
  if (isNonNullTypeNode(oldType)) {
    return safeChangeForFieldType(newType, oldType, ignoreNullability);
  }
  if (isListTypeNode(oldType)) {
    return isListTypeNode(newType) && safeChangeForFieldType(oldType.type, newType.type) || isNonNullTypeNode(newType) && safeChangeForFieldType(oldType, newType["type"]);
  }
  return false;
}
function mergeInputType(node, existingNode, config2) {
  if (existingNode) {
    try {
      return {
        name: node.name,
        description: node["description"] || existingNode["description"],
        kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "InputObjectTypeDefinition" || existingNode.kind === "InputObjectTypeDefinition" ? "InputObjectTypeDefinition" : "InputObjectTypeExtension",
        loc: node.loc,
        fields: mergeFields(node, node.fields, existingNode.fields, config2),
        directives: mergeDirectives(node.directives, existingNode.directives, config2)
      };
    } catch (e) {
      throw new Error(`Unable to merge GraphQL input type "${node.name.value}": ${e.message}`);
    }
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...node,
    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION
  } : node;
}
function mergeInterface(node, existingNode, config2) {
  if (existingNode) {
    try {
      return {
        name: node.name,
        description: node["description"] || existingNode["description"],
        kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "InterfaceTypeDefinition" || existingNode.kind === "InterfaceTypeDefinition" ? "InterfaceTypeDefinition" : "InterfaceTypeExtension",
        loc: node.loc,
        fields: mergeFields(node, node.fields, existingNode.fields, config2),
        directives: mergeDirectives(node.directives, existingNode.directives, config2),
        interfaces: node["interfaces"] ? mergeNamedTypeArray(node["interfaces"], existingNode["interfaces"], config2) : void 0
      };
    } catch (e) {
      throw new Error(`Unable to merge GraphQL interface "${node.name.value}": ${e.message}`);
    }
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...node,
    kind: Kind.INTERFACE_TYPE_DEFINITION
  } : node;
}
function alreadyExists(arr, other) {
  return !!arr.find((i) => i.name.value === other.name.value);
}
function mergeNamedTypeArray(first = [], second = [], config2 = {}) {
  const result = [...second, ...first.filter((d) => !alreadyExists(second, d))];
  if (config2 && config2.sort) {
    result.sort(compareNodes);
  }
  return result;
}
function mergeType(node, existingNode, config2) {
  if (existingNode) {
    try {
      return {
        name: node.name,
        description: node["description"] || existingNode["description"],
        kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "ObjectTypeDefinition" || existingNode.kind === "ObjectTypeDefinition" ? "ObjectTypeDefinition" : "ObjectTypeExtension",
        loc: node.loc,
        fields: mergeFields(node, node.fields, existingNode.fields, config2),
        directives: mergeDirectives(node.directives, existingNode.directives, config2),
        interfaces: mergeNamedTypeArray(node.interfaces, existingNode.interfaces, config2)
      };
    } catch (e) {
      throw new Error(`Unable to merge GraphQL type "${node.name.value}": ${e.message}`);
    }
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...node,
    kind: Kind.OBJECT_TYPE_DEFINITION
  } : node;
}
function mergeScalar(node, existingNode, config2) {
  if (existingNode) {
    return {
      name: node.name,
      description: node["description"] || existingNode["description"],
      kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || node.kind === "ScalarTypeDefinition" || existingNode.kind === "ScalarTypeDefinition" ? "ScalarTypeDefinition" : "ScalarTypeExtension",
      loc: node.loc,
      directives: mergeDirectives(node.directives, existingNode.directives, config2)
    };
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...node,
    kind: Kind.SCALAR_TYPE_DEFINITION
  } : node;
}
function mergeUnion(first, second, config2) {
  if (second) {
    return {
      name: first.name,
      description: first["description"] || second["description"],
      directives: mergeDirectives(first.directives, second.directives, config2),
      kind: (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) || first.kind === "UnionTypeDefinition" || second.kind === "UnionTypeDefinition" ? Kind.UNION_TYPE_DEFINITION : Kind.UNION_TYPE_EXTENSION,
      loc: first.loc,
      types: mergeNamedTypeArray(first.types, second.types, config2)
    };
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...first,
    kind: Kind.UNION_TYPE_DEFINITION
  } : first;
}
var DEFAULT_OPERATION_TYPE_NAME_MAP = {
  query: "Query",
  mutation: "Mutation",
  subscription: "Subscription"
};
function mergeOperationTypes(opNodeList = [], existingOpNodeList = []) {
  const finalOpNodeList = [];
  for (const opNodeType in DEFAULT_OPERATION_TYPE_NAME_MAP) {
    const opNode = opNodeList.find((n) => n.operation === opNodeType) || existingOpNodeList.find((n) => n.operation === opNodeType);
    if (opNode) {
      finalOpNodeList.push(opNode);
    }
  }
  return finalOpNodeList;
}
function mergeSchemaDefs(node, existingNode, config2) {
  if (existingNode) {
    return {
      kind: node.kind === Kind.SCHEMA_DEFINITION || existingNode.kind === Kind.SCHEMA_DEFINITION ? Kind.SCHEMA_DEFINITION : Kind.SCHEMA_EXTENSION,
      description: node["description"] || existingNode["description"],
      directives: mergeDirectives(node.directives, existingNode.directives, config2),
      operationTypes: mergeOperationTypes(node.operationTypes, existingNode.operationTypes)
    };
  }
  return (config2 === null || config2 === void 0 ? void 0 : config2.convertExtensions) ? {
    ...node,
    kind: Kind.SCHEMA_DEFINITION
  } : node;
}
var schemaDefSymbol = "SCHEMA_DEF_SYMBOL";
function isNamedDefinitionNode(definitionNode) {
  return "name" in definitionNode;
}
function mergeGraphQLNodes(nodes, config2) {
  var _a2, _b, _c;
  const mergedResultMap = {};
  for (const nodeDefinition of nodes) {
    if (isNamedDefinitionNode(nodeDefinition)) {
      const name = (_a2 = nodeDefinition.name) === null || _a2 === void 0 ? void 0 : _a2.value;
      if (config2 === null || config2 === void 0 ? void 0 : config2.commentDescriptions) {
        collectComment(nodeDefinition);
      }
      if (name == null) {
        continue;
      }
      if (((_b = config2 === null || config2 === void 0 ? void 0 : config2.exclusions) === null || _b === void 0 ? void 0 : _b.includes(name + ".*")) || ((_c = config2 === null || config2 === void 0 ? void 0 : config2.exclusions) === null || _c === void 0 ? void 0 : _c.includes(name))) {
        delete mergedResultMap[name];
      } else {
        switch (nodeDefinition.kind) {
          case Kind.OBJECT_TYPE_DEFINITION:
          case Kind.OBJECT_TYPE_EXTENSION:
            mergedResultMap[name] = mergeType(nodeDefinition, mergedResultMap[name], config2);
            break;
          case Kind.ENUM_TYPE_DEFINITION:
          case Kind.ENUM_TYPE_EXTENSION:
            mergedResultMap[name] = mergeEnum(nodeDefinition, mergedResultMap[name], config2);
            break;
          case Kind.UNION_TYPE_DEFINITION:
          case Kind.UNION_TYPE_EXTENSION:
            mergedResultMap[name] = mergeUnion(nodeDefinition, mergedResultMap[name], config2);
            break;
          case Kind.SCALAR_TYPE_DEFINITION:
          case Kind.SCALAR_TYPE_EXTENSION:
            mergedResultMap[name] = mergeScalar(nodeDefinition, mergedResultMap[name], config2);
            break;
          case Kind.INPUT_OBJECT_TYPE_DEFINITION:
          case Kind.INPUT_OBJECT_TYPE_EXTENSION:
            mergedResultMap[name] = mergeInputType(nodeDefinition, mergedResultMap[name], config2);
            break;
          case Kind.INTERFACE_TYPE_DEFINITION:
          case Kind.INTERFACE_TYPE_EXTENSION:
            mergedResultMap[name] = mergeInterface(nodeDefinition, mergedResultMap[name], config2);
            break;
          case Kind.DIRECTIVE_DEFINITION:
            mergedResultMap[name] = mergeDirective(nodeDefinition, mergedResultMap[name]);
            break;
        }
      }
    } else if (nodeDefinition.kind === Kind.SCHEMA_DEFINITION || nodeDefinition.kind === Kind.SCHEMA_EXTENSION) {
      mergedResultMap[schemaDefSymbol] = mergeSchemaDefs(nodeDefinition, mergedResultMap[schemaDefSymbol], config2);
    }
  }
  return mergedResultMap;
}
function mergeTypeDefs(typeSource, config2) {
  resetComments();
  const doc = {
    kind: Kind.DOCUMENT,
    definitions: mergeGraphQLTypes(typeSource, {
      useSchemaDefinition: true,
      forceSchemaDefinition: false,
      throwOnConflict: false,
      commentDescriptions: false,
      ...config2
    })
  };
  let result;
  if (config2 === null || config2 === void 0 ? void 0 : config2.commentDescriptions) {
    result = printWithComments(doc);
  } else {
    result = doc;
  }
  resetComments();
  return result;
}
function visitTypeSources(typeSource, options, allNodes = [], visitedTypeSources = /* @__PURE__ */ new Set()) {
  if (typeSource && !visitedTypeSources.has(typeSource)) {
    visitedTypeSources.add(typeSource);
    if (typeof typeSource === "function") {
      visitTypeSources(typeSource(), options, allNodes, visitedTypeSources);
    } else if (Array.isArray(typeSource)) {
      for (const type2 of typeSource) {
        visitTypeSources(type2, options, allNodes, visitedTypeSources);
      }
    } else if (isSchema(typeSource)) {
      const documentNode = getDocumentNodeFromSchema(typeSource, options);
      visitTypeSources(documentNode.definitions, options, allNodes, visitedTypeSources);
    } else if (isStringTypes(typeSource) || isSourceTypes(typeSource)) {
      const documentNode = parse(typeSource, options);
      visitTypeSources(documentNode.definitions, options, allNodes, visitedTypeSources);
    } else if (typeof typeSource === "object" && isDefinitionNode(typeSource)) {
      allNodes.push(typeSource);
    } else if (isDocumentNode(typeSource)) {
      visitTypeSources(typeSource.definitions, options, allNodes, visitedTypeSources);
    } else {
      throw new Error(`typeDefs must contain only strings, documents, schemas, or functions, got ${typeof typeSource}`);
    }
  }
  return allNodes;
}
function mergeGraphQLTypes(typeSource, config2) {
  var _a2, _b, _c;
  resetComments();
  const allNodes = visitTypeSources(typeSource, config2);
  const mergedNodes = mergeGraphQLNodes(allNodes, config2);
  if (config2 === null || config2 === void 0 ? void 0 : config2.useSchemaDefinition) {
    const schemaDef = mergedNodes[schemaDefSymbol] || {
      kind: Kind.SCHEMA_DEFINITION,
      operationTypes: []
    };
    const operationTypes = schemaDef.operationTypes;
    for (const opTypeDefNodeType in DEFAULT_OPERATION_TYPE_NAME_MAP) {
      const opTypeDefNode = operationTypes.find((operationType) => operationType.operation === opTypeDefNodeType);
      if (!opTypeDefNode) {
        const possibleRootTypeName = DEFAULT_OPERATION_TYPE_NAME_MAP[opTypeDefNodeType];
        const existingPossibleRootType = mergedNodes[possibleRootTypeName];
        if (existingPossibleRootType != null && existingPossibleRootType.name != null) {
          operationTypes.push({
            kind: Kind.OPERATION_TYPE_DEFINITION,
            type: {
              kind: Kind.NAMED_TYPE,
              name: existingPossibleRootType.name
            },
            operation: opTypeDefNodeType
          });
        }
      }
    }
    if (((_a2 = schemaDef === null || schemaDef === void 0 ? void 0 : schemaDef.operationTypes) === null || _a2 === void 0 ? void 0 : _a2.length) != null && schemaDef.operationTypes.length > 0) {
      mergedNodes[schemaDefSymbol] = schemaDef;
    }
  }
  if ((config2 === null || config2 === void 0 ? void 0 : config2.forceSchemaDefinition) && !((_c = (_b = mergedNodes[schemaDefSymbol]) === null || _b === void 0 ? void 0 : _b.operationTypes) === null || _c === void 0 ? void 0 : _c.length)) {
    mergedNodes[schemaDefSymbol] = {
      kind: Kind.SCHEMA_DEFINITION,
      operationTypes: [
        {
          kind: Kind.OPERATION_TYPE_DEFINITION,
          operation: "query",
          type: {
            kind: Kind.NAMED_TYPE,
            name: {
              kind: Kind.NAME,
              value: "Query"
            }
          }
        }
      ]
    };
  }
  const mergedNodeDefinitions = Object.values(mergedNodes);
  if (config2 === null || config2 === void 0 ? void 0 : config2.sort) {
    const sortFn = typeof config2.sort === "function" ? config2.sort : defaultStringComparator;
    mergedNodeDefinitions.sort((a, b) => {
      var _a3, _b2;
      return sortFn((_a3 = a.name) === null || _a3 === void 0 ? void 0 : _a3.value, (_b2 = b.name) === null || _b2 === void 0 ? void 0 : _b2.value);
    });
  }
  return mergedNodeDefinitions;
}
function mergeExtensions(extensions) {
  return mergeDeep(extensions);
}
function applyExtensionObject(obj, extensions) {
  if (!obj) {
    return;
  }
  obj.extensions = mergeDeep([obj.extensions || {}, extensions || {}]);
}
function applyExtensions(schema2, extensions) {
  applyExtensionObject(schema2, extensions.schemaExtensions);
  for (const [typeName, data] of Object.entries(extensions.types || {})) {
    const type2 = schema2.getType(typeName);
    if (type2) {
      applyExtensionObject(type2, data.extensions);
      if (data.type === "object" || data.type === "interface") {
        for (const [fieldName, fieldData] of Object.entries(data.fields)) {
          const field = type2.getFields()[fieldName];
          if (field) {
            applyExtensionObject(field, fieldData.extensions);
            for (const [arg, argData] of Object.entries(fieldData.arguments)) {
              applyExtensionObject(field.args.find((a) => a.name === arg), argData);
            }
          }
        }
      } else if (data.type === "input") {
        for (const [fieldName, fieldData] of Object.entries(data.fields)) {
          const field = type2.getFields()[fieldName];
          applyExtensionObject(field, fieldData.extensions);
        }
      } else if (data.type === "enum") {
        for (const [valueName, valueData] of Object.entries(data.values)) {
          const value = type2.getValue(valueName);
          applyExtensionObject(value, valueData);
        }
      }
    }
  }
  return schema2;
}

// node_modules/@graphql-tools/schema/index.mjs
function assertResolversPresent(schema2, resolverValidationOptions = {}) {
  const { requireResolversForArgs, requireResolversForNonScalar, requireResolversForAllFields } = resolverValidationOptions;
  if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {
    throw new TypeError("requireResolversForAllFields takes precedence over the more specific assertions. Please configure either requireResolversForAllFields or requireResolversForArgs / requireResolversForNonScalar, but not a combination of them.");
  }
  forEachField(schema2, (field, typeName, fieldName) => {
    if (requireResolversForAllFields) {
      expectResolver("requireResolversForAllFields", requireResolversForAllFields, field, typeName, fieldName);
    }
    if (requireResolversForArgs && field.args.length > 0) {
      expectResolver("requireResolversForArgs", requireResolversForArgs, field, typeName, fieldName);
    }
    if (requireResolversForNonScalar !== "ignore" && !isScalarType(getNamedType(field.type))) {
      expectResolver("requireResolversForNonScalar", requireResolversForNonScalar, field, typeName, fieldName);
    }
  });
}
function expectResolver(validator, behavior, field, typeName, fieldName) {
  if (!field.resolve) {
    const message = `Resolver missing for "${typeName}.${fieldName}".
To disable this validator, use:
  resolverValidationOptions: {
    ${validator}: 'ignore'
  }`;
    if (behavior === "error") {
      throw new Error(message);
    }
    if (behavior === "warn") {
      console.warn(message);
    }
    return;
  }
  if (typeof field.resolve !== "function") {
    throw new Error(`Resolver "${typeName}.${fieldName}" must be a function`);
  }
}
function checkForResolveTypeResolver(schema2, requireResolversForResolveType) {
  mapSchema(schema2, {
    [MapperKind.ABSTRACT_TYPE]: (type2) => {
      if (!type2.resolveType) {
        const message = `Type "${type2.name}" is missing a "__resolveType" resolver. Pass 'ignore' into "resolverValidationOptions.requireResolversForResolveType" to disable this error.`;
        if (requireResolversForResolveType === "error") {
          throw new Error(message);
        }
        if (requireResolversForResolveType === "warn") {
          console.warn(message);
        }
      }
      return void 0;
    }
  });
}
function extendResolversFromInterfaces(schema2, resolvers) {
  const extendedResolvers = {};
  const typeMap = schema2.getTypeMap();
  for (const typeName in typeMap) {
    const type2 = typeMap[typeName];
    if ("getInterfaces" in type2) {
      extendedResolvers[typeName] = {};
      for (const iFace of type2.getInterfaces()) {
        if (resolvers[iFace.name]) {
          for (const fieldName in resolvers[iFace.name]) {
            if (fieldName === "__isTypeOf" || !fieldName.startsWith("__")) {
              extendedResolvers[typeName][fieldName] = resolvers[iFace.name][fieldName];
            }
          }
        }
      }
      const typeResolvers = resolvers[typeName];
      extendedResolvers[typeName] = {
        ...extendedResolvers[typeName],
        ...typeResolvers
      };
    } else {
      const typeResolvers = resolvers[typeName];
      if (typeResolvers != null) {
        extendedResolvers[typeName] = typeResolvers;
      }
    }
  }
  return extendedResolvers;
}
function addResolversToSchema(schemaOrOptions, legacyInputResolvers, legacyInputValidationOptions) {
  const options = isSchema(schemaOrOptions) ? {
    schema: schemaOrOptions,
    resolvers: legacyInputResolvers !== null && legacyInputResolvers !== void 0 ? legacyInputResolvers : {},
    resolverValidationOptions: legacyInputValidationOptions
  } : schemaOrOptions;
  let { schema: schema2, resolvers: inputResolvers, defaultFieldResolver: defaultFieldResolver3, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false } = options;
  const { requireResolversToMatchSchema = "error", requireResolversForResolveType } = resolverValidationOptions;
  const resolvers = inheritResolversFromInterfaces ? extendResolversFromInterfaces(schema2, inputResolvers) : inputResolvers;
  for (const typeName in resolvers) {
    const resolverValue = resolvers[typeName];
    const resolverType = typeof resolverValue;
    if (resolverType !== "object") {
      throw new Error(`"${typeName}" defined in resolvers, but has invalid value "${resolverValue}". The resolver's value must be of type object.`);
    }
    const type2 = schema2.getType(typeName);
    if (type2 == null) {
      if (requireResolversToMatchSchema === "ignore") {
        continue;
      }
      throw new Error(`"${typeName}" defined in resolvers, but not in schema`);
    } else if (isSpecifiedScalarType(type2)) {
      for (const fieldName in resolverValue) {
        if (fieldName.startsWith("__")) {
          type2[fieldName.substring(2)] = resolverValue[fieldName];
        } else {
          type2[fieldName] = resolverValue[fieldName];
        }
      }
    } else if (isEnumType(type2)) {
      const values = type2.getValues();
      for (const fieldName in resolverValue) {
        if (!fieldName.startsWith("__") && !values.some((value) => value.name === fieldName) && requireResolversToMatchSchema && requireResolversToMatchSchema !== "ignore") {
          throw new Error(`${type2.name}.${fieldName} was defined in resolvers, but not present within ${type2.name}`);
        }
      }
    } else if (isUnionType(type2)) {
      for (const fieldName in resolverValue) {
        if (!fieldName.startsWith("__") && requireResolversToMatchSchema && requireResolversToMatchSchema !== "ignore") {
          throw new Error(`${type2.name}.${fieldName} was defined in resolvers, but ${type2.name} is not an object or interface type`);
        }
      }
    } else if (isObjectType(type2) || isInterfaceType(type2)) {
      for (const fieldName in resolverValue) {
        if (!fieldName.startsWith("__")) {
          const fields = type2.getFields();
          const field = fields[fieldName];
          if (field == null) {
            if (requireResolversToMatchSchema && requireResolversToMatchSchema !== "ignore") {
              throw new Error(`${typeName}.${fieldName} defined in resolvers, but not in schema`);
            }
          } else {
            const fieldResolve = resolverValue[fieldName];
            if (typeof fieldResolve !== "function" && typeof fieldResolve !== "object") {
              throw new Error(`Resolver ${typeName}.${fieldName} must be object or function`);
            }
          }
        }
      }
    }
  }
  schema2 = updateResolversInPlace ? addResolversToExistingSchema(schema2, resolvers, defaultFieldResolver3) : createNewSchemaWithResolvers(schema2, resolvers, defaultFieldResolver3);
  if (requireResolversForResolveType && requireResolversForResolveType !== "ignore") {
    checkForResolveTypeResolver(schema2, requireResolversForResolveType);
  }
  return schema2;
}
function addResolversToExistingSchema(schema2, resolvers, defaultFieldResolver3) {
  var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
  const typeMap = schema2.getTypeMap();
  for (const typeName in resolvers) {
    const type2 = schema2.getType(typeName);
    const resolverValue = resolvers[typeName];
    if (isScalarType(type2)) {
      for (const fieldName in resolverValue) {
        if (fieldName.startsWith("__")) {
          type2[fieldName.substring(2)] = resolverValue[fieldName];
        } else if (fieldName === "astNode" && type2.astNode != null) {
          type2.astNode = {
            ...type2.astNode,
            description: (_b = (_a2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : type2.astNode.description,
            directives: ((_c = type2.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : [])
          };
        } else if (fieldName === "extensionASTNodes" && type2.extensionASTNodes != null) {
          type2.extensionASTNodes = type2.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);
        } else if (fieldName === "extensions" && type2.extensions != null && resolverValue.extensions != null) {
          type2.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type2.extensions, resolverValue.extensions);
        } else {
          type2[fieldName] = resolverValue[fieldName];
        }
      }
    } else if (isEnumType(type2)) {
      const config2 = type2.toConfig();
      const enumValueConfigMap = config2.values;
      for (const fieldName in resolverValue) {
        if (fieldName.startsWith("__")) {
          config2[fieldName.substring(2)] = resolverValue[fieldName];
        } else if (fieldName === "astNode" && config2.astNode != null) {
          config2.astNode = {
            ...config2.astNode,
            description: (_h = (_g = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _g === void 0 ? void 0 : _g.description) !== null && _h !== void 0 ? _h : config2.astNode.description,
            directives: ((_j = config2.astNode.directives) !== null && _j !== void 0 ? _j : []).concat((_l = (_k = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _k === void 0 ? void 0 : _k.directives) !== null && _l !== void 0 ? _l : [])
          };
        } else if (fieldName === "extensionASTNodes" && config2.extensionASTNodes != null) {
          config2.extensionASTNodes = config2.extensionASTNodes.concat((_m = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _m !== void 0 ? _m : []);
        } else if (fieldName === "extensions" && type2.extensions != null && resolverValue.extensions != null) {
          type2.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type2.extensions, resolverValue.extensions);
        } else if (enumValueConfigMap[fieldName]) {
          enumValueConfigMap[fieldName].value = resolverValue[fieldName];
        }
      }
      typeMap[typeName] = new GraphQLEnumType(config2);
    } else if (isUnionType(type2)) {
      for (const fieldName in resolverValue) {
        if (fieldName.startsWith("__")) {
          type2[fieldName.substring(2)] = resolverValue[fieldName];
        }
      }
    } else if (isObjectType(type2) || isInterfaceType(type2)) {
      for (const fieldName in resolverValue) {
        if (fieldName.startsWith("__")) {
          type2[fieldName.substring(2)] = resolverValue[fieldName];
          continue;
        }
        const fields = type2.getFields();
        const field = fields[fieldName];
        if (field != null) {
          const fieldResolve = resolverValue[fieldName];
          if (typeof fieldResolve === "function") {
            field.resolve = fieldResolve.bind(resolverValue);
          } else {
            setFieldProperties(field, fieldResolve);
          }
        }
      }
    }
  }
  forEachDefaultValue(schema2, serializeInputValue);
  healSchema(schema2);
  forEachDefaultValue(schema2, parseInputValue);
  if (defaultFieldResolver3 != null) {
    forEachField(schema2, (field) => {
      if (!field.resolve) {
        field.resolve = defaultFieldResolver3;
      }
    });
  }
  return schema2;
}
function createNewSchemaWithResolvers(schema2, resolvers, defaultFieldResolver3) {
  schema2 = mapSchema(schema2, {
    [MapperKind.SCALAR_TYPE]: (type2) => {
      var _a2, _b, _c, _d, _e, _f;
      const config2 = type2.toConfig();
      const resolverValue = resolvers[type2.name];
      if (!isSpecifiedScalarType(type2) && resolverValue != null) {
        for (const fieldName in resolverValue) {
          if (fieldName.startsWith("__")) {
            config2[fieldName.substring(2)] = resolverValue[fieldName];
          } else if (fieldName === "astNode" && config2.astNode != null) {
            config2.astNode = {
              ...config2.astNode,
              description: (_b = (_a2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : config2.astNode.description,
              directives: ((_c = config2.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : [])
            };
          } else if (fieldName === "extensionASTNodes" && config2.extensionASTNodes != null) {
            config2.extensionASTNodes = config2.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);
          } else if (fieldName === "extensions" && config2.extensions != null && resolverValue.extensions != null) {
            config2.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type2.extensions, resolverValue.extensions);
          } else {
            config2[fieldName] = resolverValue[fieldName];
          }
        }
        return new GraphQLScalarType(config2);
      }
    },
    [MapperKind.ENUM_TYPE]: (type2) => {
      var _a2, _b, _c, _d, _e, _f;
      const resolverValue = resolvers[type2.name];
      const config2 = type2.toConfig();
      const enumValueConfigMap = config2.values;
      if (resolverValue != null) {
        for (const fieldName in resolverValue) {
          if (fieldName.startsWith("__")) {
            config2[fieldName.substring(2)] = resolverValue[fieldName];
          } else if (fieldName === "astNode" && config2.astNode != null) {
            config2.astNode = {
              ...config2.astNode,
              description: (_b = (_a2 = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a2 === void 0 ? void 0 : _a2.description) !== null && _b !== void 0 ? _b : config2.astNode.description,
              directives: ((_c = config2.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : [])
            };
          } else if (fieldName === "extensionASTNodes" && config2.extensionASTNodes != null) {
            config2.extensionASTNodes = config2.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);
          } else if (fieldName === "extensions" && config2.extensions != null && resolverValue.extensions != null) {
            config2.extensions = Object.assign(/* @__PURE__ */ Object.create(null), type2.extensions, resolverValue.extensions);
          } else if (enumValueConfigMap[fieldName]) {
            enumValueConfigMap[fieldName].value = resolverValue[fieldName];
          }
        }
        return new GraphQLEnumType(config2);
      }
    },
    [MapperKind.UNION_TYPE]: (type2) => {
      const resolverValue = resolvers[type2.name];
      if (resolverValue != null) {
        const config2 = type2.toConfig();
        if (resolverValue["__resolveType"]) {
          config2.resolveType = resolverValue["__resolveType"];
        }
        return new GraphQLUnionType(config2);
      }
    },
    [MapperKind.OBJECT_TYPE]: (type2) => {
      const resolverValue = resolvers[type2.name];
      if (resolverValue != null) {
        const config2 = type2.toConfig();
        if (resolverValue["__isTypeOf"]) {
          config2.isTypeOf = resolverValue["__isTypeOf"];
        }
        return new GraphQLObjectType(config2);
      }
    },
    [MapperKind.INTERFACE_TYPE]: (type2) => {
      const resolverValue = resolvers[type2.name];
      if (resolverValue != null) {
        const config2 = type2.toConfig();
        if (resolverValue["__resolveType"]) {
          config2.resolveType = resolverValue["__resolveType"];
        }
        return new GraphQLInterfaceType(config2);
      }
    },
    [MapperKind.COMPOSITE_FIELD]: (fieldConfig, fieldName, typeName) => {
      const resolverValue = resolvers[typeName];
      if (resolverValue != null) {
        const fieldResolve = resolverValue[fieldName];
        if (fieldResolve != null) {
          const newFieldConfig = { ...fieldConfig };
          if (typeof fieldResolve === "function") {
            newFieldConfig.resolve = fieldResolve.bind(resolverValue);
          } else {
            setFieldProperties(newFieldConfig, fieldResolve);
          }
          return newFieldConfig;
        }
      }
    }
  });
  if (defaultFieldResolver3 != null) {
    schema2 = mapSchema(schema2, {
      [MapperKind.OBJECT_FIELD]: (fieldConfig) => ({
        ...fieldConfig,
        resolve: fieldConfig.resolve != null ? fieldConfig.resolve : defaultFieldResolver3
      })
    });
  }
  return schema2;
}
function setFieldProperties(field, propertiesObj) {
  for (const propertyName in propertiesObj) {
    field[propertyName] = propertiesObj[propertyName];
  }
}
function makeExecutableSchema({ typeDefs, resolvers = {}, resolverValidationOptions = {}, parseOptions = {}, inheritResolversFromInterfaces = false, pruningOptions, updateResolversInPlace = false, schemaExtensions }) {
  if (typeof resolverValidationOptions !== "object") {
    throw new Error("Expected `resolverValidationOptions` to be an object");
  }
  if (!typeDefs) {
    throw new Error("Must provide typeDefs");
  }
  let schema2;
  if (isSchema(typeDefs)) {
    schema2 = typeDefs;
  } else if (parseOptions === null || parseOptions === void 0 ? void 0 : parseOptions.commentDescriptions) {
    const mergedTypeDefs = mergeTypeDefs(typeDefs, {
      ...parseOptions,
      commentDescriptions: true
    });
    schema2 = buildSchema(mergedTypeDefs, parseOptions);
  } else {
    const mergedTypeDefs = mergeTypeDefs(typeDefs, parseOptions);
    schema2 = buildASTSchema(mergedTypeDefs, parseOptions);
  }
  if (pruningOptions) {
    schema2 = pruneSchema(schema2);
  }
  schema2 = addResolversToSchema({
    schema: schema2,
    resolvers: mergeResolvers(resolvers),
    resolverValidationOptions,
    inheritResolversFromInterfaces,
    updateResolversInPlace
  });
  if (Object.keys(resolverValidationOptions).length > 0) {
    assertResolversPresent(schema2, resolverValidationOptions);
  }
  if (schemaExtensions) {
    schemaExtensions = mergeExtensions(asArray(schemaExtensions));
    applyExtensions(schema2, schemaExtensions);
  }
  return schema2;
}

// node_modules/@graphql-yoga/common/index.mjs
var import_cross_undici_fetch = __toESM(require_global_ponyfill(), 1);

// node_modules/dset/dist/index.mjs
init_virtual_process_polyfill();
init_buffer();
function dset(obj, keys, val) {
  keys.split && (keys = keys.split("."));
  var i = 0, l = keys.length, t = obj, x, k;
  while (i < l) {
    k = keys[i++];
    if (k === "__proto__" || k === "constructor" || k === "prototype")
      break;
    t = t[k] = i === l ? val : typeof (x = t[k]) === typeof keys ? x : keys[i] * 0 !== 0 || !!~("" + keys[i]).indexOf(".") ? {} : [];
  }
}

// node_modules/@graphql-yoga/subscription/index.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/@repeaterjs/repeater/repeater.js
init_virtual_process_polyfill();
init_buffer();
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P || (P = Promise))(function(resolve2, reject3) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject3(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject3(e);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject3) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject3(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
var RepeaterOverflowError = function(_super) {
  __extends(RepeaterOverflowError3, _super);
  function RepeaterOverflowError3(message) {
    var _this = _super.call(this, message) || this;
    Object.defineProperty(_this, "name", {
      value: "RepeaterOverflowError",
      enumerable: false
    });
    if (typeof Object.setPrototypeOf === "function") {
      Object.setPrototypeOf(_this, _this.constructor.prototype);
    } else {
      _this.__proto__ = _this.constructor.prototype;
    }
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(_this, _this.constructor);
    }
    return _this;
  }
  return RepeaterOverflowError3;
}(Error);
var FixedBuffer = function() {
  function FixedBuffer2(capacity) {
    if (capacity < 0) {
      throw new RangeError("Capacity may not be less than 0");
    }
    this._c = capacity;
    this._q = [];
  }
  Object.defineProperty(FixedBuffer2.prototype, "empty", {
    get: function() {
      return this._q.length === 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FixedBuffer2.prototype, "full", {
    get: function() {
      return this._q.length >= this._c;
    },
    enumerable: false,
    configurable: true
  });
  FixedBuffer2.prototype.add = function(value) {
    if (this.full) {
      throw new Error("Buffer full");
    } else {
      this._q.push(value);
    }
  };
  FixedBuffer2.prototype.remove = function() {
    if (this.empty) {
      throw new Error("Buffer empty");
    }
    return this._q.shift();
  };
  return FixedBuffer2;
}();
var SlidingBuffer = function() {
  function SlidingBuffer2(capacity) {
    if (capacity < 1) {
      throw new RangeError("Capacity may not be less than 1");
    }
    this._c = capacity;
    this._q = [];
  }
  Object.defineProperty(SlidingBuffer2.prototype, "empty", {
    get: function() {
      return this._q.length === 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(SlidingBuffer2.prototype, "full", {
    get: function() {
      return false;
    },
    enumerable: false,
    configurable: true
  });
  SlidingBuffer2.prototype.add = function(value) {
    while (this._q.length >= this._c) {
      this._q.shift();
    }
    this._q.push(value);
  };
  SlidingBuffer2.prototype.remove = function() {
    if (this.empty) {
      throw new Error("Buffer empty");
    }
    return this._q.shift();
  };
  return SlidingBuffer2;
}();
var DroppingBuffer = function() {
  function DroppingBuffer2(capacity) {
    if (capacity < 1) {
      throw new RangeError("Capacity may not be less than 1");
    }
    this._c = capacity;
    this._q = [];
  }
  Object.defineProperty(DroppingBuffer2.prototype, "empty", {
    get: function() {
      return this._q.length === 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DroppingBuffer2.prototype, "full", {
    get: function() {
      return false;
    },
    enumerable: false,
    configurable: true
  });
  DroppingBuffer2.prototype.add = function(value) {
    if (this._q.length < this._c) {
      this._q.push(value);
    }
  };
  DroppingBuffer2.prototype.remove = function() {
    if (this.empty) {
      throw new Error("Buffer empty");
    }
    return this._q.shift();
  };
  return DroppingBuffer2;
}();
function swallow(value) {
  if (value != null && typeof value.then === "function") {
    value.then(NOOP, NOOP);
  }
}
var Initial = 0;
var Started = 1;
var Stopped = 2;
var Done = 3;
var Rejected = 4;
var MAX_QUEUE_LENGTH = 1024;
var NOOP = function() {
};
function consumeExecution(r) {
  var err = r.err;
  var execution = Promise.resolve(r.execution).then(function(value) {
    if (err != null) {
      throw err;
    }
    return value;
  });
  r.err = void 0;
  r.execution = execution.then(function() {
    return void 0;
  }, function() {
    return void 0;
  });
  return r.pending === void 0 ? execution : r.pending.then(function() {
    return execution;
  });
}
function createIteration(r, value) {
  var done = r.state >= Done;
  return Promise.resolve(value).then(function(value2) {
    if (!done && r.state >= Rejected) {
      return consumeExecution(r).then(function(value3) {
        return {
          value: value3,
          done: true
        };
      });
    }
    return { value: value2, done };
  });
}
function stop(r, err) {
  var e_1, _a2;
  if (r.state >= Stopped) {
    return;
  }
  r.state = Stopped;
  r.onnext();
  r.onstop();
  if (r.err == null) {
    r.err = err;
  }
  if (r.pushes.length === 0 && (typeof r.buffer === "undefined" || r.buffer.empty)) {
    finish(r);
  } else {
    try {
      for (var _b = __values(r.pushes), _d = _b.next(); !_d.done; _d = _b.next()) {
        var push_1 = _d.value;
        push_1.resolve();
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_d && !_d.done && (_a2 = _b.return))
          _a2.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
}
function finish(r) {
  var e_2, _a2;
  if (r.state >= Done) {
    return;
  }
  if (r.state < Stopped) {
    stop(r);
  }
  r.state = Done;
  r.buffer = void 0;
  try {
    for (var _b = __values(r.nexts), _d = _b.next(); !_d.done; _d = _b.next()) {
      var next = _d.value;
      var execution = r.pending === void 0 ? consumeExecution(r) : r.pending.then(function() {
        return consumeExecution(r);
      });
      next.resolve(createIteration(r, execution));
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (_d && !_d.done && (_a2 = _b.return))
        _a2.call(_b);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
  r.pushes = [];
  r.nexts = [];
}
function reject(r) {
  if (r.state >= Rejected) {
    return;
  }
  if (r.state < Done) {
    finish(r);
  }
  r.state = Rejected;
}
function push(r, value) {
  swallow(value);
  if (r.pushes.length >= MAX_QUEUE_LENGTH) {
    throw new RepeaterOverflowError("No more than " + MAX_QUEUE_LENGTH + " pending calls to push are allowed on a single repeater.");
  } else if (r.state >= Stopped) {
    return Promise.resolve(void 0);
  }
  var valueP = r.pending === void 0 ? Promise.resolve(value) : r.pending.then(function() {
    return value;
  });
  valueP = valueP.catch(function(err) {
    if (r.state < Stopped) {
      r.err = err;
    }
    reject(r);
    return void 0;
  });
  var nextP;
  if (r.nexts.length) {
    var next_1 = r.nexts.shift();
    next_1.resolve(createIteration(r, valueP));
    if (r.nexts.length) {
      nextP = Promise.resolve(r.nexts[0].value);
    } else {
      nextP = new Promise(function(resolve2) {
        return r.onnext = resolve2;
      });
    }
  } else if (typeof r.buffer !== "undefined" && !r.buffer.full) {
    r.buffer.add(valueP);
    nextP = Promise.resolve(void 0);
  } else {
    nextP = new Promise(function(resolve2) {
      return r.pushes.push({ resolve: resolve2, value: valueP });
    });
  }
  var floating = true;
  var next = {};
  var unhandled = nextP.catch(function(err) {
    if (floating) {
      throw err;
    }
    return void 0;
  });
  next.then = function(onfulfilled, onrejected) {
    floating = false;
    return Promise.prototype.then.call(nextP, onfulfilled, onrejected);
  };
  next.catch = function(onrejected) {
    floating = false;
    return Promise.prototype.catch.call(nextP, onrejected);
  };
  next.finally = nextP.finally.bind(nextP);
  r.pending = valueP.then(function() {
    return unhandled;
  }).catch(function(err) {
    r.err = err;
    reject(r);
  });
  return next;
}
function createStop(r) {
  var stop1 = stop.bind(null, r);
  var stopP = new Promise(function(resolve2) {
    return r.onstop = resolve2;
  });
  stop1.then = stopP.then.bind(stopP);
  stop1.catch = stopP.catch.bind(stopP);
  stop1.finally = stopP.finally.bind(stopP);
  return stop1;
}
function execute2(r) {
  if (r.state >= Started) {
    return;
  }
  r.state = Started;
  var push1 = push.bind(null, r);
  var stop1 = createStop(r);
  r.execution = new Promise(function(resolve2) {
    return resolve2(r.executor(push1, stop1));
  });
  r.execution.catch(function() {
    return stop(r);
  });
}
var records = /* @__PURE__ */ new WeakMap();
var Repeater = function() {
  function Repeater3(executor, buffer) {
    records.set(this, {
      executor,
      buffer,
      err: void 0,
      state: Initial,
      pushes: [],
      nexts: [],
      pending: void 0,
      execution: void 0,
      onnext: NOOP,
      onstop: NOOP
    });
  }
  Repeater3.prototype.next = function(value) {
    swallow(value);
    var r = records.get(this);
    if (r === void 0) {
      throw new Error("WeakMap error");
    }
    if (r.nexts.length >= MAX_QUEUE_LENGTH) {
      throw new RepeaterOverflowError("No more than " + MAX_QUEUE_LENGTH + " pending calls to next are allowed on a single repeater.");
    }
    if (r.state <= Initial) {
      execute2(r);
    }
    r.onnext(value);
    if (typeof r.buffer !== "undefined" && !r.buffer.empty) {
      var result = createIteration(r, r.buffer.remove());
      if (r.pushes.length) {
        var push_2 = r.pushes.shift();
        r.buffer.add(push_2.value);
        r.onnext = push_2.resolve;
      }
      return result;
    } else if (r.pushes.length) {
      var push_3 = r.pushes.shift();
      r.onnext = push_3.resolve;
      return createIteration(r, push_3.value);
    } else if (r.state >= Stopped) {
      finish(r);
      return createIteration(r, consumeExecution(r));
    }
    return new Promise(function(resolve2) {
      return r.nexts.push({ resolve: resolve2, value });
    });
  };
  Repeater3.prototype.return = function(value) {
    swallow(value);
    var r = records.get(this);
    if (r === void 0) {
      throw new Error("WeakMap error");
    }
    finish(r);
    r.execution = Promise.resolve(r.execution).then(function() {
      return value;
    });
    return createIteration(r, consumeExecution(r));
  };
  Repeater3.prototype.throw = function(err) {
    var r = records.get(this);
    if (r === void 0) {
      throw new Error("WeakMap error");
    }
    if (r.state <= Initial || r.state >= Stopped || typeof r.buffer !== "undefined" && !r.buffer.empty) {
      finish(r);
      if (r.err == null) {
        r.err = err;
      }
      return createIteration(r, consumeExecution(r));
    }
    return this.next(Promise.reject(err));
  };
  Repeater3.prototype[Symbol.asyncIterator] = function() {
    return this;
  };
  Repeater3.race = race;
  Repeater3.merge = merge;
  Repeater3.zip = zip;
  Repeater3.latest = latest;
  return Repeater3;
}();
function getIterators(values, options) {
  var e_3, _a2;
  var iters = [];
  var _loop_1 = function(value2) {
    if (value2 != null && typeof value2[Symbol.asyncIterator] === "function") {
      iters.push(value2[Symbol.asyncIterator]());
    } else if (value2 != null && typeof value2[Symbol.iterator] === "function") {
      iters.push(value2[Symbol.iterator]());
    } else {
      iters.push(function valueToAsyncIterator() {
        return __asyncGenerator(this, arguments, function valueToAsyncIterator_1() {
          return __generator(this, function(_a3) {
            switch (_a3.label) {
              case 0:
                if (!options.yieldValues)
                  return [3, 3];
                return [4, __await(value2)];
              case 1:
                return [4, _a3.sent()];
              case 2:
                _a3.sent();
                _a3.label = 3;
              case 3:
                if (!options.returnValues)
                  return [3, 5];
                return [4, __await(value2)];
              case 4:
                return [2, _a3.sent()];
              case 5:
                return [2];
            }
          });
        });
      }());
    }
  };
  try {
    for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
      var value = values_1_1.value;
      _loop_1(value);
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (values_1_1 && !values_1_1.done && (_a2 = values_1.return))
        _a2.call(values_1);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
  return iters;
}
function race(contenders) {
  var _this = this;
  var iters = getIterators(contenders, { returnValues: true });
  return new Repeater(function(push3, stop3) {
    return __awaiter(_this, void 0, void 0, function() {
      var advance, stopped, finalIteration, iteration, i_1, _loop_2;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!iters.length) {
              stop3();
              return [2];
            }
            stopped = false;
            stop3.then(function() {
              advance();
              stopped = true;
            });
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, , 5, 7]);
            iteration = void 0;
            i_1 = 0;
            _loop_2 = function() {
              var j, iters_1, iters_1_1, iter;
              var e_4, _a3;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    j = i_1;
                    try {
                      for (iters_1 = (e_4 = void 0, __values(iters)), iters_1_1 = iters_1.next(); !iters_1_1.done; iters_1_1 = iters_1.next()) {
                        iter = iters_1_1.value;
                        Promise.resolve(iter.next()).then(function(iteration2) {
                          if (iteration2.done) {
                            stop3();
                            if (finalIteration === void 0) {
                              finalIteration = iteration2;
                            }
                          } else if (i_1 === j) {
                            i_1++;
                            advance(iteration2);
                          }
                        }, function(err) {
                          return stop3(err);
                        });
                      }
                    } catch (e_4_1) {
                      e_4 = { error: e_4_1 };
                    } finally {
                      try {
                        if (iters_1_1 && !iters_1_1.done && (_a3 = iters_1.return))
                          _a3.call(iters_1);
                      } finally {
                        if (e_4)
                          throw e_4.error;
                      }
                    }
                    return [4, new Promise(function(resolve2) {
                      return advance = resolve2;
                    })];
                  case 1:
                    iteration = _b.sent();
                    if (!(iteration !== void 0))
                      return [3, 3];
                    return [4, push3(iteration.value)];
                  case 2:
                    _b.sent();
                    _b.label = 3;
                  case 3:
                    return [2];
                }
              });
            };
            _a2.label = 2;
          case 2:
            if (!!stopped)
              return [3, 4];
            return [5, _loop_2()];
          case 3:
            _a2.sent();
            return [3, 2];
          case 4:
            return [2, finalIteration && finalIteration.value];
          case 5:
            stop3();
            return [4, Promise.race(iters.map(function(iter) {
              return iter.return && iter.return();
            }))];
          case 6:
            _a2.sent();
            return [7];
          case 7:
            return [2];
        }
      });
    });
  });
}
function merge(contenders) {
  var _this = this;
  var iters = getIterators(contenders, { yieldValues: true });
  return new Repeater(function(push3, stop3) {
    return __awaiter(_this, void 0, void 0, function() {
      var advances, stopped, finalIteration;
      var _this2 = this;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!iters.length) {
              stop3();
              return [2];
            }
            advances = [];
            stopped = false;
            stop3.then(function() {
              var e_5, _a3;
              stopped = true;
              try {
                for (var advances_1 = __values(advances), advances_1_1 = advances_1.next(); !advances_1_1.done; advances_1_1 = advances_1.next()) {
                  var advance = advances_1_1.value;
                  advance();
                }
              } catch (e_5_1) {
                e_5 = { error: e_5_1 };
              } finally {
                try {
                  if (advances_1_1 && !advances_1_1.done && (_a3 = advances_1.return))
                    _a3.call(advances_1);
                } finally {
                  if (e_5)
                    throw e_5.error;
                }
              }
            });
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, , 3, 4]);
            return [4, Promise.all(iters.map(function(iter, i) {
              return __awaiter(_this2, void 0, void 0, function() {
                var iteration, _a3;
                return __generator(this, function(_b) {
                  switch (_b.label) {
                    case 0:
                      _b.trys.push([0, , 6, 9]);
                      _b.label = 1;
                    case 1:
                      if (!!stopped)
                        return [3, 5];
                      Promise.resolve(iter.next()).then(function(iteration2) {
                        return advances[i](iteration2);
                      }, function(err) {
                        return stop3(err);
                      });
                      return [4, new Promise(function(resolve2) {
                        advances[i] = resolve2;
                      })];
                    case 2:
                      iteration = _b.sent();
                      if (!(iteration !== void 0))
                        return [3, 4];
                      if (iteration.done) {
                        finalIteration = iteration;
                        return [2];
                      }
                      return [4, push3(iteration.value)];
                    case 3:
                      _b.sent();
                      _b.label = 4;
                    case 4:
                      return [3, 1];
                    case 5:
                      return [3, 9];
                    case 6:
                      _a3 = iter.return;
                      if (!_a3)
                        return [3, 8];
                      return [4, iter.return()];
                    case 7:
                      _a3 = _b.sent();
                      _b.label = 8;
                    case 8:
                      return [7];
                    case 9:
                      return [2];
                  }
                });
              });
            }))];
          case 2:
            _a2.sent();
            return [2, finalIteration && finalIteration.value];
          case 3:
            stop3();
            return [7];
          case 4:
            return [2];
        }
      });
    });
  });
}
function zip(contenders) {
  var _this = this;
  var iters = getIterators(contenders, { returnValues: true });
  return new Repeater(function(push3, stop3) {
    return __awaiter(_this, void 0, void 0, function() {
      var advance, stopped, iterations, values;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!iters.length) {
              stop3();
              return [2, []];
            }
            stopped = false;
            stop3.then(function() {
              advance();
              stopped = true;
            });
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, , 6, 8]);
            _a2.label = 2;
          case 2:
            if (!!stopped)
              return [3, 5];
            Promise.all(iters.map(function(iter) {
              return iter.next();
            })).then(function(iterations2) {
              return advance(iterations2);
            }, function(err) {
              return stop3(err);
            });
            return [4, new Promise(function(resolve2) {
              return advance = resolve2;
            })];
          case 3:
            iterations = _a2.sent();
            if (iterations === void 0) {
              return [2];
            }
            values = iterations.map(function(iteration) {
              return iteration.value;
            });
            if (iterations.some(function(iteration) {
              return iteration.done;
            })) {
              return [2, values];
            }
            return [4, push3(values)];
          case 4:
            _a2.sent();
            return [3, 2];
          case 5:
            return [3, 8];
          case 6:
            stop3();
            return [4, Promise.all(iters.map(function(iter) {
              return iter.return && iter.return();
            }))];
          case 7:
            _a2.sent();
            return [7];
          case 8:
            return [2];
        }
      });
    });
  });
}
function latest(contenders) {
  var _this = this;
  var iters = getIterators(contenders, {
    yieldValues: true,
    returnValues: true
  });
  return new Repeater(function(push3, stop3) {
    return __awaiter(_this, void 0, void 0, function() {
      var advance, advances, stopped, iterations_1, values_2;
      var _this2 = this;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!iters.length) {
              stop3();
              return [2, []];
            }
            advances = [];
            stopped = false;
            stop3.then(function() {
              var e_6, _a3;
              advance();
              try {
                for (var advances_2 = __values(advances), advances_2_1 = advances_2.next(); !advances_2_1.done; advances_2_1 = advances_2.next()) {
                  var advance1 = advances_2_1.value;
                  advance1();
                }
              } catch (e_6_1) {
                e_6 = { error: e_6_1 };
              } finally {
                try {
                  if (advances_2_1 && !advances_2_1.done && (_a3 = advances_2.return))
                    _a3.call(advances_2);
                } finally {
                  if (e_6)
                    throw e_6.error;
                }
              }
              stopped = true;
            });
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, , 5, 7]);
            Promise.all(iters.map(function(iter) {
              return iter.next();
            })).then(function(iterations) {
              return advance(iterations);
            }, function(err) {
              return stop3(err);
            });
            return [4, new Promise(function(resolve2) {
              return advance = resolve2;
            })];
          case 2:
            iterations_1 = _a2.sent();
            if (iterations_1 === void 0) {
              return [2];
            }
            values_2 = iterations_1.map(function(iteration) {
              return iteration.value;
            });
            if (iterations_1.every(function(iteration) {
              return iteration.done;
            })) {
              return [2, values_2];
            }
            return [4, push3(values_2.slice())];
          case 3:
            _a2.sent();
            return [4, Promise.all(iters.map(function(iter, i) {
              return __awaiter(_this2, void 0, void 0, function() {
                var iteration;
                return __generator(this, function(_a3) {
                  switch (_a3.label) {
                    case 0:
                      if (iterations_1[i].done) {
                        return [2, iterations_1[i].value];
                      }
                      _a3.label = 1;
                    case 1:
                      if (!!stopped)
                        return [3, 4];
                      Promise.resolve(iter.next()).then(function(iteration2) {
                        return advances[i](iteration2);
                      }, function(err) {
                        return stop3(err);
                      });
                      return [4, new Promise(function(resolve2) {
                        return advances[i] = resolve2;
                      })];
                    case 2:
                      iteration = _a3.sent();
                      if (iteration === void 0) {
                        return [2, iterations_1[i].value];
                      } else if (iteration.done) {
                        return [2, iteration.value];
                      }
                      values_2[i] = iteration.value;
                      return [4, push3(values_2.slice())];
                    case 3:
                      _a3.sent();
                      return [3, 1];
                    case 4:
                      return [2];
                  }
                });
              });
            }))];
          case 4:
            return [2, _a2.sent()];
          case 5:
            stop3();
            return [4, Promise.all(iters.map(function(iter) {
              return iter.return && iter.return();
            }))];
          case 6:
            _a2.sent();
            return [7];
          case 7:
            return [2];
        }
      });
    });
  });
}

// node_modules/@graphql-yoga/common/index.mjs
var ANSI_CODES = {
  black: "\x1B[30m",
  red: "\x1B[31m",
  green: "\x1B[32m",
  yellow: "\x1B[33m",
  blue: "\x1B[34m",
  magenta: "\x1B[35m",
  cyan: "\x1B[36m",
  white: "\x1B[37m",
  reset: "\x1B[0m",
  bold: "\x1B[1m",
  orange: "\x1B[48:5:166m"
};
var warnColor = (msg) => ANSI_CODES.orange + msg + ANSI_CODES.reset;
var infoColor = (msg) => ANSI_CODES.cyan + msg + ANSI_CODES.reset;
var errorColor = (msg) => ANSI_CODES.red + msg + ANSI_CODES.reset;
var debugColor = (msg) => ANSI_CODES.magenta + msg + ANSI_CODES.reset;
var titleBold = (msg) => ANSI_CODES.bold + msg + ANSI_CODES.reset;
var isDebug = () => typeof process === "object" ? process.env.DEBUG : typeof DEBUG !== "undefined" ? true : false;
function getPrefix() {
  return titleBold(`\u{1F9D8} Yoga -`);
}
function getLoggerMessage(...args) {
  return args.map((arg) => typeof arg === "string" ? arg : inspect2(arg)).join(` `);
}
var defaultYogaLogger = {
  debug(...args) {
    if (isDebug()) {
      const message = getLoggerMessage(...args);
      const fullMessage = `\u{1F41B} ${getPrefix()} ${debugColor(message)}`;
      if (console.debug) {
        console.debug(fullMessage);
      } else {
        console.log(fullMessage);
      }
    }
  },
  info(...args) {
    const message = getLoggerMessage(...args);
    const fullMessage = `\u{1F4A1} ${getPrefix()} ${infoColor(message)}`;
    if (console.info) {
      console.info(fullMessage);
    } else {
      console.log(fullMessage);
    }
  },
  warn(...args) {
    const message = getLoggerMessage(...args);
    const fullMessage = `\u26A0\uFE0F ${getPrefix()} ${warnColor(message)}`;
    if (console.warn) {
      console.warn(fullMessage);
    } else {
      console.log(fullMessage);
    }
  },
  error(...args) {
    const message = getLoggerMessage(...args);
    const fullMessage = `\u274C ${getPrefix()} ${errorColor(message)}`;
    if (console.error) {
      console.error(fullMessage);
    } else {
      console.log(fullMessage);
    }
  }
};
var encodeString;
if (globalThis.Buffer) {
  encodeString = function encodeStringWithBuffer(str2) {
    return globalThis.Buffer.from(str2, "utf8");
  };
} else {
  const textEncoder = new TextEncoder();
  encodeString = function encodeStringWithTextEncoder(str2) {
    return textEncoder.encode(str2);
  };
}
function getErrorResponse({ status = 500, headers = {}, errors, fetchAPI }) {
  const payload = {
    data: null,
    errors: errors.map((error) => error instanceof GraphQLError ? error : new GraphQLError(error.message))
  };
  const decodedString = encodeString(JSON.stringify(payload));
  return new fetchAPI.Response(decodedString, {
    status,
    headers: {
      ...headers,
      "Content-Type": "application/json",
      "Content-Length": decodedString.byteLength.toString()
    }
  });
}
async function processRequest({ request, params, enveloped, fetchAPI, onResultProcessHooks }) {
  var _a2;
  let document;
  if (request.method !== "GET" && request.method !== "POST") {
    return getErrorResponse({
      status: 405,
      headers: {
        Allow: "GET, POST"
      },
      errors: [
        new EnvelopError("GraphQL only supports GET and POST requests.")
      ],
      fetchAPI
    });
  }
  if (params.query == null) {
    return getErrorResponse({
      status: 400,
      errors: [new EnvelopError("Must provide query string.")],
      fetchAPI
    });
  }
  try {
    document = enveloped.parse(params.query);
  } catch (e) {
    return getErrorResponse({
      status: 400,
      errors: [e],
      fetchAPI
    });
  }
  const validationErrors = enveloped.validate(enveloped.schema, document);
  if (validationErrors.length > 0) {
    return getErrorResponse({
      status: 400,
      errors: validationErrors,
      fetchAPI
    });
  }
  const operation = (_a2 = getOperationAST(document, params.operationName)) !== null && _a2 !== void 0 ? _a2 : void 0;
  if (!operation) {
    return getErrorResponse({
      status: 400,
      errors: [
        new EnvelopError("Could not determine what operation to execute.")
      ],
      fetchAPI
    });
  }
  if (operation.operation === "mutation" && request.method === "GET") {
    return getErrorResponse({
      status: 405,
      headers: {
        Allow: "POST"
      },
      errors: [
        new EnvelopError("Can only perform a mutation operation from a POST request.")
      ],
      fetchAPI
    });
  }
  let contextValue;
  try {
    contextValue = await enveloped.contextFactory();
  } catch (error) {
    if (error instanceof GraphQLError) {
      return getErrorResponse({
        status: 200,
        errors: [error],
        fetchAPI
      });
    }
    throw error;
  }
  const executionArgs = {
    schema: enveloped.schema,
    document,
    contextValue,
    variableValues: params.variables,
    operationName: params.operationName
  };
  const executeFn = operation.operation === "subscription" ? enveloped.subscribe : enveloped.execute;
  const result = await executeFn(executionArgs);
  let resultProcessor = (_, fetchAPI2) => new fetchAPI2.Response(null, {
    status: 406,
    statusText: "Not Acceptable"
  });
  for (const onResultProcessHook of onResultProcessHooks) {
    await onResultProcessHook({
      request,
      context: contextValue,
      result,
      resultProcessor,
      setResultProcessor(newResultProcessor) {
        resultProcessor = newResultProcessor;
      }
    });
  }
  return resultProcessor(result, fetchAPI);
}
function getCORSHeadersByRequestAndOptions(request, corsOptions) {
  var _a2, _b;
  const headers = {};
  if (corsOptions === false) {
    return headers;
  }
  if (corsOptions.origin == null || corsOptions.origin.length === 0 || corsOptions.origin.includes("*")) {
    const currentOrigin = request.headers.get("origin");
    if (currentOrigin != null) {
      headers["Access-Control-Allow-Origin"] = currentOrigin;
      headers["Vary"] = "Origin";
    } else {
      headers["Access-Control-Allow-Origin"] = "*";
    }
  } else if (typeof corsOptions.origin === "string") {
    headers["Access-Control-Allow-Origin"] = corsOptions.origin;
  } else if (Array.isArray(corsOptions.origin)) {
    if (corsOptions.origin.length === 1) {
      headers["Access-Control-Allow-Origin"] = corsOptions.origin[0];
    } else {
      const currentOrigin = request.headers.get("origin");
      if (currentOrigin != null && corsOptions.origin.includes(currentOrigin)) {
        headers["Access-Control-Allow-Origin"] = currentOrigin;
        headers["Vary"] = "Origin";
      } else {
        headers["Access-Control-Allow-Origin"] = "null";
      }
    }
  }
  if ((_a2 = corsOptions.methods) === null || _a2 === void 0 ? void 0 : _a2.length) {
    headers["Access-Control-Allow-Methods"] = corsOptions.methods.join(", ");
  } else {
    const requestMethod = request.headers.get("access-control-request-method");
    if (requestMethod) {
      headers["Access-Control-Allow-Methods"] = requestMethod;
    }
  }
  if ((_b = corsOptions.allowedHeaders) === null || _b === void 0 ? void 0 : _b.length) {
    headers["Access-Control-Allow-Headers"] = corsOptions.allowedHeaders.join(", ");
  } else {
    const requestHeaders = request.headers.get("access-control-request-headers");
    if (requestHeaders) {
      headers["Access-Control-Allow-Headers"] = requestHeaders;
      if (headers["Vary"]) {
        headers["Vary"] += ", Access-Control-Request-Headers";
      }
      headers["Vary"] = "Access-Control-Request-Headers";
    }
  }
  if (corsOptions.credentials != null) {
    if (corsOptions.credentials === true) {
      headers["Access-Control-Allow-Credentials"] = "true";
    }
  } else if (headers["Access-Control-Allow-Origin"] !== "*") {
    headers["Access-Control-Allow-Credentials"] = "true";
  }
  if (corsOptions.exposedHeaders) {
    headers["Access-Control-Expose-Headers"] = corsOptions.exposedHeaders.join(", ");
  }
  if (corsOptions.maxAge) {
    headers["Access-Control-Max-Age"] = corsOptions.maxAge.toString();
  }
  return headers;
}
async function getCORSResponseHeaders(request, serverContext, corsOptionsFactory) {
  const corsOptions = await corsOptionsFactory(request, serverContext);
  return getCORSHeadersByRequestAndOptions(request, corsOptions);
}
function useCORS(options) {
  let corsOptionsFactory = () => ({});
  if (options != null) {
    if (typeof options === "function") {
      corsOptionsFactory = options;
    } else if (typeof options === "object") {
      const corsOptions = {
        ...options
      };
      corsOptionsFactory = () => corsOptions;
    } else if (options === false) {
      corsOptionsFactory = () => false;
    }
  }
  return {
    async onRequest({ request, serverContext, fetchAPI, endResponse }) {
      if (request.method.toUpperCase() === "OPTIONS") {
        const headers = await getCORSResponseHeaders(request, serverContext, corsOptionsFactory);
        const response = new fetchAPI.Response(null, {
          status: 204,
          headers
        });
        endResponse(response);
        return;
      }
    },
    async onResponse({ request, serverContext, response }) {
      const headers = await getCORSResponseHeaders(request, serverContext, corsOptionsFactory);
      for (const headerName in headers) {
        response.headers.set(headerName, headers[headerName]);
      }
    }
  };
}
function useHealthCheck(options) {
  const id = (options === null || options === void 0 ? void 0 : options.id) || Date.now().toString();
  const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
  return {
    async onRequest({ request, endResponse, fetchAPI }) {
      const requestPath = request.url.split("?")[0];
      if (requestPath.endsWith("/health")) {
        logger.debug(`Responding Health Check`);
        const response = new fetchAPI.Response(JSON.stringify({
          message: "alive"
        }), {
          status: 200,
          headers: {
            "Content-Type": "application/json",
            "x-yoga-id": id
          }
        });
        endResponse(response);
      } else if (requestPath.endsWith("/readiness")) {
        logger.debug(`Responding Readiness Check`);
        const readinessResponse = await fetchAPI.fetch(request.url.replace("/readiness", "/health"));
        const { message } = await readinessResponse.json();
        if (readinessResponse.status === 200 && readinessResponse.headers.get("x-yoga-id") === id && message === "alive") {
          const response = new fetchAPI.Response(JSON.stringify({
            message: "ready"
          }), {
            status: 200,
            headers: {
              "Content-Type": "application/json"
            }
          });
          endResponse(response);
        } else {
          throw new EnvelopError(`Readiness check failed with status ${readinessResponse.status}`);
        }
      }
    }
  };
}
var graphiqlHTML = '<!doctype html><html lang=en><meta charset=utf-8><title>__TITLE__</title><link href=https://www.graphql-yoga.com/favicon.ico rel=icon><link href=https://unpkg.com/@graphql-yoga/graphiql@2.4.0/dist/style.css rel=stylesheet><body class=no-focus-outline id=body><noscript>You need to enable JavaScript to run this app.</noscript><div id=root></div><script type=module>import{renderYogaGraphiQL as r}from"https://unpkg.com/@graphql-yoga/graphiql@2.4.0";r(root,__OPTS__);<\/script>';
function shouldRenderGraphiQL({ headers, method }) {
  var _a2;
  return method === "GET" && !!((_a2 = headers === null || headers === void 0 ? void 0 : headers.get("accept")) === null || _a2 === void 0 ? void 0 : _a2.includes("text/html"));
}
var renderGraphiQL = (opts) => graphiqlHTML.replace("__TITLE__", (opts === null || opts === void 0 ? void 0 : opts.title) || "Yoga GraphiQL").replace("__OPTS__", JSON.stringify(opts !== null && opts !== void 0 ? opts : {}));
function useGraphiQL(config2) {
  var _a2, _b;
  const logger = (_a2 = config2 === null || config2 === void 0 ? void 0 : config2.logger) !== null && _a2 !== void 0 ? _a2 : console;
  let graphiqlOptionsFactory;
  if (typeof (config2 === null || config2 === void 0 ? void 0 : config2.options) === "function") {
    graphiqlOptionsFactory = config2 === null || config2 === void 0 ? void 0 : config2.options;
  } else if (typeof (config2 === null || config2 === void 0 ? void 0 : config2.options) === "object") {
    graphiqlOptionsFactory = () => config2 === null || config2 === void 0 ? void 0 : config2.options;
  } else if ((config2 === null || config2 === void 0 ? void 0 : config2.options) === false) {
    graphiqlOptionsFactory = () => false;
  } else {
    graphiqlOptionsFactory = () => ({});
  }
  const renderer = (_b = config2 === null || config2 === void 0 ? void 0 : config2.render) !== null && _b !== void 0 ? _b : renderGraphiQL;
  return {
    async onRequest({ request, serverContext, fetchAPI, endResponse }) {
      const requestPath = request.url.split("?")[0];
      if ((config2 === null || config2 === void 0 ? void 0 : config2.endpoint) != null && !requestPath.endsWith(config2 === null || config2 === void 0 ? void 0 : config2.endpoint)) {
        logger.debug(`Responding 404 Not Found`);
        const response = new fetchAPI.Response(`Unable to ${request.method} ${requestPath}`, {
          status: 404,
          statusText: `Not Found`
        });
        endResponse(response);
      } else if (shouldRenderGraphiQL(request)) {
        logger.debug(`Rendering GraphiQL`);
        const graphiqlOptions = graphiqlOptionsFactory(request, serverContext);
        if (graphiqlOptions) {
          const graphiQLBody = await renderer({
            endpoint: config2 === null || config2 === void 0 ? void 0 : config2.endpoint,
            ...graphiqlOptions === true ? {} : graphiqlOptions
          });
          const response = new fetchAPI.Response(graphiQLBody, {
            headers: {
              "Content-Type": "text/html"
            },
            status: 200
          });
          endResponse(response);
        }
      }
    }
  };
}
var DEFAULT_MATCHER = () => true;
function useRequestParser(options) {
  const matchFn = options.match || DEFAULT_MATCHER;
  return {
    onRequestParse({ request, setRequestParser }) {
      if (matchFn(request)) {
        setRequestParser(function useRequestParserFn(request2) {
          return options.parse(request2);
        });
      }
    }
  };
}
function parseURLSearchParams(requestBody) {
  const searchParams = new URLSearchParams(requestBody);
  const operationName = searchParams.get("operationName") || void 0;
  const query = searchParams.get("query") || void 0;
  const variablesStr = searchParams.get("variables") || void 0;
  const extensionsStr = searchParams.get("extensions") || void 0;
  return {
    operationName,
    query,
    variables: variablesStr ? JSON.parse(variablesStr) : void 0,
    extensions: extensionsStr ? JSON.parse(extensionsStr) : void 0
  };
}
function isContentTypeMatch(request, expectedContentType) {
  const contentType = request.headers.get("content-type");
  return contentType === expectedContentType || !!(contentType === null || contentType === void 0 ? void 0 : contentType.startsWith(`${expectedContentType};`));
}
function isGETRequest(request) {
  return request.method === "GET";
}
function parseGETRequest(request) {
  const [, searchParamsStr] = request.url.split("?");
  return parseURLSearchParams(searchParamsStr);
}
function isPOSTJsonRequest(request) {
  return request.method === "POST" && (isContentTypeMatch(request, "application/json") || isContentTypeMatch(request, "application/graphql+json"));
}
async function parsePOSTJsonRequest(request) {
  const requestBody = await request.json();
  return {
    operationName: requestBody.operationName,
    query: requestBody.query,
    variables: requestBody.variables,
    extensions: requestBody.extensions
  };
}
function isPOSTMultipartRequest(request) {
  return request.method === "POST" && isContentTypeMatch(request, "multipart/form-data");
}
async function parsePOSTMultipartRequest(request) {
  var _a2, _b;
  const requestBody = await request.formData();
  const operationsStr = ((_a2 = requestBody.get("operations")) === null || _a2 === void 0 ? void 0 : _a2.toString()) || "{}";
  const operations = JSON.parse(operationsStr);
  const mapStr = ((_b = requestBody.get("map")) === null || _b === void 0 ? void 0 : _b.toString()) || "{}";
  const map2 = JSON.parse(mapStr);
  for (const fileIndex in map2) {
    const file = requestBody.get(fileIndex);
    const keys = map2[fileIndex];
    for (const key of keys) {
      dset(operations, key, file);
    }
  }
  return {
    operationName: operations.operationName,
    query: operations.query,
    variables: operations.variables,
    extensions: operations.extensions
  };
}
function isPOSTGraphQLStringRequest(request) {
  return request.method === "POST" && isContentTypeMatch(request, "application/graphql");
}
async function parsePOSTGraphQLStringRequest(request) {
  const requestBody = await request.text();
  return {
    query: requestBody
  };
}
function useResultProcessor(options) {
  const isMatch = options.match || (() => true);
  return {
    onResultProcess({ request, result, setResultProcessor }) {
      if (isMatch(request, result)) {
        setResultProcessor(options.processResult);
      }
    }
  };
}
function isRegularResult(request, result) {
  return !isAsyncIterable3(result);
}
function processRegularResult(executionResult, fetchAPI) {
  const responseBody = JSON.stringify(executionResult);
  const decodedString = encodeString(responseBody);
  const headersInit = {
    "Content-Type": "application/json",
    "Content-Length": decodedString.byteLength.toString()
  };
  const responseInit = {
    headers: headersInit,
    status: 200
  };
  return new fetchAPI.Response(decodedString, responseInit);
}
function isPushResult(request, result) {
  var _a2;
  return isAsyncIterable2(result) && !!((_a2 = request.headers.get("accept")) === null || _a2 === void 0 ? void 0 : _a2.includes("text/event-stream"));
}
function processPushResult(result, fetchAPI) {
  const headersInit = {
    "Content-Type": "text/event-stream",
    Connection: "keep-alive",
    "Cache-Control": "no-cache",
    "Content-Encoding": "none"
  };
  const responseInit = {
    headers: headersInit,
    status: 200
  };
  let iterator;
  const readableStream = new fetchAPI.ReadableStream({
    start() {
      iterator = result[Symbol.asyncIterator]();
    },
    async pull(controller) {
      const { done, value } = await iterator.next();
      if (value != null) {
        const chunk = JSON.stringify(value);
        controller.enqueue(encodeString(`data: ${chunk}

`));
      }
      if (done) {
        controller.close();
      }
    },
    async cancel(e) {
      var _a2;
      await ((_a2 = iterator.return) === null || _a2 === void 0 ? void 0 : _a2.call(iterator, e));
    }
  });
  return new fetchAPI.Response(readableStream, responseInit);
}
function isMultipartResult(request, result) {
  var _a2;
  return isAsyncIterable2(result) && !!((_a2 = request.headers.get("accept")) === null || _a2 === void 0 ? void 0 : _a2.includes("multipart/mixed"));
}
function processMultipartResult(executionPatchResultIterable, fetchAPI) {
  const headersInit = {
    Connection: "keep-alive",
    "Content-Type": 'multipart/mixed; boundary="-"',
    "Transfer-Encoding": "chunked"
  };
  const responseInit = {
    headers: headersInit,
    status: 200
  };
  let iterator;
  const readableStream = new fetchAPI.ReadableStream({
    start(controller) {
      iterator = executionPatchResultIterable[Symbol.asyncIterator]();
      controller.enqueue(encodeString(`---`));
    },
    async pull(controller) {
      const { done, value } = await iterator.next();
      if (value != null) {
        controller.enqueue(encodeString("\r\n"));
        controller.enqueue(encodeString("Content-Type: application/json; charset=utf-8"));
        controller.enqueue(encodeString("\r\n"));
        const chunk = JSON.stringify(value);
        const encodedChunk = encodeString(chunk);
        controller.enqueue(encodeString("Content-Length: " + encodedChunk.byteLength));
        controller.enqueue(encodeString("\r\n"));
        controller.enqueue(encodeString("\r\n"));
        controller.enqueue(encodedChunk);
        controller.enqueue(encodeString("\r\n"));
        controller.enqueue(encodeString("---"));
      }
      if (done) {
        controller.enqueue(encodeString("\r\n-----\r\n"));
        controller.close();
      }
    },
    async cancel(e) {
      var _a2;
      await ((_a2 = iterator.return) === null || _a2 === void 0 ? void 0 : _a2.call(iterator, e));
    }
  });
  return new fetchAPI.Response(readableStream, responseInit);
}
function isPOSTFormUrlEncodedRequest(request) {
  return request.method === "POST" && isContentTypeMatch(request, "application/x-www-form-urlencoded");
}
async function parsePOSTFormUrlEncodedRequest(request) {
  const requestBody = await request.text();
  return parseURLSearchParams(requestBody);
}
function getDefaultSchema() {
  return makeExecutableSchema({
    typeDefs: `
      """
      Greetings from GraphQL Yoga!
      """
      type Query {
        greetings: String
      }
      type Subscription {
        """
        Current Time
        """
        time: String
      }
    `,
    resolvers: {
      Query: {
        greetings: () => "This is the `greetings` field of the root `Query` type"
      },
      Subscription: {
        time: {
          async *subscribe() {
            while (true) {
              yield { time: new Date().toISOString() };
              await new Promise((resolve2) => setTimeout(resolve2, 1e3));
            }
          }
        }
      }
    }
  });
}
var YogaServer = class {
  constructor(options) {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    this.handleRequest = async (request, ...args) => {
      const response = await this.getResponse(request, ...args);
      for (const onResponseHook of this.onResponseHooks) {
        await onResponseHook({
          request,
          response,
          serverContext: args[0]
        });
      }
      return response;
    };
    this.fetch = (input, init2) => {
      let request;
      if (typeof input === "string") {
        request = new this.fetchAPI.Request(input, init2);
      } else {
        request = input;
      }
      return this.handleRequest(request, init2);
    };
    this.fetchEventListener = (event) => event.respondWith(this.handleRequest(event.request, event));
    this.id = (_a2 = options === null || options === void 0 ? void 0 : options.id) !== null && _a2 !== void 0 ? _a2 : "yoga";
    this.fetchAPI = {
      Request: (_c = (_b = options === null || options === void 0 ? void 0 : options.fetchAPI) === null || _b === void 0 ? void 0 : _b.Request) !== null && _c !== void 0 ? _c : import_cross_undici_fetch.Request,
      Response: (_e = (_d = options === null || options === void 0 ? void 0 : options.fetchAPI) === null || _d === void 0 ? void 0 : _d.Response) !== null && _e !== void 0 ? _e : import_cross_undici_fetch.Response,
      fetch: (_g = (_f = options === null || options === void 0 ? void 0 : options.fetchAPI) === null || _f === void 0 ? void 0 : _f.fetch) !== null && _g !== void 0 ? _g : import_cross_undici_fetch.fetch,
      ReadableStream: (_j = (_h = options === null || options === void 0 ? void 0 : options.fetchAPI) === null || _h === void 0 ? void 0 : _h.ReadableStream) !== null && _j !== void 0 ? _j : import_cross_undici_fetch.ReadableStream
    };
    const schema2 = (options === null || options === void 0 ? void 0 : options.schema) ? isSchema(options.schema) ? options.schema : makeExecutableSchema({
      typeDefs: options.schema.typeDefs,
      resolvers: options.schema.resolvers
    }) : getDefaultSchema();
    const logger = (options === null || options === void 0 ? void 0 : options.logging) != null ? options.logging : true;
    this.logger = typeof logger === "boolean" ? logger === true ? defaultYogaLogger : {
      debug: () => {
      },
      error: () => {
      },
      warn: () => {
      },
      info: () => {
      }
    } : logger;
    const maskedErrors = (_k = options === null || options === void 0 ? void 0 : options.maskedErrors) !== null && _k !== void 0 ? _k : true;
    const server = this;
    this.endpoint = options === null || options === void 0 ? void 0 : options.endpoint;
    this.plugins = [
      enableIf(schema2 != null, useSchema(schema2)),
      enableIf((options === null || options === void 0 ? void 0 : options.parserCache) !== false, () => useParserCache(typeof (options === null || options === void 0 ? void 0 : options.parserCache) === "object" ? options === null || options === void 0 ? void 0 : options.parserCache : void 0)),
      enableIf((options === null || options === void 0 ? void 0 : options.validationCache) !== false, () => useValidationCache({
        cache: typeof (options === null || options === void 0 ? void 0 : options.validationCache) === "object" ? options === null || options === void 0 ? void 0 : options.validationCache : void 0
      })),
      enableIf(logger !== false, useLogger({
        skipIntrospection: true,
        logFn: (eventName, events) => {
          switch (eventName) {
            case "execute-start":
            case "subscribe-start":
              this.logger.debug(titleBold("Execution start"));
              const { query, operationName, variables, extensions } = events.args.contextValue;
              if (query) {
                this.logger.debug("\n" + titleBold("Received GraphQL operation:") + "\n", query);
              }
              if (operationName) {
                this.logger.debug("	 operationName:", operationName);
              }
              if (variables) {
                this.logger.debug("	 variables:", variables);
              }
              if (extensions) {
                this.logger.debug("	 extensions:", extensions);
              }
              break;
            case "execute-end":
            case "subscribe-end":
              this.logger.debug(titleBold("Execution end"));
              this.logger.debug("	 result:", events.result);
              break;
          }
        }
      })),
      enableIf((options === null || options === void 0 ? void 0 : options.context) != null, useExtendContext(async (initialContext) => {
        if (options === null || options === void 0 ? void 0 : options.context) {
          if (typeof options.context === "function") {
            return options.context(initialContext);
          }
          return options.context;
        }
      })),
      useHealthCheck({
        id: this.id,
        logger: this.logger
      }),
      enableIf((options === null || options === void 0 ? void 0 : options.graphiql) !== false, () => useGraphiQL({
        get endpoint() {
          return server.endpoint;
        },
        options: options === null || options === void 0 ? void 0 : options.graphiql,
        render: options === null || options === void 0 ? void 0 : options.renderGraphiQL,
        logger: this.logger
      })),
      enableIf((options === null || options === void 0 ? void 0 : options.cors) !== false, () => useCORS(options === null || options === void 0 ? void 0 : options.cors)),
      useRequestParser({
        match: isGETRequest,
        parse: parseGETRequest
      }),
      useRequestParser({
        match: isPOSTJsonRequest,
        parse: parsePOSTJsonRequest
      }),
      enableIf((options === null || options === void 0 ? void 0 : options.multipart) !== false, () => useRequestParser({
        match: isPOSTMultipartRequest,
        parse: parsePOSTMultipartRequest
      })),
      useRequestParser({
        match: isPOSTGraphQLStringRequest,
        parse: parsePOSTGraphQLStringRequest
      }),
      useRequestParser({
        match: isPOSTFormUrlEncodedRequest,
        parse: parsePOSTFormUrlEncodedRequest
      }),
      useResultProcessor({
        match: isRegularResult,
        processResult: processRegularResult
      }),
      useResultProcessor({
        match: isPushResult,
        processResult: processPushResult
      }),
      useResultProcessor({
        match: isMultipartResult,
        processResult: processMultipartResult
      }),
      ...(_l = options === null || options === void 0 ? void 0 : options.plugins) !== null && _l !== void 0 ? _l : [],
      enableIf(!!maskedErrors, useMaskedErrors(typeof maskedErrors === "object" ? maskedErrors : void 0))
    ];
    this.getEnveloped = envelop({
      plugins: this.plugins
    });
    this.onRequestHooks = [];
    this.onRequestParseHooks = [];
    this.onResultProcessHooks = [];
    this.onResponseHooks = [];
    for (const plugin of this.plugins) {
      if (plugin) {
        if (plugin.onRequestParse) {
          this.onRequestParseHooks.push(plugin.onRequestParse);
        }
        if (plugin.onRequest) {
          this.onRequestHooks.push(plugin.onRequest);
        }
        if (plugin.onResultProcess) {
          this.onResultProcessHooks.push(plugin.onResultProcess);
        }
        if (plugin.onResponse) {
          this.onResponseHooks.push(plugin.onResponse);
        }
      }
    }
  }
  async getResponse(request, ...args) {
    var _a2;
    const serverContext = args[0];
    try {
      for (const onRequestHook of this.onRequestHooks) {
        let response;
        await onRequestHook({
          request,
          serverContext,
          fetchAPI: this.fetchAPI,
          endResponse(newResponse) {
            response = newResponse;
          }
        });
        if (response) {
          return response;
        }
      }
      let requestParser;
      const onRequestParseDoneList = [];
      for (const onRequestParse of this.onRequestParseHooks) {
        const onRequestParseResult = await onRequestParse({
          serverContext,
          request,
          requestParser,
          setRequestParser(parser) {
            requestParser = parser;
          }
        });
        if ((onRequestParseResult === null || onRequestParseResult === void 0 ? void 0 : onRequestParseResult.onRequestParseDone) != null) {
          onRequestParseDoneList.push(onRequestParseResult.onRequestParseDone);
        }
      }
      this.logger.debug(`Parsing request to extract GraphQL parameters`);
      if (!requestParser) {
        return new this.fetchAPI.Response("Request is not valid", {
          status: 400,
          statusText: "Bad Request"
        });
      }
      let params;
      try {
        params = await requestParser(request);
      } catch (err) {
        if (err instanceof Error) {
          return getErrorResponse({
            status: 400,
            errors: [err],
            fetchAPI: this.fetchAPI
          });
        }
        throw err;
      }
      for (const onRequestParseDone of onRequestParseDoneList) {
        await onRequestParseDone({
          params,
          setParams(newParams) {
            params = newParams;
          }
        });
      }
      const initialContext = {
        request,
        ...params,
        ...serverContext
      };
      const enveloped = this.getEnveloped(initialContext);
      this.logger.debug(`Processing GraphQL Parameters`);
      const result = await processRequest({
        request,
        params,
        enveloped,
        fetchAPI: this.fetchAPI,
        onResultProcessHooks: this.onResultProcessHooks
      });
      return result;
    } catch (error) {
      return getErrorResponse({
        status: 500,
        errors: [new Error((_a2 = error === null || error === void 0 ? void 0 : error.message) !== null && _a2 !== void 0 ? _a2 : "Unexpected Error.")],
        fetchAPI: this.fetchAPI
      });
    }
  }
  async inject({ document, variables, operationName, headers, serverContext }) {
    const request = new this.fetchAPI.Request("http://localhost/graphql", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        ...headers
      },
      body: JSON.stringify({
        query: document && (typeof document === "string" ? document : print(document)),
        variables,
        operationName
      })
    });
    const response = await this.handleRequest(request, serverContext);
    let executionResult = null;
    if (response.headers.get("content-type") === "application/json") {
      executionResult = await response.json();
    }
    return {
      response,
      executionResult
    };
  }
  start() {
    self.addEventListener("fetch", this.fetchEventListener);
  }
  stop() {
    self.removeEventListener("fetch", this.fetchEventListener);
  }
};
function createServer(options) {
  const server = new YogaServer(options);
  const fnHandler = (input) => {
    if (input.request) {
      return server.handleRequest(input.request, input);
    }
    return server.handleRequest(input, void 0);
  };
  return new Proxy(fnHandler, {
    get: (_, prop) => {
      if (server[prop]) {
        if (server[prop].bind) {
          return server[prop].bind(server);
        }
        return server[prop];
      }
      if (fnHandler[prop]) {
        if (fnHandler[prop].bind) {
          return fnHandler[prop].bind(fnHandler);
        }
        return fnHandler[prop];
      }
    },
    apply(_, __, [input]) {
      return fnHandler(input);
    }
  });
}

// .mesh/index.ts
init_virtual_process_polyfill();
init_buffer();

// node_modules/@graphql-mesh/runtime/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();

// node_modules/@graphql-mesh/utils/index.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/fetchache/index.mjs
init_virtual_process_polyfill();
init_buffer();
var import_http_cache_semantics = __toESM(require_http_cache_semantics(), 1);
function fetchFactory({ fetch: fetch5, Request: Request3, Response: Response3, cache }) {
  return async (input, init2) => {
    let request;
    if (input instanceof Request3) {
      request = input;
    } else {
      request = new Request3(input, init2);
    }
    const cacheKey = request.url;
    const entry = await cache.get(cacheKey);
    if (!entry) {
      const response = await fetch5(request);
      const policy2 = new import_http_cache_semantics.default(policyRequestFrom(request), policyResponseFrom(response));
      return storeResponseAndReturnClone(cache, response, policy2, cacheKey);
    }
    const { policy: policyRaw, bytes } = typeof entry === "string" ? JSON.parse(entry) : entry;
    const policy = import_http_cache_semantics.default.fromObject(policyRaw);
    policy._url = void 0;
    const bodyInit = new Uint8Array(bytes);
    if (policy.satisfiesWithoutRevalidation(policyRequestFrom(request))) {
      const headers = policy.responseHeaders();
      return new Response3(bodyInit, {
        url: policy._url,
        status: policy._status,
        headers
      });
    } else {
      const revalidationHeaders = policy.revalidationHeaders(policyRequestFrom(request));
      const revalidationRequest = new Request3(request, {
        headers: revalidationHeaders
      });
      const revalidationResponse = await fetch5(revalidationRequest);
      const { policy: revalidatedPolicy, modified } = policy.revalidatedPolicy(policyRequestFrom(revalidationRequest), policyResponseFrom(revalidationResponse));
      const newArrayBuffer = await revalidationResponse.arrayBuffer();
      const newBody = modified ? newArrayBuffer : bodyInit;
      return storeResponseAndReturnClone(cache, new Response3(newBody, {
        url: revalidatedPolicy._url,
        status: revalidatedPolicy._status,
        headers: revalidatedPolicy.responseHeaders()
      }), revalidatedPolicy, cacheKey);
    }
  };
  async function storeResponseAndReturnClone(cache2, response, policy, cacheKey) {
    let ttl = Math.round(policy.timeToLive() / 1e3);
    if (ttl <= 0)
      return response;
    if (canBeRevalidated(response)) {
      ttl *= 2;
    }
    const arrayBuffer = await response.arrayBuffer();
    const uint8array = new Uint8Array(arrayBuffer);
    const entry = {
      policy: policy.toObject(),
      bytes: [...uint8array]
    };
    await cache2.set(cacheKey, entry, {
      ttl
    });
    return new Response3(uint8array, {
      url: response.url,
      status: response.status,
      statusText: response.statusText,
      headers: response.headers
    });
  }
}
function canBeRevalidated(response) {
  return response.headers.has("ETag");
}
function policyRequestFrom(request) {
  return {
    url: request.url,
    method: request.method,
    headers: headersToObject(request.headers)
  };
}
function policyResponseFrom(response) {
  return {
    status: response.status,
    headers: headersToObject(response.headers)
  };
}
function headersToObject(headers) {
  const object = /* @__PURE__ */ Object.create(null);
  headers === null || headers === void 0 ? void 0 : headers.forEach((val, key) => {
    object[key] = val;
  });
  return object;
}

// node_modules/@graphql-mesh/utils/index.mjs
var import_cross_undici_fetch2 = __toESM(require_global_ponyfill(), 1);
var import_is_url = __toESM(require_is_url(), 1);

// node_modules/js-yaml/dist/js-yaml.mjs
init_virtual_process_polyfill();
init_buffer();
function isNothing(subject) {
  return typeof subject === "undefined" || subject === null;
}
function isObject2(subject) {
  return typeof subject === "object" && subject !== null;
}
function toArray(sequence) {
  if (Array.isArray(sequence))
    return sequence;
  else if (isNothing(sequence))
    return [];
  return [sequence];
}
function extend(target, source) {
  var index, length, key, sourceKeys;
  if (source) {
    sourceKeys = Object.keys(source);
    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }
  return target;
}
function repeat(string, count) {
  var result = "", cycle;
  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }
  return result;
}
function isNegativeZero(number) {
  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
}
var isNothing_1 = isNothing;
var isObject_1 = isObject2;
var toArray_1 = toArray;
var repeat_1 = repeat;
var isNegativeZero_1 = isNegativeZero;
var extend_1 = extend;
var common = {
  isNothing: isNothing_1,
  isObject: isObject_1,
  toArray: toArray_1,
  repeat: repeat_1,
  isNegativeZero: isNegativeZero_1,
  extend: extend_1
};
function formatError4(exception2, compact) {
  var where = "", message = exception2.reason || "(unknown reason)";
  if (!exception2.mark)
    return message;
  if (exception2.mark.name) {
    where += 'in "' + exception2.mark.name + '" ';
  }
  where += "(" + (exception2.mark.line + 1) + ":" + (exception2.mark.column + 1) + ")";
  if (!compact && exception2.mark.snippet) {
    where += "\n\n" + exception2.mark.snippet;
  }
  return message + " " + where;
}
function YAMLException$1(reason, mark) {
  Error.call(this);
  this.name = "YAMLException";
  this.reason = reason;
  this.mark = mark;
  this.message = formatError4(this, false);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack || "";
  }
}
YAMLException$1.prototype = Object.create(Error.prototype);
YAMLException$1.prototype.constructor = YAMLException$1;
YAMLException$1.prototype.toString = function toString2(compact) {
  return this.name + ": " + formatError4(this, compact);
};
var exception = YAMLException$1;
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = "";
  var tail = "";
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
  if (position - lineStart > maxHalfLength) {
    head = " ... ";
    lineStart = position - maxHalfLength + head.length;
  }
  if (lineEnd - position > maxHalfLength) {
    tail = " ...";
    lineEnd = position + maxHalfLength - tail.length;
  }
  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
    pos: position - lineStart + head.length
  };
}
function padStart(string, max) {
  return common.repeat(" ", max - string.length) + string;
}
function makeSnippet(mark, options) {
  options = Object.create(options || null);
  if (!mark.buffer)
    return null;
  if (!options.maxLength)
    options.maxLength = 79;
  if (typeof options.indent !== "number")
    options.indent = 1;
  if (typeof options.linesBefore !== "number")
    options.linesBefore = 3;
  if (typeof options.linesAfter !== "number")
    options.linesAfter = 2;
  var re = /\r?\n|\r|\0/g;
  var lineStarts = [0];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;
  while (match = re.exec(mark.buffer)) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);
    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }
  if (foundLineNo < 0)
    foundLineNo = lineStarts.length - 1;
  var result = "", i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0)
      break;
    line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);
    result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
  }
  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length)
      break;
    line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);
    result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
  }
  return result.replace(/\n$/, "");
}
var snippet = makeSnippet;
var TYPE_CONSTRUCTOR_OPTIONS = [
  "kind",
  "multi",
  "resolve",
  "construct",
  "instanceOf",
  "predicate",
  "represent",
  "representName",
  "defaultStyle",
  "styleAliases"
];
var YAML_NODE_KINDS = [
  "scalar",
  "sequence",
  "mapping"
];
function compileStyleAliases(map2) {
  var result = {};
  if (map2 !== null) {
    Object.keys(map2).forEach(function(style) {
      map2[style].forEach(function(alias) {
        result[String(alias)] = style;
      });
    });
  }
  return result;
}
function Type$1(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function(name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });
  this.options = options;
  this.tag = tag;
  this.kind = options["kind"] || null;
  this.resolve = options["resolve"] || function() {
    return true;
  };
  this.construct = options["construct"] || function(data) {
    return data;
  };
  this.instanceOf = options["instanceOf"] || null;
  this.predicate = options["predicate"] || null;
  this.represent = options["represent"] || null;
  this.representName = options["representName"] || null;
  this.defaultStyle = options["defaultStyle"] || null;
  this.multi = options["multi"] || false;
  this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}
var type = Type$1;
function compileList(schema2, name) {
  var result = [];
  schema2[name].forEach(function(currentType) {
    var newIndex = result.length;
    result.forEach(function(previousType, previousIndex) {
      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
        newIndex = previousIndex;
      }
    });
    result[newIndex] = currentType;
  });
  return result;
}
function compileMap() {
  var result = {
    scalar: {},
    sequence: {},
    mapping: {},
    fallback: {},
    multi: {
      scalar: [],
      sequence: [],
      mapping: [],
      fallback: []
    }
  }, index, length;
  function collectType(type2) {
    if (type2.multi) {
      result.multi[type2.kind].push(type2);
      result.multi["fallback"].push(type2);
    } else {
      result[type2.kind][type2.tag] = result["fallback"][type2.tag] = type2;
    }
  }
  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}
function Schema$1(definition) {
  return this.extend(definition);
}
Schema$1.prototype.extend = function extend2(definition) {
  var implicit = [];
  var explicit = [];
  if (definition instanceof type) {
    explicit.push(definition);
  } else if (Array.isArray(definition)) {
    explicit = explicit.concat(definition);
  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    if (definition.implicit)
      implicit = implicit.concat(definition.implicit);
    if (definition.explicit)
      explicit = explicit.concat(definition.explicit);
  } else {
    throw new exception("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
  }
  implicit.forEach(function(type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
    if (type$1.loadKind && type$1.loadKind !== "scalar") {
      throw new exception("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
    }
    if (type$1.multi) {
      throw new exception("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
    }
  });
  explicit.forEach(function(type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception("Specified list of YAML types (or a single Type object) contains a non-Type object.");
    }
  });
  var result = Object.create(Schema$1.prototype);
  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);
  result.compiledImplicit = compileList(result, "implicit");
  result.compiledExplicit = compileList(result, "explicit");
  result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
  return result;
};
var schema = Schema$1;
var str = new type("tag:yaml.org,2002:str", {
  kind: "scalar",
  construct: function(data) {
    return data !== null ? data : "";
  }
});
var seq = new type("tag:yaml.org,2002:seq", {
  kind: "sequence",
  construct: function(data) {
    return data !== null ? data : [];
  }
});
var map = new type("tag:yaml.org,2002:map", {
  kind: "mapping",
  construct: function(data) {
    return data !== null ? data : {};
  }
});
var failsafe = new schema({
  explicit: [
    str,
    seq,
    map
  ]
});
function resolveYamlNull(data) {
  if (data === null)
    return true;
  var max = data.length;
  return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
}
function constructYamlNull() {
  return null;
}
function isNull(object) {
  return object === null;
}
var _null = new type("tag:yaml.org,2002:null", {
  kind: "scalar",
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function() {
      return "~";
    },
    lowercase: function() {
      return "null";
    },
    uppercase: function() {
      return "NULL";
    },
    camelcase: function() {
      return "Null";
    },
    empty: function() {
      return "";
    }
  },
  defaultStyle: "lowercase"
});
function resolveYamlBoolean(data) {
  if (data === null)
    return false;
  var max = data.length;
  return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
}
function constructYamlBoolean(data) {
  return data === "true" || data === "True" || data === "TRUE";
}
function isBoolean(object) {
  return Object.prototype.toString.call(object) === "[object Boolean]";
}
var bool = new type("tag:yaml.org,2002:bool", {
  kind: "scalar",
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function(object) {
      return object ? "true" : "false";
    },
    uppercase: function(object) {
      return object ? "TRUE" : "FALSE";
    },
    camelcase: function(object) {
      return object ? "True" : "False";
    }
  },
  defaultStyle: "lowercase"
});
function isHexCode(c) {
  return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
}
function isOctCode(c) {
  return 48 <= c && c <= 55;
}
function isDecCode(c) {
  return 48 <= c && c <= 57;
}
function resolveYamlInteger(data) {
  if (data === null)
    return false;
  var max = data.length, index = 0, hasDigits = false, ch;
  if (!max)
    return false;
  ch = data[index];
  if (ch === "-" || ch === "+") {
    ch = data[++index];
  }
  if (ch === "0") {
    if (index + 1 === max)
      return true;
    ch = data[++index];
    if (ch === "b") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (ch !== "0" && ch !== "1")
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "x") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isHexCode(data.charCodeAt(index)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
    if (ch === "o") {
      index++;
      for (; index < max; index++) {
        ch = data[index];
        if (ch === "_")
          continue;
        if (!isOctCode(data.charCodeAt(index)))
          return false;
        hasDigits = true;
      }
      return hasDigits && ch !== "_";
    }
  }
  if (ch === "_")
    return false;
  for (; index < max; index++) {
    ch = data[index];
    if (ch === "_")
      continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }
  if (!hasDigits || ch === "_")
    return false;
  return true;
}
function constructYamlInteger(data) {
  var value = data, sign = 1, ch;
  if (value.indexOf("_") !== -1) {
    value = value.replace(/_/g, "");
  }
  ch = value[0];
  if (ch === "-" || ch === "+") {
    if (ch === "-")
      sign = -1;
    value = value.slice(1);
    ch = value[0];
  }
  if (value === "0")
    return 0;
  if (ch === "0") {
    if (value[1] === "b")
      return sign * parseInt(value.slice(2), 2);
    if (value[1] === "x")
      return sign * parseInt(value.slice(2), 16);
    if (value[1] === "o")
      return sign * parseInt(value.slice(2), 8);
  }
  return sign * parseInt(value, 10);
}
function isInteger(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
}
var int = new type("tag:yaml.org,2002:int", {
  kind: "scalar",
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary: function(obj) {
      return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
    },
    octal: function(obj) {
      return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
    },
    decimal: function(obj) {
      return obj.toString(10);
    },
    hexadecimal: function(obj) {
      return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
    }
  },
  defaultStyle: "decimal",
  styleAliases: {
    binary: [2, "bin"],
    octal: [8, "oct"],
    decimal: [10, "dec"],
    hexadecimal: [16, "hex"]
  }
});
var YAML_FLOAT_PATTERN = new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
function resolveYamlFloat(data) {
  if (data === null)
    return false;
  if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === "_") {
    return false;
  }
  return true;
}
function constructYamlFloat(data) {
  var value, sign;
  value = data.replace(/_/g, "").toLowerCase();
  sign = value[0] === "-" ? -1 : 1;
  if ("+-".indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }
  if (value === ".inf") {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === ".nan") {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}
var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
function representYamlFloat(object, style) {
  var res;
  if (isNaN(object)) {
    switch (style) {
      case "lowercase":
        return ".nan";
      case "uppercase":
        return ".NAN";
      case "camelcase":
        return ".NaN";
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return ".inf";
      case "uppercase":
        return ".INF";
      case "camelcase":
        return ".Inf";
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case "lowercase":
        return "-.inf";
      case "uppercase":
        return "-.INF";
      case "camelcase":
        return "-.Inf";
    }
  } else if (common.isNegativeZero(object)) {
    return "-0.0";
  }
  res = object.toString(10);
  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
}
function isFloat(object) {
  return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
}
var float = new type("tag:yaml.org,2002:float", {
  kind: "scalar",
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: "lowercase"
});
var json = failsafe.extend({
  implicit: [
    _null,
    bool,
    int,
    float
  ]
});
var core = json;
var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
function resolveYamlTimestamp(data) {
  if (data === null)
    return false;
  if (YAML_DATE_REGEXP.exec(data) !== null)
    return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
    return true;
  return false;
}
function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null)
    match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null)
    throw new Error("Date resolve error");
  year = +match[1];
  month = +match[2] - 1;
  day = +match[3];
  if (!match[4]) {
    return new Date(Date.UTC(year, month, day));
  }
  hour = +match[4];
  minute = +match[5];
  second = +match[6];
  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      fraction += "0";
    }
    fraction = +fraction;
  }
  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 6e4;
    if (match[9] === "-")
      delta = -delta;
  }
  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta)
    date.setTime(date.getTime() - delta);
  return date;
}
function representYamlTimestamp(object) {
  return object.toISOString();
}
var timestamp = new type("tag:yaml.org,2002:timestamp", {
  kind: "scalar",
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});
function resolveYamlMerge(data) {
  return data === "<<" || data === null;
}
var merge2 = new type("tag:yaml.org,2002:merge", {
  kind: "scalar",
  resolve: resolveYamlMerge
});
var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
function resolveYamlBinary(data) {
  if (data === null)
    return false;
  var code, idx, bitlen = 0, max = data.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    code = map2.indexOf(data.charAt(idx));
    if (code > 64)
      continue;
    if (code < 0)
      return false;
    bitlen += 6;
  }
  return bitlen % 8 === 0;
}
function constructYamlBinary(data) {
  var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map2 = BASE64_MAP, bits = 0, result = [];
  for (idx = 0; idx < max; idx++) {
    if (idx % 4 === 0 && idx) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    }
    bits = bits << 6 | map2.indexOf(input.charAt(idx));
  }
  tailbits = max % 4 * 6;
  if (tailbits === 0) {
    result.push(bits >> 16 & 255);
    result.push(bits >> 8 & 255);
    result.push(bits & 255);
  } else if (tailbits === 18) {
    result.push(bits >> 10 & 255);
    result.push(bits >> 2 & 255);
  } else if (tailbits === 12) {
    result.push(bits >> 4 & 255);
  }
  return new Uint8Array(result);
}
function representYamlBinary(object) {
  var result = "", bits = 0, idx, tail, max = object.length, map2 = BASE64_MAP;
  for (idx = 0; idx < max; idx++) {
    if (idx % 3 === 0 && idx) {
      result += map2[bits >> 18 & 63];
      result += map2[bits >> 12 & 63];
      result += map2[bits >> 6 & 63];
      result += map2[bits & 63];
    }
    bits = (bits << 8) + object[idx];
  }
  tail = max % 3;
  if (tail === 0) {
    result += map2[bits >> 18 & 63];
    result += map2[bits >> 12 & 63];
    result += map2[bits >> 6 & 63];
    result += map2[bits & 63];
  } else if (tail === 2) {
    result += map2[bits >> 10 & 63];
    result += map2[bits >> 4 & 63];
    result += map2[bits << 2 & 63];
    result += map2[64];
  } else if (tail === 1) {
    result += map2[bits >> 2 & 63];
    result += map2[bits << 4 & 63];
    result += map2[64];
    result += map2[64];
  }
  return result;
}
function isBinary(obj) {
  return Object.prototype.toString.call(obj) === "[object Uint8Array]";
}
var binary = new type("tag:yaml.org,2002:binary", {
  kind: "scalar",
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});
var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2 = Object.prototype.toString;
function resolveYamlOmap(data) {
  if (data === null)
    return true;
  var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;
    if (_toString$2.call(pair) !== "[object Object]")
      return false;
    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey)
          pairHasKey = true;
        else
          return false;
      }
    }
    if (!pairHasKey)
      return false;
    if (objectKeys.indexOf(pairKey) === -1)
      objectKeys.push(pairKey);
    else
      return false;
  }
  return true;
}
function constructYamlOmap(data) {
  return data !== null ? data : [];
}
var omap = new type("tag:yaml.org,2002:omap", {
  kind: "sequence",
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});
var _toString$1 = Object.prototype.toString;
function resolveYamlPairs(data) {
  if (data === null)
    return true;
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    if (_toString$1.call(pair) !== "[object Object]")
      return false;
    keys = Object.keys(pair);
    if (keys.length !== 1)
      return false;
    result[index] = [keys[0], pair[keys[0]]];
  }
  return true;
}
function constructYamlPairs(data) {
  if (data === null)
    return [];
  var index, length, pair, keys, result, object = data;
  result = new Array(object.length);
  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    keys = Object.keys(pair);
    result[index] = [keys[0], pair[keys[0]]];
  }
  return result;
}
var pairs = new type("tag:yaml.org,2002:pairs", {
  kind: "sequence",
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});
var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
function resolveYamlSet(data) {
  if (data === null)
    return true;
  var key, object = data;
  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null)
        return false;
    }
  }
  return true;
}
function constructYamlSet(data) {
  return data !== null ? data : {};
}
var set = new type("tag:yaml.org,2002:set", {
  kind: "mapping",
  resolve: resolveYamlSet,
  construct: constructYamlSet
});
var _default = core.extend({
  implicit: [
    timestamp,
    merge2
  ],
  explicit: [
    binary,
    omap,
    pairs,
    set
  ]
});
var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var CONTEXT_FLOW_IN = 1;
var CONTEXT_FLOW_OUT = 2;
var CONTEXT_BLOCK_IN = 3;
var CONTEXT_BLOCK_OUT = 4;
var CHOMPING_CLIP = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP = 3;
var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function is_EOL(c) {
  return c === 10 || c === 13;
}
function is_WHITE_SPACE(c) {
  return c === 9 || c === 32;
}
function is_WS_OR_EOL(c) {
  return c === 9 || c === 32 || c === 10 || c === 13;
}
function is_FLOW_INDICATOR(c) {
  return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
}
function fromHexCode(c) {
  var lc;
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  lc = c | 32;
  if (97 <= lc && lc <= 102) {
    return lc - 97 + 10;
  }
  return -1;
}
function escapedHexLen(c) {
  if (c === 120) {
    return 2;
  }
  if (c === 117) {
    return 4;
  }
  if (c === 85) {
    return 8;
  }
  return 0;
}
function fromDecimalCode(c) {
  if (48 <= c && c <= 57) {
    return c - 48;
  }
  return -1;
}
function simpleEscapeSequence(c) {
  return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "	" : c === 9 ? "	" : c === 110 ? "\n" : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
}
function charFromCodepoint(c) {
  if (c <= 65535) {
    return String.fromCharCode(c);
  }
  return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
}
var simpleEscapeCheck = new Array(256);
var simpleEscapeMap = new Array(256);
for (i = 0; i < 256; i++) {
  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
  simpleEscapeMap[i] = simpleEscapeSequence(i);
}
var i;
function State$1(input, options) {
  this.input = input;
  this.filename = options["filename"] || null;
  this.schema = options["schema"] || _default;
  this.onWarning = options["onWarning"] || null;
  this.legacy = options["legacy"] || false;
  this.json = options["json"] || false;
  this.listener = options["listener"] || null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap = this.schema.compiledTypeMap;
  this.length = input.length;
  this.position = 0;
  this.line = 0;
  this.lineStart = 0;
  this.lineIndent = 0;
  this.firstTabInLine = -1;
  this.documents = [];
}
function generateError(state, message) {
  var mark = {
    name: state.filename,
    buffer: state.input.slice(0, -1),
    position: state.position,
    line: state.line,
    column: state.position - state.lineStart
  };
  mark.snippet = snippet(mark);
  return new exception(message, mark);
}
function throwError(state, message) {
  throw generateError(state, message);
}
function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}
var directiveHandlers = {
  YAML: function handleYamlDirective(state, name, args) {
    var match, major, minor;
    if (state.version !== null) {
      throwError(state, "duplication of %YAML directive");
    }
    if (args.length !== 1) {
      throwError(state, "YAML directive accepts exactly one argument");
    }
    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
    if (match === null) {
      throwError(state, "ill-formed argument of the YAML directive");
    }
    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);
    if (major !== 1) {
      throwError(state, "unacceptable YAML version of the document");
    }
    state.version = args[0];
    state.checkLineBreaks = minor < 2;
    if (minor !== 1 && minor !== 2) {
      throwWarning(state, "unsupported YAML version of the document");
    }
  },
  TAG: function handleTagDirective(state, name, args) {
    var handle, prefix;
    if (args.length !== 2) {
      throwError(state, "TAG directive accepts exactly two arguments");
    }
    handle = args[0];
    prefix = args[1];
    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
    }
    if (_hasOwnProperty$1.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }
    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
    }
    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, "tag prefix is malformed: " + prefix);
    }
    state.tagMap[handle] = prefix;
  }
};
function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;
  if (start < end) {
    _result = state.input.slice(start, end);
    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
          throwError(state, "expected valid JSON character");
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, "the stream contains non-printable characters");
    }
    state.result += _result;
  }
}
function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;
  if (!common.isObject(source)) {
    throwError(state, "cannot merge mappings; the provided source object is unacceptable");
  }
  sourceKeys = Object.keys(source);
  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];
    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}
function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
  var index, quantity;
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);
    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, "nested arrays are not supported inside keys");
      }
      if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
        keyNode[index] = "[object Object]";
      }
    }
  }
  if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
    keyNode = "[object Object]";
  }
  keyNode = String(keyNode);
  if (_result === null) {
    _result = {};
  }
  if (keyTag === "tag:yaml.org,2002:merge") {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json && !_hasOwnProperty$1.call(overridableKeys, keyNode) && _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, "duplicated mapping key");
    }
    if (keyNode === "__proto__") {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }
  return _result;
}
function readLineBreak(state) {
  var ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 10) {
    state.position++;
  } else if (ch === 13) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 10) {
      state.position++;
    }
  } else {
    throwError(state, "a line break is expected");
  }
  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}
function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 9 && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    if (allowComments && ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 10 && ch !== 13 && ch !== 0);
    }
    if (is_EOL(ch)) {
      readLineBreak(state);
      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;
      while (ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }
  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, "deficient indentation");
  }
  return lineBreaks;
}
function testDocumentSeparator(state) {
  var _position = state.position, ch;
  ch = state.input.charCodeAt(_position);
  if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
    _position += 3;
    ch = state.input.charCodeAt(_position);
    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }
  return false;
}
function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += " ";
  } else if (count > 1) {
    state.result += common.repeat("\n", count - 1);
  }
}
function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
  ch = state.input.charCodeAt(state.position);
  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
    return false;
  }
  if (ch === 63 || ch === 45) {
    following = state.input.charCodeAt(state.position + 1);
    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }
  state.kind = "scalar";
  state.result = "";
  captureStart = captureEnd = state.position;
  hasPendingContent = false;
  while (ch !== 0) {
    if (ch === 58) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }
    } else if (ch === 35) {
      preceding = state.input.charCodeAt(state.position - 1);
      if (is_WS_OR_EOL(preceding)) {
        break;
      }
    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;
    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);
      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }
    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }
    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }
    ch = state.input.charCodeAt(++state.position);
  }
  captureSegment(state, captureStart, captureEnd, false);
  if (state.result) {
    return true;
  }
  state.kind = _kind;
  state.result = _result;
  return false;
}
function readSingleQuotedScalar(state, nodeIndent) {
  var ch, captureStart, captureEnd;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 39) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 39) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (ch === 39) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a single quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a single quoted scalar");
}
function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 34) {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  state.position++;
  captureStart = captureEnd = state.position;
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 34) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;
    } else if (ch === 92) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);
      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;
      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;
        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);
          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;
          } else {
            throwError(state, "expected hexadecimal character");
          }
        }
        state.result += charFromCodepoint(hexResult);
        state.position++;
      } else {
        throwError(state, "unknown escape sequence");
      }
      captureStart = captureEnd = state.position;
    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;
    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, "unexpected end of the document within a double quoted scalar");
    } else {
      state.position++;
      captureEnd = state.position;
    }
  }
  throwError(state, "unexpected end of the stream within a double quoted scalar");
}
function readFlowCollection(state, nodeIndent) {
  var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = /* @__PURE__ */ Object.create(null), keyNode, keyTag, valueNode, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 91) {
    terminator = 93;
    isMapping = false;
    _result = [];
  } else if (ch === 123) {
    terminator = 125;
    isMapping = true;
    _result = {};
  } else {
    return false;
  }
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(++state.position);
  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? "mapping" : "sequence";
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, "missed comma between flow collection entries");
    } else if (ch === 44) {
      throwError(state, "expected the node content, but found ','");
    }
    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;
    if (ch === 63) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }
    _line = state.line;
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if ((isExplicitPair || state.line === _line) && ch === 58) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }
    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }
    skipSeparationSpace(state, true, nodeIndent);
    ch = state.input.charCodeAt(state.position);
    if (ch === 44) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }
  throwError(state, "unexpected end of the stream within a flow collection");
}
function readBlockScalar(state, nodeIndent) {
  var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch === 124) {
    folding = false;
  } else if (ch === 62) {
    folding = true;
  } else {
    return false;
  }
  state.kind = "scalar";
  state.result = "";
  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);
    if (ch === 43 || ch === 45) {
      if (CHOMPING_CLIP === chomping) {
        chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, "repeat of a chomping mode identifier");
      }
    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, "repeat of an indentation width identifier");
      }
    } else {
      break;
    }
  }
  if (is_WHITE_SPACE(ch)) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (is_WHITE_SPACE(ch));
    if (ch === 35) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (!is_EOL(ch) && ch !== 0);
    }
  }
  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;
    ch = state.input.charCodeAt(state.position);
    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }
    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }
    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }
    if (state.lineIndent < textIndent) {
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) {
          state.result += "\n";
        }
      }
      break;
    }
    if (folding) {
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat("\n", emptyLines + 1);
      } else if (emptyLines === 0) {
        if (didReadContent) {
          state.result += " ";
        }
      } else {
        state.result += common.repeat("\n", emptyLines);
      }
    } else {
      state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
    }
    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;
    while (!is_EOL(ch) && ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, state.position, false);
  }
  return true;
}
function readBlockSequence(state, nodeIndent) {
  var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
  if (state.firstTabInLine !== -1)
    return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    if (ch !== 45) {
      break;
    }
    following = state.input.charCodeAt(state.position + 1);
    if (!is_WS_OR_EOL(following)) {
      break;
    }
    detected = true;
    state.position++;
    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }
    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a sequence entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "sequence";
    state.result = _result;
    return true;
  }
  return false;
}
function readBlockMapping(state, nodeIndent, flowIndent) {
  var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = /* @__PURE__ */ Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
  if (state.firstTabInLine !== -1)
    return false;
  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }
  ch = state.input.charCodeAt(state.position);
  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, "tab characters must not be used in indentation");
    }
    following = state.input.charCodeAt(state.position + 1);
    _line = state.line;
    if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
      if (ch === 63) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }
        detected = true;
        atExplicitKey = true;
        allowCompact = true;
      } else if (atExplicitKey) {
        atExplicitKey = false;
        allowCompact = true;
      } else {
        throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
      }
      state.position += 1;
      ch = following;
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;
      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        break;
      }
      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 58) {
          ch = state.input.charCodeAt(++state.position);
          if (!is_WS_OR_EOL(ch)) {
            throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
          }
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;
        } else if (detected) {
          throwError(state, "can not read an implicit mapping pair; a colon is missed");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      } else if (detected) {
        throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true;
      }
    }
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }
      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }
      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }
    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
      throwError(state, "bad indentation of a mapping entry");
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = "mapping";
    state.result = _result;
  }
  return detected;
}
function readTagProperty(state) {
  var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 33)
    return false;
  if (state.tag !== null) {
    throwError(state, "duplication of a tag property");
  }
  ch = state.input.charCodeAt(++state.position);
  if (ch === 60) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);
  } else if (ch === 33) {
    isNamed = true;
    tagHandle = "!!";
    ch = state.input.charCodeAt(++state.position);
  } else {
    tagHandle = "!";
  }
  _position = state.position;
  if (isVerbatim) {
    do {
      ch = state.input.charCodeAt(++state.position);
    } while (ch !== 0 && ch !== 62);
    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, "unexpected end of the stream within a verbatim tag");
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      if (ch === 33) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);
          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, "named tag handle cannot contain such characters");
          }
          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, "tag suffix cannot contain exclamation marks");
        }
      }
      ch = state.input.charCodeAt(++state.position);
    }
    tagName = state.input.slice(_position, state.position);
    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, "tag suffix cannot contain flow indicator characters");
    }
  }
  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, "tag name cannot contain such characters: " + tagName);
  }
  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, "tag name is malformed: " + tagName);
  }
  if (isVerbatim) {
    state.tag = tagName;
  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;
  } else if (tagHandle === "!") {
    state.tag = "!" + tagName;
  } else if (tagHandle === "!!") {
    state.tag = "tag:yaml.org,2002:" + tagName;
  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }
  return true;
}
function readAnchorProperty(state) {
  var _position, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 38)
    return false;
  if (state.anchor !== null) {
    throwError(state, "duplication of an anchor property");
  }
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an anchor node must contain at least one character");
  }
  state.anchor = state.input.slice(_position, state.position);
  return true;
}
function readAlias(state) {
  var _position, alias, ch;
  ch = state.input.charCodeAt(state.position);
  if (ch !== 42)
    return false;
  ch = state.input.charCodeAt(++state.position);
  _position = state.position;
  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }
  if (state.position === _position) {
    throwError(state, "name of an alias node must contain at least one character");
  }
  alias = state.input.slice(_position, state.position);
  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }
  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}
function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type2, flowIndent, blockIndent;
  if (state.listener !== null) {
    state.listener("open", state);
  }
  state.tag = null;
  state.anchor = null;
  state.kind = null;
  state.result = null;
  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;
      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }
  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }
  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }
  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }
    blockIndent = state.position - state.lineStart;
    if (indentStatus === 1) {
      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;
        } else if (readAlias(state)) {
          hasContent = true;
          if (state.tag !== null || state.anchor !== null) {
            throwError(state, "alias node should not have any properties");
          }
        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;
          if (state.tag === null) {
            state.tag = "?";
          }
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }
  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }
  } else if (state.tag === "?") {
    if (state.result !== null && state.kind !== "scalar") {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }
    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type2 = state.implicitTypes[typeIndex];
      if (type2.resolve(state.result)) {
        state.result = type2.construct(state.result);
        state.tag = type2.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== "!") {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || "fallback"], state.tag)) {
      type2 = state.typeMap[state.kind || "fallback"][state.tag];
    } else {
      type2 = null;
      typeList = state.typeMap.multi[state.kind || "fallback"];
      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type2 = typeList[typeIndex];
          break;
        }
      }
    }
    if (!type2) {
      throwError(state, "unknown tag !<" + state.tag + ">");
    }
    if (state.result !== null && type2.kind !== state.kind) {
      throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type2.kind + '", not "' + state.kind + '"');
    }
    if (!type2.resolve(state.result, state.tag)) {
      throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
    } else {
      state.result = type2.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }
  if (state.listener !== null) {
    state.listener("close", state);
  }
  return state.tag !== null || state.anchor !== null || hasContent;
}
function readDocument(state) {
  var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = /* @__PURE__ */ Object.create(null);
  state.anchorMap = /* @__PURE__ */ Object.create(null);
  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);
    ch = state.input.charCodeAt(state.position);
    if (state.lineIndent > 0 || ch !== 37) {
      break;
    }
    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];
    if (directiveName.length < 1) {
      throwError(state, "directive name must not be less than one character in length");
    }
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 0 && !is_EOL(ch));
        break;
      }
      if (is_EOL(ch))
        break;
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveArgs.push(state.input.slice(_position, state.position));
    }
    if (ch !== 0)
      readLineBreak(state);
    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }
  skipSeparationSpace(state, true, -1);
  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);
  } else if (hasDirectives) {
    throwError(state, "directives end mark is expected");
  }
  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);
  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, "non-ASCII line breaks are interpreted as content");
  }
  state.documents.push(state.result);
  if (state.position === state.lineStart && testDocumentSeparator(state)) {
    if (state.input.charCodeAt(state.position) === 46) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }
  if (state.position < state.length - 1) {
    throwError(state, "end of the stream or a document separator is expected");
  } else {
    return;
  }
}
function loadDocuments(input, options) {
  input = String(input);
  options = options || {};
  if (input.length !== 0) {
    if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
      input += "\n";
    }
    if (input.charCodeAt(0) === 65279) {
      input = input.slice(1);
    }
  }
  var state = new State$1(input, options);
  var nullpos = input.indexOf("\0");
  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, "null byte is not allowed in input");
  }
  state.input += "\0";
  while (state.input.charCodeAt(state.position) === 32) {
    state.lineIndent += 1;
    state.position += 1;
  }
  while (state.position < state.length - 1) {
    readDocument(state);
  }
  return state.documents;
}
function loadAll$1(input, iterator, options) {
  if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
    options = iterator;
    iterator = null;
  }
  var documents = loadDocuments(input, options);
  if (typeof iterator !== "function") {
    return documents;
  }
  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}
function load$1(input, options) {
  var documents = loadDocuments(input, options);
  if (documents.length === 0) {
    return void 0;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception("expected a single document in the stream, but found more");
}
var loadAll_1 = loadAll$1;
var load_1 = load$1;
var loader = {
  loadAll: loadAll_1,
  load: load_1
};
var _toString = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;
var CHAR_BOM = 65279;
var CHAR_TAB = 9;
var CHAR_LINE_FEED = 10;
var CHAR_CARRIAGE_RETURN = 13;
var CHAR_SPACE = 32;
var CHAR_EXCLAMATION = 33;
var CHAR_DOUBLE_QUOTE = 34;
var CHAR_SHARP = 35;
var CHAR_PERCENT = 37;
var CHAR_AMPERSAND = 38;
var CHAR_SINGLE_QUOTE = 39;
var CHAR_ASTERISK = 42;
var CHAR_COMMA = 44;
var CHAR_MINUS = 45;
var CHAR_COLON = 58;
var CHAR_EQUALS = 61;
var CHAR_GREATER_THAN = 62;
var CHAR_QUESTION = 63;
var CHAR_COMMERCIAL_AT = 64;
var CHAR_LEFT_SQUARE_BRACKET = 91;
var CHAR_RIGHT_SQUARE_BRACKET = 93;
var CHAR_GRAVE_ACCENT = 96;
var CHAR_LEFT_CURLY_BRACKET = 123;
var CHAR_VERTICAL_LINE = 124;
var CHAR_RIGHT_CURLY_BRACKET = 125;
var ESCAPE_SEQUENCES = {};
ESCAPE_SEQUENCES[0] = "\\0";
ESCAPE_SEQUENCES[7] = "\\a";
ESCAPE_SEQUENCES[8] = "\\b";
ESCAPE_SEQUENCES[9] = "\\t";
ESCAPE_SEQUENCES[10] = "\\n";
ESCAPE_SEQUENCES[11] = "\\v";
ESCAPE_SEQUENCES[12] = "\\f";
ESCAPE_SEQUENCES[13] = "\\r";
ESCAPE_SEQUENCES[27] = "\\e";
ESCAPE_SEQUENCES[34] = '\\"';
ESCAPE_SEQUENCES[92] = "\\\\";
ESCAPE_SEQUENCES[133] = "\\N";
ESCAPE_SEQUENCES[160] = "\\_";
ESCAPE_SEQUENCES[8232] = "\\L";
ESCAPE_SEQUENCES[8233] = "\\P";
var DEPRECATED_BOOLEANS_SYNTAX = [
  "y",
  "Y",
  "yes",
  "Yes",
  "YES",
  "on",
  "On",
  "ON",
  "n",
  "N",
  "no",
  "No",
  "NO",
  "off",
  "Off",
  "OFF"
];
var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
function compileStyleMap(schema2, map2) {
  var result, keys, index, length, tag, style, type2;
  if (map2 === null)
    return {};
  result = {};
  keys = Object.keys(map2);
  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map2[tag]);
    if (tag.slice(0, 2) === "!!") {
      tag = "tag:yaml.org,2002:" + tag.slice(2);
    }
    type2 = schema2.compiledTypeMap["fallback"][tag];
    if (type2 && _hasOwnProperty.call(type2.styleAliases, style)) {
      style = type2.styleAliases[style];
    }
    result[tag] = style;
  }
  return result;
}
function encodeHex(character) {
  var string, handle, length;
  string = character.toString(16).toUpperCase();
  if (character <= 255) {
    handle = "x";
    length = 2;
  } else if (character <= 65535) {
    handle = "u";
    length = 4;
  } else if (character <= 4294967295) {
    handle = "U";
    length = 8;
  } else {
    throw new exception("code point within a string may not be greater than 0xFFFFFFFF");
  }
  return "\\" + handle + common.repeat("0", length - string.length) + string;
}
var QUOTING_TYPE_SINGLE = 1;
var QUOTING_TYPE_DOUBLE = 2;
function State(options) {
  this.schema = options["schema"] || _default;
  this.indent = Math.max(1, options["indent"] || 2);
  this.noArrayIndent = options["noArrayIndent"] || false;
  this.skipInvalid = options["skipInvalid"] || false;
  this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
  this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
  this.sortKeys = options["sortKeys"] || false;
  this.lineWidth = options["lineWidth"] || 80;
  this.noRefs = options["noRefs"] || false;
  this.noCompatMode = options["noCompatMode"] || false;
  this.condenseFlow = options["condenseFlow"] || false;
  this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes = options["forceQuotes"] || false;
  this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;
  this.tag = null;
  this.result = "";
  this.duplicates = [];
  this.usedDuplicates = null;
}
function indentString(string, spaces) {
  var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
  while (position < length) {
    next = string.indexOf("\n", position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }
    if (line.length && line !== "\n")
      result += ind;
    result += line;
  }
  return result;
}
function generateNextLine(state, level) {
  return "\n" + common.repeat(" ", state.indent * level);
}
function testImplicitResolving(state, str2) {
  var index, length, type2;
  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type2 = state.implicitTypes[index];
    if (type2.resolve(str2)) {
      return true;
    }
  }
  return false;
}
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}
function isPrintable(c) {
  return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
}
function isNsCharOrWhitespace(c) {
  return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
}
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (inblock ? cIsNsCharOrWhitespace : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar;
}
function isPlainSafeFirst(c) {
  return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
}
function isPlainSafeLast(c) {
  return !isWhitespace(c) && c !== CHAR_COLON;
}
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 56320 && second <= 57343) {
      return (first - 55296) * 1024 + second - 56320 + 65536;
    }
  }
  return first;
}
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}
var STYLE_PLAIN = 1;
var STYLE_SINGLE = 2;
var STYLE_LITERAL = 3;
var STYLE_FOLDED = 4;
var STYLE_DOUBLE = 5;
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false;
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1;
  var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
  if (singleLineOnly || forceQuotes) {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    for (i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
  }
  if (!hasLineBreak && !hasFoldableLine) {
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = function() {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
      }
    }
    var indent4 = state.indent * Math.max(1, level);
    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent4);
    var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
    function testAmbiguity(string2) {
      return testImplicitResolving(state, string2);
    }
    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {
      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent4));
      case STYLE_FOLDED:
        return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent4));
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"';
      default:
        throw new exception("impossible error: invalid scalar style");
    }
  }();
}
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
  var clip = string[string.length - 1] === "\n";
  var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
  var chomp = keep ? "+" : clip ? "" : "-";
  return indentIndicator + chomp + "\n";
}
function dropEndingNewline(string) {
  return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
}
function foldString(string, width) {
  var lineRe = /(\n+)([^\n]*)/g;
  var result = function() {
    var nextLF = string.indexOf("\n");
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }();
  var prevMoreIndented = string[0] === "\n" || string[0] === " ";
  var moreIndented;
  var match;
  while (match = lineRe.exec(string)) {
    var prefix = match[1], line = match[2];
    moreIndented = line[0] === " ";
    result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }
  return result;
}
function foldLine(line, width) {
  if (line === "" || line[0] === " ")
    return line;
  var breakRe = / [^ ]/g;
  var match;
  var start = 0, end, curr = 0, next = 0;
  var result = "";
  while (match = breakRe.exec(line)) {
    next = match.index;
    if (next - start > width) {
      end = curr > start ? curr : next;
      result += "\n" + line.slice(start, end);
      start = end + 1;
    }
    curr = next;
  }
  result += "\n";
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }
  return result.slice(1);
}
function escapeString(string) {
  var result = "";
  var char = 0;
  var escapeSeq;
  for (var i = 0; i < string.length; char >= 65536 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];
    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 65536)
        result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }
  return result;
}
function writeFlowSequence(state, level, object) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
      if (_result !== "")
        _result += "," + (!state.condenseFlow ? " " : "");
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = "[" + _result + "]";
}
function writeBlockSequence(state, level, object, compact) {
  var _result = "", _tag = state.tag, index, length, value;
  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];
    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }
    if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
      if (!compact || _result !== "") {
        _result += generateNextLine(state, level);
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += "-";
      } else {
        _result += "- ";
      }
      _result += state.dump;
    }
  }
  state.tag = _tag;
  state.dump = _result || "[]";
}
function writeFlowMapping(state, level, object) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (_result !== "")
      pairBuffer += ", ";
    if (state.condenseFlow)
      pairBuffer += '"';
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level, objectKey, false, false)) {
      continue;
    }
    if (state.dump.length > 1024)
      pairBuffer += "? ";
    pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
    if (!writeNode(state, level, objectValue, false, false)) {
      continue;
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = "{" + _result + "}";
}
function writeBlockMapping(state, level, object, compact) {
  var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
  if (state.sortKeys === true) {
    objectKeyList.sort();
  } else if (typeof state.sortKeys === "function") {
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    throw new exception("sortKeys must be a boolean or a function");
  }
  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = "";
    if (!compact || _result !== "") {
      pairBuffer += generateNextLine(state, level);
    }
    objectKey = objectKeyList[index];
    objectValue = object[objectKey];
    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }
    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue;
    }
    explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += "?";
      } else {
        pairBuffer += "? ";
      }
    }
    pairBuffer += state.dump;
    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }
    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue;
    }
    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ":";
    } else {
      pairBuffer += ": ";
    }
    pairBuffer += state.dump;
    _result += pairBuffer;
  }
  state.tag = _tag;
  state.dump = _result || "{}";
}
function detectType(state, object, explicit) {
  var _result, typeList, index, length, type2, style;
  typeList = explicit ? state.explicitTypes : state.implicitTypes;
  for (index = 0, length = typeList.length; index < length; index += 1) {
    type2 = typeList[index];
    if ((type2.instanceOf || type2.predicate) && (!type2.instanceOf || typeof object === "object" && object instanceof type2.instanceOf) && (!type2.predicate || type2.predicate(object))) {
      if (explicit) {
        if (type2.multi && type2.representName) {
          state.tag = type2.representName(object);
        } else {
          state.tag = type2.tag;
        }
      } else {
        state.tag = "?";
      }
      if (type2.represent) {
        style = state.styleMap[type2.tag] || type2.defaultStyle;
        if (_toString.call(type2.represent) === "[object Function]") {
          _result = type2.represent(object, style);
        } else if (_hasOwnProperty.call(type2.represent, style)) {
          _result = type2.represent[style](object, style);
        } else {
          throw new exception("!<" + type2.tag + '> tag resolver accepts not "' + style + '" style');
        }
        state.dump = _result;
      }
      return true;
    }
  }
  return false;
}
function writeNode(state, level, object, block4, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;
  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }
  var type2 = _toString.call(state.dump);
  var inblock = block4;
  var tagStr;
  if (block4) {
    block4 = state.flowLevel < 0 || state.flowLevel > level;
  }
  var objectOrArray = type2 === "[object Object]" || type2 === "[object Array]", duplicateIndex, duplicate;
  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }
  if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
    compact = false;
  }
  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = "*ref_" + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type2 === "[object Object]") {
      if (block4 && Object.keys(state.dump).length !== 0) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object Array]") {
      if (block4 && state.dump.length !== 0) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = "&ref_" + duplicateIndex + " " + state.dump;
        }
      }
    } else if (type2 === "[object String]") {
      if (state.tag !== "?") {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type2 === "[object Undefined]") {
      return false;
    } else {
      if (state.skipInvalid)
        return false;
      throw new exception("unacceptable kind of an object to dump " + type2);
    }
    if (state.tag !== null && state.tag !== "?") {
      tagStr = encodeURI(state.tag[0] === "!" ? state.tag.slice(1) : state.tag).replace(/!/g, "%21");
      if (state.tag[0] === "!") {
        tagStr = "!" + tagStr;
      } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
        tagStr = "!!" + tagStr.slice(18);
      } else {
        tagStr = "!<" + tagStr + ">";
      }
      state.dump = tagStr + " " + state.dump;
    }
  }
  return true;
}
function getDuplicateReferences(object, state) {
  var objects = [], duplicatesIndexes = [], index, length;
  inspectNode(object, objects, duplicatesIndexes);
  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}
function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList, index, length;
  if (object !== null && typeof object === "object") {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);
      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);
        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}
function dump$1(input, options) {
  options = options || {};
  var state = new State(options);
  if (!state.noRefs)
    getDuplicateReferences(input, state);
  var value = input;
  if (state.replacer) {
    value = state.replacer.call({ "": value }, "", value);
  }
  if (writeNode(state, 0, value, true, true))
    return state.dump + "\n";
  return "";
}
var dump_1 = dump$1;
var dumper = {
  dump: dump_1
};
function renamed(from2, to) {
  return function() {
    throw new Error("Function yaml." + from2 + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
  };
}
var Type = type;
var DEFAULT_SCHEMA = _default;
var load = loader.load;
var loadAll = loader.loadAll;
var dump = dumper.dump;
var safeLoad = renamed("safeLoad", "load");
var safeLoadAll = renamed("safeLoadAll", "loadAll");
var safeDump = renamed("safeDump", "dump");

// node_modules/@graphql-mesh/cross-helpers/browser.js
init_virtual_process_polyfill();
init_buffer();
var import_path_browserify = __toESM(require_path_browserify());

// node_modules/@graphql-mesh/cross-helpers/node_modules/@graphql-tools/utils/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var AggregateErrorImpl2;
if (typeof AggregateError === "undefined") {
  class AggregateErrorClass extends Error {
    constructor(errors, message = "") {
      super(message);
      this.errors = errors;
      this.name = "AggregateError";
      Error.captureStackTrace(this, AggregateErrorClass);
    }
  }
  AggregateErrorImpl2 = function(errors, message) {
    return new AggregateErrorClass(errors, message);
  };
} else {
  AggregateErrorImpl2 = AggregateError;
}
function isAggregateError2(error) {
  return "errors" in error && Array.isArray(error["errors"]);
}
var MAX_RECURSIVE_DEPTH3 = 3;
function inspect3(value) {
  return formatValue3(value, []);
}
function formatValue3(value, seenValues) {
  switch (typeof value) {
    case "string":
      return JSON.stringify(value);
    case "function":
      return value.name ? `[function ${value.name}]` : "[function]";
    case "object":
      return formatObjectValue3(value, seenValues);
    default:
      return String(value);
  }
}
function formatError5(value) {
  if (value instanceof GraphQLError) {
    return value.toString();
  }
  return `${value.name}: ${value.message};
 ${value.stack}`;
}
function formatObjectValue3(value, previouslySeenValues) {
  if (value === null) {
    return "null";
  }
  if (value instanceof Error) {
    if (isAggregateError2(value)) {
      return formatError5(value) + "\n" + formatArray3(value.errors, previouslySeenValues);
    }
    return formatError5(value);
  }
  if (previouslySeenValues.includes(value)) {
    return "[Circular]";
  }
  const seenValues = [...previouslySeenValues, value];
  if (isJSONable3(value)) {
    const jsonValue = value.toJSON();
    if (jsonValue !== value) {
      return typeof jsonValue === "string" ? jsonValue : formatValue3(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray3(value, seenValues);
  }
  return formatObject3(value, seenValues);
}
function isJSONable3(value) {
  return typeof value.toJSON === "function";
}
function formatObject3(object, seenValues) {
  const entries = Object.entries(object);
  if (entries.length === 0) {
    return "{}";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH3) {
    return "[" + getObjectTag3(object) + "]";
  }
  const properties = entries.map(([key, value]) => key + ": " + formatValue3(value, seenValues));
  return "{ " + properties.join(", ") + " }";
}
function formatArray3(array, seenValues) {
  if (array.length === 0) {
    return "[]";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH3) {
    return "[Array]";
  }
  const len = array.length;
  const remaining = array.length;
  const items = [];
  for (let i = 0; i < len; ++i) {
    items.push(formatValue3(array[i], seenValues));
  }
  if (remaining === 1) {
    items.push("... 1 more item");
  } else if (remaining > 1) {
    items.push(`... ${remaining} more items`);
  }
  return "[" + items.join(", ") + "]";
}
function getObjectTag3(object) {
  const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
  if (tag === "Object" && typeof object.constructor === "function") {
    const name = object.constructor.name;
    if (typeof name === "string" && name !== "") {
      return name;
    }
  }
  return tag;
}
function memoize12(fn) {
  const memoize1cache = /* @__PURE__ */ new WeakMap();
  return function memoized(a1) {
    const cachedValue = memoize1cache.get(a1);
    if (cachedValue === void 0) {
      const newValue = fn(a1);
      memoize1cache.set(a1, newValue);
      return newValue;
    }
    return cachedValue;
  };
}
function memoize22(fn) {
  const memoize2cache = /* @__PURE__ */ new WeakMap();
  return function memoized(a1, a2) {
    let cache2 = memoize2cache.get(a1);
    if (!cache2) {
      cache2 = /* @__PURE__ */ new WeakMap();
      memoize2cache.set(a1, cache2);
      const newValue = fn(a1, a2);
      cache2.set(a2, newValue);
      return newValue;
    }
    const cachedValue = cache2.get(a2);
    if (cachedValue === void 0) {
      const newValue = fn(a1, a2);
      cache2.set(a2, newValue);
      return newValue;
    }
    return cachedValue;
  };
}
function memoize52(fn) {
  const memoize5Cache = /* @__PURE__ */ new WeakMap();
  return function memoized(a1, a2, a3, a4, a5) {
    let cache2 = memoize5Cache.get(a1);
    if (!cache2) {
      cache2 = /* @__PURE__ */ new WeakMap();
      memoize5Cache.set(a1, cache2);
      const cache32 = /* @__PURE__ */ new WeakMap();
      cache2.set(a2, cache32);
      const cache42 = /* @__PURE__ */ new WeakMap();
      cache32.set(a3, cache42);
      const cache52 = /* @__PURE__ */ new WeakMap();
      cache42.set(a4, cache52);
      const newValue = fn(a1, a2, a3, a4, a5);
      cache52.set(a5, newValue);
      return newValue;
    }
    let cache3 = cache2.get(a2);
    if (!cache3) {
      cache3 = /* @__PURE__ */ new WeakMap();
      cache2.set(a2, cache3);
      const cache42 = /* @__PURE__ */ new WeakMap();
      cache3.set(a3, cache42);
      const cache52 = /* @__PURE__ */ new WeakMap();
      cache42.set(a4, cache52);
      const newValue = fn(a1, a2, a3, a4, a5);
      cache52.set(a5, newValue);
      return newValue;
    }
    let cache4 = cache3.get(a3);
    if (!cache4) {
      cache4 = /* @__PURE__ */ new WeakMap();
      cache3.set(a3, cache4);
      const cache52 = /* @__PURE__ */ new WeakMap();
      cache4.set(a4, cache52);
      const newValue = fn(a1, a2, a3, a4, a5);
      cache52.set(a5, newValue);
      return newValue;
    }
    let cache5 = cache4.get(a4);
    if (!cache5) {
      cache5 = /* @__PURE__ */ new WeakMap();
      cache4.set(a4, cache5);
      const newValue = fn(a1, a2, a3, a4, a5);
      cache5.set(a5, newValue);
      return newValue;
    }
    const cachedValue = cache5.get(a5);
    if (cachedValue === void 0) {
      const newValue = fn(a1, a2, a3, a4, a5);
      cache5.set(a5, newValue);
      return newValue;
    }
    return cachedValue;
  };
}
var getRootTypeNames3 = memoize12(function getRootTypeNames4(schema2) {
  const rootTypes = getRootTypes3(schema2);
  return new Set([...rootTypes].map((type2) => type2.name));
});
var getRootTypes3 = memoize12(function getRootTypes4(schema2) {
  const rootTypeMap = getRootTypeMap3(schema2);
  return new Set(rootTypeMap.values());
});
var getRootTypeMap3 = memoize12(function getRootTypeMap4(schema2) {
  const rootTypeMap = /* @__PURE__ */ new Map();
  const queryType = schema2.getQueryType();
  if (queryType) {
    rootTypeMap.set("query", queryType);
  }
  const mutationType = schema2.getMutationType();
  if (mutationType) {
    rootTypeMap.set("mutation", mutationType);
  }
  const subscriptionType = schema2.getSubscriptionType();
  if (subscriptionType) {
    rootTypeMap.set("subscription", subscriptionType);
  }
  return rootTypeMap;
});
var MAX_LINE_LENGTH3 = 80;
var commentsRegistry2 = {};
function printComment2(comment) {
  return "\n# " + comment.replace(/\n/g, "\n# ");
}
function join3(maybeArray, separator3) {
  return maybeArray ? maybeArray.filter((x) => x).join(separator3 || "") : "";
}
function hasMultilineItems3(maybeArray) {
  var _a2;
  return (_a2 = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str2) => str2.includes("\n"))) !== null && _a2 !== void 0 ? _a2 : false;
}
function addDescription2(cb) {
  return (node, _key, _parent, path2, ancestors) => {
    var _a2;
    const keys = [];
    const parent = path2.reduce((prev, key2) => {
      if (["fields", "arguments", "values"].includes(key2) && prev.name) {
        keys.push(prev.name.value);
      }
      return prev[key2];
    }, ancestors[0]);
    const key = [...keys, (_a2 = parent === null || parent === void 0 ? void 0 : parent.name) === null || _a2 === void 0 ? void 0 : _a2.value].filter(Boolean).join(".");
    const items = [];
    if (node.kind.includes("Definition") && commentsRegistry2[key]) {
      items.push(...commentsRegistry2[key]);
    }
    return join3([...items.map(printComment2), node.description, cb(node, _key, _parent, path2, ancestors)], "\n");
  };
}
function indent3(maybeString) {
  return maybeString && `  ${maybeString.replace(/\n/g, "\n  ")}`;
}
function block3(array) {
  return array && array.length !== 0 ? `{
${indent3(join3(array, "\n"))}
}` : "";
}
function wrap3(start, maybeString, end) {
  return maybeString ? start + maybeString + (end || "") : "";
}
function printBlockString3(value, isDescription = false) {
  const escaped = value.replace(/"""/g, '\\"""');
  return (value[0] === " " || value[0] === "	") && value.indexOf("\n") === -1 ? `"""${escaped.replace(/"$/, '"\n')}"""` : `"""
${isDescription ? escaped : indent3(escaped)}
"""`;
}
var printDocASTReducer3 = {
  Name: { leave: (node) => node.value },
  Variable: { leave: (node) => "$" + node.name },
  Document: {
    leave: (node) => join3(node.definitions, "\n\n")
  },
  OperationDefinition: {
    leave: (node) => {
      const varDefs = wrap3("(", join3(node.variableDefinitions, ", "), ")");
      const prefix = join3([node.operation, join3([node.name, varDefs]), join3(node.directives, " ")], " ");
      return prefix + " " + node.selectionSet;
    }
  },
  VariableDefinition: {
    leave: ({ variable, type: type2, defaultValue, directives }) => variable + ": " + type2 + wrap3(" = ", defaultValue) + wrap3(" ", join3(directives, " "))
  },
  SelectionSet: { leave: ({ selections }) => block3(selections) },
  Field: {
    leave({ alias, name, arguments: args, directives, selectionSet }) {
      const prefix = wrap3("", alias, ": ") + name;
      let argsLine = prefix + wrap3("(", join3(args, ", "), ")");
      if (argsLine.length > MAX_LINE_LENGTH3) {
        argsLine = prefix + wrap3("(\n", indent3(join3(args, "\n")), "\n)");
      }
      return join3([argsLine, join3(directives, " "), selectionSet], " ");
    }
  },
  Argument: { leave: ({ name, value }) => name + ": " + value },
  FragmentSpread: {
    leave: ({ name, directives }) => "..." + name + wrap3(" ", join3(directives, " "))
  },
  InlineFragment: {
    leave: ({ typeCondition, directives, selectionSet }) => join3(["...", wrap3("on ", typeCondition), join3(directives, " "), selectionSet], " ")
  },
  FragmentDefinition: {
    leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => `fragment ${name}${wrap3("(", join3(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap3("", join3(directives, " "), " ")}` + selectionSet
  },
  IntValue: { leave: ({ value }) => value },
  FloatValue: { leave: ({ value }) => value },
  StringValue: {
    leave: ({ value, block: isBlockString }) => {
      if (isBlockString) {
        return printBlockString3(value);
      }
      return JSON.stringify(value);
    }
  },
  BooleanValue: { leave: ({ value }) => value ? "true" : "false" },
  NullValue: { leave: () => "null" },
  EnumValue: { leave: ({ value }) => value },
  ListValue: { leave: ({ values }) => "[" + join3(values, ", ") + "]" },
  ObjectValue: { leave: ({ fields }) => "{" + join3(fields, ", ") + "}" },
  ObjectField: { leave: ({ name, value }) => name + ": " + value },
  Directive: {
    leave: ({ name, arguments: args }) => "@" + name + wrap3("(", join3(args, ", "), ")")
  },
  NamedType: { leave: ({ name }) => name },
  ListType: { leave: ({ type: type2 }) => "[" + type2 + "]" },
  NonNullType: { leave: ({ type: type2 }) => type2 + "!" },
  SchemaDefinition: {
    leave: ({ directives, operationTypes }) => join3(["schema", join3(directives, " "), block3(operationTypes)], " ")
  },
  OperationTypeDefinition: {
    leave: ({ operation, type: type2 }) => operation + ": " + type2
  },
  ScalarTypeDefinition: {
    leave: ({ name, directives }) => join3(["scalar", name, join3(directives, " ")], " ")
  },
  ObjectTypeDefinition: {
    leave: ({ name, interfaces, directives, fields }) => join3(["type", name, wrap3("implements ", join3(interfaces, " & ")), join3(directives, " "), block3(fields)], " ")
  },
  FieldDefinition: {
    leave: ({ name, arguments: args, type: type2, directives }) => name + (hasMultilineItems3(args) ? wrap3("(\n", indent3(join3(args, "\n")), "\n)") : wrap3("(", join3(args, ", "), ")")) + ": " + type2 + wrap3(" ", join3(directives, " "))
  },
  InputValueDefinition: {
    leave: ({ name, type: type2, defaultValue, directives }) => join3([name + ": " + type2, wrap3("= ", defaultValue), join3(directives, " ")], " ")
  },
  InterfaceTypeDefinition: {
    leave: ({ name, interfaces, directives, fields }) => join3(["interface", name, wrap3("implements ", join3(interfaces, " & ")), join3(directives, " "), block3(fields)], " ")
  },
  UnionTypeDefinition: {
    leave: ({ name, directives, types }) => join3(["union", name, join3(directives, " "), wrap3("= ", join3(types, " | "))], " ")
  },
  EnumTypeDefinition: {
    leave: ({ name, directives, values }) => join3(["enum", name, join3(directives, " "), block3(values)], " ")
  },
  EnumValueDefinition: {
    leave: ({ name, directives }) => join3([name, join3(directives, " ")], " ")
  },
  InputObjectTypeDefinition: {
    leave: ({ name, directives, fields }) => join3(["input", name, join3(directives, " "), block3(fields)], " ")
  },
  DirectiveDefinition: {
    leave: ({ name, arguments: args, repeatable, locations }) => "directive @" + name + (hasMultilineItems3(args) ? wrap3("(\n", indent3(join3(args, "\n")), "\n)") : wrap3("(", join3(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join3(locations, " | ")
  },
  SchemaExtension: {
    leave: ({ directives, operationTypes }) => join3(["extend schema", join3(directives, " "), block3(operationTypes)], " ")
  },
  ScalarTypeExtension: {
    leave: ({ name, directives }) => join3(["extend scalar", name, join3(directives, " ")], " ")
  },
  ObjectTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) => join3(["extend type", name, wrap3("implements ", join3(interfaces, " & ")), join3(directives, " "), block3(fields)], " ")
  },
  InterfaceTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) => join3(["extend interface", name, wrap3("implements ", join3(interfaces, " & ")), join3(directives, " "), block3(fields)], " ")
  },
  UnionTypeExtension: {
    leave: ({ name, directives, types }) => join3(["extend union", name, join3(directives, " "), wrap3("= ", join3(types, " | "))], " ")
  },
  EnumTypeExtension: {
    leave: ({ name, directives, values }) => join3(["extend enum", name, join3(directives, " "), block3(values)], " ")
  },
  InputObjectTypeExtension: {
    leave: ({ name, directives, fields }) => join3(["extend input", name, join3(directives, " "), block3(fields)], " ")
  }
};
var printDocASTReducerWithComments2 = Object.keys(printDocASTReducer3).reduce((prev, key) => ({
  ...prev,
  [key]: {
    leave: addDescription2(printDocASTReducer3[key].leave)
  }
}), {});
var DirectiveLocation3;
(function(DirectiveLocation4) {
  DirectiveLocation4["QUERY"] = "QUERY";
  DirectiveLocation4["MUTATION"] = "MUTATION";
  DirectiveLocation4["SUBSCRIPTION"] = "SUBSCRIPTION";
  DirectiveLocation4["FIELD"] = "FIELD";
  DirectiveLocation4["FRAGMENT_DEFINITION"] = "FRAGMENT_DEFINITION";
  DirectiveLocation4["FRAGMENT_SPREAD"] = "FRAGMENT_SPREAD";
  DirectiveLocation4["INLINE_FRAGMENT"] = "INLINE_FRAGMENT";
  DirectiveLocation4["VARIABLE_DEFINITION"] = "VARIABLE_DEFINITION";
  DirectiveLocation4["SCHEMA"] = "SCHEMA";
  DirectiveLocation4["SCALAR"] = "SCALAR";
  DirectiveLocation4["OBJECT"] = "OBJECT";
  DirectiveLocation4["FIELD_DEFINITION"] = "FIELD_DEFINITION";
  DirectiveLocation4["ARGUMENT_DEFINITION"] = "ARGUMENT_DEFINITION";
  DirectiveLocation4["INTERFACE"] = "INTERFACE";
  DirectiveLocation4["UNION"] = "UNION";
  DirectiveLocation4["ENUM"] = "ENUM";
  DirectiveLocation4["ENUM_VALUE"] = "ENUM_VALUE";
  DirectiveLocation4["INPUT_OBJECT"] = "INPUT_OBJECT";
  DirectiveLocation4["INPUT_FIELD_DEFINITION"] = "INPUT_FIELD_DEFINITION";
})(DirectiveLocation3 || (DirectiveLocation3 = {}));
var MapperKind2;
(function(MapperKind3) {
  MapperKind3["TYPE"] = "MapperKind.TYPE";
  MapperKind3["SCALAR_TYPE"] = "MapperKind.SCALAR_TYPE";
  MapperKind3["ENUM_TYPE"] = "MapperKind.ENUM_TYPE";
  MapperKind3["COMPOSITE_TYPE"] = "MapperKind.COMPOSITE_TYPE";
  MapperKind3["OBJECT_TYPE"] = "MapperKind.OBJECT_TYPE";
  MapperKind3["INPUT_OBJECT_TYPE"] = "MapperKind.INPUT_OBJECT_TYPE";
  MapperKind3["ABSTRACT_TYPE"] = "MapperKind.ABSTRACT_TYPE";
  MapperKind3["UNION_TYPE"] = "MapperKind.UNION_TYPE";
  MapperKind3["INTERFACE_TYPE"] = "MapperKind.INTERFACE_TYPE";
  MapperKind3["ROOT_OBJECT"] = "MapperKind.ROOT_OBJECT";
  MapperKind3["QUERY"] = "MapperKind.QUERY";
  MapperKind3["MUTATION"] = "MapperKind.MUTATION";
  MapperKind3["SUBSCRIPTION"] = "MapperKind.SUBSCRIPTION";
  MapperKind3["DIRECTIVE"] = "MapperKind.DIRECTIVE";
  MapperKind3["FIELD"] = "MapperKind.FIELD";
  MapperKind3["COMPOSITE_FIELD"] = "MapperKind.COMPOSITE_FIELD";
  MapperKind3["OBJECT_FIELD"] = "MapperKind.OBJECT_FIELD";
  MapperKind3["ROOT_FIELD"] = "MapperKind.ROOT_FIELD";
  MapperKind3["QUERY_ROOT_FIELD"] = "MapperKind.QUERY_ROOT_FIELD";
  MapperKind3["MUTATION_ROOT_FIELD"] = "MapperKind.MUTATION_ROOT_FIELD";
  MapperKind3["SUBSCRIPTION_ROOT_FIELD"] = "MapperKind.SUBSCRIPTION_ROOT_FIELD";
  MapperKind3["INTERFACE_FIELD"] = "MapperKind.INTERFACE_FIELD";
  MapperKind3["INPUT_OBJECT_FIELD"] = "MapperKind.INPUT_OBJECT_FIELD";
  MapperKind3["ARGUMENT"] = "MapperKind.ARGUMENT";
  MapperKind3["ENUM_VALUE"] = "MapperKind.ENUM_VALUE";
})(MapperKind2 || (MapperKind2 = {}));
function getOperationASTFromDocument2(documentNode, operationName) {
  const doc = getOperationAST(documentNode, operationName);
  if (!doc) {
    throw new Error(`Cannot infer operation ${operationName || ""}`);
  }
  return doc;
}
var getOperationASTFromRequest3 = memoize12(function getOperationASTFromRequest4(request) {
  return getOperationASTFromDocument2(request.document, request.operationName);
});
function collectFields3(schema2, fragments, variableValues, runtimeType, selectionSet, fields, visitedFragmentNames) {
  for (const selection of selectionSet.selections) {
    switch (selection.kind) {
      case Kind.FIELD: {
        if (!shouldIncludeNode3(variableValues, selection)) {
          continue;
        }
        const name = getFieldEntryKey3(selection);
        const fieldList = fields.get(name);
        if (fieldList !== void 0) {
          fieldList.push(selection);
        } else {
          fields.set(name, [selection]);
        }
        break;
      }
      case Kind.INLINE_FRAGMENT: {
        if (!shouldIncludeNode3(variableValues, selection) || !doesFragmentConditionMatch3(schema2, selection, runtimeType)) {
          continue;
        }
        collectFields3(schema2, fragments, variableValues, runtimeType, selection.selectionSet, fields, visitedFragmentNames);
        break;
      }
      case Kind.FRAGMENT_SPREAD: {
        const fragName = selection.name.value;
        if (visitedFragmentNames.has(fragName) || !shouldIncludeNode3(variableValues, selection)) {
          continue;
        }
        visitedFragmentNames.add(fragName);
        const fragment = fragments[fragName];
        if (!fragment || !doesFragmentConditionMatch3(schema2, fragment, runtimeType)) {
          continue;
        }
        collectFields3(schema2, fragments, variableValues, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);
        break;
      }
    }
  }
  return fields;
}
function shouldIncludeNode3(variableValues, node) {
  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);
  if ((skip === null || skip === void 0 ? void 0 : skip["if"]) === true) {
    return false;
  }
  const include = getDirectiveValues(GraphQLIncludeDirective, node, variableValues);
  if ((include === null || include === void 0 ? void 0 : include["if"]) === false) {
    return false;
  }
  return true;
}
function doesFragmentConditionMatch3(schema2, fragment, type2) {
  const typeConditionNode = fragment.typeCondition;
  if (!typeConditionNode) {
    return true;
  }
  const conditionalType = typeFromAST(schema2, typeConditionNode);
  if (conditionalType === type2) {
    return true;
  }
  if (isAbstractType(conditionalType)) {
    const possibleTypes = schema2.getPossibleTypes(conditionalType);
    return possibleTypes.includes(type2);
  }
  return false;
}
function getFieldEntryKey3(node) {
  return node.alias ? node.alias.value : node.name.value;
}
var collectSubFields3 = memoize52(function collectSubFields4(schema2, fragments, variableValues, type2, fieldNodes) {
  const subFieldNodes = /* @__PURE__ */ new Map();
  const visitedFragmentNames = /* @__PURE__ */ new Set();
  for (const fieldNode of fieldNodes) {
    if (fieldNode.selectionSet) {
      collectFields3(schema2, fragments, variableValues, type2, fieldNode.selectionSet, subFieldNodes, visitedFragmentNames);
    }
  }
  return subFieldNodes;
});
var proxyMethodFactory3 = memoize22(function proxyMethodFactory4(target, targetMethod) {
  return function proxyMethod(...args) {
    return Reflect.apply(targetMethod, target, args);
  };
});

// node_modules/@graphql-mesh/cross-helpers/browser.js
var fs = {
  promises: {}
};
var processObj = typeof process !== "undefined" ? process : {
  get env() {
    try {
      return new Function("return import.meta.env")();
    } catch {
      return {
        NODE_ENV: "production",
        platform: "linux"
      };
    }
  }
};
var util = {
  promisify(oldSchoolFn) {
    return function promisifiedFn(...args) {
      return new Promise(function executor(resolve2, reject3) {
        oldSchoolFn(...args, function cb(err, result) {
          if (err) {
            reject3(err);
          } else {
            resolve2(result);
          }
        });
      });
    };
  },
  inspect: inspect3
};

// node_modules/@graphql-mesh/utils/index.mjs
var import_tiny_lru3 = __toESM(require_tiny_lru3(), 1);
init_graphql();
var import_graphql_subscriptions = __toESM(require_dist(), 1);
var import_lodash2 = __toESM(require_lodash(), 1);
var import_lodash3 = __toESM(require_lodash2(), 1);
var import_lodash4 = __toESM(require_lodash3(), 1);

// node_modules/@graphql-mesh/string-interpolation/dist/index.mjs
init_virtual_process_polyfill();
init_buffer();
var import_lodash = __toESM(require_lodash(), 1);
var import_json_pointer = __toESM(require_json_pointer(), 1);
var import_dayjs = __toESM(require_dayjs_min(), 1);
var defaultOptions = {
  delimiter: ["{", "}"]
};
var uppercase = (value) => value.toUpperCase();
var lowercase = (value) => value.toLowerCase();
var titlecase = (value) => value.replace(/\w\S*/g, (s) => s.charAt(0).toUpperCase() + s.substr(1).toLowerCase());
var defaultModifiers = [
  {
    key: "uppercase",
    transform: uppercase
  },
  {
    key: "lowercase",
    transform: lowercase
  },
  {
    key: "title",
    transform: titlecase
  }
];
var Interpolator = class {
  constructor(options = defaultOptions) {
    this.options = options;
    this.modifiers = [];
    this.aliases = [];
    this.registerBuiltInModifiers();
  }
  registerBuiltInModifiers() {
    defaultModifiers.forEach((modifier) => this.registerModifier(modifier.key, modifier.transform));
    return this;
  }
  get delimiter() {
    return this.options.delimiter;
  }
  delimiterStart() {
    return this.options.delimiter[0];
  }
  delimiterEnd() {
    return this.options.delimiter[1];
  }
  registerModifier(key, transform) {
    if (!key) {
      return new Error("Modifiers must have a key");
    }
    if (typeof transform !== "function") {
      return new Error("Modifiers must have a transformer. Transformers must be a function that returns a value.");
    }
    this.modifiers.push({ key: key.toLowerCase(), transform });
    return this;
  }
  parseRules(str2) {
    const regex = `${this.delimiterStart()}([^}]+)${this.delimiterEnd()}`;
    const execRegex = new RegExp(regex, "gi");
    const matches = str2.match(execRegex);
    return matches ? this.extractRules(matches) : [];
  }
  extractRules(matches) {
    return matches.map((match) => {
      const alternativeText = this.getAlternativeText(match);
      const modifiers = this.getModifiers(match);
      return {
        key: this.getKeyFromMatch(match),
        replace: match,
        modifiers,
        alternativeText
      };
    });
  }
  getKeyFromMatch(match) {
    const removeReservedSymbols = [":", "|"];
    return this.removeDelimiter(removeReservedSymbols.reduce((val, sym) => val.indexOf(sym) > 0 ? this.removeAfter(val, sym) : val, match));
  }
  removeDelimiter(val) {
    return val.replace(new RegExp(this.delimiterStart(), "g"), "").replace(new RegExp(this.delimiterEnd(), "g"), "");
  }
  removeAfter(str2, val) {
    return str2.substring(0, str2.indexOf(val));
  }
  extractAfter(str2, val) {
    return str2.substring(str2.indexOf(val) + 1);
  }
  getAlternativeText(str2) {
    if (str2.indexOf(":") > 0) {
      const altText = this.removeDelimiter(this.extractAfter(str2, ":"));
      if (altText.indexOf("|") > 0) {
        return this.removeAfter(altText, "|");
      }
      return altText;
    }
    return "";
  }
  getModifiers(str2) {
    if (str2.indexOf("|") > 0) {
      const strModifiers = this.removeDelimiter(this.extractAfter(str2, "|")).split(",");
      return strModifiers.map((modifier) => this.getModifier(modifier.toLowerCase()));
    }
    return [];
  }
  parse(str2 = "", data = {}) {
    const rules = this.parseRules(str2);
    if (rules && rules.length > 0) {
      return this.parseFromRules(str2, data, rules);
    }
    return str2;
  }
  parseFromRules(str2, data, rules) {
    return rules.reduce((reducedStr, rule) => this.applyRule(reducedStr, rule, data), str2);
  }
  applyRule(str2, rule, data = {}) {
    const dataToReplace = this.applyData(rule.key, data);
    if (dataToReplace) {
      return str2.replace(rule.replace, this.applyModifiers(rule.modifiers, dataToReplace, data));
    } else if (rule.alternativeText) {
      return str2.replace(rule.replace, this.applyModifiers(rule.modifiers, rule.alternativeText, data));
    }
    const defaultModifier = this.applyModifiers(rule.modifiers, rule.key, data);
    if (defaultModifier === rule.key) {
      return str2.replace(rule.replace, "");
    }
    return str2.replace(rule.replace, defaultModifier);
  }
  getFromAlias(key) {
    return this.aliases.find((alias) => alias.key.toLowerCase() === key.toLowerCase());
  }
  applyData(key, data) {
    const [prop, ptr] = key.split("#");
    const propData = (0, import_lodash.default)(data, prop);
    if (ptr) {
      try {
        return import_json_pointer.default.get(propData, ptr);
      } catch (e) {
        if (e.message.startsWith("Invalid reference")) {
          return void 0;
        }
        throw e;
      }
    }
    return propData;
  }
  getModifier(key) {
    return this.modifiers.find((modifier) => modifier.key === key);
  }
  applyModifiers(modifiers, str2, rawData) {
    try {
      const transformers = modifiers.map((modifier) => modifier && modifier.transform);
      return transformers.reduce((str3, transform) => transform ? transform(str3, rawData) : str3, str2);
    } catch (e) {
      console.error(`An error occurred while applying modifiers to ${str2}`, modifiers, e);
      return str2;
    }
  }
  addAlias(key, ref) {
    if (typeof ref === "function") {
      this.aliases.push({ key, ref: ref() });
    } else {
      this.aliases.push({ key, ref });
    }
    return this;
  }
  removeAlias(key) {
    this.aliases = this.aliases.filter((alias) => alias.key !== key);
    return this;
  }
};
function getInterpolationKeys(...interpolationStrings) {
  return interpolationStrings.reduce((keys, str2) => [...keys, ...str2 ? stringInterpolator.parseRules(str2).map((match) => match.key) : []], []);
}
function parseInterpolationStrings(interpolationStrings, argTypeMap) {
  const interpolationKeys = getInterpolationKeys(...interpolationStrings);
  const args = {};
  const contextVariables = {};
  for (const interpolationKey of interpolationKeys) {
    const interpolationKeyParts = interpolationKey.split(".");
    const varName = interpolationKeyParts[interpolationKeyParts.length - 1];
    const initialObject = interpolationKeyParts[0];
    const argType = argTypeMap && varName in argTypeMap ? argTypeMap[varName] : interpolationKeyParts.length > 2 ? "JSON" : "ID";
    switch (initialObject) {
      case "args":
        args[varName] = {
          type: argType
        };
        break;
      case "context":
        contextVariables[varName] = `Scalars['${argType}']`;
        break;
    }
  }
  return {
    args,
    contextVariables
  };
}
function getInterpolatedStringFactory(nonInterpolatedString) {
  return (resolverData) => stringInterpolator.parse(nonInterpolatedString, resolverData);
}
function getInterpolatedHeadersFactory(nonInterpolatedHeaders = {}) {
  return (resolverData) => {
    const headers = {};
    for (const headerName in nonInterpolatedHeaders) {
      const headerValue = nonInterpolatedHeaders[headerName];
      if (headerValue) {
        headers[headerName.toLowerCase()] = stringInterpolator.parse(headerValue, resolverData);
      }
    }
    return headers;
  };
}
var hashCode = (s) => s.split("").reduce((a, b) => (a << 5) - a + b.charCodeAt(0) | 0, 0);
function hashObject(value) {
  return hashCode(JSON.stringify(value)).toString();
}
var stringInterpolator = new Interpolator({
  delimiter: ["{", "}"]
});
stringInterpolator.addAlias("typeName", "info.parentType.name");
stringInterpolator.addAlias("type", "info.parentType.name");
stringInterpolator.addAlias("parentType", "info.parentType.name");
stringInterpolator.addAlias("fieldName", "info.fieldName");
stringInterpolator.registerModifier("date", (formatStr) => (0, import_dayjs.default)(new Date()).format(formatStr));
stringInterpolator.registerModifier("hash", (value) => hashObject(value));
stringInterpolator.registerModifier("base64", (value) => {
  if (globalThis.Buffer.from) {
    return globalThis.Buffer.from(value).toString("base64");
  } else {
    return btoa(value);
  }
});

// node_modules/@graphql-mesh/utils/index.mjs
var import_chalk = __toESM(require_source(), 1);
var import_file_uri_to_path = __toESM(require_src(), 1);
async function defaultImportFn(path2) {
  let module = await import(
    /* @vite-ignore */
    path2
  ).catch((e) => {
    if (e.message.includes("Must use import to load ES Module")) {
      return new Function(`return import(${JSON.stringify(path2)})`)();
    }
    throw e;
  });
  if (module.default != null) {
    module = module.default;
  }
  if (typeof module === "object" && module != null) {
    const prototypeOfObject = Object.getPrototypeOf(module);
    if (prototypeOfObject == null || prototypeOfObject === Object.prototype) {
      const normalizedVal = {};
      for (const key in module) {
        normalizedVal[key] = module[key];
      }
      return normalizedVal;
    }
  }
  return module;
}
async function loadFromModuleExportExpression(expression, options) {
  if (typeof expression !== "string") {
    return Promise.resolve(expression);
  }
  const { defaultExportName, cwd: cwd2, importFn: importFn2 = defaultImportFn } = options || {};
  const [modulePath, exportName = defaultExportName] = expression.split("#");
  const mod = await tryImport(modulePath, cwd2, importFn2);
  return mod[exportName] || mod.default && mod.default[exportName] || mod.default || mod;
}
async function tryImport(modulePath, cwd2, importFn2) {
  try {
    return await importFn2(modulePath);
  } catch (_a2) {
    if (!import_path_browserify.default.isAbsolute(modulePath)) {
      const absoluteModulePath = import_path_browserify.default.isAbsolute(modulePath) ? modulePath : import_path_browserify.default.join(cwd2, modulePath);
      return importFn2(absoluteModulePath);
    }
  }
}
var getCachedFetch = memoize1(function getCachedFetch2(cache) {
  return fetchFactory({
    fetch: import_cross_undici_fetch2.fetch,
    Request: import_cross_undici_fetch2.Request,
    Response: import_cross_undici_fetch2.Response,
    cache
  });
});
async function readFileOrUrl(filePathOrUrl, config2) {
  var _a2, _b;
  if ((0, import_is_url.default)(filePathOrUrl)) {
    (_a2 = config2 === null || config2 === void 0 ? void 0 : config2.logger) === null || _a2 === void 0 ? void 0 : _a2.debug(`Fetching ${filePathOrUrl} via HTTP`);
    return readUrl(filePathOrUrl, config2);
  } else if (filePathOrUrl.startsWith("{") || filePathOrUrl.startsWith("[")) {
    return JSON.parse(filePathOrUrl);
  } else {
    (_b = config2 === null || config2 === void 0 ? void 0 : config2.logger) === null || _b === void 0 ? void 0 : _b.debug(`Reading ${filePathOrUrl} from the file system`);
    return readFile(filePathOrUrl, config2);
  }
}
function getSchema(filepath, logger) {
  return DEFAULT_SCHEMA.extend([
    new Type("!include", {
      kind: "scalar",
      resolve(path2) {
        return typeof path2 === "string";
      },
      construct(path$1) {
        const newCwd = import_path_browserify.default.dirname(filepath);
        const absoluteFilePath = import_path_browserify.default.isAbsolute(path$1) ? path$1 : import_path_browserify.default.resolve(newCwd, path$1);
        const content = fs.readFileSync(absoluteFilePath, "utf8");
        return loadYaml(absoluteFilePath, content, logger);
      }
    }),
    new Type("!includes", {
      kind: "scalar",
      resolve(path2) {
        return typeof path2 === "string";
      },
      construct(path$1) {
        const newCwd = import_path_browserify.default.dirname(filepath);
        const absoluteDirPath = import_path_browserify.default.isAbsolute(path$1) ? path$1 : import_path_browserify.default.resolve(newCwd, path$1);
        const files = fs.readdirSync(absoluteDirPath);
        return files.map((filePath) => {
          const absoluteFilePath = import_path_browserify.default.resolve(absoluteDirPath, filePath);
          const fileContent = fs.readFileSync(absoluteFilePath, "utf8");
          return loadYaml(absoluteFilePath, fileContent, logger);
        });
      }
    })
  ]);
}
function loadYaml(filepath, content, logger) {
  return load(content, {
    filename: filepath,
    schema: getSchema(filepath, logger),
    onWarning(warning) {
      logger === null || logger === void 0 ? void 0 : logger.warn(`${filepath}: ${warning.message}
${warning.stack}`);
    }
  });
}
async function readFile(fileExpression, config2) {
  const { allowUnknownExtensions, cwd: cwd2, fallbackFormat, importFn: importFn2 = defaultImportFn } = config2 || {};
  const [filePath] = fileExpression.split("#");
  if (/js$/.test(filePath) || /ts$/.test(filePath)) {
    return loadFromModuleExportExpression(fileExpression, {
      cwd: cwd2,
      importFn: importFn2,
      defaultExportName: "default"
    });
  }
  const actualPath = import_path_browserify.default.isAbsolute(filePath) ? filePath : import_path_browserify.default.resolve(cwd2 || process.cwd(), filePath);
  const rawResult = await fs.promises.readFile(actualPath, "utf-8");
  if (/json$/.test(actualPath)) {
    return JSON.parse(rawResult);
  }
  if (/yaml$/.test(actualPath) || /yml$/.test(actualPath)) {
    return loadYaml(actualPath, rawResult, config2 === null || config2 === void 0 ? void 0 : config2.logger);
  } else if (fallbackFormat) {
    switch (fallbackFormat) {
      case "json":
        return JSON.parse(rawResult);
      case "yaml":
        return loadYaml(actualPath, rawResult, config2 === null || config2 === void 0 ? void 0 : config2.logger);
      case "ts":
      case "js":
        return importFn2(actualPath);
    }
  } else if (!allowUnknownExtensions) {
    throw new Error(`Failed to parse JSON/YAML. Ensure file '${filePath}' has the correct extension (i.e. '.json', '.yaml', or '.yml).`);
  }
  return rawResult;
}
async function readUrl(path2, config2) {
  var _a2, _b;
  const { allowUnknownExtensions, fallbackFormat } = config2 || {};
  const fetch$1 = (config2 === null || config2 === void 0 ? void 0 : config2.fetch) || import_cross_undici_fetch2.fetch;
  config2.headers = config2.headers || {};
  const response = await fetch$1(path2, config2);
  const contentType = ((_a2 = response.headers) === null || _a2 === void 0 ? void 0 : _a2.get("content-type")) || "";
  const responseText = await response.text();
  (_b = config2 === null || config2 === void 0 ? void 0 : config2.logger) === null || _b === void 0 ? void 0 : _b.debug(`${path2} returned `, responseText);
  if (/json$/.test(path2) || contentType.startsWith("application/json") || fallbackFormat === "json") {
    return JSON.parse(responseText);
  } else if (/yaml$/.test(path2) || /yml$/.test(path2) || contentType.includes("yaml") || contentType.includes("yml") || fallbackFormat === "yaml") {
    return loadYaml(path2, responseText, config2 === null || config2 === void 0 ? void 0 : config2.logger);
  } else if (!allowUnknownExtensions) {
    throw new Error(`Failed to parse JSON/YAML. Ensure URL '${path2}' has the correct extension (i.e. '.json', '.yaml', or '.yml) or mime type in the response headers.`);
  }
  return responseText;
}
function extractResolvers(schema2) {
  const allResolvers = getResolversFromSchema(schema2);
  const filteredResolvers = {};
  for (const prop in allResolvers) {
    if (!prop.startsWith("_")) {
      filteredResolvers[prop] = allResolvers[prop];
    }
    if (typeof filteredResolvers === "object") {
      for (const fieldName in filteredResolvers[prop]) {
        if (!prop.startsWith("_resolveType")) {
          filteredResolvers[prop][fieldName] = allResolvers[prop][fieldName];
        }
      }
    }
  }
  return filteredResolvers;
}
function groupTransforms(transforms) {
  const wrapTransforms = [];
  const noWrapTransforms = [];
  transforms === null || transforms === void 0 ? void 0 : transforms.forEach((transform) => {
    if (transform.noWrap) {
      noWrapTransforms.push(transform);
    } else {
      wrapTransforms.push(transform);
    }
  });
  return { wrapTransforms, noWrapTransforms };
}
function applySchemaTransforms(originalWrappingSchema, subschemaConfig, transformedSchema, transforms) {
  return transforms.reduce((schema2, transform) => "transformSchema" in transform ? transform.transformSchema(schema2, subschemaConfig, transformedSchema) : schema2, originalWrappingSchema);
}
async function pathExists(path2) {
  if (!path2) {
    return false;
  }
  try {
    await fs.promises.stat(path2);
    return true;
  } catch (e) {
    if (e.toString().includes("ENOENT")) {
      return false;
    } else {
      throw e;
    }
  }
}
var writeFile = async (path$1, ...args) => {
  if (typeof path$1 === "string") {
    const containingDir = import_path_browserify.default.dirname(path$1);
    if (!await pathExists(containingDir)) {
      await mkdir(containingDir);
    }
  }
  return fs.promises.writeFile(path$1, ...args);
};
async function mkdir(path2, options = { recursive: true }) {
  const ifExists = await pathExists(path2);
  if (!ifExists) {
    await fs.promises.mkdir(path2, options);
  }
}
function createLruCache(max, ttl) {
  return (0, import_tiny_lru3.default)(max, ttl);
}
var warnColor2 = import_chalk.default.keyword(`orange`);
var infoColor2 = import_chalk.default.cyan;
var errorColor2 = import_chalk.default.red;
var debugColor2 = import_chalk.default.magenta;
var titleBold2 = import_chalk.default.bold;
var DefaultLogger = class {
  constructor(name) {
    this.name = name;
  }
  getLoggerMessage(...args) {
    return args.flat(Infinity).map((arg) => {
      if (typeof arg === "string") {
        if (arg.length > 100 && !this.isDebug) {
          return arg.slice(0, 100) + "...";
        }
        return arg;
      } else if (typeof arg === "object" && (arg === null || arg === void 0 ? void 0 : arg.stack) != null) {
        return arg.stack;
      }
      return util.inspect(arg);
    }).join(` `);
  }
  handleLazyMessage(...lazyArgs) {
    const flattenedArgs = lazyArgs.flat(Infinity).flatMap((arg) => {
      if (typeof arg === "function") {
        return arg();
      }
      return arg;
    });
    return this.getLoggerMessage(flattenedArgs);
  }
  get isDebug() {
    return processObj.env.DEBUG && processObj.env.DEBUG === "1" || this.name.includes(processObj.env.DEBUG);
  }
  get prefix() {
    return this.name ? titleBold2(this.name) : ``;
  }
  log(...args) {
    const message = this.getLoggerMessage(...args);
    return console.log(`${this.prefix} ${message}`);
  }
  warn(...args) {
    const message = this.getLoggerMessage(...args);
    const fullMessage = `\u26A0\uFE0F ${this.prefix} ${warnColor2(message)}`;
    if (console.warn) {
      console.warn(fullMessage);
    } else {
      console.log(fullMessage);
    }
  }
  info(...args) {
    const message = this.getLoggerMessage(...args);
    const fullMessage = `\u{1F4A1} ${this.prefix} ${infoColor2(message)}`;
    if (console.info) {
      console.info(fullMessage);
    } else {
      console.log(fullMessage);
    }
  }
  error(...args) {
    const message = this.getLoggerMessage(...args);
    const fullMessage = `\u{1F4A5} ${this.prefix} ${errorColor2(message)}`;
    if (console.error) {
      console.error(fullMessage);
    } else {
      console.log(fullMessage);
    }
  }
  debug(...lazyArgs) {
    if (this.isDebug) {
      const message = this.handleLazyMessage(lazyArgs);
      const fullMessage = `\u{1F41B} ${this.prefix} ${debugColor2(message)}`;
      if (console.debug) {
        console.debug(fullMessage);
      } else {
        console.log(fullMessage);
      }
    }
  }
  child(name) {
    return new DefaultLogger(this.name ? `${this.name} - ${name}` : name);
  }
};
var parseCache = createLruCache(1e3, 3600);
var printCache = createLruCache(1e3, 3600);
function parseWithCache(sdl) {
  const trimmedSdl = sdl.trim();
  let document = parseCache.get(trimmedSdl);
  if (!document) {
    document = parse(trimmedSdl, { noLocation: true });
    parseCache.set(trimmedSdl, document);
    printCache.set(JSON.stringify(document), trimmedSdl);
  }
  return document;
}
var printWithCache = memoize1(function printWithCache2(document) {
  const stringifedDocumentJson = JSON.stringify(document);
  let sdl = printCache.get(stringifedDocumentJson);
  if (!sdl) {
    sdl = print(document).trim();
    printCache.set(stringifedDocumentJson, sdl);
    parseCache.set(sdl, document);
  }
  return sdl;
});
var PubSub = class {
  constructor() {
    this.subIdListenerMap = /* @__PURE__ */ new Map();
    this.listenerEventMap = /* @__PURE__ */ new Map();
    this.eventNameListenersMap = /* @__PURE__ */ new Map();
  }
  publish(triggerName, detail) {
    const eventNameListeners = this.eventNameListenersMap.get(triggerName);
    if (eventNameListeners) {
      Promise.allSettled([...eventNameListeners].map((listener) => listener(detail))).catch((e) => console.error(e));
    }
  }
  subscribe(triggerName, onMessage) {
    let eventNameListeners = this.eventNameListenersMap.get(triggerName);
    if (!eventNameListeners) {
      eventNameListeners = /* @__PURE__ */ new Set();
      this.eventNameListenersMap.set(triggerName, eventNameListeners);
    }
    const subId = Date.now();
    eventNameListeners.add(onMessage);
    this.subIdListenerMap.set(subId, onMessage);
    this.listenerEventMap.set(onMessage, triggerName);
    return subId;
  }
  unsubscribe(subId) {
    const listener = this.subIdListenerMap.get(subId);
    if (listener) {
      this.subIdListenerMap.delete(subId);
      const eventName = this.listenerEventMap.get(listener);
      if (eventName) {
        const eventNameListeners = this.eventNameListenersMap.get(eventName);
        if (eventNameListeners) {
          eventNameListeners.delete(listener);
        }
      }
    }
    this.listenerEventMap.delete(listener);
  }
  asyncIterator(triggerName) {
    return observableToAsyncIterable({
      subscribe: (observer) => {
        const subId = this.subscribe(triggerName, (data) => observer.next(data));
        return {
          unsubscribe: () => this.unsubscribe(subId)
        };
      }
    });
  }
};
function fileURLToPath(url) {
  if (url === null || url === void 0 ? void 0 : url.startsWith("file://")) {
    return (0, import_file_uri_to_path.default)(url);
  }
  return url || "";
}

// node_modules/@graphql-tools/delegate/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();

// node_modules/graphql-executor/index.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/graphql-executor/type/directives.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var GraphQLDeferDirective = new GraphQLDirective({
  name: "defer",
  description: "Directs the executor to defer this fragment when the `if` argument is true or undefined.",
  locations: [
    DirectiveLocation.FRAGMENT_SPREAD,
    DirectiveLocation.INLINE_FRAGMENT
  ],
  args: {
    if: {
      type: GraphQLBoolean,
      description: "Deferred when true or undefined."
    },
    label: {
      type: GraphQLString,
      description: "Unique name"
    }
  }
});
var GraphQLStreamDirective = new GraphQLDirective({
  name: "stream",
  description: "Directs the executor to stream plural fields when the `if` argument is true or undefined.",
  locations: [DirectiveLocation.FIELD],
  args: {
    if: {
      type: GraphQLBoolean,
      description: "Stream when true or undefined."
    },
    label: {
      type: GraphQLString,
      description: "Unique name"
    },
    initialCount: {
      defaultValue: 0,
      type: GraphQLInt,
      description: "Number of items to return immediately"
    },
    maxChunkSize: {
      defaultValue: 1,
      type: GraphQLInt,
      description: "Maximum number of items to return within each payload"
    },
    maxInterval: {
      type: GraphQLInt,
      description: "Maximum time in ms to wait to collect items for each payload, will wait indefinitely if undefined"
    },
    inParallel: {
      defaultValue: false,
      type: GraphQLBoolean,
      description: "Stream items non-sequentially on completion if true"
    }
  }
});

// node_modules/graphql-executor/executorSchema/toExecutorSchema.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();

// node_modules/graphql-executor/jsutils/inspect.mjs
init_virtual_process_polyfill();
init_buffer();
var MAX_ARRAY_LENGTH2 = 10;
var MAX_RECURSIVE_DEPTH4 = 2;
function inspect4(value) {
  return formatValue4(value, []);
}
function formatValue4(value, seenValues) {
  switch (typeof value) {
    case "string":
      return JSON.stringify(value);
    case "function":
      return value.name ? `[function ${value.name}]` : "[function]";
    case "object":
      return formatObjectValue4(value, seenValues);
    default:
      return String(value);
  }
}
function formatObjectValue4(value, previouslySeenValues) {
  if (value === null) {
    return "null";
  }
  if (previouslySeenValues.includes(value)) {
    return "[Circular]";
  }
  const seenValues = [...previouslySeenValues, value];
  if (isJSONable4(value)) {
    const jsonValue = value.toJSON();
    if (jsonValue !== value) {
      return typeof jsonValue === "string" ? jsonValue : formatValue4(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray4(value, seenValues);
  }
  return formatObject4(value, seenValues);
}
function isJSONable4(value) {
  return typeof value.toJSON === "function";
}
function formatObject4(object, seenValues) {
  const entries = Object.entries(object);
  if (entries.length === 0) {
    return "{}";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH4) {
    return "[" + getObjectTag4(object) + "]";
  }
  const properties = entries.map(([key, value]) => key + ": " + formatValue4(value, seenValues));
  return "{ " + properties.join(", ") + " }";
}
function formatArray4(array, seenValues) {
  if (array.length === 0) {
    return "[]";
  }
  if (seenValues.length > MAX_RECURSIVE_DEPTH4) {
    return "[Array]";
  }
  const len = Math.min(MAX_ARRAY_LENGTH2, array.length);
  const remaining = array.length - len;
  const items = [];
  for (let i = 0; i < len; ++i) {
    items.push(formatValue4(array[i], seenValues));
  }
  if (remaining === 1) {
    items.push("... 1 more item");
  } else if (remaining > 1) {
    items.push(`... ${remaining} more items`);
  }
  return "[" + items.join(", ") + "]";
}
function getObjectTag4(object) {
  const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
  if (tag === "Object" && typeof object.constructor === "function") {
    const name = object.constructor.name;
    if (typeof name === "string" && name !== "") {
      return name;
    }
  }
  return tag;
}

// node_modules/graphql-executor/jsutils/invariant.mjs
init_virtual_process_polyfill();
init_buffer();
function invariant2(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message != null ? message : "Unexpected invariant triggered.");
  }
}

// node_modules/graphql-executor/jsutils/memoize1.mjs
init_virtual_process_polyfill();
init_buffer();
function memoize13(fn) {
  let cache0;
  return function memoized(a1) {
    if (cache0 === void 0) {
      cache0 = /* @__PURE__ */ new WeakMap();
    }
    let fnResult = cache0.get(a1);
    if (fnResult === void 0) {
      fnResult = fn(a1);
      cache0.set(a1, fnResult);
    }
    return fnResult;
  };
}

// node_modules/graphql-executor/type/introspection.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var __Schema2 = new GraphQLObjectType({
  name: "__Schema",
  description: "A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",
  fields: () => ({
    description: {
      type: GraphQLString,
      resolve: (executorSchema) => executorSchema.description
    },
    types: {
      description: "A list of all types supported by this server.",
      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type2))),
      resolve: (executorSchema) => executorSchema.getNamedTypes()
    },
    queryType: {
      description: "The type that query operations will be rooted at.",
      type: new GraphQLNonNull(__Type2),
      resolve: (executorSchema) => executorSchema.getRootType("query")
    },
    mutationType: {
      description: "If this server supports mutation, the type that mutation operations will be rooted at.",
      type: __Type2,
      resolve: (executorSchema) => executorSchema.getRootType("mutation")
    },
    subscriptionType: {
      description: "If this server support subscription, the type that subscription operations will be rooted at.",
      type: __Type2,
      resolve: (executorSchema) => executorSchema.getRootType("subscription")
    },
    directives: {
      description: "A list of all directives supported by this server.",
      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Directive2))),
      resolve: (executorSchema) => executorSchema.getDirectives()
    }
  })
});
var __Directive2 = new GraphQLObjectType({
  name: "__Directive",
  description: "A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",
  fields: () => ({
    name: {
      type: new GraphQLNonNull(GraphQLString),
      resolve: (directive) => directive.name
    },
    description: {
      type: GraphQLString,
      resolve: (directive) => directive.description
    },
    isRepeatable: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: (directive) => directive.isRepeatable
    },
    locations: {
      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__DirectiveLocation))),
      resolve: (directive) => directive.locations
    },
    args: {
      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue2))),
      args: {
        includeDeprecated: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      },
      resolve(field, { includeDeprecated }) {
        return includeDeprecated ? field.args : field.args.filter((arg) => arg.deprecationReason == null);
      }
    }
  })
});
var __Type2 = new GraphQLObjectType({
  name: "__Type",
  description: "The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",
  fields: () => ({
    kind: {
      type: new GraphQLNonNull(__TypeKind),
      resolve(type2, _args, _context, { executorSchema }) {
        if (executorSchema.isScalarType(type2)) {
          return TypeKind.SCALAR;
        }
        if (executorSchema.isObjectType(type2)) {
          return TypeKind.OBJECT;
        }
        if (executorSchema.isInterfaceType(type2)) {
          return TypeKind.INTERFACE;
        }
        if (executorSchema.isUnionType(type2)) {
          return TypeKind.UNION;
        }
        if (executorSchema.isEnumType(type2)) {
          return TypeKind.ENUM;
        }
        if (executorSchema.isInputObjectType(type2)) {
          return TypeKind.INPUT_OBJECT;
        }
        if (executorSchema.isListType(type2)) {
          return TypeKind.LIST;
        }
        if (executorSchema.isNonNullType(type2)) {
          return TypeKind.NON_NULL;
        }
        invariant2(false, `Unexpected type: "${inspect4(type2)}".`);
      }
    },
    name: {
      type: GraphQLString,
      resolve: (type2) => "name" in type2 ? type2.name : void 0
    },
    description: {
      type: GraphQLString,
      resolve: (type2) => "description" in type2 ? type2.description : void 0
    },
    specifiedByURL: {
      type: GraphQLString,
      resolve: (obj) => "specifiedByURL" in obj ? obj.specifiedByURL : void 0
    },
    fields: {
      type: new GraphQLList(new GraphQLNonNull(__Field2)),
      args: {
        includeDeprecated: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      },
      resolve(type2, { includeDeprecated }, _context, { executorSchema }) {
        if (executorSchema.isObjectType(type2) || executorSchema.isInterfaceType(type2)) {
          const fields = Object.values(type2.getFields());
          return includeDeprecated ? fields : fields.filter((field) => field.deprecationReason == null);
        }
      }
    },
    interfaces: {
      type: new GraphQLList(new GraphQLNonNull(__Type2)),
      resolve(type2) {
        if ("getInterfaces" in type2) {
          return type2.getInterfaces();
        }
      }
    },
    possibleTypes: {
      type: new GraphQLList(new GraphQLNonNull(__Type2)),
      resolve(type2, _args, _context, { executorSchema }) {
        if (executorSchema.isAbstractType(type2)) {
          return executorSchema.getPossibleTypes(type2);
        }
      }
    },
    enumValues: {
      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),
      args: {
        includeDeprecated: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      },
      resolve(type2, { includeDeprecated }, _context, { executorSchema }) {
        if (executorSchema.isEnumType(type2)) {
          const values = type2.getValues();
          return includeDeprecated ? values : values.filter((field) => field.deprecationReason == null);
        }
      }
    },
    inputFields: {
      type: new GraphQLList(new GraphQLNonNull(__InputValue2)),
      args: {
        includeDeprecated: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      },
      resolve(type2, { includeDeprecated }, _context, { executorSchema }) {
        if (executorSchema.isInputObjectType(type2)) {
          const values = Object.values(type2.getFields());
          return includeDeprecated ? values : values.filter((field) => field.deprecationReason == null);
        }
      }
    },
    ofType: {
      type: __Type2,
      resolve: (type2) => "ofType" in type2 ? type2.ofType : void 0
    }
  })
});
var __Field2 = new GraphQLObjectType({
  name: "__Field",
  description: "Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",
  fields: () => ({
    name: {
      type: new GraphQLNonNull(GraphQLString),
      resolve: (field) => field.name
    },
    description: {
      type: GraphQLString,
      resolve: (field) => field.description
    },
    args: {
      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue2))),
      args: {
        includeDeprecated: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      },
      resolve(field, { includeDeprecated }) {
        return includeDeprecated ? field.args : field.args.filter((arg) => arg.deprecationReason == null);
      }
    },
    type: {
      type: new GraphQLNonNull(__Type2),
      resolve: (field) => field.type
    },
    isDeprecated: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: (field) => field.deprecationReason != null
    },
    deprecationReason: {
      type: GraphQLString,
      resolve: (field) => field.deprecationReason
    }
  })
});
var __InputValue2 = new GraphQLObjectType({
  name: "__InputValue",
  description: "Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",
  fields: () => ({
    name: {
      type: new GraphQLNonNull(GraphQLString),
      resolve: (inputValue) => inputValue.name
    },
    description: {
      type: GraphQLString,
      resolve: (inputValue) => inputValue.description
    },
    type: {
      type: new GraphQLNonNull(__Type2),
      resolve: (inputValue) => inputValue.type
    },
    defaultValue: {
      type: GraphQLString,
      description: "A GraphQL-formatted string representing the default value for this input value.",
      resolve(inputValue) {
        const { type: type2, defaultValue } = inputValue;
        const valueAST = astFromValue(defaultValue, type2);
        return valueAST ? print(valueAST) : null;
      }
    },
    isDeprecated: {
      type: new GraphQLNonNull(GraphQLBoolean),
      resolve: (field) => field.deprecationReason != null
    },
    deprecationReason: {
      type: GraphQLString,
      resolve: (obj) => obj.deprecationReason
    }
  })
});
var SchemaMetaFieldDef2 = {
  name: "__schema",
  type: new GraphQLNonNull(__Schema2),
  description: "Access the current type schema of this server.",
  args: [],
  resolve: (_source, _args, _context, { executorSchema }) => executorSchema,
  isDeprecated: false,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
};
var nameArgument = {
  name: "name",
  description: void 0,
  type: new GraphQLNonNull(GraphQLString),
  defaultValue: void 0,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
};
var TypeMetaFieldDef2 = {
  name: "__type",
  type: __Type2,
  description: "Request the type information of a single type.",
  args: [nameArgument],
  resolve: (_source, { name }, _context, { executorSchema }) => executorSchema.getNamedType(name),
  isDeprecated: false,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
};
var DirectiveMetaFieldDef = {
  name: "__directive",
  type: __Directive2,
  description: "Request the directive information of a single directive.",
  args: [nameArgument],
  resolve: (_source, { name }, _context, { executorSchema }) => executorSchema.getDirective(name),
  isDeprecated: false,
  deprecationReason: void 0,
  extensions: /* @__PURE__ */ Object.create(null),
  astNode: void 0
};
var introspectionTypes2 = Object.freeze([
  __Schema2,
  __Directive2,
  __DirectiveLocation,
  __Type2,
  __Field2,
  __InputValue2,
  __EnumValue,
  __TypeKind
]);

// node_modules/graphql-executor/executorSchema/getPossibleInputTypes.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
function getInputTypeInfo(isListType2, isNonNullType2, type2, wrapper) {
  if (!isListType2(type2) && !isNonNullType2(type2)) {
    return {
      nonNullListWrappers: [],
      nonNull: isNonNullType2(wrapper),
      namedType: type2
    };
  }
  const inputTypeInfo = getInputTypeInfo(isListType2, isNonNullType2, type2.ofType, type2);
  if (isNonNullType2(type2)) {
    return inputTypeInfo;
  }
  inputTypeInfo.nonNullListWrappers.push(isNonNullType2(wrapper));
  return inputTypeInfo;
}
function getPossibleSequences(nonNullListWrappers) {
  if (!nonNullListWrappers.length) {
    return [[]];
  }
  const nonNull = nonNullListWrappers.pop();
  if (nonNull) {
    return getPossibleSequences(nonNullListWrappers).map((sequence) => [
      true,
      ...sequence
    ]);
  }
  return [
    ...getPossibleSequences(nonNullListWrappers).map((sequence) => [
      true,
      ...sequence
    ]),
    ...getPossibleSequences(nonNullListWrappers).map((sequence) => [
      false,
      ...sequence
    ])
  ];
}
function inputTypesFromSequences(sequences, inputType) {
  return sequences.map((sequence) => sequence.reduce((acc, nonNull) => {
    let wrapped = new GraphQLList(acc);
    if (nonNull) {
      wrapped = new GraphQLNonNull(wrapped);
    }
    return wrapped;
  }, inputType));
}
function getPossibleInputTypes(isListType2, isNonNullType2, type2) {
  const nullableOuterType = isNonNullType2(type2) ? type2.ofType : type2;
  const { nonNullListWrappers, nonNull, namedType } = getInputTypeInfo(isListType2, isNonNullType2, nullableOuterType);
  const sequences = getPossibleSequences(nonNullListWrappers);
  const wrapped = new GraphQLNonNull(namedType);
  if (nonNull) {
    return inputTypesFromSequences(sequences, wrapped);
  }
  return [
    ...inputTypesFromSequences(sequences, namedType),
    ...inputTypesFromSequences(sequences, wrapped)
  ];
}

// node_modules/graphql-executor/executorSchema/typeTree.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var TypeTree = class {
  constructor(isListType2, isNonNullType2) {
    this._isListType = isListType2;
    this._isNonNullType = isNonNullType2;
    this._rootNode = {
      [Kind.NAMED_TYPE]: /* @__PURE__ */ new Map()
    };
    this._typeStrings = /* @__PURE__ */ new Set();
  }
  add(type2) {
    this._add(type2, this._rootNode);
    this._typeStrings.add(type2.toString());
  }
  get(typeNode) {
    return this._get(typeNode, this._rootNode);
  }
  has(typeString) {
    return this._typeStrings.has(typeString);
  }
  _get(typeNode, node) {
    switch (typeNode.kind) {
      case Kind.LIST_TYPE: {
        const listNode = node[Kind.LIST_TYPE];
        if (!listNode) {
          return;
        }
        return this._get(typeNode.type, listNode);
      }
      case Kind.NON_NULL_TYPE: {
        const nonNullNode = node[Kind.NON_NULL_TYPE];
        if (!nonNullNode) {
          return;
        }
        return this._get(typeNode.type, nonNullNode);
      }
      case Kind.NAMED_TYPE:
        return node[Kind.NAMED_TYPE].get(typeNode.name.value);
    }
  }
  _add(originalType, node, type2 = originalType) {
    if (this._isListType(type2)) {
      let listTypeNode = node[Kind.LIST_TYPE];
      if (!listTypeNode) {
        listTypeNode = node[Kind.LIST_TYPE] = {
          [Kind.NAMED_TYPE]: /* @__PURE__ */ new Map()
        };
      }
      this._add(originalType, listTypeNode, type2.ofType);
    } else if (this._isNonNullType(type2)) {
      let nonNullTypeNode = node[Kind.NON_NULL_TYPE];
      if (!nonNullTypeNode) {
        nonNullTypeNode = node[Kind.NON_NULL_TYPE] = {
          [Kind.NAMED_TYPE]: /* @__PURE__ */ new Map()
        };
      }
      this._add(originalType, nonNullTypeNode, type2.ofType);
    } else {
      node[Kind.NAMED_TYPE].set(type2.name, originalType);
    }
  }
};

// node_modules/graphql-executor/executorSchema/toExecutorSchema.mjs
function is(x, type2) {
  if (Object.prototype.toString.call(x) === `[object ${type2}]`) {
    return true;
  }
  const prototype = Object.getPrototypeOf(x);
  if (prototype == null) {
    return false;
  }
  return is(prototype, type2);
}
function _isScalarType(type2) {
  return is(type2, "GraphQLScalarType");
}
function _isObjectType(type2) {
  return is(type2, "GraphQLObjectType");
}
function _isInterfaceType(type2) {
  return is(type2, "GraphQLInterfaceType");
}
function _isUnionType(type2) {
  return is(type2, "GraphQLUnionType");
}
function _isEnumType(type2) {
  return is(type2, "GraphQLEnumType");
}
function _isInputObjectType(type2) {
  return is(type2, "GraphQLInputObjectType");
}
function _isListType(type2) {
  return Object.prototype.toString.call(type2) === "[object GraphQLList]";
}
function _isNonNullType(type2) {
  return Object.prototype.toString.call(type2) === "[object GraphQLNonNull]";
}
function _toExecutorSchema(schema2) {
  const listTypes = /* @__PURE__ */ new Set();
  const nonNullTypes = /* @__PURE__ */ new Set();
  const namedTypes = /* @__PURE__ */ new Map();
  const inputTypes = /* @__PURE__ */ new Set();
  const leafTypes = /* @__PURE__ */ new Set();
  const scalarTypes = /* @__PURE__ */ new Set();
  const enumTypes = /* @__PURE__ */ new Set();
  const abstractTypes = /* @__PURE__ */ new Set();
  const interfaceTypes = /* @__PURE__ */ new Set();
  const unionTypes = /* @__PURE__ */ new Set();
  const objectTypes = /* @__PURE__ */ new Set();
  const inputObjectTypes = /* @__PURE__ */ new Set();
  const typeTree = new TypeTree(_isListType, _isNonNullType);
  const subTypesMap = /* @__PURE__ */ new Map();
  const possibleTypesMap = /* @__PURE__ */ new Map();
  function addOutputType(type2) {
    typeTree.add(type2);
  }
  function addInputType(type2) {
    inputTypes.add(type2);
    typeTree.add(type2);
  }
  function processType(type2) {
    if (_isListType(type2) && !listTypes.has(type2)) {
      listTypes.add(type2);
      processType(type2.ofType);
    } else if (_isNonNullType(type2) && !nonNullTypes.has(type2)) {
      nonNullTypes.add(type2);
      processType(type2.ofType);
    } else if (_isScalarType(type2) && !namedTypes.get(type2.name)) {
      namedTypes.set(type2.name, type2);
      leafTypes.add(type2);
      scalarTypes.add(type2);
    } else if (_isObjectType(type2) && !namedTypes.get(type2.name)) {
      namedTypes.set(type2.name, type2);
      objectTypes.add(type2);
      addOutputType(type2);
      for (const iface of Object.values(type2.getInterfaces())) {
        processType(iface);
        let subTypes = subTypesMap.get(iface);
        if (!subTypes) {
          subTypes = /* @__PURE__ */ new Set();
          subTypesMap.set(iface, subTypes);
        }
        subTypes.add(type2);
        let possibleTypes = possibleTypesMap.get(iface);
        if (!possibleTypes) {
          possibleTypes = [];
          possibleTypesMap.set(iface, possibleTypes);
        }
        possibleTypes.push(type2);
      }
      for (const field of Object.values(type2.getFields())) {
        processType(field.type);
        for (const arg of field.args) {
          addInputType(arg.type);
          processType(arg.type);
        }
      }
    } else if (_isInterfaceType(type2) && !namedTypes.get(type2.name)) {
      namedTypes.set(type2.name, type2);
      abstractTypes.add(type2);
      interfaceTypes.add(type2);
      addOutputType(type2);
      if ("getInterfaces" in type2) {
        for (const iface of Object.values(type2.getInterfaces())) {
          processType(iface);
          let subTypes = subTypesMap.get(iface);
          if (!subTypes) {
            subTypes = /* @__PURE__ */ new Set();
            subTypesMap.set(iface, subTypes);
          }
          subTypes.add(type2);
        }
      }
      for (const field of Object.values(type2.getFields())) {
        processType(field.type);
        for (const arg of field.args) {
          addInputType(arg.type);
          processType(arg.type);
        }
      }
    } else if (_isUnionType(type2) && !namedTypes.get(type2.name)) {
      namedTypes.set(type2.name, type2);
      abstractTypes.add(type2);
      unionTypes.add(type2);
      addOutputType(type2);
      let subTypes = subTypesMap.get(type2);
      if (!subTypes) {
        subTypes = /* @__PURE__ */ new Set();
        subTypesMap.set(type2, subTypes);
      }
      let possibleTypes = possibleTypesMap.get(type2);
      if (!possibleTypes) {
        possibleTypes = [];
        possibleTypesMap.set(type2, possibleTypes);
      }
      for (const possibleType of type2.getTypes()) {
        processType(possibleType);
        subTypes.add(possibleType);
        possibleTypes.push(possibleType);
      }
    } else if (_isEnumType(type2) && !namedTypes.get(type2.name)) {
      namedTypes.set(type2.name, type2);
      leafTypes.add(type2);
      enumTypes.add(type2);
    } else if (_isInputObjectType(type2) && !namedTypes.get(type2.name)) {
      namedTypes.set(type2.name, type2);
      inputObjectTypes.add(type2);
      for (const field of Object.values(type2.getFields())) {
        addInputType(field.type);
        processType(field.type);
      }
    }
  }
  for (const type2 of Object.values(schema2.getTypeMap())) {
    if (!type2.name.startsWith("__")) {
      processType(type2);
    }
  }
  for (const directive of schema2.getDirectives()) {
    for (const arg of directive.args) {
      addInputType(arg.type);
      processType(arg.type);
    }
  }
  for (const inputType of inputTypes.values()) {
    const possibleInputTypes = getPossibleInputTypes(_isListType, _isNonNullType, inputType);
    for (const possibleInputType of possibleInputTypes) {
      const typeString = possibleInputType.toString();
      if (!typeTree.has(typeString)) {
        addInputType(possibleInputType);
        processType(possibleInputType);
      }
    }
  }
  for (const type2 of introspectionTypes2) {
    processType(type2);
  }
  for (const fieldDef of [
    SchemaMetaFieldDef2,
    TypeMetaFieldDef2,
    TypeNameMetaFieldDef
  ]) {
    processType(fieldDef.type);
    for (const arg of fieldDef.args) {
      addInputType(arg.type);
      processType(arg.type);
    }
  }
  const queryType = schema2.getQueryType();
  const mutationType = schema2.getMutationType();
  const subscriptionType = schema2.getSubscriptionType();
  function isListType2(type2) {
    return listTypes.has(type2);
  }
  function isNonNullType2(type2) {
    return nonNullTypes.has(type2);
  }
  function isNamedType2(type2) {
    return namedTypes.get(type2.name) !== void 0;
  }
  function isInputType2(type2) {
    return inputTypes.has(type2);
  }
  function isLeafType2(type2) {
    return leafTypes.has(type2);
  }
  function isScalarType2(type2) {
    return scalarTypes.has(type2);
  }
  function isEnumType2(type2) {
    return enumTypes.has(type2);
  }
  function isAbstractType2(type2) {
    return abstractTypes.has(type2);
  }
  function isInterfaceType2(type2) {
    return interfaceTypes.has(type2);
  }
  function isUnionType2(type2) {
    return unionTypes.has(type2);
  }
  function isObjectType2(type2) {
    return objectTypes.has(type2);
  }
  function isInputObjectType2(type2) {
    return inputObjectTypes.has(type2);
  }
  function getDirectives2() {
    return schema2.getDirectives();
  }
  function getDirective2(directiveName) {
    var _schema$getDirective;
    return (_schema$getDirective = schema2.getDirective(directiveName)) !== null && _schema$getDirective !== void 0 ? _schema$getDirective : void 0;
  }
  function getNamedTypes() {
    return Array.from(namedTypes.values());
  }
  function getNamedType2(typeName) {
    return namedTypes.get(typeName);
  }
  function getType(typeNode) {
    return typeTree.get(typeNode);
  }
  function getRootType(operation) {
    if (operation === "query") {
      return queryType !== null && queryType !== void 0 ? queryType : void 0;
    } else if (operation === "mutation") {
      return mutationType !== null && mutationType !== void 0 ? mutationType : void 0;
    } else if (operation === "subscription") {
      return subscriptionType !== null && subscriptionType !== void 0 ? subscriptionType : void 0;
    }
    invariant2(false, "Unexpected operation type: " + inspect4(operation));
  }
  function getPossibleTypes(abstractType) {
    var _possibleTypesMap$get;
    return (_possibleTypesMap$get = possibleTypesMap.get(abstractType)) !== null && _possibleTypesMap$get !== void 0 ? _possibleTypesMap$get : [];
  }
  function isSubType(abstractType, maybeSubType) {
    var _subTypesMap$get$has, _subTypesMap$get;
    return (_subTypesMap$get$has = (_subTypesMap$get = subTypesMap.get(abstractType)) === null || _subTypesMap$get === void 0 ? void 0 : _subTypesMap$get.has(maybeSubType)) !== null && _subTypesMap$get$has !== void 0 ? _subTypesMap$get$has : false;
  }
  return {
    description: schema2.description,
    isListType: isListType2,
    isNonNullType: isNonNullType2,
    isNamedType: isNamedType2,
    isInputType: isInputType2,
    isLeafType: isLeafType2,
    isScalarType: isScalarType2,
    isEnumType: isEnumType2,
    isAbstractType: isAbstractType2,
    isInterfaceType: isInterfaceType2,
    isUnionType: isUnionType2,
    isObjectType: isObjectType2,
    isInputObjectType: isInputObjectType2,
    getDirectives: getDirectives2,
    getDirective: getDirective2,
    getNamedTypes,
    getNamedType: getNamedType2,
    getType,
    getRootType,
    getPossibleTypes,
    isSubType
  };
}
var toExecutorSchema = memoize13(_toExecutorSchema);

// node_modules/graphql-executor/execution/index.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/graphql-executor/jsutils/Path.mjs
init_virtual_process_polyfill();
init_buffer();
function addPath2(prev, key, typename) {
  return {
    prev,
    key,
    typename
  };
}
function pathToArray2(path2) {
  const flattened = [];
  let curr = path2;
  while (curr) {
    flattened.push(curr.key);
    curr = curr.prev;
  }
  return flattened.reverse();
}

// node_modules/graphql-executor/execution/executor.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();

// node_modules/graphql-executor/jsutils/memoize1and1.mjs
init_virtual_process_polyfill();
init_buffer();
function memoize1and1(fn) {
  let cache0;
  return function memoized(a1, a2) {
    if (cache0 === void 0) {
      cache0 = /* @__PURE__ */ new WeakMap();
    }
    let cache1 = cache0.get(a1);
    if (cache1 === void 0) {
      cache1 = /* @__PURE__ */ new Map();
      cache0.set(a1, cache1);
    }
    let fnResult = cache1.get(a2);
    if (fnResult === void 0) {
      fnResult = fn(a1, a2);
      cache1.set(a2, fnResult);
    }
    return fnResult;
  };
}

// node_modules/graphql-executor/jsutils/memoize2.mjs
init_virtual_process_polyfill();
init_buffer();
function memoize23(fn) {
  let cache0;
  return function memoized(a1, a2) {
    if (cache0 === void 0) {
      cache0 = /* @__PURE__ */ new WeakMap();
    }
    let cache1 = cache0.get(a1);
    if (cache1 === void 0) {
      cache1 = /* @__PURE__ */ new WeakMap();
      cache0.set(a1, cache1);
    }
    let fnResult = cache1.get(a2);
    if (fnResult === void 0) {
      fnResult = fn(a1, a2);
      cache1.set(a2, fnResult);
    }
    return fnResult;
  };
}

// node_modules/graphql-executor/jsutils/devAssert.mjs
init_virtual_process_polyfill();
init_buffer();
function devAssert2(condition, message) {
  const booleanCondition = Boolean(condition);
  if (!booleanCondition) {
    throw new Error(message);
  }
}

// node_modules/graphql-executor/jsutils/isPromise.mjs
init_virtual_process_polyfill();
init_buffer();
function isPromise2(value) {
  return typeof (value === null || value === void 0 ? void 0 : value.then) === "function";
}

// node_modules/graphql-executor/jsutils/isObjectLike.mjs
init_virtual_process_polyfill();
init_buffer();
function isObjectLike2(value) {
  return typeof value == "object" && value !== null;
}

// node_modules/graphql-executor/jsutils/promiseReduce.mjs
init_virtual_process_polyfill();
init_buffer();
function promiseReduce2(values, callbackFn, initialValue) {
  let accumulator = initialValue;
  for (const value of values) {
    accumulator = isPromise2(accumulator) ? accumulator.then((resolved) => callbackFn(resolved, value)) : callbackFn(accumulator, value);
  }
  return accumulator;
}

// node_modules/graphql-executor/jsutils/isAsyncIterable.mjs
init_virtual_process_polyfill();
init_buffer();
function isAsyncIterable4(maybeAsyncIterable) {
  return typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0 ? void 0 : maybeAsyncIterable[Symbol.asyncIterator]) === "function";
}

// node_modules/graphql-executor/jsutils/isIterableObject.mjs
init_virtual_process_polyfill();
init_buffer();
function isIterableObject2(maybeIterable) {
  return typeof maybeIterable === "object" && typeof (maybeIterable === null || maybeIterable === void 0 ? void 0 : maybeIterable[Symbol.iterator]) === "function";
}

// node_modules/graphql-executor/jsutils/resolveAfterAll.mjs
init_virtual_process_polyfill();
init_buffer();
function resolveAfterAll(result, promises) {
  return new Promise((resolve2, reject3) => {
    let rejected = false;
    let reason;
    let numPromises = promises.length;
    const onFulfilled = () => {
      numPromises--;
      if (!numPromises) {
        if (rejected) {
          reject3(reason);
        }
        resolve2(result);
      }
    };
    const onRejected = (_reason) => {
      if (!rejected) {
        rejected = true;
        reason = _reason;
      }
      numPromises--;
      if (!numPromises) {
        reject3(reason);
      }
    };
    for (const promise of promises) {
      promise.then(onFulfilled, onRejected);
    }
  });
}

// node_modules/graphql-executor/jsutils/toError.mjs
init_virtual_process_polyfill();
init_buffer();
function toError2(thrownValue) {
  return thrownValue instanceof Error ? thrownValue : new NonErrorThrown2(thrownValue);
}
var NonErrorThrown2 = class extends Error {
  constructor(thrownValue) {
    super("Unexpected error value: " + inspect4(thrownValue));
    this.name = "NonErrorThrown";
    this.thrownValue = thrownValue;
  }
};

// node_modules/graphql-executor/execution/values.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();

// node_modules/graphql-executor/jsutils/keyMap.mjs
init_virtual_process_polyfill();
init_buffer();
function keyMap2(list, keyFn) {
  const result = /* @__PURE__ */ Object.create(null);
  for (const item of list) {
    result[keyFn(item)] = item;
  }
  return result;
}

// node_modules/graphql-executor/jsutils/printPathArray.mjs
init_virtual_process_polyfill();
init_buffer();
function printPathArray2(path2) {
  return path2.map((key) => typeof key === "number" ? "[" + key.toString() + "]" : "." + key).join("");
}

// node_modules/graphql-executor/utilities/coerceInputValue.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();

// node_modules/graphql-executor/jsutils/didYouMean.mjs
init_virtual_process_polyfill();
init_buffer();
var MAX_SUGGESTIONS2 = 5;
function didYouMean2(firstArg, secondArg) {
  const [subMessage, suggestionsArg] = secondArg ? [firstArg, secondArg] : [void 0, firstArg];
  let message = " Did you mean ";
  if (subMessage) {
    message += subMessage + " ";
  }
  const suggestions = suggestionsArg.map((x) => `"${x}"`);
  switch (suggestions.length) {
    case 0:
      return "";
    case 1:
      return message + suggestions[0] + "?";
    case 2:
      return message + suggestions[0] + " or " + suggestions[1] + "?";
  }
  const selected = suggestions.slice(0, MAX_SUGGESTIONS2);
  const lastItem = selected.pop();
  return message + selected.join(", ") + ", or " + lastItem + "?";
}

// node_modules/graphql-executor/jsutils/suggestionList.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/graphql-executor/jsutils/naturalCompare.mjs
init_virtual_process_polyfill();
init_buffer();
function naturalCompare2(aStr, bStr) {
  let aIndex = 0;
  let bIndex = 0;
  while (aIndex < aStr.length && bIndex < bStr.length) {
    let aChar = aStr.charCodeAt(aIndex);
    let bChar = bStr.charCodeAt(bIndex);
    if (isDigit3(aChar) && isDigit3(bChar)) {
      let aNum = 0;
      do {
        ++aIndex;
        aNum = aNum * 10 + aChar - DIGIT_02;
        aChar = aStr.charCodeAt(aIndex);
      } while (isDigit3(aChar) && aNum > 0);
      let bNum = 0;
      do {
        ++bIndex;
        bNum = bNum * 10 + bChar - DIGIT_02;
        bChar = bStr.charCodeAt(bIndex);
      } while (isDigit3(bChar) && bNum > 0);
      if (aNum < bNum) {
        return -1;
      }
      if (aNum > bNum) {
        return 1;
      }
    } else {
      if (aChar < bChar) {
        return -1;
      }
      if (aChar > bChar) {
        return 1;
      }
      ++aIndex;
      ++bIndex;
    }
  }
  return aStr.length - bStr.length;
}
var DIGIT_02 = 48;
var DIGIT_92 = 57;
function isDigit3(code) {
  return !isNaN(code) && DIGIT_02 <= code && code <= DIGIT_92;
}

// node_modules/graphql-executor/jsutils/suggestionList.mjs
function suggestionList2(input, options) {
  const optionsByDistance = /* @__PURE__ */ Object.create(null);
  const lexicalDistance = new LexicalDistance2(input);
  const threshold = Math.floor(input.length * 0.4) + 1;
  for (const option of options) {
    const distance = lexicalDistance.measure(option, threshold);
    if (distance !== void 0) {
      optionsByDistance[option] = distance;
    }
  }
  return Object.keys(optionsByDistance).sort((a, b) => {
    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];
    return distanceDiff !== 0 ? distanceDiff : naturalCompare2(a, b);
  });
}
var LexicalDistance2 = class {
  constructor(input) {
    this._input = input;
    this._inputLowerCase = input.toLowerCase();
    this._inputArray = stringToArray2(this._inputLowerCase);
    this._rows = [
      new Array(input.length + 1).fill(0),
      new Array(input.length + 1).fill(0),
      new Array(input.length + 1).fill(0)
    ];
  }
  measure(option, threshold) {
    if (this._input === option) {
      return 0;
    }
    const optionLowerCase = option.toLowerCase();
    if (this._inputLowerCase === optionLowerCase) {
      return 1;
    }
    let a = stringToArray2(optionLowerCase);
    let b = this._inputArray;
    if (a.length < b.length) {
      const tmp = a;
      a = b;
      b = tmp;
    }
    const aLength = a.length;
    const bLength = b.length;
    if (aLength - bLength > threshold) {
      return void 0;
    }
    const rows = this._rows;
    for (let j = 0; j <= bLength; j++) {
      rows[0][j] = j;
    }
    for (let i = 1; i <= aLength; i++) {
      const upRow = rows[(i - 1) % 3];
      const currentRow = rows[i % 3];
      let smallestCell = currentRow[0] = i;
      for (let j = 1; j <= bLength; j++) {
        const cost = a[i - 1] === b[j - 1] ? 0 : 1;
        let currentCell = Math.min(upRow[j] + 1, currentRow[j - 1] + 1, upRow[j - 1] + cost);
        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {
          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];
          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);
        }
        if (currentCell < smallestCell) {
          smallestCell = currentCell;
        }
        currentRow[j] = currentCell;
      }
      if (smallestCell > threshold) {
        return void 0;
      }
    }
    const distance = rows[aLength % 3][bLength];
    return distance <= threshold ? distance : void 0;
  }
};
function stringToArray2(str2) {
  const strLength = str2.length;
  const array = new Array(strLength);
  for (let i = 0; i < strLength; ++i) {
    array[i] = str2.charCodeAt(i);
  }
  return array;
}

// node_modules/graphql-executor/error/isGraphQLError.mjs
init_virtual_process_polyfill();
init_buffer();
function isGraphQLError(error) {
  return error.name === "GraphQLError";
}

// node_modules/graphql-executor/utilities/coerceInputValue.mjs
function coerceInputValue2(executorSchema, inputValue, type2, onError = defaultOnError2) {
  return coerceInputValueImpl2(executorSchema, inputValue, type2, onError, void 0);
}
function defaultOnError2(path2, invalidValue, error) {
  let errorPrefix = "Invalid value " + inspect4(invalidValue);
  if (path2.length > 0) {
    errorPrefix += ` at "value${printPathArray2(path2)}"`;
  }
  error.message = errorPrefix + ": " + error.message;
  throw error;
}
function coerceInputValueImpl2(executorSchema, inputValue, type2, onError, path2) {
  if (executorSchema.isNonNullType(type2)) {
    if (inputValue != null) {
      return coerceInputValueImpl2(executorSchema, inputValue, type2.ofType, onError, path2);
    }
    onError(pathToArray2(path2), inputValue, new GraphQLError(`Expected non-nullable type "${inspect4(type2)}" not to be null.`));
    return;
  }
  if (inputValue == null) {
    return null;
  }
  if (executorSchema.isListType(type2)) {
    const itemType = type2.ofType;
    if (isIterableObject2(inputValue)) {
      return Array.from(inputValue, (itemValue, index) => {
        const itemPath = addPath2(path2, index, void 0);
        return coerceInputValueImpl2(executorSchema, itemValue, itemType, onError, itemPath);
      });
    }
    return [
      coerceInputValueImpl2(executorSchema, inputValue, itemType, onError, path2)
    ];
  }
  if (executorSchema.isInputObjectType(type2)) {
    if (!isObjectLike2(inputValue)) {
      onError(pathToArray2(path2), inputValue, new GraphQLError(`Expected type "${type2.name}" to be an object.`));
      return;
    }
    const coercedValue = {};
    const fieldDefs = type2.getFields();
    for (const field of Object.values(fieldDefs)) {
      const fieldValue = inputValue[field.name];
      if (fieldValue === void 0) {
        if (field.defaultValue !== void 0) {
          coercedValue[field.name] = field.defaultValue;
        } else if (executorSchema.isNonNullType(field.type)) {
          const typeStr = inspect4(field.type);
          onError(pathToArray2(path2), inputValue, new GraphQLError(`Field "${field.name}" of required type "${typeStr}" was not provided.`));
        }
        continue;
      }
      coercedValue[field.name] = coerceInputValueImpl2(executorSchema, fieldValue, field.type, onError, addPath2(path2, field.name, type2.name));
    }
    for (const fieldName of Object.keys(inputValue)) {
      if (!fieldDefs[fieldName]) {
        const suggestions = suggestionList2(fieldName, Object.keys(type2.getFields()));
        onError(pathToArray2(path2), inputValue, new GraphQLError(`Field "${fieldName}" is not defined by type "${type2.name}".` + didYouMean2(suggestions)));
      }
    }
    return coercedValue;
  }
  if (executorSchema.isLeafType(type2)) {
    let parseResult;
    try {
      parseResult = type2.parseValue(inputValue);
    } catch (error) {
      if (isGraphQLError(error)) {
        onError(pathToArray2(path2), inputValue, error);
      } else {
        onError(pathToArray2(path2), inputValue, new GraphQLError(`Expected type "${type2.name}". ` + error.message, void 0, void 0, void 0, void 0, error));
      }
      return;
    }
    if (parseResult === void 0) {
      onError(pathToArray2(path2), inputValue, new GraphQLError(`Expected type "${type2.name}".`));
    }
    return parseResult;
  }
  invariant2(false, "Unexpected input type: " + inspect4(type2));
}

// node_modules/graphql-executor/utilities/valueFromAST.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
function valueFromAST2(executorSchema, valueNode, type2, variables) {
  if (!valueNode) {
    return;
  }
  if (valueNode.kind === Kind.VARIABLE) {
    const variableName = valueNode.name.value;
    if (variables == null || variables[variableName] === void 0) {
      return;
    }
    const variableValue = variables[variableName];
    if (variableValue === null && executorSchema.isNonNullType(type2)) {
      return;
    }
    return variableValue;
  }
  if (executorSchema.isNonNullType(type2)) {
    if (valueNode.kind === Kind.NULL) {
      return;
    }
    return valueFromAST2(executorSchema, valueNode, type2.ofType, variables);
  }
  if (valueNode.kind === Kind.NULL) {
    return null;
  }
  if (executorSchema.isListType(type2)) {
    const itemType = type2.ofType;
    if (valueNode.kind === Kind.LIST) {
      const coercedValues = [];
      for (const itemNode of valueNode.values) {
        if (isMissingVariable2(itemNode, variables)) {
          if (executorSchema.isNonNullType(itemType)) {
            return;
          }
          coercedValues.push(null);
        } else {
          const itemValue = valueFromAST2(executorSchema, itemNode, itemType, variables);
          if (itemValue === void 0) {
            return;
          }
          coercedValues.push(itemValue);
        }
      }
      return coercedValues;
    }
    const coercedValue = valueFromAST2(executorSchema, valueNode, itemType, variables);
    if (coercedValue === void 0) {
      return;
    }
    return [coercedValue];
  }
  if (executorSchema.isInputObjectType(type2)) {
    if (valueNode.kind !== Kind.OBJECT) {
      return;
    }
    const coercedObj = /* @__PURE__ */ Object.create(null);
    const fieldNodes = keyMap2(valueNode.fields, (field) => field.name.value);
    for (const field of Object.values(type2.getFields())) {
      const fieldNode = fieldNodes[field.name];
      if (!fieldNode || isMissingVariable2(fieldNode.value, variables)) {
        if (field.defaultValue !== void 0) {
          coercedObj[field.name] = field.defaultValue;
        } else if (executorSchema.isNonNullType(field.type)) {
          return;
        }
        continue;
      }
      const fieldValue = valueFromAST2(executorSchema, fieldNode.value, field.type, variables);
      if (fieldValue === void 0) {
        return;
      }
      coercedObj[field.name] = fieldValue;
    }
    return coercedObj;
  }
  if (executorSchema.isLeafType(type2)) {
    let result;
    try {
      result = type2.parseLiteral(valueNode, variables);
    } catch (_error) {
      return;
    }
    if (result === void 0) {
      return;
    }
    return result;
  }
  invariant2(false, "Unexpected input type: " + inspect4(type2));
}
function isMissingVariable2(valueNode, variables) {
  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === void 0);
}

// node_modules/graphql-executor/execution/values.mjs
function getVariableValues2(executorSchema, varDefNodes, inputs, options) {
  const errors = [];
  const maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;
  try {
    const coerced = coerceVariableValues2(executorSchema, varDefNodes, inputs, (error) => {
      if (maxErrors != null && errors.length >= maxErrors) {
        throw new GraphQLError("Too many errors processing variables, error limit reached. Execution aborted.");
      }
      errors.push(error);
    });
    if (errors.length === 0) {
      return {
        coerced
      };
    }
  } catch (error) {
    errors.push(error);
  }
  return {
    errors
  };
}
function coerceVariableValues2(executorSchema, varDefNodes, inputs, onError) {
  const coercedValues = {};
  for (const varDefNode of varDefNodes) {
    const varName = varDefNode.variable.name.value;
    const varType = executorSchema.getType(varDefNode.type);
    if (!varType || !executorSchema.isInputType(varType)) {
      const varTypeStr = print(varDefNode.type);
      onError(new GraphQLError(`Variable "$${varName}" expected value of type "${varTypeStr}" which cannot be used as an input type.`, varDefNode.type));
      continue;
    }
    if (!hasOwnProperty2(inputs, varName)) {
      if (varDefNode.defaultValue) {
        coercedValues[varName] = valueFromAST2(executorSchema, varDefNode.defaultValue, varType);
      } else if (executorSchema.isNonNullType(varType)) {
        const varTypeStr = inspect4(varType);
        onError(new GraphQLError(`Variable "$${varName}" of required type "${varTypeStr}" was not provided.`, varDefNode));
      }
      continue;
    }
    const value = inputs[varName];
    if (value === null && executorSchema.isNonNullType(varType)) {
      const varTypeStr = inspect4(varType);
      onError(new GraphQLError(`Variable "$${varName}" of non-null type "${varTypeStr}" must not be null.`, varDefNode));
      continue;
    }
    coercedValues[varName] = coerceInputValue2(executorSchema, value, varType, (path2, invalidValue, error) => {
      let prefix = `Variable "$${varName}" got invalid value ` + inspect4(invalidValue);
      if (path2.length > 0) {
        prefix += ` at "${varName}${printPathArray2(path2)}"`;
      }
      onError(new GraphQLError(prefix + "; " + error.message, varDefNode, void 0, void 0, void 0, error.originalError));
    });
  }
  return coercedValues;
}
function getArgumentValues3(executorSchema, def, node, variableValues) {
  var _node$arguments;
  const coercedValues = {};
  const argumentNodes = (_node$arguments = node.arguments) !== null && _node$arguments !== void 0 ? _node$arguments : [];
  const argNodeMap = keyMap2(argumentNodes, (arg) => arg.name.value);
  for (const argDef of def.args) {
    const name = argDef.name;
    const argType = argDef.type;
    const argumentNode = argNodeMap[name];
    if (!argumentNode) {
      if (argDef.defaultValue !== void 0) {
        coercedValues[name] = argDef.defaultValue;
      } else if (executorSchema.isNonNullType(argType)) {
        throw new GraphQLError(`Argument "${name}" of required type "${inspect4(argType)}" was not provided.`, node);
      }
      continue;
    }
    const valueNode = argumentNode.value;
    let isNull2 = valueNode.kind === Kind.NULL;
    if (valueNode.kind === Kind.VARIABLE) {
      const variableName = valueNode.name.value;
      if (variableValues == null || !hasOwnProperty2(variableValues, variableName)) {
        if (argDef.defaultValue !== void 0) {
          coercedValues[name] = argDef.defaultValue;
        } else if (executorSchema.isNonNullType(argType)) {
          throw new GraphQLError(`Argument "${name}" of required type "${inspect4(argType)}" was provided the variable "$${variableName}" which was not provided a runtime value.`, valueNode);
        }
        continue;
      }
      isNull2 = variableValues[variableName] == null;
    }
    if (isNull2 && executorSchema.isNonNullType(argType)) {
      throw new GraphQLError(`Argument "${name}" of non-null type "${inspect4(argType)}" must not be null.`, valueNode);
    }
    const coercedValue = valueFromAST2(executorSchema, valueNode, argType, variableValues);
    if (coercedValue === void 0) {
      throw new GraphQLError(`Argument "${name}" has invalid value ${print(valueNode)}.`, valueNode);
    }
    coercedValues[name] = coercedValue;
  }
  return coercedValues;
}
function getDirectiveValues2(executorSchema, directiveDef, node, variableValues) {
  var _node$directives;
  const directiveNode = (_node$directives = node.directives) === null || _node$directives === void 0 ? void 0 : _node$directives.find((directive) => directive.name.value === directiveDef.name);
  if (directiveNode) {
    return getArgumentValues3(executorSchema, directiveDef, directiveNode, variableValues);
  }
}
function hasOwnProperty2(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

// node_modules/graphql-executor/execution/publisher.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/graphql-executor/jsutils/repeater.mjs
init_virtual_process_polyfill();
init_buffer();
var RepeaterOverflowError2 = class extends Error {
  constructor(message) {
    super(message);
    Object.defineProperty(this, "name", {
      value: "RepeaterOverflowError",
      enumerable: false
    });
    Object.setPrototypeOf(this, this.constructor.prototype);
    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, this.constructor);
    }
  }
};
function swallow2(value) {
  if (value != null && typeof value.then === "function") {
    value.then(NOOP2, NOOP2);
  }
}
var Initial2 = 0;
var Started2 = 1;
var Stopped2 = 2;
var Done2 = 3;
var Rejected2 = 4;
var MAX_QUEUE_LENGTH2 = 1024;
var NOOP2 = () => void 0;
function consumeExecution2(r) {
  const err = r.err;
  const execution = Promise.resolve(r.execution).then((value) => {
    if (err != null) {
      throw err;
    }
    return value;
  });
  r.err = void 0;
  r.execution = execution.then(() => void 0, () => void 0);
  return r.pending === void 0 ? execution : r.pending.then(() => execution);
}
function createIteration2(r, value) {
  const done = r.state >= Done2;
  return Promise.resolve(value).then((resolvedValue) => {
    if (!done && r.state >= Rejected2) {
      return consumeExecution2(r).then((finalValue) => ({
        value: finalValue,
        done: true
      }));
    }
    return {
      value: resolvedValue,
      done
    };
  });
}
function stop2(r, err) {
  if (r.state >= Stopped2) {
    return;
  }
  r.state = Stopped2;
  r.onnext();
  r.onstop();
  if (r.err == null) {
    r.err = err;
  }
  if (r.pushes.length === 0 && (typeof r.buffer === "undefined" || r.buffer.empty)) {
    finish2(r);
  } else {
    for (const p of r.pushes) {
      p.resolve();
    }
  }
}
function finish2(r) {
  if (r.state >= Done2) {
    return;
  }
  if (r.state < Stopped2) {
    stop2(r);
  }
  r.state = Done2;
  r.buffer = void 0;
  for (const next of r.nexts) {
    const execution = r.pending === void 0 ? consumeExecution2(r) : r.pending.then(() => consumeExecution2(r));
    next.resolve(createIteration2(r, execution));
  }
  r.pushes = [];
  r.nexts = [];
}
function reject2(r) {
  if (r.state >= Rejected2) {
    return;
  }
  if (r.state < Done2) {
    finish2(r);
  }
  r.state = Rejected2;
}
function push2(r, value) {
  swallow2(value);
  if (r.pushes.length >= MAX_QUEUE_LENGTH2) {
    throw new RepeaterOverflowError2(`No more than ${MAX_QUEUE_LENGTH2} pending calls to push are allowed on a single repeater.`);
  } else if (r.state >= Stopped2) {
    return Promise.resolve(void 0);
  }
  let valueP = r.pending === void 0 ? Promise.resolve(value) : r.pending.then(() => value);
  valueP = valueP.catch((err) => {
    if (r.state < Stopped2) {
      r.err = err;
    }
    reject2(r);
    return void 0;
  });
  let nextP;
  if (r.nexts.length) {
    const next2 = r.nexts.shift();
    next2.resolve(createIteration2(r, valueP));
    if (r.nexts.length) {
      nextP = Promise.resolve(r.nexts[0].value);
    } else {
      nextP = new Promise((resolve2) => r.onnext = resolve2);
    }
  } else if (typeof r.buffer !== "undefined" && !r.buffer.full) {
    r.buffer.add(valueP);
    nextP = Promise.resolve(void 0);
  } else {
    nextP = new Promise((resolve2) => r.pushes.push({
      resolve: resolve2,
      value: valueP
    }));
  }
  let floating = true;
  const next = {};
  const unhandled = nextP.catch((err) => {
    if (floating) {
      throw err;
    }
    return void 0;
  });
  next.then = (onfulfilled, onrejected) => {
    floating = false;
    return Promise.prototype.then.call(nextP, onfulfilled, onrejected);
  };
  next.catch = (onrejected) => {
    floating = false;
    return Promise.prototype.catch.call(nextP, onrejected);
  };
  next.finally = nextP.finally.bind(nextP);
  r.pending = valueP.then(() => unhandled).catch((err) => {
    r.err = err;
    reject2(r);
  });
  return next;
}
function createStop2(r) {
  const stop1 = stop2.bind(null, r);
  const stopP = new Promise((resolve2) => r.onstop = resolve2);
  stop1.then = stopP.then.bind(stopP);
  stop1.catch = stopP.catch.bind(stopP);
  stop1.finally = stopP.finally.bind(stopP);
  return stop1;
}
function execute3(r) {
  r.state = Started2;
  const push1 = push2.bind(null, r);
  const stop1 = createStop2(r);
  r.execution = new Promise((resolve2) => resolve2(r.executor(push1, stop1)));
  r.execution.catch(() => stop2(r));
}
var records2 = /* @__PURE__ */ new WeakMap();
var Repeater2 = class {
  constructor(executor, buffer) {
    records2.set(this, {
      executor,
      buffer,
      err: void 0,
      state: Initial2,
      pushes: [],
      nexts: [],
      pending: void 0,
      execution: void 0,
      onnext: NOOP2,
      onstop: NOOP2
    });
  }
  next(value) {
    swallow2(value);
    const r = records2.get(this);
    if (r === void 0) {
      throw new Error("WeakMap error");
    }
    if (r.nexts.length >= MAX_QUEUE_LENGTH2) {
      throw new RepeaterOverflowError2(`No more than ${MAX_QUEUE_LENGTH2} pending calls to next are allowed on a single repeater.`);
    }
    if (r.state <= Initial2) {
      execute3(r);
    }
    r.onnext(value);
    if (typeof r.buffer !== "undefined" && !r.buffer.empty) {
      const result = createIteration2(r, r.buffer.remove());
      if (r.pushes.length) {
        const p = r.pushes.shift();
        r.buffer.add(p.value);
        r.onnext = p.resolve;
      }
      return result;
    } else if (r.pushes.length) {
      const p = r.pushes.shift();
      r.onnext = p.resolve;
      return createIteration2(r, p.value);
    } else if (r.state >= Stopped2) {
      finish2(r);
      return createIteration2(r, consumeExecution2(r));
    }
    return new Promise((resolve2) => r.nexts.push({
      resolve: resolve2,
      value
    }));
  }
  return(value) {
    swallow2(value);
    const r = records2.get(this);
    if (r === void 0) {
      throw new Error("WeakMap error");
    }
    finish2(r);
    r.execution = Promise.resolve(r.execution).then(() => value);
    return createIteration2(r, consumeExecution2(r));
  }
  throw(err) {
    const r = records2.get(this);
    if (r === void 0) {
      throw new Error("WeakMap error");
    }
    if (r.state <= Initial2 || r.state >= Stopped2 || typeof r.buffer !== "undefined" && !r.buffer.empty) {
      finish2(r);
      if (r.err == null) {
        r.err = err;
      }
      return createIteration2(r, consumeExecution2(r));
    }
    return this.next(Promise.reject(err));
  }
  [Symbol.asyncIterator]() {
    return this;
  }
};

// node_modules/graphql-executor/execution/publisher.mjs
var Publisher = class {
  constructor({
    payloadFromSource = (source) => source,
    onReady,
    hasNext = () => true,
    onStop
  } = {}) {
    this._payloadFromSource = payloadFromSource;
    this._onReady = onReady;
    this._hasNext = hasNext;
    this._buffer = [];
    this._stopped = false;
    this._trigger = new Promise((resolve2) => {
      this._resolve = resolve2;
    });
    this._pushed = /* @__PURE__ */ new WeakMap();
    this._pending = /* @__PURE__ */ new WeakMap();
    this._repeater = new Repeater2(async (push3, stop3) => {
      if (onStop) {
        stop3.then(onStop);
      }
      while (true) {
        await this._trigger;
        while (this._buffer.length) {
          const payload = this._buffer.shift();
          await push3(payload);
        }
        if (this._stopped) {
          stop3();
          break;
        }
        this._trigger = new Promise((resolve2) => {
          this._resolve = resolve2;
        });
      }
    });
  }
  emit(keys, payload) {
    for (const key of keys) {
      this._pushed.set(key, true);
    }
    this._buffer.push(payload);
    for (const key of keys) {
      const dependents = this._pending.get(key);
      if (dependents) {
        this._pushMany(dependents);
      }
      this._pending.delete(key);
    }
    this._resolve();
  }
  stop(finalPayload) {
    if (finalPayload !== void 0) {
      this._buffer.push(finalPayload);
    }
    this._stopped = true;
    this._resolve();
  }
  queue(keys, source, parentKey) {
    if (this._pushed.get(parentKey)) {
      this._pushOne({
        keys,
        source
      });
      return;
    }
    const dependents = this._pending.get(parentKey);
    if (dependents) {
      dependents.push({
        keys,
        source
      });
      return;
    }
    this._pending.set(parentKey, [
      {
        keys,
        source
      }
    ]);
  }
  _pushOne(context) {
    const hasNext = this._pushOneImpl(context);
    if (!hasNext) {
      this.stop();
    }
  }
  _pushOneImpl({ keys, source }) {
    var _this$_onReady;
    (_this$_onReady = this._onReady) === null || _this$_onReady === void 0 ? void 0 : _this$_onReady.call(this);
    const hasNext = this._hasNext();
    const payload = this._payloadFromSource(source, hasNext);
    this.emit(keys, payload);
    return hasNext;
  }
  _pushMany(contexts) {
    let hasNext = false;
    for (const context of contexts) {
      hasNext = this._pushOneImpl(context);
    }
    if (!hasNext) {
      this.stop();
    }
  }
  subscribe() {
    return this._repeater;
  }
};

// node_modules/graphql-executor/execution/bundler.mjs
init_virtual_process_polyfill();
init_buffer();
var Bundler = class {
  constructor({
    initialIndex,
    maxBundleSize,
    maxInterval,
    createDataBundleContext,
    createErrorBundleContext,
    onSubsequentData,
    onSubsequentError,
    onDataBundle,
    onErrorBundle
  }) {
    this._maxBundleSize = maxBundleSize;
    this._createDataBundleContext = createDataBundleContext;
    this._createErrorBundleContext = createErrorBundleContext;
    this._onSubsequentData = onSubsequentData;
    this._onSubsequentError = onSubsequentError;
    this._onDataBundle = onDataBundle;
    this._onErrorBundle = onErrorBundle;
    if (maxInterval != null) {
      this._timingContext = {
        maxInterval,
        timeout: void 0,
        lastTime: Date.now()
      };
    }
    this._currentBundleSize = 0;
    this._count = initialIndex;
  }
  queueData(index, result) {
    const context = this._updateDataContext(index, result);
    this._currentBundleSize++;
    this._count++;
    if (this._count === this._total) {
      this._onDataBundle(context);
      if (this._timingContext) {
        this._clearCurrentTimer(this._timingContext);
      }
      return;
    }
    if (this._currentBundleSize === this._maxBundleSize) {
      this._onDataBundle(context);
      this._currentContext = void 0;
      if (this._timingContext) {
        this._restartTimer(this._timingContext);
      }
      return;
    }
    if (this._timingContext && Date.now() - this._timingContext.lastTime > this._timingContext.maxInterval) {
      this._onDataBundle(context);
      this._currentContext = void 0;
      this._startNewTimer(this._timingContext);
    }
  }
  queueError(index, result) {
    const context = this._updateErrorContext(index, result);
    this._currentBundleSize++;
    this._count++;
    if (this._count === this._total) {
      this._onErrorBundle(context);
      if (this._timingContext) {
        this._clearCurrentTimer(this._timingContext);
      }
      return;
    }
    if (this._currentBundleSize === this._maxBundleSize) {
      this._onErrorBundle(context);
      this._currentContext = void 0;
      if (this._timingContext) {
        this._restartTimer(this._timingContext);
      }
    }
    if (this._timingContext && Date.now() - this._timingContext.lastTime > this._timingContext.maxInterval) {
      this._onErrorBundle(context);
      this._currentContext = void 0;
      this._startNewTimer(this._timingContext);
    }
  }
  setTotal(total) {
    if (this._count < total) {
      this._total = total;
      return;
    }
    if (this._currentContext) {
      this._onBundle(this._currentContext);
      if (this._timingContext) {
        this._clearCurrentTimer(this._timingContext);
      }
    }
  }
  _clearCurrentTimer(timingContext) {
    const timeout = timingContext.timeout;
    if (timeout) {
      clearTimeout(timeout);
    }
  }
  _startNewTimer(timingContext) {
    timingContext.timeout = setTimeout(() => this._flushCurrentBundle(timingContext), timingContext.maxInterval);
    timingContext.lastTime = Date.now();
  }
  _flushCurrentBundle(timingContext) {
    if (this._currentContext) {
      this._onBundle(this._currentContext);
      this._currentContext = void 0;
      this._restartTimer(timingContext);
      this._startNewTimer(timingContext);
    }
  }
  _restartTimer(timingContext) {
    this._clearCurrentTimer(timingContext);
    this._startNewTimer(timingContext);
  }
  _updateDataContext(index, result) {
    if (this._currentContext === void 0) {
      return this._getNewDataContext(index, result);
    } else if (!this._currentContext.isData) {
      this._onErrorBundle(this._currentContext.context);
      return this._getNewDataContext(index, result);
    }
    this._onSubsequentData(index, result, this._currentContext.context);
    return this._currentContext.context;
  }
  _getNewDataContext(index, result) {
    this._currentBundleSize = 0;
    const context = this._createDataBundleContext(index, result);
    this._currentContext = {
      isData: true,
      context
    };
    if (this._timingContext) {
      const timingContext = this._timingContext;
      timingContext.timeout = setTimeout(() => this._flushCurrentBundle(timingContext), timingContext.maxInterval);
    }
    return context;
  }
  _updateErrorContext(index, result) {
    if (this._currentContext === void 0) {
      return this._getNewErrorContext(index, result);
    } else if (this._currentContext.isData) {
      this._onDataBundle(this._currentContext.context);
      return this._getNewErrorContext(index, result);
    }
    this._onSubsequentError(index, result, this._currentContext.context);
    return this._currentContext.context;
  }
  _getNewErrorContext(index, result) {
    this._currentBundleSize = 0;
    const context = this._createErrorBundleContext(index, result);
    this._currentContext = {
      isData: false,
      context
    };
    if (this._timingContext) {
      const timingContext = this._timingContext;
      timingContext.timeout = setTimeout(() => this._flushCurrentBundle(timingContext), timingContext.maxInterval);
    }
    return context;
  }
  _onBundle(bundleContext) {
    if (bundleContext.isData) {
      this._onDataBundle(bundleContext.context);
      return;
    }
    this._onErrorBundle(bundleContext.context);
  }
};

// node_modules/graphql-executor/execution/getSequentialBundler.mjs
init_virtual_process_polyfill();
init_buffer();
function getSequentialBundler(initialIndex, bundler) {
  const dataResultMap = /* @__PURE__ */ new Map();
  const errorResultMap = /* @__PURE__ */ new Map();
  let count = initialIndex;
  return {
    queueData: (index, result) => {
      if (count !== index) {
        dataResultMap.set(index, result);
        return;
      }
      bundler.queueData(index, result);
      count++;
      processPending();
    },
    queueError: (index, result) => {
      if (count !== index) {
        errorResultMap.set(index, result);
        return;
      }
      bundler.queueError(index, result);
      count++;
      processPending();
    },
    setTotal: (total) => bundler.setTotal(total)
  };
  function processPending() {
    while (true) {
      const dataResult = dataResultMap.get(count);
      if (dataResult !== void 0) {
        dataResultMap.delete(count);
        bundler.queueData(count, dataResult);
        count++;
        continue;
      }
      const errorResult = errorResultMap.get(count);
      if (errorResult !== void 0) {
        errorResultMap.delete(count);
        bundler.queueError(count, errorResult);
        count++;
        continue;
      }
      break;
    }
  }
}

// node_modules/graphql-executor/execution/mapAsyncIterable.mjs
init_virtual_process_polyfill();
init_buffer();
function mapAsyncIterable(iterable, fn) {
  return new Repeater2(async (push3, stop3) => {
    const iter = iterable[Symbol.asyncIterator]();
    let finalIteration;
    stop3.then(() => {
      finalIteration = typeof iter.return === "function" ? iter.return() : true;
    });
    while (!finalIteration) {
      const iteration = await iter.next();
      if (iteration.done) {
        stop3();
        break;
      }
      await push3(fn(iteration.value));
    }
    if (isPromise2(finalIteration)) {
      await finalIteration;
    }
  });
}

// node_modules/graphql-executor/execution/flattenAsyncIterable.mjs
init_virtual_process_polyfill();
init_buffer();
function flattenAsyncIterable(iterable) {
  return new Repeater2(async (push3, stop3) => {
    const iter = iterable[Symbol.asyncIterator]();
    let childIterator;
    let finalIteration;
    stop3.then(() => {
      const childReturned = childIterator && typeof childIterator.return === "function" && childIterator.return();
      const returned = typeof iter.return === "function" && iter.return();
      if (isPromise2(childReturned)) {
        finalIteration = isPromise2(returned) ? Promise.all([childReturned, returned]) : true;
      } else if (isPromise2(returned)) {
        finalIteration = returned;
      } else {
        finalIteration = true;
      }
    });
    while (!finalIteration) {
      const iteration = await iter.next();
      if (iteration.done) {
        stop3();
        break;
      }
      const value = iteration.value;
      if (isAsyncIterable4(value)) {
        childIterator = value[Symbol.asyncIterator]();
        await pushChildIterations(childIterator, push3, finalIteration);
        childIterator = void 0;
        continue;
      }
      await push3(value);
    }
    if (isPromise2(finalIteration)) {
      await finalIteration;
    }
  });
}
async function pushChildIterations(iter, push3, finalIteration) {
  while (!finalIteration) {
    const iteration = await iter.next();
    if (iteration.done) {
      return;
    }
    await push3(iteration.value);
  }
}

// node_modules/graphql-executor/execution/executor.mjs
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Executor = class {
  constructor(executorArgs) {
    _defineProperty(this, "splitDefinitions", memoize13((document) => this._splitDefinitions(document)));
    _defineProperty(this, "selectOperation", memoize1and1((operations, operationName) => this._selectOperation(operations, operationName)));
    _defineProperty(this, "getFieldContext", memoize23((parentType, fieldNodes) => this._getFieldContext(parentType, fieldNodes)));
    _defineProperty(this, "getValueCompleter", memoize13((returnType) => this._getValueCompleter(returnType)));
    _defineProperty(this, "createFieldList", memoize13((node) => [node]));
    _defineProperty(this, "updateFieldList", memoize23((fieldList, node) => [...fieldList, node]));
    _defineProperty(this, "buildFieldResolver", (resolverKey, defaultResolver) => (exeContext, fieldContext, source, info) => {
      var _fieldDef$resolverKey;
      const { fieldDef, initialFieldNode } = fieldContext;
      const resolveFn = (_fieldDef$resolverKey = fieldDef[resolverKey]) !== null && _fieldDef$resolverKey !== void 0 ? _fieldDef$resolverKey : defaultResolver;
      const { contextValue, variableValues } = exeContext;
      const args = exeContext.getArgumentValues(fieldDef, initialFieldNode, variableValues);
      return resolveFn(source, args, contextValue, info);
    });
    _defineProperty(this, "buildRootFieldCollector", (fragments, variableValues, getDeferValues) => (runtimeType, operation) => {
      const fields = /* @__PURE__ */ new Map();
      const patches = [];
      this.collectFieldsImpl(fragments, variableValues, getDeferValues, runtimeType, operation.selectionSet, fields, patches, /* @__PURE__ */ new Set());
      return {
        fields,
        patches
      };
    });
    _defineProperty(this, "buildSubFieldCollector", (fragments, variableValues, getDeferValues) => memoize23((returnType, fieldNodes) => {
      const subFieldNodes = /* @__PURE__ */ new Map();
      const visitedFragmentNames = /* @__PURE__ */ new Set();
      const subPatches = [];
      const subFieldsAndPatches = {
        fields: subFieldNodes,
        patches: subPatches
      };
      for (const node of fieldNodes) {
        if (node.selectionSet) {
          this.collectFieldsImpl(fragments, variableValues, getDeferValues, returnType, node.selectionSet, subFieldNodes, subPatches, visitedFragmentNames);
        }
      }
      return subFieldsAndPatches;
    }));
    const { schema: schema2, executorSchema } = executorArgs;
    schema2 || devAssert2(false, "Must provide schema.");
    this._schema = schema2;
    this._executorSchema = executorSchema !== null && executorSchema !== void 0 ? executorSchema : toExecutorSchema(schema2);
  }
  execute(args) {
    const exeContext = this.buildExecutionContext(args);
    if (!("fragments" in exeContext)) {
      return {
        errors: exeContext
      };
    }
    const { operation, forceQueryAlgorithm } = exeContext;
    if (forceQueryAlgorithm) {
      return this.executeQueryImpl(exeContext);
    }
    switch (operation.operation) {
      case "query":
        return this.executeQueryImpl(exeContext);
      case "mutation":
        return this.executeMutationImpl(exeContext);
      default:
        return this.executeSubscriptionImpl(exeContext);
    }
  }
  async createSourceEventStream(args) {
    const exeContext = this.buildExecutionContext(args);
    if (!("fragments" in exeContext)) {
      return {
        errors: exeContext
      };
    }
    return this.createSourceEventStreamImpl(exeContext);
  }
  executeQueryImpl(exeContext) {
    return this.executeOperationImpl(exeContext, this.executeFields.bind(this), this.buildResponse.bind(this));
  }
  executeMutationImpl(exeContext) {
    return this.executeOperationImpl(exeContext, this.executeFieldsSerially.bind(this), this.buildResponse.bind(this));
  }
  executeOperationImpl(exeContext, rootFieldsExecutor, responseBuilder) {
    let data;
    try {
      const { rootValue, rootResponseNode } = exeContext;
      const {
        rootType,
        fieldsAndPatches: { fields, patches }
      } = this.getRootContext(exeContext);
      const path2 = void 0;
      data = rootFieldsExecutor(exeContext, rootType, rootValue, path2, fields, rootResponseNode);
      this.addPatches(exeContext, patches, rootType, rootValue, path2, rootResponseNode);
    } catch (error) {
      exeContext.rootResponseNode.errors.push(error);
      data = null;
    }
    if (isPromise2(data)) {
      return data.then((resolvedData) => responseBuilder(exeContext, resolvedData), (error) => {
        exeContext.rootResponseNode.errors.push(error);
        return responseBuilder(exeContext, null);
      });
    }
    return responseBuilder(exeContext, data);
  }
  buildResponse(exeContext, data) {
    const rootResponseNode = exeContext.rootResponseNode;
    const errors = rootResponseNode.errors;
    const initialResult = errors.length === 0 ? {
      data
    } : {
      errors,
      data
    };
    if (this.hasNext(exeContext.state)) {
      const publisher = exeContext.publisher;
      publisher.emit([rootResponseNode], { ...initialResult, hasNext: true });
      return publisher.subscribe();
    }
    return initialResult;
  }
  assertValidExecutionArguments(document, rawVariableValues) {
    document || devAssert2(false, "Must provide document.");
    rawVariableValues == null || isObjectLike2(rawVariableValues) || devAssert2(false, "Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.");
  }
  _splitDefinitions(document) {
    const operations = [];
    const fragments = /* @__PURE__ */ Object.create(null);
    for (const definition of document.definitions) {
      switch (definition.kind) {
        case Kind.OPERATION_DEFINITION:
          operations.push(definition);
          break;
        case Kind.FRAGMENT_DEFINITION:
          fragments[definition.name.value] = definition;
          break;
        default:
      }
    }
    return {
      operations,
      fragments
    };
  }
  _selectOperation(operations, operationName) {
    let operation;
    for (const possibleOperation of operations) {
      var _possibleOperation$na;
      if (operationName == null) {
        if (operation !== void 0) {
          return [
            new GraphQLError("Must provide operation name if query contains multiple operations.")
          ];
        }
        operation = possibleOperation;
      } else if (((_possibleOperation$na = possibleOperation.name) === null || _possibleOperation$na === void 0 ? void 0 : _possibleOperation$na.value) === operationName) {
        operation = possibleOperation;
      }
    }
    if (!operation) {
      if (operationName != null) {
        return [
          new GraphQLError(`Unknown operation named "${operationName}".`)
        ];
      }
      return [new GraphQLError("Must provide an operation.")];
    }
    return operation;
  }
  createPublisher(state) {
    return new Publisher({
      payloadFromSource: (result, hasNext) => {
        const { responseContext, data, path: path2, atIndex, atIndices, label } = result;
        const errors = [];
        for (const responseNode of responseContext.responseNodes) {
          errors.push(...responseNode.errors);
        }
        const value = {
          data,
          path: path2 ? pathToArray2(path2) : [],
          hasNext
        };
        if (atIndex != null) {
          value.atIndex = atIndex;
        } else if (atIndices != null) {
          value.atIndices = atIndices;
        }
        if (label != null) {
          value.label = label;
        }
        if (errors.length > 0) {
          value.errors = errors;
        }
        return value;
      },
      onReady: () => state.pendingPushes--,
      hasNext: () => this.hasNext(state),
      onStop: () => Promise.all(Array.from(state.iterators.values()).map((iterator) => {
        var _iterator$return;
        return (_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator);
      }))
    });
  }
  buildExecutionContext(args) {
    var _operation$variableDe;
    const {
      document,
      rootValue,
      contextValue,
      variableValues: rawVariableValues,
      operationName,
      fieldResolver,
      typeResolver,
      subscribeFieldResolver,
      forceQueryAlgorithm,
      enableIncremental
    } = args;
    this.assertValidExecutionArguments(document, rawVariableValues);
    const { operations, fragments } = this.splitDefinitions(document);
    const operation = this.selectOperation(operations, operationName);
    if ("length" in operation) {
      return operation;
    }
    const variableDefinitions = (_operation$variableDe = operation.variableDefinitions) !== null && _operation$variableDe !== void 0 ? _operation$variableDe : [];
    const coercedVariableValues = getVariableValues2(this._executorSchema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {
      maxErrors: 50
    });
    if (coercedVariableValues.errors) {
      return coercedVariableValues.errors;
    }
    const enableIncrementalFlagValue = enableIncremental !== null && enableIncremental !== void 0 ? enableIncremental : true;
    const defaultResolveFieldValueFn = fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver2;
    const getDeferValues = enableIncrementalFlagValue ? this.getDeferValues.bind(this) : () => void 0;
    const coercedVariableValuesValues = coercedVariableValues.coerced;
    const state = {
      pendingPushes: 0,
      pendingStreamResults: 0,
      iterators: /* @__PURE__ */ new Set()
    };
    return {
      fragments,
      rootValue,
      contextValue,
      operation,
      variableValues: coercedVariableValues.coerced,
      fieldResolver: defaultResolveFieldValueFn,
      typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver2,
      forceQueryAlgorithm: forceQueryAlgorithm !== null && forceQueryAlgorithm !== void 0 ? forceQueryAlgorithm : false,
      enableIncremental: enableIncrementalFlagValue,
      getArgumentValues: memoize23((def, node) => getArgumentValues3(this._executorSchema, def, node, coercedVariableValuesValues)),
      getDeferValues,
      getStreamValues: enableIncrementalFlagValue ? this.getStreamValues.bind(this) : () => void 0,
      rootFieldCollector: this.buildRootFieldCollector(fragments, coercedVariableValuesValues, getDeferValues),
      subFieldCollector: this.buildSubFieldCollector(fragments, coercedVariableValuesValues, getDeferValues),
      resolveField: operation.operation === "subscription" && !forceQueryAlgorithm ? this.buildFieldResolver("subscribe", subscribeFieldResolver !== null && subscribeFieldResolver !== void 0 ? subscribeFieldResolver : defaultFieldResolver2) : this.buildFieldResolver("resolve", defaultResolveFieldValueFn),
      rootResponseNode: {
        errors: []
      },
      state,
      publisher: this.createPublisher(state)
    };
  }
  buildPerPayloadExecutionContext(exeContext, payload) {
    const state = {
      pendingPushes: 0,
      pendingStreamResults: 0,
      iterators: /* @__PURE__ */ new Set()
    };
    return {
      ...exeContext,
      rootValue: payload,
      forceQueryAlgorithm: true,
      resolveField: this.buildFieldResolver("resolve", exeContext.fieldResolver),
      rootResponseNode: {
        errors: []
      },
      state,
      publisher: this.createPublisher(state)
    };
  }
  getRootContext(exeContext) {
    const { operation, rootFieldCollector } = exeContext;
    const rootType = this._executorSchema.getRootType(operation.operation);
    if (rootType == null) {
      throw new GraphQLError(`Schema is not configured to execute ${operation.operation} operation.`, operation);
    }
    const fieldsAndPatches = rootFieldCollector(rootType, operation);
    return {
      rootType,
      fieldsAndPatches
    };
  }
  executeFieldsSerially(exeContext, parentType, sourceValue, path2, fields) {
    const parentTypeName = parentType.name;
    return promiseReduce2(fields.entries(), (results, [responseName, fieldNodes]) => {
      const fieldPath = addPath2(path2, responseName, parentTypeName);
      const result = this.executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath, exeContext.rootResponseNode);
      if (result === void 0) {
        return results;
      }
      if (isPromise2(result)) {
        return result.then((resolvedResult) => {
          results[responseName] = resolvedResult;
          return results;
        });
      }
      results[responseName] = result;
      return results;
    }, /* @__PURE__ */ Object.create(null));
  }
  executeFields(exeContext, parentType, sourceValue, path2, fields, responseNode) {
    const results = /* @__PURE__ */ Object.create(null);
    const promises = [];
    const parentTypeName = parentType.name;
    for (const [responseName, fieldNodes] of fields.entries()) {
      const fieldPath = addPath2(path2, responseName, parentTypeName);
      const result = this.executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath, responseNode);
      if (result !== void 0) {
        if (isPromise2(result)) {
          results[responseName] = void 0;
          const promise = result.then((resolved) => {
            results[responseName] = resolved;
          });
          promises.push(promise);
        } else {
          results[responseName] = result;
        }
      }
    }
    if (!promises.length) {
      return results;
    }
    return resolveAfterAll(results, promises);
  }
  executeField(exeContext, parentType, source, fieldNodes, path2, responseNode) {
    const fieldContext = this.getFieldContext(parentType, fieldNodes);
    if (!fieldContext) {
      return;
    }
    const returnType = fieldContext.returnType;
    const info = this.buildResolveInfo(exeContext, fieldContext, path2);
    try {
      const result = exeContext.resolveField(exeContext, fieldContext, source, info);
      let completed;
      const valueCompleter = this.getValueCompleter(returnType);
      if (isPromise2(result)) {
        completed = result.then((resolved) => valueCompleter(exeContext, fieldContext, info, path2, resolved, responseNode));
      } else {
        completed = valueCompleter(exeContext, fieldContext, info, path2, result, responseNode);
      }
      if (isPromise2(completed)) {
        return completed.then(void 0, (rawError) => this.handleRawError(rawError, fieldNodes, path2, returnType, responseNode.errors));
      }
      return completed;
    } catch (rawError) {
      return this.handleRawError(rawError, fieldNodes, path2, returnType, responseNode.errors);
    }
  }
  buildResolveInfo(exeContext, fieldContext, path2) {
    const { fieldName, fieldNodes, returnType, parentType } = fieldContext;
    const { _schema: schema2, _executorSchema: executorSchema } = this;
    const { fragments, rootValue, operation, variableValues } = exeContext;
    return {
      fieldName,
      fieldNodes,
      returnType,
      parentType,
      path: path2,
      schema: schema2,
      executorSchema,
      fragments,
      rootValue,
      operation,
      variableValues
    };
  }
  toLocatedError(rawError, fieldNodes, path2) {
    return locatedError(toError2(rawError), fieldNodes, pathToArray2(path2));
  }
  handleRawError(rawError, fieldNodes, path2, returnType, errors) {
    const error = this.toLocatedError(rawError, fieldNodes, path2);
    if (this._executorSchema.isNonNullType(returnType)) {
      throw error;
    }
    errors.push(error);
    return null;
  }
  buildNullableValueCompleter(valueCompleter) {
    return (exeContext, fieldContext, info, path2, result, responseNode) => {
      if (result instanceof Error) {
        throw result;
      }
      if (result == null) {
        return null;
      }
      return valueCompleter(exeContext, fieldContext, info, path2, result, responseNode);
    };
  }
  _getValueCompleter(returnType) {
    if (this._executorSchema.isNonNullType(returnType)) {
      return (exeContext, fieldContext, info, path2, result, responseNode) => {
        const innerValueCompleter = this.getValueCompleter(returnType.ofType);
        const completed = innerValueCompleter(exeContext, fieldContext, info, path2, result, responseNode);
        if (completed === null) {
          throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);
        }
        return completed;
      };
    }
    if (this._executorSchema.isListType(returnType)) {
      return this.buildNullableValueCompleter((exeContext, fieldContext, info, path2, result, responseNode) => this.completeListValue(exeContext, returnType, fieldContext, info, path2, result, responseNode));
    }
    if (this._executorSchema.isLeafType(returnType)) {
      return this.buildNullableValueCompleter((_exeContext, _fieldContext, _info, _path, result, _responseNode) => this.completeLeafValue(returnType, result));
    }
    if (this._executorSchema.isAbstractType(returnType)) {
      return this.buildNullableValueCompleter((exeContext, fieldContext, info, path2, result, responseNode) => this.completeAbstractValue(exeContext, returnType, fieldContext, info, path2, result, responseNode));
    }
    if (this._executorSchema.isObjectType(returnType)) {
      return this.buildNullableValueCompleter((exeContext, fieldContext, info, path2, result, responseNode) => this.completeObjectValue(exeContext, returnType, fieldContext, info, path2, result, responseNode));
    }
    invariant2(false, "Cannot complete value of unexpected output type: " + inspect4(returnType));
  }
  completeListValue(exeContext, returnType, fieldContext, info, path2, result, responseNode) {
    const itemType = returnType.ofType;
    const valueCompleter = this.getValueCompleter(itemType);
    const completedResults = [];
    const promises = [];
    const stream = exeContext.getStreamValues(exeContext.variableValues, fieldContext);
    if (isAsyncIterable4(result)) {
      const iterator2 = result[Symbol.asyncIterator]();
      return this.completeAsyncIteratorValue(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator2, responseNode, stream, completedResults, promises);
    }
    if (!isIterableObject2(result)) {
      throw new GraphQLError(`Expected Iterable, but did not find one for field "${info.parentType.name}.${info.fieldName}".`);
    }
    const iterator = result[Symbol.iterator]();
    this.completeIteratorValue(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator, responseNode, stream, completedResults, promises);
    return promises.length ? resolveAfterAll(completedResults, promises) : completedResults;
  }
  getStreamValues(variableValues, fieldContext) {
    const stream = getDirectiveValues2(this._executorSchema, GraphQLStreamDirective, fieldContext.initialFieldNode, variableValues);
    if (!stream) {
      return;
    }
    if (stream.if === false) {
      return;
    }
    const { initialCount, maxChunkSize, maxInterval, inParallel, label } = stream;
    typeof initialCount === "number" || invariant2(false, "initialCount must be a number");
    initialCount >= 0 || invariant2(false, "initialCount must be an integer greater than or equal to zero");
    typeof maxChunkSize === "number" || invariant2(false, "maxChunkSize must be a number");
    maxChunkSize >= 1 || invariant2(false, "maxChunkSize must be an integer greater than or equal to one");
    if (maxInterval != null) {
      typeof maxInterval === "number" || invariant2(false, "maxInterval must be a number");
      maxInterval >= 0 || invariant2(false, "maxInterval must be an integer greater than or equal to zero");
    }
    return {
      initialCount,
      maxChunkSize,
      maxInterval,
      inParallel: inParallel === true,
      label: typeof label === "string" ? label : void 0
    };
  }
  completeIteratorValue(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator, responseNode, stream, completedResults, promises) {
    if (stream) {
      this.completeIteratorValueWithStream(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator, responseNode, stream, completedResults, 0, promises);
      return;
    }
    this.completeIteratorValueWithoutStream(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator, responseNode, completedResults, 0, promises);
  }
  onNewBundleContext(state, context, responseNode) {
    state.pendingPushes++;
    state.pendingStreamResults--;
    context.responseNodes.push(responseNode);
    return context;
  }
  onSubsequentResponseNode(state, context, responseNode) {
    state.pendingStreamResults--;
    context.responseNodes.push(responseNode);
  }
  createBundler(exeContext, parentResponseNode, initialCount, maxChunkSize, maxInterval, resultToNewDataContext, indexToNewErrorContext, onSubsequentData, onSubsequentError, dataContextToIncrementalResult, errorContextToIncrementalResult) {
    return new Bundler({
      initialIndex: initialCount,
      maxBundleSize: maxChunkSize,
      maxInterval,
      createDataBundleContext: (index, result) => this.onNewBundleContext(exeContext.state, resultToNewDataContext(index, result), result.responseNode),
      createErrorBundleContext: (index, responseNode) => this.onNewBundleContext(exeContext.state, indexToNewErrorContext(index), responseNode),
      onSubsequentData: (index, result, context) => {
        this.onSubsequentResponseNode(exeContext.state, context, result.responseNode);
        onSubsequentData(index, result, context);
      },
      onSubsequentError: (index, responseNode, context) => {
        this.onSubsequentResponseNode(exeContext.state, context, responseNode);
        onSubsequentError(index, context);
      },
      onDataBundle: (context) => exeContext.publisher.queue(context.responseNodes, dataContextToIncrementalResult(context), parentResponseNode),
      onErrorBundle: (context) => exeContext.publisher.queue(context.responseNodes, errorContextToIncrementalResult(context), parentResponseNode)
    });
  }
  createStreamContext(exeContext, initialCount, maxChunkSize, maxInterval, inParallel, path2, label, parentResponseNode) {
    if (maxChunkSize === 1) {
      const bundler = this.createBundler(exeContext, parentResponseNode, initialCount, maxChunkSize, maxInterval, (index, result) => ({
        responseNodes: [],
        parentResponseNode,
        result: result.data,
        atIndex: index
      }), (index) => ({
        responseNodes: [],
        parentResponseNode,
        atIndex: index
      }), () => {
      }, () => {
      }, (context) => ({
        responseContext: context,
        data: context.result,
        path: addPath2(path2, context.atIndex, void 0),
        label
      }), (context) => ({
        responseContext: context,
        data: null,
        path: addPath2(path2, context.atIndex, void 0),
        label
      }));
      return {
        initialCount,
        path: path2,
        bundler: inParallel ? bundler : getSequentialBundler(initialCount, bundler)
      };
    }
    if (inParallel) {
      return {
        initialCount,
        path: path2,
        bundler: this.createBundler(exeContext, parentResponseNode, initialCount, maxChunkSize, maxInterval, (index, result) => ({
          responseNodes: [],
          parentResponseNode,
          atIndices: [index],
          results: [result.data]
        }), (index) => ({
          responseNodes: [],
          parentResponseNode,
          atIndices: [index]
        }), (index, result, context) => {
          context.results.push(result.data);
          context.atIndices.push(index);
        }, (index, context) => {
          context.atIndices.push(index);
        }, (context) => ({
          responseContext: context,
          data: context.results,
          path: path2,
          atIndices: context.atIndices,
          label
        }), (context) => ({
          responseContext: context,
          data: null,
          path: path2,
          atIndices: context.atIndices,
          label
        }))
      };
    }
    return {
      initialCount,
      path: path2,
      bundler: getSequentialBundler(initialCount, this.createBundler(exeContext, parentResponseNode, initialCount, maxChunkSize, maxInterval, (index, result) => ({
        responseNodes: [],
        parentResponseNode,
        atIndex: index,
        results: [result.data]
      }), (index) => ({
        responseNodes: [],
        parentResponseNode,
        atIndex: index
      }), (_index, result, context) => {
        context.results.push(result.data);
      }, () => {
      }, (context) => ({
        responseContext: context,
        data: context.results,
        path: path2,
        atIndex: context.atIndex,
        label
      }), (context) => ({
        responseContext: context,
        data: null,
        path: path2,
        atIndex: context.atIndex,
        label
      })))
    };
  }
  completeIteratorValueWithStream(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator, responseNode, stream, completedResults, _index, promises) {
    const initialCount = stream.initialCount;
    let index = _index;
    while (true) {
      if (index >= initialCount) {
        const { maxChunkSize, maxInterval, inParallel, label } = stream;
        const streamContext = this.createStreamContext(exeContext, initialCount, maxChunkSize, maxInterval, inParallel, path2, label, responseNode);
        const nextIndex = this.addIteratorValue(index, iterator, exeContext, itemType, fieldContext, info, valueCompleter, streamContext);
        streamContext.bundler.setTotal(nextIndex);
        break;
      }
      const iteration = iterator.next();
      if (iteration.done) {
        return;
      }
      const itemPath = addPath2(path2, index, void 0);
      this.completeListItemValue(completedResults, index, promises, iteration.value, exeContext, itemType, valueCompleter, fieldContext, info, itemPath, responseNode);
      index++;
    }
  }
  completeIteratorValueWithoutStream(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator, responseNode, completedResults, _index, promises) {
    let index = _index;
    while (true) {
      const iteration = iterator.next();
      if (iteration.done) {
        return index;
      }
      const itemPath = addPath2(path2, index, void 0);
      this.completeListItemValue(completedResults, index, promises, iteration.value, exeContext, itemType, valueCompleter, fieldContext, info, itemPath, responseNode);
      index++;
    }
  }
  async completeAsyncIteratorValue(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator, responseNode, stream, completedResults, promises) {
    if (stream) {
      await this.completeAsyncIteratorValueWithStream(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator, responseNode, stream, completedResults, promises);
    } else {
      await this.completeAsyncIteratorValueWithoutStream(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator, responseNode, completedResults, promises);
    }
    return promises.length ? resolveAfterAll(completedResults, promises) : completedResults;
  }
  async completeAsyncIteratorValueWithStream(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator, responseNode, stream, completedResults, promises) {
    const initialCount = stream.initialCount;
    let index = 0;
    try {
      while (true) {
        if (index >= initialCount) {
          const { maxChunkSize, maxInterval, inParallel, label } = stream;
          const streamContext = this.createStreamContext(exeContext, initialCount, maxChunkSize, maxInterval, inParallel, path2, label, responseNode);
          this.addAsyncIteratorValue(index, iterator, exeContext, itemType, fieldContext, info, valueCompleter, streamContext);
          return;
        }
        const iteration = await iterator.next();
        if (iteration.done) {
          break;
        }
        const itemPath = addPath2(path2, index, void 0);
        this.completeListItemValue(completedResults, index, promises, iteration.value, exeContext, itemType, valueCompleter, fieldContext, info, itemPath, responseNode);
        index++;
      }
    } catch (rawError) {
      const itemPath = addPath2(path2, index, void 0);
      completedResults.push(this.handleRawError(rawError, fieldContext.fieldNodes, itemPath, itemType, responseNode.errors));
    }
  }
  async completeAsyncIteratorValueWithoutStream(exeContext, itemType, fieldContext, info, valueCompleter, path2, iterator, responseNode, completedResults, promises) {
    let index = 0;
    try {
      while (true) {
        const iteration = await iterator.next();
        if (iteration.done) {
          break;
        }
        const itemPath = addPath2(path2, index, void 0);
        this.completeListItemValue(completedResults, index, promises, iteration.value, exeContext, itemType, valueCompleter, fieldContext, info, itemPath, responseNode);
        index++;
      }
    } catch (rawError) {
      const itemPath = addPath2(path2, index, void 0);
      completedResults.push(this.handleRawError(rawError, fieldContext.fieldNodes, itemPath, itemType, responseNode.errors));
    }
  }
  completeListItemValue(completedResults, index, promises, item, exeContext, itemType, valueCompleter, fieldContext, info, itemPath, responseNode) {
    try {
      let completedItem;
      if (isPromise2(item)) {
        completedItem = item.then((resolved) => valueCompleter(exeContext, fieldContext, info, itemPath, resolved, responseNode));
      } else {
        completedItem = valueCompleter(exeContext, fieldContext, info, itemPath, item, responseNode);
      }
      completedResults[index] = completedItem;
      if (!isPromise2(completedItem)) {
        return;
      }
      const promise = completedItem.then(void 0, (rawError) => this.handleRawError(rawError, fieldContext.fieldNodes, itemPath, itemType, responseNode.errors)).then((resolved) => {
        completedResults[index] = resolved;
      });
      promises.push(promise);
    } catch (rawError) {
      completedResults[index] = this.handleRawError(rawError, fieldContext.fieldNodes, itemPath, itemType, responseNode.errors);
    }
  }
  completeLeafValue(returnType, result) {
    const serializedResult = returnType.serialize(result);
    if (serializedResult == null) {
      throw new Error(`Expected \`${inspect4(returnType)}.serialize(${inspect4(result)})\` to return non-nullable value, returned: ${inspect4(serializedResult)}`);
    }
    return serializedResult;
  }
  completeAbstractValue(exeContext, returnType, fieldContext, info, path2, result, responseNode) {
    var _returnType$resolveTy;
    const resolveTypeFn = (_returnType$resolveTy = returnType.resolveType) !== null && _returnType$resolveTy !== void 0 ? _returnType$resolveTy : exeContext.typeResolver;
    const contextValue = exeContext.contextValue;
    const runtimeType = resolveTypeFn(result, contextValue, info, returnType);
    if (isPromise2(runtimeType)) {
      return runtimeType.then((resolvedRuntimeType) => this.completeObjectValue(exeContext, this.ensureValidRuntimeType(resolvedRuntimeType, returnType, fieldContext, result), fieldContext, info, path2, result, responseNode));
    }
    return this.completeObjectValue(exeContext, this.ensureValidRuntimeType(runtimeType, returnType, fieldContext, result), fieldContext, info, path2, result, responseNode);
  }
  ensureValidRuntimeType(runtimeTypeOrName, returnType, fieldContext, result) {
    if (runtimeTypeOrName == null) {
      throw new GraphQLError(`Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${fieldContext.parentType.name}.${fieldContext.fieldName}". Either the "${returnType.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`, fieldContext.fieldNodes);
    }
    const runtimeTypeName = typeof runtimeTypeOrName === "object" && this._executorSchema.isNamedType(runtimeTypeOrName) ? runtimeTypeOrName.name : runtimeTypeOrName;
    if (typeof runtimeTypeName !== "string") {
      throw new GraphQLError(`Abstract type "${returnType.name}" must resolve to an Object type at runtime for field "${fieldContext.parentType.name}.${fieldContext.fieldName}" with value ${inspect4(result)}, received "${inspect4(runtimeTypeName)}".`);
    }
    const runtimeType = this._executorSchema.getNamedType(runtimeTypeName);
    if (runtimeType == null) {
      throw new GraphQLError(`Abstract type "${returnType.name}" was resolved to a type "${runtimeTypeName}" that does not exist inside the schema.`, fieldContext.fieldNodes);
    }
    if (!this._executorSchema.isObjectType(runtimeType)) {
      throw new GraphQLError(`Abstract type "${returnType.name}" was resolved to a non-object type "${runtimeTypeName}".`, fieldContext.fieldNodes);
    }
    if (!this._executorSchema.isSubType(returnType, runtimeType)) {
      throw new GraphQLError(`Runtime Object type "${runtimeType.name}" is not a possible type for "${returnType.name}".`, fieldContext.fieldNodes);
    }
    return runtimeType;
  }
  completeObjectValue(exeContext, returnType, fieldContext, info, path2, result, responseNode) {
    if (returnType.isTypeOf) {
      const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);
      if (isPromise2(isTypeOf)) {
        return isTypeOf.then((resolvedIsTypeOf) => {
          if (!resolvedIsTypeOf) {
            throw this.invalidReturnTypeError(returnType, result, fieldContext.fieldNodes);
          }
          return this.collectAndExecuteSubfields(exeContext, returnType, fieldContext, path2, result, responseNode);
        });
      }
      if (!isTypeOf) {
        throw this.invalidReturnTypeError(returnType, result, fieldContext.fieldNodes);
      }
    }
    return this.collectAndExecuteSubfields(exeContext, returnType, fieldContext, path2, result, responseNode);
  }
  invalidReturnTypeError(returnType, result, fieldNodes) {
    return new GraphQLError(`Expected value of type "${returnType.name}" but got: ${inspect4(result)}.`, fieldNodes);
  }
  collectAndExecuteSubfields(exeContext, returnType, fieldContext, path2, result, responseNode) {
    const { subFieldCollector } = exeContext;
    const { fields: subFieldNodes, patches: subPatches } = subFieldCollector(returnType, fieldContext.fieldNodes);
    const subFields = this.executeFields(exeContext, returnType, result, path2, subFieldNodes, responseNode);
    this.addPatches(exeContext, subPatches, returnType, result, path2, responseNode);
    return subFields;
  }
  _getFieldDef(fieldName, parentType) {
    const fieldDef = parentType.getFields()[fieldName];
    if (fieldDef) {
      return fieldDef;
    }
    if (fieldName === SchemaMetaFieldDef2.name && this._executorSchema.getRootType("query") === parentType) {
      return SchemaMetaFieldDef2;
    } else if (fieldName === TypeMetaFieldDef2.name && this._executorSchema.getRootType("query") === parentType) {
      return TypeMetaFieldDef2;
    } else if (fieldName === DirectiveMetaFieldDef.name && this._executorSchema.getRootType("query") === parentType) {
      return DirectiveMetaFieldDef;
    } else if (fieldName === TypeNameMetaFieldDef.name) {
      return TypeNameMetaFieldDef;
    }
  }
  _getFieldContext(parentType, fieldNodes) {
    const initialFieldNode = fieldNodes[0];
    const fieldName = initialFieldNode.name.value;
    const fieldDef = this._getFieldDef(fieldName, parentType);
    if (!fieldDef) {
      return;
    }
    return {
      fieldDef,
      initialFieldNode,
      fieldName: fieldDef.name,
      fieldNodes,
      returnType: fieldDef.type,
      parentType
    };
  }
  async executeSubscriptionImpl(exeContext) {
    return this.executeOperationImpl(exeContext, this.executeRootSubscriptionFields.bind(this), this.buildSubscribeResponse.bind(this));
  }
  async executeRootSubscriptionFields(exeContext, parentType, sourceValue, path2, fields, responseNode) {
    const [responseName, fieldNodes] = [...fields.entries()][0];
    const fieldPath = addPath2(path2, responseName, parentType.name);
    return this.executeRootSubscriptionField(exeContext, parentType, sourceValue, fieldNodes, fieldPath, responseNode);
  }
  buildCreateSourceEventStreamResponse(exeContext, eventStream) {
    const { rootResponseNode } = exeContext;
    const errors = rootResponseNode.errors;
    if (errors.length) {
      return {
        errors
      };
    }
    if (!isAsyncIterable4(eventStream)) {
      throw new Error(`Subscription field must return Async Iterable. Received: ${inspect4(eventStream)}.`);
    }
    return eventStream;
  }
  buildSubscribeResponse(exeContext, _eventStream) {
    const eventStream = this.buildCreateSourceEventStreamResponse(exeContext, _eventStream);
    if (!isAsyncIterable4(eventStream)) {
      return eventStream;
    }
    const mapSourceToResponse = (payload) => {
      const perPayloadExecutionContext = this.buildPerPayloadExecutionContext(exeContext, payload);
      return this.executeQueryImpl(perPayloadExecutionContext);
    };
    return flattenAsyncIterable(mapAsyncIterable(eventStream, mapSourceToResponse));
  }
  async createSourceEventStreamImpl(exeContext) {
    return this.executeOperationImpl(exeContext, this.executeRootSubscriptionFields.bind(this), this.buildCreateSourceEventStreamResponse.bind(this));
  }
  async executeRootSubscriptionField(exeContext, parentType, sourceValue, fieldNodes, fieldPath, responseNode) {
    const fieldContext = this.getFieldContext(parentType, fieldNodes);
    if (!fieldContext) {
      const fieldName = fieldNodes[0].name.value;
      responseNode.errors.push(new GraphQLError(`The subscription field "${fieldName}" is not defined.`, fieldNodes));
      return null;
    }
    const info = this.buildResolveInfo(exeContext, fieldContext, fieldPath);
    try {
      const eventStream = await exeContext.resolveField(exeContext, fieldContext, sourceValue, info);
      if (eventStream instanceof Error) {
        throw eventStream;
      }
      return eventStream;
    } catch (rawError) {
      responseNode.errors.push(this.toLocatedError(rawError, fieldNodes, fieldPath));
      return null;
    }
  }
  addPatches(exeContext, patches, parentType, source, path2, parentResponseNode) {
    const { state, publisher } = exeContext;
    for (const patch of patches) {
      state.pendingPushes++;
      const { label, fields: patchFields } = patch;
      const errors = [];
      const responseNode = {
        errors
      };
      const responseContext = {
        responseNodes: [responseNode],
        parentResponseNode
      };
      Promise.resolve(source).then(() => this.executeFields(exeContext, parentType, source, path2, patchFields, responseNode)).then((data) => publisher.queue(responseContext.responseNodes, {
        responseContext,
        data,
        path: path2,
        label
      }, responseContext.parentResponseNode), (error) => {
        errors.push(error);
        publisher.queue(responseContext.responseNodes, {
          responseContext,
          data: null,
          path: path2,
          label
        }, responseContext.parentResponseNode);
      });
    }
  }
  addIteratorValue(initialIndex, iterator, exeContext, itemType, fieldContext, info, valueCompleter, streamContext) {
    let index = initialIndex;
    let iteration = iterator.next();
    while (!iteration.done) {
      this.addValue(iteration.value, exeContext, itemType, fieldContext, info, valueCompleter, index, streamContext);
      index++;
      iteration = iterator.next();
    }
    return index;
  }
  async addAsyncIteratorValue(initialIndex, iterator, exeContext, itemType, fieldContext, info, valueCompleter, streamContext) {
    exeContext.state.iterators.add(iterator);
    let index = initialIndex;
    try {
      let iteration = await iterator.next();
      while (!iteration.done) {
        this.addValue(iteration.value, exeContext, itemType, fieldContext, info, valueCompleter, index, streamContext);
        index++;
        iteration = await iterator.next();
      }
      streamContext.bundler.setTotal(index);
    } catch (rawError) {
      exeContext.state.pendingStreamResults++;
      this.handleRawStreamError(fieldContext, itemType, streamContext, rawError, index);
      streamContext.bundler.setTotal(index + 1);
    }
    this.closeAsyncIterator(exeContext, iterator);
  }
  handleRawStreamError(fieldContext, itemType, streamContext, rawError, index) {
    const { path: path2 } = streamContext;
    const itemPath = addPath2(path2, index, void 0);
    const error = this.toLocatedError(rawError, fieldContext.fieldNodes, itemPath);
    if (this._executorSchema.isNonNullType(itemType)) {
      streamContext.bundler.queueError(index, {
        errors: [error]
      });
    } else {
      streamContext.bundler.queueData(index, {
        responseNode: {
          errors: [error]
        },
        data: null
      });
    }
  }
  addValue(value, exeContext, itemType, fieldContext, info, valueCompleter, index, streamContext) {
    const itemPath = addPath2(streamContext.path, index, void 0);
    const responseNode = {
      errors: []
    };
    exeContext.state.pendingStreamResults++;
    Promise.resolve(value).then((resolved) => valueCompleter(exeContext, fieldContext, info, itemPath, resolved, responseNode)).then((data) => streamContext.bundler.queueData(index, {
      responseNode,
      data
    }), (rawError) => this.handleRawStreamError(fieldContext, itemType, streamContext, rawError, index));
  }
  closeAsyncIterator(exeContext, iterator) {
    const { state, publisher } = exeContext;
    state.iterators.delete(iterator);
    if (!this.hasNext(exeContext.state)) {
      publisher.stop({
        hasNext: false
      });
    }
  }
  hasNext(state) {
    return state.pendingPushes > 0 || state.pendingStreamResults > 0 || state.iterators.size > 0;
  }
  collectFieldsImpl(fragments, variableValues, getDeferValues, runtimeType, selectionSet, fields, patches, visitedFragmentNames) {
    for (const selection of selectionSet.selections) {
      switch (selection.kind) {
        case Kind.FIELD: {
          if (!this.shouldIncludeNode(variableValues, selection)) {
            continue;
          }
          const name = this.getFieldEntryKey(selection);
          const fieldList = fields.get(name);
          if (fieldList !== void 0) {
            fields.set(name, this.updateFieldList(fieldList, selection));
          } else {
            fields.set(name, this.createFieldList(selection));
          }
          break;
        }
        case Kind.INLINE_FRAGMENT: {
          if (!this.shouldIncludeNode(variableValues, selection) || !this.doesFragmentConditionMatch(selection, runtimeType)) {
            continue;
          }
          const defer = getDeferValues(variableValues, selection);
          if (defer) {
            const patchFields = /* @__PURE__ */ new Map();
            this.collectFieldsImpl(fragments, variableValues, getDeferValues, runtimeType, selection.selectionSet, patchFields, patches, visitedFragmentNames);
            patches.push({
              label: defer.label,
              fields: patchFields
            });
          } else {
            this.collectFieldsImpl(fragments, variableValues, getDeferValues, runtimeType, selection.selectionSet, fields, patches, visitedFragmentNames);
          }
          break;
        }
        case Kind.FRAGMENT_SPREAD: {
          const fragName = selection.name.value;
          if (!this.shouldIncludeNode(variableValues, selection)) {
            continue;
          }
          const defer = getDeferValues(variableValues, selection);
          if (visitedFragmentNames.has(fragName) && !defer) {
            continue;
          }
          const fragment = fragments[fragName];
          if (!fragment || !this.doesFragmentConditionMatch(fragment, runtimeType)) {
            continue;
          }
          if (defer) {
            const patchFields = /* @__PURE__ */ new Map();
            this.collectFieldsImpl(fragments, variableValues, getDeferValues, runtimeType, fragment.selectionSet, patchFields, patches, visitedFragmentNames);
            patches.push({
              label: defer.label,
              fields: patchFields
            });
          } else {
            visitedFragmentNames.add(fragName);
            this.collectFieldsImpl(fragments, variableValues, getDeferValues, runtimeType, fragment.selectionSet, fields, patches, visitedFragmentNames);
          }
          break;
        }
      }
    }
  }
  getDeferValues(variableValues, node) {
    const defer = getDirectiveValues2(this._executorSchema, GraphQLDeferDirective, node, variableValues);
    if (!defer) {
      return;
    }
    if (defer.if === false) {
      return;
    }
    return {
      label: typeof defer.label === "string" ? defer.label : void 0
    };
  }
  shouldIncludeNode(variableValues, node) {
    const skip = getDirectiveValues2(this._executorSchema, GraphQLSkipDirective, node, variableValues);
    if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {
      return false;
    }
    const include = getDirectiveValues2(this._executorSchema, GraphQLIncludeDirective, node, variableValues);
    if ((include === null || include === void 0 ? void 0 : include.if) === false) {
      return false;
    }
    return true;
  }
  doesFragmentConditionMatch(fragment, type2) {
    const typeConditionNode = fragment.typeCondition;
    if (!typeConditionNode) {
      return true;
    }
    const conditionalType = this._executorSchema.getType(typeConditionNode);
    if (conditionalType === type2) {
      return true;
    }
    if (conditionalType && this._executorSchema.isAbstractType(conditionalType)) {
      return this._executorSchema.isSubType(conditionalType, type2);
    }
    return false;
  }
  getFieldEntryKey(node) {
    return node.alias ? node.alias.value : node.name.value;
  }
};
var defaultFieldResolver2 = function(source, args, contextValue, info) {
  if (isObjectLike2(source) || typeof source === "function") {
    const property = source[info.fieldName];
    if (typeof property === "function") {
      return source[info.fieldName](args, contextValue, info);
    }
    return property;
  }
};
var defaultTypeResolver2 = function(value, contextValue, info, abstractType) {
  if (isObjectLike2(value) && typeof value.__typename === "string") {
    return value.__typename;
  }
  const possibleTypes = info.executorSchema.getPossibleTypes(abstractType);
  const promisedIsTypeOfResults = [];
  for (let i = 0; i < possibleTypes.length; i++) {
    const type2 = possibleTypes[i];
    if (type2.isTypeOf) {
      const isTypeOfResult = type2.isTypeOf(value, contextValue, info);
      if (isPromise2(isTypeOfResult)) {
        promisedIsTypeOfResults[i] = isTypeOfResult;
      } else if (isTypeOfResult) {
        return type2.name;
      }
    }
  }
  if (promisedIsTypeOfResults.length) {
    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {
      for (let i = 0; i < isTypeOfResults.length; i++) {
        if (isTypeOfResults[i]) {
          return possibleTypes[i].name;
        }
      }
    });
  }
};

// node_modules/value-or-promise/build/module/index.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/value-or-promise/build/module/ValueOrPromise.js
init_virtual_process_polyfill();
init_buffer();
function isPromiseLike(object) {
  return object != null && typeof object.then === "function";
}
var defaultOnRejectedFn = (reason) => {
  throw reason;
};
var ValueOrPromise = class {
  constructor(executor) {
    let value;
    try {
      value = executor();
    } catch (reason) {
      this.state = { status: "rejected", value: reason };
      return;
    }
    if (isPromiseLike(value)) {
      this.state = { status: "pending", value };
      return;
    }
    this.state = { status: "fulfilled", value };
  }
  then(onFulfilled, onRejected) {
    const state = this.state;
    if (state.status === "pending") {
      return new ValueOrPromise(() => state.value.then(onFulfilled, onRejected));
    }
    const onRejectedFn = typeof onRejected === "function" ? onRejected : defaultOnRejectedFn;
    if (state.status === "rejected") {
      return new ValueOrPromise(() => onRejectedFn(state.value));
    }
    try {
      const onFulfilledFn = typeof onFulfilled === "function" ? onFulfilled : void 0;
      return onFulfilledFn === void 0 ? new ValueOrPromise(() => state.value) : new ValueOrPromise(() => onFulfilledFn(state.value));
    } catch (e) {
      return new ValueOrPromise(() => onRejectedFn(e));
    }
  }
  catch(onRejected) {
    return this.then(void 0, onRejected);
  }
  resolve() {
    const state = this.state;
    if (state.status === "pending") {
      return Promise.resolve(state.value);
    }
    if (state.status === "rejected") {
      throw state.value;
    }
    return state.value;
  }
  static all(valueOrPromises) {
    let containsPromise = false;
    const values = [];
    for (const valueOrPromise of valueOrPromises) {
      const state = valueOrPromise.state;
      if (state.status === "rejected") {
        return new ValueOrPromise(() => {
          throw state.value;
        });
      }
      if (state.status === "pending") {
        containsPromise = true;
      }
      values.push(state.value);
    }
    if (containsPromise) {
      return new ValueOrPromise(() => Promise.all(values));
    }
    return new ValueOrPromise(() => values);
  }
};

// node_modules/@graphql-tools/batch-execute/index.mjs
init_virtual_process_polyfill();
init_buffer();
var import_dataloader = __toESM(require_dataloader(), 1);
init_graphql();
function createPrefix(index) {
  return `_${index}_`;
}
function parseKey(prefixedKey) {
  const match = /^_([\d]+)_(.*)$/.exec(prefixedKey);
  if (match && match.length === 3 && !isNaN(Number(match[1])) && match[2]) {
    return { index: Number(match[1]), originalKey: match[2] };
  }
  throw new Error(`Key ${prefixedKey} is not correctly prefixed`);
}
function mergeRequests(requests, extensionsReducer) {
  var _a2, _b, _c, _d, _e;
  const mergedVariables = /* @__PURE__ */ Object.create(null);
  const mergedVariableDefinitions = [];
  const mergedSelections = [];
  const mergedFragmentDefinitions = [];
  let mergedExtensions = /* @__PURE__ */ Object.create(null);
  for (const index in requests) {
    const request = requests[index];
    const prefixedRequests = prefixRequest(createPrefix(index), request);
    for (const def of prefixedRequests.document.definitions) {
      if (isOperationDefinition(def)) {
        mergedSelections.push(...def.selectionSet.selections);
        if (def.variableDefinitions) {
          mergedVariableDefinitions.push(...def.variableDefinitions);
        }
      }
      if (isFragmentDefinition(def)) {
        mergedFragmentDefinitions.push(def);
      }
    }
    Object.assign(mergedVariables, prefixedRequests.variables);
    mergedExtensions = extensionsReducer(mergedExtensions, request);
  }
  const firstRequest = requests[0];
  const operationType = (_a2 = firstRequest.operationType) !== null && _a2 !== void 0 ? _a2 : getOperationASTFromRequest(firstRequest).operation;
  const mergedOperationDefinition = {
    kind: Kind.OPERATION_DEFINITION,
    operation: operationType,
    variableDefinitions: mergedVariableDefinitions,
    selectionSet: {
      kind: Kind.SELECTION_SET,
      selections: mergedSelections
    }
  };
  const operationName = (_b = firstRequest.operationName) !== null && _b !== void 0 ? _b : (_e = (_d = (_c = firstRequest.info) === null || _c === void 0 ? void 0 : _c.operation) === null || _d === void 0 ? void 0 : _d.name) === null || _e === void 0 ? void 0 : _e.value;
  if (operationName) {
    mergedOperationDefinition.name = {
      kind: Kind.NAME,
      value: operationName
    };
  }
  return {
    document: {
      kind: Kind.DOCUMENT,
      definitions: [mergedOperationDefinition, ...mergedFragmentDefinitions]
    },
    variables: mergedVariables,
    extensions: mergedExtensions,
    context: requests[0].context,
    info: requests[0].info,
    operationType
  };
}
function prefixRequest(prefix, request) {
  var _a2;
  const executionVariables = (_a2 = request.variables) !== null && _a2 !== void 0 ? _a2 : {};
  function prefixNode(node) {
    return prefixNodeName(node, prefix);
  }
  let prefixedDocument = aliasTopLevelFields(prefix, request.document);
  const executionVariableNames = Object.keys(executionVariables);
  const hasFragmentDefinitions = request.document.definitions.some((def) => isFragmentDefinition(def));
  const fragmentSpreadImpl = {};
  if (executionVariableNames.length > 0 || hasFragmentDefinitions) {
    prefixedDocument = visit(prefixedDocument, {
      [Kind.VARIABLE]: prefixNode,
      [Kind.FRAGMENT_DEFINITION]: prefixNode,
      [Kind.FRAGMENT_SPREAD]: (node) => {
        node = prefixNodeName(node, prefix);
        fragmentSpreadImpl[node.name.value] = true;
        return node;
      }
    });
  }
  const prefixedVariables = {};
  for (const variableName of executionVariableNames) {
    prefixedVariables[prefix + variableName] = executionVariables[variableName];
  }
  if (hasFragmentDefinitions) {
    prefixedDocument = {
      ...prefixedDocument,
      definitions: prefixedDocument.definitions.filter((def) => {
        return !isFragmentDefinition(def) || fragmentSpreadImpl[def.name.value];
      })
    };
  }
  return {
    document: prefixedDocument,
    variables: prefixedVariables
  };
}
function aliasTopLevelFields(prefix, document) {
  const transformer = {
    [Kind.OPERATION_DEFINITION]: (def) => {
      const { selections } = def.selectionSet;
      return {
        ...def,
        selectionSet: {
          ...def.selectionSet,
          selections: aliasFieldsInSelection(prefix, selections, document)
        }
      };
    }
  };
  return visit(document, transformer, {
    [Kind.DOCUMENT]: [`definitions`]
  });
}
function aliasFieldsInSelection(prefix, selections, document) {
  return selections.map((selection) => {
    switch (selection.kind) {
      case Kind.INLINE_FRAGMENT:
        return aliasFieldsInInlineFragment(prefix, selection, document);
      case Kind.FRAGMENT_SPREAD: {
        const inlineFragment = inlineFragmentSpread(selection, document);
        return aliasFieldsInInlineFragment(prefix, inlineFragment, document);
      }
      case Kind.FIELD:
      default:
        return aliasField(selection, prefix);
    }
  });
}
function aliasFieldsInInlineFragment(prefix, fragment, document) {
  const { selections } = fragment.selectionSet;
  return {
    ...fragment,
    selectionSet: {
      ...fragment.selectionSet,
      selections: aliasFieldsInSelection(prefix, selections, document)
    }
  };
}
function inlineFragmentSpread(spread, document) {
  const fragment = document.definitions.find((def) => isFragmentDefinition(def) && def.name.value === spread.name.value);
  if (!fragment) {
    throw new Error(`Fragment ${spread.name.value} does not exist`);
  }
  const { typeCondition, selectionSet } = fragment;
  return {
    kind: Kind.INLINE_FRAGMENT,
    typeCondition,
    selectionSet,
    directives: spread.directives
  };
}
function prefixNodeName(namedNode, prefix) {
  return {
    ...namedNode,
    name: {
      ...namedNode.name,
      value: prefix + namedNode.name.value
    }
  };
}
function aliasField(field, aliasPrefix) {
  const aliasNode = field.alias ? field.alias : field.name;
  return {
    ...field,
    alias: {
      ...aliasNode,
      value: aliasPrefix + aliasNode.value
    }
  };
}
function isOperationDefinition(def) {
  return def.kind === Kind.OPERATION_DEFINITION;
}
function isFragmentDefinition(def) {
  return def.kind === Kind.FRAGMENT_DEFINITION;
}
function splitResult({ data, errors }, numResults) {
  const splitResults = [];
  for (let i = 0; i < numResults; i++) {
    splitResults.push({});
  }
  if (data) {
    for (const prefixedKey in data) {
      const { index, originalKey } = parseKey(prefixedKey);
      const result = splitResults[index];
      if (result == null) {
        continue;
      }
      if (result.data == null) {
        result.data = { [originalKey]: data[prefixedKey] };
      } else {
        result.data[originalKey] = data[prefixedKey];
      }
    }
  }
  if (errors) {
    for (const error of errors) {
      if (error.path) {
        const parsedKey = parseKey(error.path[0]);
        const { index, originalKey } = parsedKey;
        const newError = relocatedError(error, [originalKey, ...error.path.slice(1)]);
        const resultErrors = splitResults[index].errors = splitResults[index].errors || [];
        resultErrors.push(newError);
      } else {
        splitResults.forEach((result) => {
          const resultErrors = result.errors = result.errors || [];
          resultErrors.push(new GraphQLError(error.message));
        });
      }
    }
  }
  return splitResults;
}
function createBatchingExecutor(executor, dataLoaderOptions, extensionsReducer = defaultExtensionsReducer) {
  const loadFn = createLoadFn(executor, extensionsReducer);
  const loader2 = new import_dataloader.default(loadFn, dataLoaderOptions);
  return function batchingExecutor(request) {
    const operationAst = getOperationASTFromRequest(request);
    return operationAst.operation === "subscription" ? executor(request) : loader2.load(request);
  };
}
function createLoadFn(executor, extensionsReducer) {
  return async function batchExecuteLoadFn(requests) {
    const execBatches = [];
    let index = 0;
    const request = requests[index];
    let currentBatch = [request];
    execBatches.push(currentBatch);
    const operationAst = getOperationASTFromRequest(request);
    const operationType = operationAst.operation;
    if (operationType == null) {
      throw new Error("could not identify operation type of document");
    }
    while (++index < requests.length) {
      const currentRequest = requests[index];
      const currentOperationAST = getOperationASTFromRequest(currentRequest);
      const currentOperationType = currentOperationAST.operation;
      if (operationType === currentOperationType) {
        currentBatch.push(currentRequest);
      } else {
        currentBatch = [currentRequest];
        execBatches.push(currentBatch);
      }
    }
    const results = await Promise.all(execBatches.map(async (execBatch) => {
      const mergedRequests = mergeRequests(execBatch, extensionsReducer);
      const resultBatches = await executor(mergedRequests);
      return splitResult(resultBatches, execBatch.length);
    }));
    return results.flat();
  };
}
function defaultExtensionsReducer(mergedExtensions, request) {
  const newExtensions = request.extensions;
  if (newExtensions != null) {
    Object.assign(mergedExtensions, newExtensions);
  }
  return mergedExtensions;
}
var getBatchingExecutor = memoize2of4(function getBatchingExecutor2(_context, executor, dataLoaderOptions, extensionsReducer) {
  return createBatchingExecutor(executor, dataLoaderOptions, extensionsReducer);
});

// node_modules/@graphql-tools/delegate/index.mjs
function applySchemaTransforms2(originalWrappingSchema, subschemaConfig, transformedSchema) {
  const schemaTransforms = subschemaConfig.transforms;
  if (schemaTransforms == null) {
    return originalWrappingSchema;
  }
  return schemaTransforms.reduce((schema2, transform) => transform.transformSchema != null ? transform.transformSchema(schema2, subschemaConfig, transformedSchema) : schema2, originalWrappingSchema);
}
var Subschema = class {
  constructor(config2) {
    var _a2;
    this.schema = config2.schema;
    this.executor = config2.executor;
    this.batch = config2.batch;
    this.batchingOptions = config2.batchingOptions;
    this.createProxyingResolver = config2.createProxyingResolver;
    this.transforms = (_a2 = config2.transforms) !== null && _a2 !== void 0 ? _a2 : [];
    this.transformedSchema = applySchemaTransforms2(this.schema, config2);
    this.merge = config2.merge;
  }
};
function getDocumentMetadata(document) {
  const operations = [];
  const fragments = [];
  const fragmentNames = /* @__PURE__ */ new Set();
  for (let i = 0; i < document.definitions.length; i++) {
    const def = document.definitions[i];
    if (def.kind === Kind.FRAGMENT_DEFINITION) {
      fragments.push(def);
      fragmentNames.add(def.name.value);
    } else if (def.kind === Kind.OPERATION_DEFINITION) {
      operations.push(def);
    }
  }
  return {
    operations,
    fragments,
    fragmentNames
  };
}
function prepareGatewayDocument(originalDocument, transformedSchema, returnType, infoSchema) {
  const wrappedConcreteTypesDocument = wrapConcreteTypes(returnType, transformedSchema, originalDocument);
  if (infoSchema == null) {
    return wrappedConcreteTypesDocument;
  }
  const { possibleTypesMap, reversePossibleTypesMap: reversePossibleTypesMap2, interfaceExtensionsMap, fieldNodesByType, fieldNodesByField, dynamicSelectionSetsByField } = getSchemaMetaData(infoSchema, transformedSchema);
  const { operations, fragments, fragmentNames } = getDocumentMetadata(wrappedConcreteTypesDocument);
  const { expandedFragments, fragmentReplacements } = getExpandedFragments(fragments, fragmentNames, possibleTypesMap);
  const typeInfo = new TypeInfo(transformedSchema);
  const expandedDocument = {
    kind: Kind.DOCUMENT,
    definitions: [...operations, ...fragments, ...expandedFragments]
  };
  const visitorKeyMap = {
    Document: ["definitions"],
    OperationDefinition: ["selectionSet"],
    SelectionSet: ["selections"],
    Field: ["selectionSet"],
    InlineFragment: ["selectionSet"],
    FragmentDefinition: ["selectionSet"]
  };
  return visit(expandedDocument, visitWithTypeInfo(typeInfo, {
    [Kind.SELECTION_SET]: (node) => visitSelectionSet(node, fragmentReplacements, transformedSchema, typeInfo, possibleTypesMap, reversePossibleTypesMap2, interfaceExtensionsMap, fieldNodesByType, fieldNodesByField, dynamicSelectionSetsByField)
  }), visitorKeyMap);
}
function visitSelectionSet(node, fragmentReplacements, schema2, typeInfo, possibleTypesMap, reversePossibleTypesMap2, interfaceExtensionsMap, fieldNodesByType, fieldNodesByField, dynamicSelectionSetsByField) {
  var _a2, _b;
  const newSelections = /* @__PURE__ */ new Set();
  const maybeType = typeInfo.getParentType();
  if (maybeType != null) {
    const parentType = getNamedType(maybeType);
    const parentTypeName = parentType.name;
    const fieldNodes = fieldNodesByType[parentTypeName];
    if (fieldNodes) {
      for (const fieldNode of fieldNodes) {
        newSelections.add(fieldNode);
      }
    }
    const interfaceExtensions = interfaceExtensionsMap[parentType.name];
    const interfaceExtensionFields = [];
    for (const selection of node.selections) {
      if (selection.kind === Kind.INLINE_FRAGMENT) {
        if (selection.typeCondition != null) {
          const possibleTypes = possibleTypesMap[selection.typeCondition.name.value];
          if (possibleTypes == null) {
            newSelections.add(selection);
            continue;
          }
          for (const possibleTypeName of possibleTypes) {
            const maybePossibleType = schema2.getType(possibleTypeName);
            if (maybePossibleType != null && implementsAbstractType(schema2, parentType, maybePossibleType)) {
              newSelections.add(generateInlineFragment(possibleTypeName, selection.selectionSet));
            }
          }
        }
      } else if (selection.kind === Kind.FRAGMENT_SPREAD) {
        const fragmentName = selection.name.value;
        if (!fragmentReplacements[fragmentName]) {
          newSelections.add(selection);
          continue;
        }
        for (const replacement of fragmentReplacements[fragmentName]) {
          const typeName = replacement.typeName;
          const maybeReplacementType = schema2.getType(typeName);
          if (maybeReplacementType != null && implementsAbstractType(schema2, parentType, maybeType)) {
            newSelections.add({
              kind: Kind.FRAGMENT_SPREAD,
              name: {
                kind: Kind.NAME,
                value: replacement.fragmentName
              }
            });
          }
        }
      } else {
        const fieldName = selection.name.value;
        const fieldNodes2 = (_a2 = fieldNodesByField[parentTypeName]) === null || _a2 === void 0 ? void 0 : _a2[fieldName];
        if (fieldNodes2 != null) {
          for (const fieldNode of fieldNodes2) {
            newSelections.add(fieldNode);
          }
        }
        const dynamicSelectionSets = (_b = dynamicSelectionSetsByField[parentTypeName]) === null || _b === void 0 ? void 0 : _b[fieldName];
        if (dynamicSelectionSets != null) {
          for (const selectionSetFn of dynamicSelectionSets) {
            const selectionSet = selectionSetFn(selection);
            if (selectionSet != null) {
              for (const selection2 of selectionSet.selections) {
                newSelections.add(selection2);
              }
            }
          }
        }
        if (interfaceExtensions === null || interfaceExtensions === void 0 ? void 0 : interfaceExtensions[fieldName]) {
          interfaceExtensionFields.push(selection);
        } else {
          newSelections.add(selection);
        }
      }
    }
    if (reversePossibleTypesMap2[parentType.name]) {
      newSelections.add({
        kind: Kind.FIELD,
        name: {
          kind: Kind.NAME,
          value: "__typename"
        }
      });
    }
    if (interfaceExtensionFields.length) {
      const possibleTypes = possibleTypesMap[parentType.name];
      if (possibleTypes != null) {
        for (const possibleType of possibleTypes) {
          newSelections.add(generateInlineFragment(possibleType, {
            kind: Kind.SELECTION_SET,
            selections: interfaceExtensionFields
          }));
        }
      }
    }
    return {
      ...node,
      selections: Array.from(newSelections)
    };
  }
  return node;
}
function generateInlineFragment(typeName, selectionSet) {
  return {
    kind: Kind.INLINE_FRAGMENT,
    typeCondition: {
      kind: Kind.NAMED_TYPE,
      name: {
        kind: Kind.NAME,
        value: typeName
      }
    },
    selectionSet
  };
}
var getSchemaMetaData = memoize2((sourceSchema, targetSchema) => {
  var _a2, _b, _c, _d;
  const typeMap = sourceSchema.getTypeMap();
  const targetTypeMap = targetSchema.getTypeMap();
  const possibleTypesMap = /* @__PURE__ */ Object.create(null);
  const interfaceExtensionsMap = /* @__PURE__ */ Object.create(null);
  for (const typeName in typeMap) {
    const type2 = typeMap[typeName];
    if (isAbstractType(type2)) {
      const targetType = targetTypeMap[typeName];
      if (isInterfaceType(type2) && isInterfaceType(targetType)) {
        const targetTypeFields = targetType.getFields();
        const sourceTypeFields = type2.getFields();
        const extensionFields = /* @__PURE__ */ Object.create(null);
        let isExtensionFieldsEmpty = true;
        for (const fieldName in sourceTypeFields) {
          if (!targetTypeFields[fieldName]) {
            extensionFields[fieldName] = true;
            isExtensionFieldsEmpty = false;
          }
        }
        if (!isExtensionFieldsEmpty) {
          interfaceExtensionsMap[typeName] = extensionFields;
        }
      }
      if (interfaceExtensionsMap[typeName] || !isAbstractType(targetType)) {
        const implementations = sourceSchema.getPossibleTypes(type2);
        possibleTypesMap[typeName] = [];
        for (const impl of implementations) {
          if (targetTypeMap[impl.name]) {
            possibleTypesMap[typeName].push(impl.name);
          }
        }
      }
    }
  }
  const stitchingInfo = (_a2 = sourceSchema.extensions) === null || _a2 === void 0 ? void 0 : _a2["stitchingInfo"];
  return {
    possibleTypesMap,
    reversePossibleTypesMap: reversePossibleTypesMap(possibleTypesMap),
    interfaceExtensionsMap,
    fieldNodesByType: (_b = stitchingInfo === null || stitchingInfo === void 0 ? void 0 : stitchingInfo.fieldNodesByType) !== null && _b !== void 0 ? _b : {},
    fieldNodesByField: (_c = stitchingInfo === null || stitchingInfo === void 0 ? void 0 : stitchingInfo.fieldNodesByField) !== null && _c !== void 0 ? _c : {},
    dynamicSelectionSetsByField: (_d = stitchingInfo === null || stitchingInfo === void 0 ? void 0 : stitchingInfo.dynamicSelectionSetsByField) !== null && _d !== void 0 ? _d : {}
  };
});
function reversePossibleTypesMap(possibleTypesMap) {
  const result = /* @__PURE__ */ Object.create(null);
  for (const typeName in possibleTypesMap) {
    const toTypeNames = possibleTypesMap[typeName];
    for (const toTypeName of toTypeNames) {
      if (!result[toTypeName]) {
        result[toTypeName] = [];
      }
      result[toTypeName].push(typeName);
    }
  }
  return result;
}
function getExpandedFragments(fragments, fragmentNames, possibleTypesMap) {
  let fragmentCounter = 0;
  function generateFragmentName(typeName) {
    let fragmentName;
    do {
      fragmentName = `_${typeName}_Fragment${fragmentCounter.toString()}`;
      fragmentCounter++;
    } while (fragmentNames.has(fragmentName));
    return fragmentName;
  }
  const expandedFragments = [];
  const fragmentReplacements = /* @__PURE__ */ Object.create(null);
  for (const fragment of fragments) {
    const possibleTypes = possibleTypesMap[fragment.typeCondition.name.value];
    if (possibleTypes != null) {
      const fragmentName = fragment.name.value;
      fragmentReplacements[fragmentName] = [];
      for (const possibleTypeName of possibleTypes) {
        const name = generateFragmentName(possibleTypeName);
        fragmentNames.add(name);
        expandedFragments.push({
          kind: Kind.FRAGMENT_DEFINITION,
          name: {
            kind: Kind.NAME,
            value: name
          },
          typeCondition: {
            kind: Kind.NAMED_TYPE,
            name: {
              kind: Kind.NAME,
              value: possibleTypeName
            }
          },
          selectionSet: fragment.selectionSet
        });
        fragmentReplacements[fragmentName].push({
          fragmentName: name,
          typeName: possibleTypeName
        });
      }
    }
  }
  return {
    expandedFragments,
    fragmentReplacements
  };
}
function wrapConcreteTypes(returnType, targetSchema, document) {
  const namedType = getNamedType(returnType);
  if (!isObjectType(namedType)) {
    return document;
  }
  const rootTypeNames = getRootTypeNames(targetSchema);
  const typeInfo = new TypeInfo(targetSchema);
  const visitorKeys = {
    Document: ["definitions"],
    OperationDefinition: ["selectionSet"],
    SelectionSet: ["selections"],
    InlineFragment: ["selectionSet"],
    FragmentDefinition: ["selectionSet"]
  };
  return visit(document, visitWithTypeInfo(typeInfo, {
    [Kind.FRAGMENT_DEFINITION]: (node) => {
      const typeName = node.typeCondition.name.value;
      if (!rootTypeNames.has(typeName)) {
        return false;
      }
    },
    [Kind.FIELD]: (node) => {
      const type2 = typeInfo.getType();
      if (type2 != null && isAbstractType(getNamedType(type2))) {
        return {
          ...node,
          selectionSet: {
            kind: Kind.SELECTION_SET,
            selections: [
              {
                kind: Kind.INLINE_FRAGMENT,
                typeCondition: {
                  kind: Kind.NAMED_TYPE,
                  name: {
                    kind: Kind.NAME,
                    value: namedType.name
                  }
                },
                selectionSet: node.selectionSet
              }
            ]
          }
        };
      }
    }
  }), visitorKeys);
}
function finalizeGatewayDocument(targetSchema, fragments, operations) {
  var _a2;
  let usedVariables = [];
  let usedFragments = [];
  const newOperations = [];
  let newFragments = [];
  const validFragments = [];
  const validFragmentsWithType = /* @__PURE__ */ Object.create(null);
  for (const fragment of fragments) {
    const typeName = fragment.typeCondition.name.value;
    const type2 = targetSchema.getType(typeName);
    if (type2 != null) {
      validFragments.push(fragment);
      validFragmentsWithType[fragment.name.value] = type2;
    }
  }
  let fragmentSet = /* @__PURE__ */ Object.create(null);
  for (const operation of operations) {
    const type2 = getDefinedRootType(targetSchema, operation.operation);
    const { selectionSet, usedFragments: operationUsedFragments, usedVariables: operationUsedVariables } = finalizeSelectionSet(targetSchema, type2, validFragmentsWithType, operation.selectionSet);
    usedFragments = union(usedFragments, operationUsedFragments);
    const { usedVariables: collectedUsedVariables, newFragments: collectedNewFragments, fragmentSet: collectedFragmentSet } = collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments);
    const operationOrFragmentVariables = union(operationUsedVariables, collectedUsedVariables);
    usedVariables = union(usedVariables, operationOrFragmentVariables);
    newFragments = collectedNewFragments;
    fragmentSet = collectedFragmentSet;
    const variableDefinitions = ((_a2 = operation.variableDefinitions) !== null && _a2 !== void 0 ? _a2 : []).filter((variable) => operationOrFragmentVariables.indexOf(variable.variable.name.value) !== -1);
    newOperations.push({
      kind: Kind.OPERATION_DEFINITION,
      operation: operation.operation,
      name: operation.name,
      directives: operation.directives,
      variableDefinitions,
      selectionSet
    });
  }
  const newDocument = {
    kind: Kind.DOCUMENT,
    definitions: [...newOperations, ...newFragments]
  };
  return {
    usedVariables,
    newDocument
  };
}
function finalizeGatewayRequest(originalRequest, delegationContext) {
  let { document, variables } = originalRequest;
  let { operations, fragments } = getDocumentMetadata(document);
  const { targetSchema, args } = delegationContext;
  if (args) {
    const requestWithNewVariables = addVariablesToRootFields(targetSchema, operations, args);
    operations = requestWithNewVariables.newOperations;
    variables = Object.assign({}, variables !== null && variables !== void 0 ? variables : {}, requestWithNewVariables.newVariables);
  }
  const { usedVariables, newDocument } = finalizeGatewayDocument(targetSchema, fragments, operations);
  const newVariables = {};
  if (variables != null) {
    for (const variableName of usedVariables) {
      const variableValue = variables[variableName];
      if (variableValue !== void 0) {
        newVariables[variableName] = variableValue;
      }
    }
  }
  return {
    ...originalRequest,
    document: newDocument,
    variables: newVariables
  };
}
function addVariablesToRootFields(targetSchema, operations, args) {
  const newVariables = /* @__PURE__ */ Object.create(null);
  const newOperations = operations.map((operation) => {
    var _a2, _b;
    const variableDefinitionMap = ((_a2 = operation.variableDefinitions) !== null && _a2 !== void 0 ? _a2 : []).reduce((prev, def) => ({
      ...prev,
      [def.variable.name.value]: def
    }), {});
    const type2 = getDefinedRootType(targetSchema, operation.operation);
    const newSelections = [];
    for (const selection of operation.selectionSet.selections) {
      if (selection.kind === Kind.FIELD) {
        const argumentNodes = (_b = selection.arguments) !== null && _b !== void 0 ? _b : [];
        const argumentNodeMap = argumentNodes.reduce((prev, argument) => ({
          ...prev,
          [argument.name.value]: argument
        }), {});
        const targetField = type2.getFields()[selection.name.value];
        if (targetField != null) {
          updateArguments(targetField, argumentNodeMap, variableDefinitionMap, newVariables, args);
        }
        newSelections.push({
          ...selection,
          arguments: Object.values(argumentNodeMap)
        });
      } else {
        newSelections.push(selection);
      }
    }
    const newSelectionSet = {
      kind: Kind.SELECTION_SET,
      selections: newSelections
    };
    return {
      ...operation,
      variableDefinitions: Object.values(variableDefinitionMap),
      selectionSet: newSelectionSet
    };
  });
  return {
    newOperations,
    newVariables
  };
}
function updateArguments(targetField, argumentNodeMap, variableDefinitionMap, variableValues, newArgs) {
  const generateVariableName = createVariableNameGenerator(variableDefinitionMap);
  for (const argument of targetField.args) {
    const argName = argument.name;
    const argType = argument.type;
    if (argName in newArgs) {
      updateArgument(argumentNodeMap, variableDefinitionMap, variableValues, argName, generateVariableName(argName), argType, serializeInputValue(argType, newArgs[argName]));
    }
  }
}
function collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments) {
  let remainingFragments = usedFragments.slice();
  let usedVariables = [];
  const newFragments = [];
  while (remainingFragments.length !== 0) {
    const nextFragmentName = remainingFragments.pop();
    const fragment = validFragments.find((fr) => fr.name.value === nextFragmentName);
    if (fragment != null) {
      const name = nextFragmentName;
      const typeName = fragment.typeCondition.name.value;
      const type2 = targetSchema.getType(typeName);
      if (type2 == null) {
        throw new Error(`Fragment reference type "${typeName}", but the type is not contained within the target schema.`);
      }
      const { selectionSet, usedFragments: fragmentUsedFragments, usedVariables: fragmentUsedVariables } = finalizeSelectionSet(targetSchema, type2, validFragmentsWithType, fragment.selectionSet);
      remainingFragments = union(remainingFragments, fragmentUsedFragments);
      usedVariables = union(usedVariables, fragmentUsedVariables);
      if (name && !(name in fragmentSet)) {
        fragmentSet[name] = true;
        newFragments.push({
          kind: Kind.FRAGMENT_DEFINITION,
          name: {
            kind: Kind.NAME,
            value: name
          },
          typeCondition: fragment.typeCondition,
          selectionSet
        });
      }
    }
  }
  return {
    usedVariables,
    newFragments,
    fragmentSet
  };
}
var filteredSelectionSetVisitorKeys = {
  SelectionSet: ["selections"],
  Field: ["selectionSet"],
  InlineFragment: ["selectionSet"],
  FragmentDefinition: ["selectionSet"]
};
var variablesVisitorKeys = {
  SelectionSet: ["selections"],
  Field: ["arguments", "directives", "selectionSet"],
  Argument: ["value"],
  InlineFragment: ["directives", "selectionSet"],
  FragmentSpread: ["directives"],
  FragmentDefinition: ["selectionSet"],
  ObjectValue: ["fields"],
  ObjectField: ["name", "value"],
  Directive: ["arguments"],
  ListValue: ["values"]
};
function finalizeSelectionSet(schema2, type2, validFragments, selectionSet) {
  const usedFragments = [];
  const usedVariables = [];
  const typeInfo = versionInfo.major < 16 ? new TypeInfo(schema2, void 0, type2) : new TypeInfo(schema2, type2);
  const filteredSelectionSet = visit(selectionSet, visitWithTypeInfo(typeInfo, {
    [Kind.FIELD]: {
      enter: (node) => {
        const parentType = typeInfo.getParentType();
        if (isObjectType(parentType) || isInterfaceType(parentType)) {
          const fields = parentType.getFields();
          const field = node.name.value === "__typename" ? TypeNameMetaFieldDef : fields[node.name.value];
          if (!field) {
            return null;
          }
          const args = field.args != null ? field.args : [];
          const argsMap = /* @__PURE__ */ Object.create(null);
          for (const arg of args) {
            argsMap[arg.name] = arg;
          }
          if (node.arguments != null) {
            const newArgs = [];
            for (const arg of node.arguments) {
              if (arg.name.value in argsMap) {
                newArgs.push(arg);
              }
            }
            if (newArgs.length !== node.arguments.length) {
              return {
                ...node,
                arguments: newArgs
              };
            }
          }
        }
      },
      leave: (node) => {
        const type3 = typeInfo.getType();
        if (type3 == null) {
          throw new Error(`No type was found for field node ${inspect2(node)}.`);
        }
        const namedType = getNamedType(type3);
        if (!schema2.getType(namedType.name) == null) {
          return null;
        }
        if (isObjectType(namedType) || isInterfaceType(namedType)) {
          const selections = node.selectionSet != null ? node.selectionSet.selections : null;
          if (selections == null || selections.length === 0) {
            return null;
          }
        }
      }
    },
    [Kind.FRAGMENT_SPREAD]: {
      enter: (node) => {
        if (!(node.name.value in validFragments)) {
          return null;
        }
        const parentType = typeInfo.getParentType();
        const innerType = validFragments[node.name.value];
        if (!implementsAbstractType(schema2, parentType, innerType)) {
          return null;
        }
        usedFragments.push(node.name.value);
      }
    },
    [Kind.INLINE_FRAGMENT]: {
      enter: (node) => {
        if (node.typeCondition != null) {
          const parentType = typeInfo.getParentType();
          const innerType = schema2.getType(node.typeCondition.name.value);
          if (!implementsAbstractType(schema2, parentType, innerType)) {
            return null;
          }
        }
      }
    },
    [Kind.SELECTION_SET]: {
      leave: (node) => {
        const parentType = typeInfo.getParentType();
        if (parentType != null && isAbstractType(parentType)) {
          const selections = node.selections.concat([
            {
              kind: Kind.FIELD,
              name: {
                kind: Kind.NAME,
                value: "__typename"
              }
            }
          ]);
          return {
            ...node,
            selections
          };
        }
      }
    }
  }), filteredSelectionSetVisitorKeys);
  visit(filteredSelectionSet, {
    [Kind.VARIABLE]: (variableNode) => {
      usedVariables.push(variableNode.name.value);
    }
  }, variablesVisitorKeys);
  return {
    selectionSet: filteredSelectionSet,
    usedFragments,
    usedVariables
  };
}
function union(...arrays) {
  const cache = /* @__PURE__ */ Object.create(null);
  const result = [];
  for (const array of arrays) {
    for (const item of array) {
      if (!(item in cache)) {
        cache[item] = true;
        result.push(item);
      }
    }
  }
  return result;
}
var UNPATHED_ERRORS_SYMBOL = Symbol("subschemaErrors");
var OBJECT_SUBSCHEMA_SYMBOL = Symbol("initialSubschema");
var FIELD_SUBSCHEMA_MAP_SYMBOL = Symbol("subschemaMap");
function isExternalObject(data) {
  return data[UNPATHED_ERRORS_SYMBOL] !== void 0;
}
function annotateExternalObject(object, errors, subschema, subschemaMap) {
  Object.defineProperties(object, {
    [OBJECT_SUBSCHEMA_SYMBOL]: { value: subschema },
    [FIELD_SUBSCHEMA_MAP_SYMBOL]: { value: subschemaMap },
    [UNPATHED_ERRORS_SYMBOL]: { value: errors }
  });
  return object;
}
function getSubschema(object, responseKey) {
  var _a2;
  return (_a2 = object[FIELD_SUBSCHEMA_MAP_SYMBOL][responseKey]) !== null && _a2 !== void 0 ? _a2 : object[OBJECT_SUBSCHEMA_SYMBOL];
}
function getUnpathedErrors(object) {
  return object[UNPATHED_ERRORS_SYMBOL];
}
var EMPTY_ARRAY = [];
var EMPTY_OBJECT = /* @__PURE__ */ Object.create(null);
async function mergeFields2(mergedTypeInfo, object, sourceSubschema, context, info) {
  var _a2;
  const delegationMaps = mergedTypeInfo.delegationPlanBuilder(info.schema, sourceSubschema, info.variableValues != null && Object.keys(info.variableValues).length > 0 ? info.variableValues : EMPTY_OBJECT, info.fragments != null && Object.keys(info.fragments).length > 0 ? info.fragments : EMPTY_OBJECT, ((_a2 = info.fieldNodes) === null || _a2 === void 0 ? void 0 : _a2.length) ? info.fieldNodes : EMPTY_ARRAY);
  for (const delegationMap of delegationMaps) {
    await executeDelegationStage(mergedTypeInfo, delegationMap, object, context, info);
  }
  return object;
}
async function executeDelegationStage(mergedTypeInfo, delegationMap, object, context, info) {
  const combinedErrors = object[UNPATHED_ERRORS_SYMBOL];
  const path2 = pathToArray(info.path);
  const combinedFieldSubschemaMap = object[FIELD_SUBSCHEMA_MAP_SYMBOL];
  await Promise.all([...delegationMap.entries()].map(async ([subschema, selectionSet]) => {
    var _a2;
    const schema2 = subschema.transformedSchema || info.schema;
    const type2 = schema2.getType(object.__typename);
    const resolver = mergedTypeInfo.resolvers.get(subschema);
    if (resolver) {
      let source;
      try {
        source = await resolver(object, context, info, subschema, selectionSet, void 0, type2);
      } catch (error) {
        source = error;
      }
      if (source instanceof Error || source == null) {
        const fieldNodeResponseKeyMap = collectFields2(schema2, EMPTY_OBJECT, EMPTY_OBJECT, type2, selectionSet, /* @__PURE__ */ new Map(), /* @__PURE__ */ new Set());
        const nullResult = {};
        for (const [responseKey, fieldNodes] of fieldNodeResponseKeyMap) {
          const combinedPath = [...path2, responseKey];
          if (source instanceof GraphQLError) {
            nullResult[responseKey] = relocatedError(source, combinedPath);
          } else if (source instanceof Error) {
            nullResult[responseKey] = locatedError(source, fieldNodes, combinedPath);
          } else {
            nullResult[responseKey] = null;
          }
        }
        source = nullResult;
      } else {
        if (source[UNPATHED_ERRORS_SYMBOL]) {
          combinedErrors.push(...source[UNPATHED_ERRORS_SYMBOL]);
        }
      }
      const objectSubschema = source[OBJECT_SUBSCHEMA_SYMBOL];
      const fieldSubschemaMap = source[FIELD_SUBSCHEMA_MAP_SYMBOL];
      for (const responseKey in source) {
        object[responseKey] = source[responseKey];
        combinedFieldSubschemaMap[responseKey] = (_a2 = fieldSubschemaMap === null || fieldSubschemaMap === void 0 ? void 0 : fieldSubschemaMap[responseKey]) !== null && _a2 !== void 0 ? _a2 : objectSubschema;
      }
    }
  }));
}
function resolveExternalValue(result, unpathedErrors, subschema, context, info, returnType = getReturnType(info), skipTypeMerging) {
  const type2 = getNullableType(returnType);
  if (result instanceof Error) {
    return result;
  }
  if (result == null) {
    return reportUnpathedErrorsViaNull(unpathedErrors);
  }
  if ("parseValue" in type2) {
    return type2.parseValue(result);
  } else if (isCompositeType(type2)) {
    return resolveExternalObject(type2, result, unpathedErrors, subschema, context, info, skipTypeMerging);
  } else if (isListType(type2)) {
    return resolveExternalList(type2, result, unpathedErrors, subschema, context, info, skipTypeMerging);
  }
}
function resolveExternalObject(type2, object, unpathedErrors, subschema, context, info, skipTypeMerging) {
  var _a2;
  if (!isExternalObject(object)) {
    annotateExternalObject(object, unpathedErrors, subschema, /* @__PURE__ */ Object.create(null));
  }
  if (skipTypeMerging || info == null) {
    return object;
  }
  const stitchingInfo = (_a2 = info.schema.extensions) === null || _a2 === void 0 ? void 0 : _a2["stitchingInfo"];
  if (stitchingInfo == null) {
    return object;
  }
  const typeName = isAbstractType(type2) ? object.__typename : type2.name;
  const mergedTypeInfo = stitchingInfo.mergedTypes[typeName];
  let targetSubschemas;
  if (mergedTypeInfo != null) {
    targetSubschemas = mergedTypeInfo.targetSubschemas.get(subschema);
  }
  if (!targetSubschemas || !targetSubschemas.length) {
    return object;
  }
  return mergeFields2(mergedTypeInfo, object, subschema, context, info);
}
function resolveExternalList(type2, list, unpathedErrors, subschema, context, info, skipTypeMerging) {
  return list.map((listMember) => resolveExternalListMember(getNullableType(type2.ofType), listMember, unpathedErrors, subschema, context, info, skipTypeMerging));
}
function resolveExternalListMember(type2, listMember, unpathedErrors, subschema, context, info, skipTypeMerging) {
  if (listMember instanceof Error) {
    return listMember;
  }
  if (listMember == null) {
    return reportUnpathedErrorsViaNull(unpathedErrors);
  }
  if ("parseValue" in type2) {
    return type2.parseValue(listMember);
  } else if (isCompositeType(type2)) {
    return resolveExternalObject(type2, listMember, unpathedErrors, subschema, context, info, skipTypeMerging);
  } else if (isListType(type2)) {
    return resolveExternalList(type2, listMember, unpathedErrors, subschema, context, info, skipTypeMerging);
  }
}
var reportedErrors = /* @__PURE__ */ new WeakMap();
function reportUnpathedErrorsViaNull(unpathedErrors) {
  if (unpathedErrors.length) {
    const unreportedErrors = [];
    for (const error of unpathedErrors) {
      if (!reportedErrors.has(error)) {
        unreportedErrors.push(error);
        reportedErrors.set(error, true);
      }
    }
    if (unreportedErrors.length) {
      if (unreportedErrors.length === 1) {
        return unreportedErrors[0];
      }
      const combinedError = new AggregateErrorImpl(unreportedErrors, unreportedErrors.map((error) => error.message).join(", \n"));
      return locatedError(combinedError, void 0, unreportedErrors[0].path);
    }
  }
  return null;
}
function getReturnType(info) {
  if (info == null) {
    throw new Error(`Return type cannot be inferred without a source schema.`);
  }
  return info.returnType;
}
function checkResultAndHandleErrors(result, delegationContext) {
  const { context, info, fieldName: responseKey = getResponseKey(info), subschema, returnType = getReturnType$1(info), skipTypeMerging, onLocatedError } = delegationContext;
  const { data, unpathedErrors } = mergeDataAndErrors(result.data == null ? void 0 : result.data[responseKey], result.errors == null ? [] : result.errors, info != null && info.path ? pathToArray(info.path) : void 0, onLocatedError);
  return resolveExternalValue(data, unpathedErrors, subschema, context, info, returnType, skipTypeMerging);
}
function mergeDataAndErrors(data, errors, path2, onLocatedError, index = 1) {
  var _a2;
  if (data == null) {
    if (!errors.length) {
      return { data: null, unpathedErrors: [] };
    }
    if (errors.length === 1) {
      const error = onLocatedError ? onLocatedError(errors[0]) : errors[0];
      const newPath = path2 === void 0 ? error.path : !error.path ? path2 : path2.concat(error.path.slice(1));
      return { data: relocatedError(errors[0], newPath), unpathedErrors: [] };
    }
    const combinedError = new AggregateErrorImpl(errors, errors.map((error) => error.message).join(", \n"));
    const newError = locatedError(combinedError, void 0, path2);
    return { data: newError, unpathedErrors: [] };
  }
  if (!errors.length) {
    return { data, unpathedErrors: [] };
  }
  const unpathedErrors = [];
  const errorMap = /* @__PURE__ */ new Map();
  for (const error of errors) {
    const pathSegment = (_a2 = error.path) === null || _a2 === void 0 ? void 0 : _a2[index];
    if (pathSegment != null) {
      let pathSegmentErrors = errorMap.get(pathSegment);
      if (pathSegmentErrors === void 0) {
        pathSegmentErrors = [error];
        errorMap.set(pathSegment, pathSegmentErrors);
      } else {
        pathSegmentErrors.push(error);
      }
    } else {
      unpathedErrors.push(error);
    }
  }
  for (const [pathSegment, pathSegmentErrors] of errorMap) {
    if (data[pathSegment] !== void 0) {
      const { data: newData, unpathedErrors: newErrors } = mergeDataAndErrors(data[pathSegment], pathSegmentErrors, path2, onLocatedError, index + 1);
      data[pathSegment] = newData;
      unpathedErrors.push(...newErrors);
    } else {
      unpathedErrors.push(...pathSegmentErrors);
    }
  }
  return { data, unpathedErrors };
}
function getResponseKey(info) {
  if (info == null) {
    throw new Error(`Data cannot be extracted from result without an explicit key or source schema.`);
  }
  return getResponseKeyFromInfo(info);
}
function getReturnType$1(info) {
  if (info == null) {
    throw new Error(`Return type cannot be inferred without a source schema.`);
  }
  return info.returnType;
}
var Transformer = class {
  constructor(context) {
    this.transformations = [];
    this.delegationContext = context;
    const transforms = context.transforms;
    const delegationTransforms = transforms.slice().reverse();
    for (const transform of delegationTransforms) {
      this.addTransform(transform, {});
    }
  }
  addTransform(transform, context = {}) {
    this.transformations.push({ transform, context });
  }
  transformRequest(originalRequest) {
    var _a2;
    let request = {
      ...originalRequest,
      document: prepareGatewayDocument(originalRequest.document, this.delegationContext.transformedSchema, this.delegationContext.returnType, (_a2 = this.delegationContext.info) === null || _a2 === void 0 ? void 0 : _a2.schema)
    };
    for (const transformation of this.transformations) {
      if (transformation.transform.transformRequest) {
        request = transformation.transform.transformRequest(request, this.delegationContext, transformation.context);
      }
    }
    return finalizeGatewayRequest(request, this.delegationContext);
  }
  transformResult(originalResult) {
    let result = originalResult;
    for (let i = this.transformations.length - 1; i >= 0; i--) {
      const transformation = this.transformations[i];
      if (transformation.transform.transformResult) {
        result = transformation.transform.transformResult(result, this.delegationContext, transformation.context);
      }
    }
    return checkResultAndHandleErrors(result, this.delegationContext);
  }
};
function getDelegatingOperation(parentType, schema2) {
  if (parentType === schema2.getMutationType()) {
    return "mutation";
  } else if (parentType === schema2.getSubscriptionType()) {
    return "subscription";
  }
  return "query";
}
function createRequest({ sourceSchema, sourceParentType, sourceFieldName, fragments, variableDefinitions, variableValues, targetRootValue, targetOperationName, targetOperation, targetFieldName, selectionSet, fieldNodes, context, info }) {
  var _a2, _b;
  let newSelectionSet;
  const argumentNodeMap = /* @__PURE__ */ Object.create(null);
  if (selectionSet != null) {
    newSelectionSet = selectionSet;
  } else {
    const selections = [];
    for (const fieldNode of fieldNodes || []) {
      if (fieldNode.selectionSet) {
        for (const selection of fieldNode.selectionSet.selections) {
          selections.push(selection);
        }
      }
    }
    newSelectionSet = selections.length ? {
      kind: Kind.SELECTION_SET,
      selections
    } : void 0;
    const args = (_a2 = fieldNodes === null || fieldNodes === void 0 ? void 0 : fieldNodes[0]) === null || _a2 === void 0 ? void 0 : _a2.arguments;
    if (args) {
      for (const argNode of args) {
        argumentNodeMap[argNode.name.value] = argNode;
      }
    }
  }
  const newVariables = /* @__PURE__ */ Object.create(null);
  const variableDefinitionMap = /* @__PURE__ */ Object.create(null);
  if (sourceSchema != null && variableDefinitions != null) {
    for (const def of variableDefinitions) {
      const varName = def.variable.name.value;
      variableDefinitionMap[varName] = def;
      const varType = typeFromAST(sourceSchema, def.type);
      const serializedValue = serializeInputValue(varType, variableValues === null || variableValues === void 0 ? void 0 : variableValues[varName]);
      if (serializedValue !== void 0) {
        newVariables[varName] = serializedValue;
      }
    }
  }
  if (sourceParentType != null && sourceFieldName != null) {
    updateArgumentsWithDefaults(sourceParentType, sourceFieldName, argumentNodeMap, variableDefinitionMap, newVariables);
  }
  const rootFieldName = targetFieldName !== null && targetFieldName !== void 0 ? targetFieldName : (_b = fieldNodes === null || fieldNodes === void 0 ? void 0 : fieldNodes[0]) === null || _b === void 0 ? void 0 : _b.name.value;
  if (rootFieldName === void 0) {
    throw new Error(`Either "targetFieldName" or a non empty "fieldNodes" array must be provided.`);
  }
  const rootfieldNode = {
    kind: Kind.FIELD,
    arguments: Object.values(argumentNodeMap),
    name: {
      kind: Kind.NAME,
      value: rootFieldName
    },
    selectionSet: newSelectionSet
  };
  const operationName = targetOperationName ? {
    kind: Kind.NAME,
    value: targetOperationName
  } : void 0;
  const operationDefinition = {
    kind: Kind.OPERATION_DEFINITION,
    name: operationName,
    operation: targetOperation,
    variableDefinitions: Object.values(variableDefinitionMap),
    selectionSet: {
      kind: Kind.SELECTION_SET,
      selections: [rootfieldNode]
    }
  };
  const definitions = [operationDefinition];
  if (fragments != null) {
    for (const fragmentName in fragments) {
      const fragment = fragments[fragmentName];
      definitions.push(fragment);
    }
  }
  const document = {
    kind: Kind.DOCUMENT,
    definitions
  };
  return {
    document,
    variables: newVariables,
    rootValue: targetRootValue,
    operationName: targetOperationName,
    context,
    info,
    operationType: targetOperation
  };
}
function updateArgumentsWithDefaults(sourceParentType, sourceFieldName, argumentNodeMap, variableDefinitionMap, variableValues) {
  const generateVariableName = createVariableNameGenerator(variableDefinitionMap);
  const sourceField = sourceParentType.getFields()[sourceFieldName];
  for (const argument of sourceField.args) {
    const argName = argument.name;
    const sourceArgType = argument.type;
    if (argumentNodeMap[argName] === void 0) {
      const defaultValue = argument.defaultValue;
      if (defaultValue !== void 0) {
        updateArgument(argumentNodeMap, variableDefinitionMap, variableValues, argName, generateVariableName(argName), sourceArgType, serializeInputValue(sourceArgType, defaultValue));
      }
    }
  }
}
function defaultMergedResolver(parent, args, context, info) {
  if (!parent) {
    return null;
  }
  const responseKey = getResponseKeyFromInfo(info);
  if (!isExternalObject(parent)) {
    return defaultFieldResolver(parent, args, context, info);
  }
  const data = parent[responseKey];
  const unpathedErrors = getUnpathedErrors(parent);
  const subschema = getSubschema(parent, responseKey);
  return resolveExternalValue(data, unpathedErrors, subschema, context, info);
}
function isSubschemaConfig(value) {
  return Boolean(value === null || value === void 0 ? void 0 : value.schema);
}
function cloneSubschemaConfig(subschemaConfig) {
  var _a2, _b;
  const newSubschemaConfig = {
    ...subschemaConfig,
    transforms: subschemaConfig.transforms != null ? [...subschemaConfig.transforms] : void 0
  };
  if (newSubschemaConfig.merge != null) {
    newSubschemaConfig.merge = { ...subschemaConfig.merge };
    for (const typeName in newSubschemaConfig.merge) {
      const mergedTypeConfig = newSubschemaConfig.merge[typeName] = { ...(_b = (_a2 = subschemaConfig.merge) === null || _a2 === void 0 ? void 0 : _a2[typeName]) !== null && _b !== void 0 ? _b : {} };
      if (mergedTypeConfig.entryPoints != null) {
        mergedTypeConfig.entryPoints = mergedTypeConfig.entryPoints.map((entryPoint) => ({ ...entryPoint }));
      }
      if (mergedTypeConfig.fields != null) {
        const fields = mergedTypeConfig.fields = { ...mergedTypeConfig.fields };
        for (const fieldName in fields) {
          fields[fieldName] = { ...fields[fieldName] };
        }
      }
    }
  }
  return newSubschemaConfig;
}
function delegateToSchema(options) {
  var _a2, _b;
  const { info, schema: schema2, rootValue = (_a2 = schema2.rootValue) !== null && _a2 !== void 0 ? _a2 : info.rootValue, operationName = (_b = info.operation.name) === null || _b === void 0 ? void 0 : _b.value, operation = getDelegatingOperation(info.parentType, info.schema), fieldName = info.fieldName, selectionSet, fieldNodes = info.fieldNodes, context } = options;
  const request = createRequest({
    sourceSchema: info.schema,
    sourceParentType: info.parentType,
    sourceFieldName: info.fieldName,
    fragments: info.fragments,
    variableDefinitions: info.operation.variableDefinitions,
    variableValues: info.variableValues,
    targetRootValue: rootValue,
    targetOperationName: operationName,
    targetOperation: operation,
    targetFieldName: fieldName,
    selectionSet,
    fieldNodes,
    context,
    info
  });
  return delegateRequest({
    ...options,
    request
  });
}
function getDelegationReturnType(targetSchema, operation, fieldName) {
  const rootType = getDefinedRootType(targetSchema, operation);
  return rootType.getFields()[fieldName].type;
}
function delegateRequest(options) {
  const delegationContext = getDelegationContext(options);
  const transformer = new Transformer(delegationContext);
  const processedRequest = transformer.transformRequest(options.request);
  if (options.validateRequest) {
    validateRequest(delegationContext, processedRequest.document);
  }
  const executor = getExecutor(delegationContext);
  return new ValueOrPromise(() => executor(processedRequest)).then((originalResult) => {
    if (isAsyncIterable3(originalResult)) {
      const iterator = originalResult[Symbol.asyncIterator]();
      return mapAsyncIterator3(iterator, (result) => transformer.transformResult(result));
    }
    return transformer.transformResult(originalResult);
  }).resolve();
}
function getDelegationContext({ request, schema: schema2, fieldName, returnType, args, info, transforms = [], transformedSchema, skipTypeMerging = false }) {
  var _a2, _b, _c, _d;
  const operationDefinition = getOperationASTFromRequest(request);
  let targetFieldName;
  if (fieldName == null) {
    targetFieldName = operationDefinition.selectionSet.selections[0].name.value;
  } else {
    targetFieldName = fieldName;
  }
  const stitchingInfo = (_a2 = info === null || info === void 0 ? void 0 : info.schema.extensions) === null || _a2 === void 0 ? void 0 : _a2["stitchingInfo"];
  const subschemaOrSubschemaConfig = (_b = stitchingInfo === null || stitchingInfo === void 0 ? void 0 : stitchingInfo.subschemaMap.get(schema2)) !== null && _b !== void 0 ? _b : schema2;
  const operation = operationDefinition.operation;
  if (isSubschemaConfig(subschemaOrSubschemaConfig)) {
    const targetSchema = subschemaOrSubschemaConfig.schema;
    return {
      subschema: schema2,
      subschemaConfig: subschemaOrSubschemaConfig,
      targetSchema,
      operation,
      fieldName: targetFieldName,
      args,
      context: request.context,
      info,
      returnType: (_c = returnType !== null && returnType !== void 0 ? returnType : info === null || info === void 0 ? void 0 : info.returnType) !== null && _c !== void 0 ? _c : getDelegationReturnType(targetSchema, operation, targetFieldName),
      transforms: subschemaOrSubschemaConfig.transforms != null ? subschemaOrSubschemaConfig.transforms.concat(transforms) : transforms,
      transformedSchema: transformedSchema !== null && transformedSchema !== void 0 ? transformedSchema : subschemaOrSubschemaConfig instanceof Subschema ? subschemaOrSubschemaConfig.transformedSchema : targetSchema,
      skipTypeMerging
    };
  }
  return {
    subschema: schema2,
    subschemaConfig: void 0,
    targetSchema: subschemaOrSubschemaConfig,
    operation,
    fieldName: targetFieldName,
    args,
    context: request.context,
    info,
    returnType: (_d = returnType !== null && returnType !== void 0 ? returnType : info === null || info === void 0 ? void 0 : info.returnType) !== null && _d !== void 0 ? _d : getDelegationReturnType(subschemaOrSubschemaConfig, operation, targetFieldName),
    transforms,
    transformedSchema: transformedSchema !== null && transformedSchema !== void 0 ? transformedSchema : subschemaOrSubschemaConfig,
    skipTypeMerging
  };
}
function validateRequest(delegationContext, document) {
  const errors = validate(delegationContext.targetSchema, document);
  if (errors.length > 0) {
    if (errors.length > 1) {
      const combinedError = new AggregateErrorImpl(errors, errors.map((error2) => error2.message).join(", \n"));
      throw combinedError;
    }
    const error = errors[0];
    throw error.originalError || error;
  }
}
var GLOBAL_CONTEXT = {};
function getExecutor(delegationContext) {
  const { subschemaConfig, targetSchema, context } = delegationContext;
  let executor = (subschemaConfig === null || subschemaConfig === void 0 ? void 0 : subschemaConfig.executor) || createDefaultExecutor(targetSchema);
  if (subschemaConfig === null || subschemaConfig === void 0 ? void 0 : subschemaConfig.batch) {
    const batchingOptions = subschemaConfig === null || subschemaConfig === void 0 ? void 0 : subschemaConfig.batchingOptions;
    executor = getBatchingExecutor(context !== null && context !== void 0 ? context : GLOBAL_CONTEXT, executor, batchingOptions === null || batchingOptions === void 0 ? void 0 : batchingOptions.dataLoaderOptions, batchingOptions === null || batchingOptions === void 0 ? void 0 : batchingOptions.extensionsReducer);
  }
  return executor;
}
var createDefaultExecutor = memoize1(function createDefaultExecutor2(schema2) {
  const executorInstance = new Executor({ schema: schema2 });
  return function defaultExecutor(request) {
    const executionArgs = {
      document: request.document,
      rootValue: request.rootValue,
      contextValue: request.context,
      variableValues: request.variables,
      operationName: request.operationName
    };
    return executorInstance.execute(executionArgs);
  };
});

// node_modules/@graphql-tools/batch-delegate/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var import_dataloader2 = __toESM(require_dataloader(), 1);
function createBatchFn(options) {
  var _a2, _b;
  const argsFromKeys = (_a2 = options.argsFromKeys) !== null && _a2 !== void 0 ? _a2 : (keys) => ({ ids: keys });
  const fieldName = (_b = options.fieldName) !== null && _b !== void 0 ? _b : options.info.fieldName;
  const { valuesFromResults, lazyOptionsFn } = options;
  return async function batchFn(keys) {
    const results = await delegateToSchema({
      returnType: new GraphQLList(getNamedType(options.info.returnType)),
      onLocatedError: (originalError) => {
        if (originalError.path == null) {
          return originalError;
        }
        const [pathFieldName, pathNumber] = originalError.path;
        if (pathFieldName !== fieldName) {
          return originalError;
        }
        const pathNumberType = typeof pathNumber;
        if (pathNumberType !== "number") {
          return originalError;
        }
        return relocatedError(originalError, originalError.path.slice(0, 0).concat(originalError.path.slice(2)));
      },
      args: argsFromKeys(keys),
      ...lazyOptionsFn == null ? options : lazyOptionsFn(options)
    });
    if (results instanceof Error) {
      return keys.map(() => results);
    }
    const values = valuesFromResults == null ? results : valuesFromResults(results, keys);
    return Array.isArray(values) ? values : keys.map(() => values);
  };
}
function defaultCacheKeyFn(key) {
  if (typeof key === "object") {
    return JSON.stringify(key);
  }
  return key;
}
var getLoadersMap = memoize32(function getLoadersMap2(_context, _fieldNodes, _schema) {
  return /* @__PURE__ */ new Map();
});
var GLOBAL_CONTEXT2 = {};
function getLoader(options) {
  const { schema: schema2, fieldName, context, info, dataLoaderOptions } = options;
  const targetFieldName = fieldName !== null && fieldName !== void 0 ? fieldName : info.fieldName;
  const loaders = getLoadersMap(context !== null && context !== void 0 ? context : GLOBAL_CONTEXT2, info.fieldNodes, schema2);
  let loader2 = loaders.get(targetFieldName);
  if (loader2 === void 0) {
    const batchFn = createBatchFn(options);
    loader2 = new import_dataloader2.default(batchFn, {
      cacheKeyFn: defaultCacheKeyFn,
      ...dataLoaderOptions
    });
    loaders.set(targetFieldName, loader2);
  }
  return loader2;
}
function batchDelegateToSchema(options) {
  const key = options.key;
  if (key == null) {
    return null;
  } else if (Array.isArray(key) && !key.length) {
    return [];
  }
  const loader2 = getLoader(options);
  return Array.isArray(key) ? loader2.loadMany(key) : loader2.load(key);
}

// node_modules/@graphql-tools/wrap/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
function generateProxyingResolvers(subschemaConfig) {
  var _a2;
  const targetSchema = subschemaConfig.schema;
  const createProxyingResolver = (_a2 = subschemaConfig.createProxyingResolver) !== null && _a2 !== void 0 ? _a2 : defaultCreateProxyingResolver;
  const transformedSchema = applySchemaTransforms2(targetSchema, subschemaConfig);
  const rootTypeMap = getRootTypeMap(targetSchema);
  const resolvers = {};
  for (const [operation, rootType] of rootTypeMap.entries()) {
    const typeName = rootType.name;
    const fields = rootType.getFields();
    resolvers[typeName] = {};
    for (const fieldName in fields) {
      const proxyingResolver = createProxyingResolver({
        subschemaConfig,
        transformedSchema,
        operation,
        fieldName
      });
      const finalResolver = createPossiblyNestedProxyingResolver(subschemaConfig, proxyingResolver);
      if (operation === "subscription") {
        resolvers[typeName][fieldName] = {
          subscribe: finalResolver,
          resolve: identical
        };
      } else {
        resolvers[typeName][fieldName] = {
          resolve: finalResolver
        };
      }
    }
  }
  return resolvers;
}
function identical(value) {
  return value;
}
function createPossiblyNestedProxyingResolver(subschemaConfig, proxyingResolver) {
  return function possiblyNestedProxyingResolver(parent, args, context, info) {
    if (parent != null) {
      const responseKey = getResponseKeyFromInfo(info);
      if (isExternalObject(parent)) {
        const unpathedErrors = getUnpathedErrors(parent);
        const subschema = getSubschema(parent, responseKey);
        if (subschemaConfig === subschema && parent[responseKey] !== void 0) {
          return resolveExternalValue(parent[responseKey], unpathedErrors, subschema, context, info);
        }
      }
    }
    return proxyingResolver(parent, args, context, info);
  };
}
function defaultCreateProxyingResolver({ subschemaConfig, operation, transformedSchema }) {
  return function proxyingResolver(_parent, _args, context, info) {
    return delegateToSchema({
      schema: subschemaConfig,
      operation,
      context,
      info,
      transformedSchema
    });
  };
}
function wrapSchema(subschemaConfig) {
  const targetSchema = subschemaConfig.schema;
  const proxyingResolvers = generateProxyingResolvers(subschemaConfig);
  const schema2 = createWrappingSchema(targetSchema, proxyingResolvers);
  const transformedSchema = applySchemaTransforms2(schema2, subschemaConfig);
  return applySchemaTransforms2(schema2, subschemaConfig, transformedSchema);
}
function createWrappingSchema(schema2, proxyingResolvers) {
  return mapSchema(schema2, {
    [MapperKind.ROOT_OBJECT]: (type2) => {
      var _a2;
      const config2 = type2.toConfig();
      const fieldConfigMap = config2.fields;
      for (const fieldName in fieldConfigMap) {
        const field = fieldConfigMap[fieldName];
        if (field == null) {
          continue;
        }
        fieldConfigMap[fieldName] = {
          ...field,
          ...(_a2 = proxyingResolvers[type2.name]) === null || _a2 === void 0 ? void 0 : _a2[fieldName]
        };
      }
      return new GraphQLObjectType(config2);
    },
    [MapperKind.OBJECT_TYPE]: (type2) => {
      const config2 = type2.toConfig();
      config2.isTypeOf = void 0;
      for (const fieldName in config2.fields) {
        const field = config2.fields[fieldName];
        if (field == null) {
          continue;
        }
        field.resolve = defaultMergedResolver;
        field.subscribe = void 0;
      }
      return new GraphQLObjectType(config2);
    },
    [MapperKind.INTERFACE_TYPE]: (type2) => {
      const config2 = type2.toConfig();
      delete config2.resolveType;
      return new GraphQLInterfaceType(config2);
    },
    [MapperKind.UNION_TYPE]: (type2) => {
      const config2 = type2.toConfig();
      delete config2.resolveType;
      return new GraphQLUnionType(config2);
    }
  });
}
var TransformCompositeFields = class {
  constructor(fieldTransformer, fieldNodeTransformer, dataTransformer, errorsTransformer) {
    this.fieldTransformer = fieldTransformer;
    this.fieldNodeTransformer = fieldNodeTransformer;
    this.dataTransformer = dataTransformer;
    this.errorsTransformer = errorsTransformer;
    this.mapping = {};
  }
  _getTypeInfo() {
    const typeInfo = this.typeInfo;
    if (typeInfo === void 0) {
      throw new Error(`The TransformCompositeFields transform's  "transformRequest" and "transformResult" methods cannot be used without first calling "transformSchema".`);
    }
    return typeInfo;
  }
  transformSchema(originalWrappingSchema, _subschemaConfig, _transformedSchema) {
    var _a2;
    this.transformedSchema = mapSchema(originalWrappingSchema, {
      [MapperKind.COMPOSITE_FIELD]: (fieldConfig, fieldName, typeName) => {
        const transformedField = this.fieldTransformer(typeName, fieldName, fieldConfig);
        if (Array.isArray(transformedField)) {
          const newFieldName = transformedField[0];
          if (newFieldName !== fieldName) {
            if (!(typeName in this.mapping)) {
              this.mapping[typeName] = {};
            }
            this.mapping[typeName][newFieldName] = fieldName;
          }
        }
        return transformedField;
      }
    });
    this.typeInfo = new TypeInfo(this.transformedSchema);
    this.subscriptionTypeName = (_a2 = originalWrappingSchema.getSubscriptionType()) === null || _a2 === void 0 ? void 0 : _a2.name;
    return this.transformedSchema;
  }
  transformRequest(originalRequest, _delegationContext, transformationContext) {
    const document = originalRequest.document;
    return {
      ...originalRequest,
      document: this.transformDocument(document, transformationContext)
    };
  }
  transformResult(result, _delegationContext, transformationContext) {
    const dataTransformer = this.dataTransformer;
    if (dataTransformer != null) {
      result.data = visitData(result.data, (value) => dataTransformer(value, transformationContext));
    }
    if (this.errorsTransformer != null && Array.isArray(result.errors)) {
      result.errors = this.errorsTransformer(result.errors, transformationContext);
    }
    return result;
  }
  transformDocument(document, transformationContext) {
    const fragments = /* @__PURE__ */ Object.create(null);
    for (const def of document.definitions) {
      if (def.kind === Kind.FRAGMENT_DEFINITION) {
        fragments[def.name.value] = def;
      }
    }
    return visit(document, visitWithTypeInfo(this._getTypeInfo(), {
      [Kind.SELECTION_SET]: {
        leave: (node) => this.transformSelectionSet(node, this._getTypeInfo(), fragments, transformationContext)
      }
    }));
  }
  transformSelectionSet(node, typeInfo, fragments, transformationContext) {
    var _a2, _b;
    const parentType = typeInfo.getParentType();
    if (parentType == null) {
      return void 0;
    }
    const parentTypeName = parentType.name;
    let newSelections = [];
    for (const selection of node.selections) {
      if (selection.kind !== Kind.FIELD) {
        newSelections.push(selection);
        continue;
      }
      const newName = selection.name.value;
      if ((this.dataTransformer != null || this.errorsTransformer != null) && (this.subscriptionTypeName == null || parentTypeName !== this.subscriptionTypeName)) {
        newSelections.push({
          kind: Kind.FIELD,
          name: {
            kind: Kind.NAME,
            value: "__typename"
          }
        });
      }
      let transformedSelection;
      if (this.fieldNodeTransformer == null) {
        transformedSelection = selection;
      } else {
        transformedSelection = this.fieldNodeTransformer(parentTypeName, newName, selection, fragments, transformationContext);
        transformedSelection = transformedSelection === void 0 ? selection : transformedSelection;
      }
      if (transformedSelection == null) {
        continue;
      } else if (Array.isArray(transformedSelection)) {
        newSelections = newSelections.concat(transformedSelection);
        continue;
      } else if (transformedSelection.kind !== Kind.FIELD) {
        newSelections.push(transformedSelection);
        continue;
      }
      const typeMapping = this.mapping[parentTypeName];
      if (typeMapping == null) {
        newSelections.push(transformedSelection);
        continue;
      }
      const oldName = this.mapping[parentTypeName][newName];
      if (oldName == null) {
        newSelections.push(transformedSelection);
        continue;
      }
      newSelections.push({
        ...transformedSelection,
        name: {
          kind: Kind.NAME,
          value: oldName
        },
        alias: {
          kind: Kind.NAME,
          value: (_b = (_a2 = transformedSelection.alias) === null || _a2 === void 0 ? void 0 : _a2.value) !== null && _b !== void 0 ? _b : newName
        }
      });
    }
    return {
      ...node,
      selections: newSelections
    };
  }
};
var WrapQuery = class {
  constructor(path2, wrapper, extractor) {
    this.path = path2;
    this.wrapper = wrapper;
    this.extractor = extractor;
  }
  transformRequest(originalRequest, _delegationContext, _transformationContext) {
    const fieldPath = [];
    const ourPath = JSON.stringify(this.path);
    const document = visit(originalRequest.document, {
      [Kind.FIELD]: {
        enter: (node) => {
          fieldPath.push(node.name.value);
          if (node.selectionSet != null && ourPath === JSON.stringify(fieldPath)) {
            const wrapResult = this.wrapper(node.selectionSet);
            const selectionSet = wrapResult != null && wrapResult.kind === Kind.SELECTION_SET ? wrapResult : {
              kind: Kind.SELECTION_SET,
              selections: [wrapResult]
            };
            return {
              ...node,
              selectionSet
            };
          }
        },
        leave: () => {
          fieldPath.pop();
        }
      }
    });
    return {
      ...originalRequest,
      document
    };
  }
  transformResult(originalResult, _delegationContext, _transformationContext) {
    const rootData = originalResult.data;
    if (rootData != null) {
      let data = rootData;
      const path2 = [...this.path];
      while (path2.length > 1) {
        const next = path2.shift();
        if (data[next]) {
          data = data[next];
        }
      }
      data[path2[0]] = this.extractor(data[path2[0]]);
    }
    return {
      data: rootData,
      errors: originalResult.errors
    };
  }
};
function getSchemaFromIntrospection(introspectionResult, options) {
  var _a2;
  if ((_a2 = introspectionResult === null || introspectionResult === void 0 ? void 0 : introspectionResult.data) === null || _a2 === void 0 ? void 0 : _a2.__schema) {
    return buildClientSchema(introspectionResult.data, options);
  }
  throw new Error("Could not obtain introspection result, received: " + JSON.stringify(introspectionResult));
}
function introspectSchema(executor, context, options) {
  const parsedIntrospectionQuery = parse(getIntrospectionQuery(options), options);
  return new ValueOrPromise(() => executor({
    document: parsedIntrospectionQuery,
    context
  })).then((introspection) => {
    if (isAsyncIterable3(introspection)) {
      const iterator = introspection[Symbol.asyncIterator]();
      return iterator.next().then(({ value }) => value);
    }
    return introspection;
  }).then((introspection) => getSchemaFromIntrospection(introspection, options)).resolve();
}

// node_modules/@envelop/extended-validation/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var symbolExtendedValidationRules = Symbol("extendedValidationContext");
var useExtendedValidation = (options) => {
  let schemaTypeInfo;
  function getTypeInfo() {
    return schemaTypeInfo;
  }
  return {
    onSchemaChange({ schema: schema2 }) {
      schemaTypeInfo = new TypeInfo(schema2);
    },
    onContextBuilding({ context, extendContext }) {
      let validationRulesContext = context[symbolExtendedValidationRules];
      if (validationRulesContext === void 0) {
        validationRulesContext = {
          rules: [],
          didRun: false
        };
        extendContext({
          [symbolExtendedValidationRules]: validationRulesContext
        });
      }
      validationRulesContext.rules.push(...options.rules);
    },
    onSubscribe: buildHandler("subscribe", getTypeInfo, options.onValidationFailed),
    onExecute: buildHandler("execute", getTypeInfo, options.onValidationFailed)
  };
};
function buildHandler(name, getTypeInfo, onValidationFailed) {
  return function handler({ args, setResultAndStopExecution }) {
    var _a2;
    const validationRulesContext = args.contextValue[symbolExtendedValidationRules];
    if (validationRulesContext === void 0) {
      throw new Error(`Plugin has not been properly set up. The 'contextFactory' function is not invoked and the result has not been passed to '${name}'.`);
    }
    if (validationRulesContext.didRun === false) {
      validationRulesContext.didRun = true;
      if (validationRulesContext.rules.length !== 0) {
        const errors = [];
        const typeInfo = (_a2 = getTypeInfo()) !== null && _a2 !== void 0 ? _a2 : new TypeInfo(args.schema);
        const validationContext = new ValidationContext(args.schema, args.document, typeInfo, (e) => {
          errors.push(e);
        });
        const visitor = visitInParallel(validationRulesContext.rules.map((rule) => rule(validationContext, args)));
        visit(args.document, visitWithTypeInfo(typeInfo, visitor));
        if (errors.length > 0) {
          let result = {
            data: null,
            errors
          };
          if (onValidationFailed) {
            onValidationFailed({ args, result, setResult: (newResult) => result = newResult });
          }
          setResultAndStopExecution(result);
        }
      }
    }
  };
}
function getDirectiveFromAstNode(astNode, names) {
  const directives = astNode.directives || [];
  const namesArr = Array.isArray(names) ? names : [names];
  const authDirective = directives.find((d) => namesArr.includes(d.name.value));
  return authDirective || null;
}
var OneOfInputObjectsRule = (validationContext, executionArgs) => {
  return {
    Field: (node) => {
      var _a2, _b;
      if ((_a2 = node.arguments) === null || _a2 === void 0 ? void 0 : _a2.length) {
        const fieldType = validationContext.getFieldDef();
        if (!fieldType) {
          return;
        }
        const values = getArgumentValues2(fieldType, node, executionArgs.variableValues || void 0);
        const isOneOfFieldType = ((_b = fieldType.extensions) === null || _b === void 0 ? void 0 : _b.oneOf) || fieldType.astNode && getDirectiveFromAstNode(fieldType.astNode, "oneOf");
        if (isOneOfFieldType) {
          if (Object.keys(values).length !== 1) {
            validationContext.reportError(new GraphQLError(`Exactly one key must be specified for input for field "${fieldType.type.toString()}.${node.name.value}"`, [node]));
          }
        }
        for (const arg of node.arguments) {
          const argType = fieldType.args.find((typeArg) => typeArg.name === arg.name.value);
          if (argType) {
            traverseVariables(validationContext, arg, argType.type, values[arg.name.value]);
          }
        }
      }
    }
  };
};
function getNonNullType(ttype) {
  if (ttype instanceof GraphQLNonNull) {
    return ttype.ofType;
  }
  return ttype;
}
function traverseVariables(validationContext, arg, graphqlType, currentValue) {
  var _a2;
  if (currentValue == null) {
    return;
  }
  const unwrappedType = getNonNullType(graphqlType);
  if (isListType(unwrappedType)) {
    if (!Array.isArray(currentValue)) {
      currentValue = [currentValue];
    }
    currentValue.forEach((value) => {
      traverseVariables(validationContext, arg, unwrappedType.ofType, value);
    });
    return;
  }
  if (typeof currentValue !== "object" || currentValue == null) {
    return;
  }
  const inputType = getNamedType(graphqlType);
  const isOneOfInputType = ((_a2 = inputType.extensions) === null || _a2 === void 0 ? void 0 : _a2.oneOf) || inputType.astNode && getDirectiveFromAstNode(inputType.astNode, "oneOf");
  if (isOneOfInputType) {
    if (Object.keys(currentValue).length !== 1) {
      validationContext.reportError(new GraphQLError(`Exactly one key must be specified for input type "${inputType.name}"`, [arg]));
    }
  }
  if (inputType instanceof GraphQLInputObjectType) {
    for (const [name, fieldConfig] of Object.entries(inputType.getFields())) {
      traverseVariables(validationContext, arg, fieldConfig.type, currentValue[name]);
    }
  }
}

// node_modules/@graphql-mesh/runtime/index.mjs
var MESH_CONTEXT_SYMBOL = Symbol("isMeshContext");
var MESH_API_CONTEXT_SYMBOL = Symbol("isMeshAPIContext");
var memoizedGetOperationType = memoize1((document) => {
  const operationAST = getOperationAST(document, void 0);
  if (!operationAST) {
    throw new Error("Must provide document with a valid operation");
  }
  return operationAST.operation;
});
var memoizedGetEnvelopedFactory = memoize1(function getEnvelopedFactory(plugins) {
  const getEnveloped = envelop({ plugins });
  return memoize1(function getEnvelopedByContext(initialContext) {
    return getEnveloped(initialContext);
  });
});
async function getMesh(options) {
  const rawSources = [];
  const { pubsub = new PubSub(), cache, logger = new DefaultLogger("\u{1F578}\uFE0F  Mesh"), additionalEnvelopPlugins = [], sources, merger, additionalResolvers, additionalTypeDefs, transforms } = options;
  const getMeshLogger = logger.child("GetMesh");
  getMeshLogger.debug(`Getting subschemas from source handlers`);
  let failed = false;
  await Promise.allSettled(sources.map(async (apiSource) => {
    const apiName = apiSource.name;
    const sourceLogger = logger.child(apiName);
    sourceLogger.debug(`Generating the schema`);
    try {
      const source = await apiSource.handler.getMeshSource();
      sourceLogger.debug(`The schema has been generated successfully`);
      let apiSchema = source.schema;
      sourceLogger.debug(`Analyzing transforms`);
      let transforms2;
      const { wrapTransforms, noWrapTransforms } = groupTransforms(apiSource.transforms);
      if (!(wrapTransforms === null || wrapTransforms === void 0 ? void 0 : wrapTransforms.length) && (noWrapTransforms === null || noWrapTransforms === void 0 ? void 0 : noWrapTransforms.length)) {
        sourceLogger.debug(`${noWrapTransforms.length} bare transforms found and applying`);
        apiSchema = applySchemaTransforms(apiSchema, source, null, noWrapTransforms);
      } else {
        transforms2 = apiSource.transforms;
      }
      rawSources.push({
        name: apiName,
        schema: apiSchema,
        executor: source.executor,
        transforms: transforms2,
        contextVariables: source.contextVariables || {},
        handler: apiSource.handler,
        batch: "batch" in source ? source.batch : true,
        merge: apiSource.merge
      });
    } catch (e) {
      sourceLogger.error(`Failed to generate the schema`, e);
      failed = true;
    }
  }));
  if (failed) {
    throw new Error(`Schemas couldn't be generated successfully. Check for the logs by running Mesh with DEBUG=1 environmental variable to get more verbose output.`);
  }
  getMeshLogger.debug(`Schemas have been generated by the source handlers`);
  getMeshLogger.debug(`Merging schemas using the defined merging strategy.`);
  const unifiedSchema = await merger.getUnifiedSchema({
    rawSources,
    typeDefs: additionalTypeDefs,
    resolvers: additionalResolvers,
    transforms
  });
  getMeshLogger.debug(`Building Mesh Context`);
  const meshContext = {
    pubsub,
    cache,
    logger,
    [MESH_CONTEXT_SYMBOL]: true
  };
  getMeshLogger.debug(`Attaching in-context SDK, pubsub and cache to the context`);
  const sourceMap = unifiedSchema.extensions.sourceMap;
  await Promise.all(rawSources.map(async (rawSource) => {
    const rawSourceLogger = logger.child(`${rawSource.name}`);
    const rawSourceContext = {
      rawSource,
      [MESH_API_CONTEXT_SYMBOL]: true
    };
    let rawSourceSubSchemaConfig;
    const stitchingInfo = unifiedSchema.extensions.stitchingInfo;
    if (stitchingInfo) {
      for (const [subschemaConfig, subschema] of stitchingInfo.subschemaMap) {
        if (subschemaConfig.name === rawSource.name) {
          rawSourceSubSchemaConfig = subschema;
          break;
        }
      }
    } else {
      rawSourceSubSchemaConfig = rawSource;
    }
    const transformedSchema = sourceMap.get(rawSource);
    const rootTypes = {
      query: transformedSchema.getQueryType(),
      mutation: transformedSchema.getMutationType(),
      subscription: transformedSchema.getSubscriptionType()
    };
    rawSourceLogger.debug(`Generating In Context SDK`);
    for (const operationType in rootTypes) {
      const rootType = rootTypes[operationType];
      if (rootType) {
        rawSourceContext[rootType.name] = {};
        const rootTypeFieldMap = rootType.getFields();
        for (const fieldName in rootTypeFieldMap) {
          const rootTypeField = rootTypeFieldMap[fieldName];
          const inContextSdkLogger = rawSourceLogger.child(`InContextSDK.${rootType.name}.${fieldName}`);
          const namedReturnType = getNamedType(rootTypeField.type);
          const shouldHaveSelectionSet = !isLeafType(namedReturnType);
          rawSourceContext[rootType.name][fieldName] = ({ root, args, context, info = {
            fieldName,
            fieldNodes: [],
            returnType: namedReturnType,
            parentType: rootType,
            path: {
              typename: rootType.name,
              key: fieldName,
              prev: void 0
            },
            schema: transformedSchema,
            fragments: {},
            rootValue: root,
            operation: {
              kind: Kind.OPERATION_DEFINITION,
              operation: operationType,
              selectionSet: {
                kind: Kind.SELECTION_SET,
                selections: []
              }
            },
            variableValues: {},
            cacheControl: {
              setCacheHint: () => {
              },
              cacheHint: {}
            }
          }, selectionSet, key, argsFromKeys, valuesFromResults }) => {
            inContextSdkLogger.debug(`Called with`, {
              args,
              key
            });
            const commonDelegateOptions = {
              schema: rawSourceSubSchemaConfig,
              rootValue: root,
              operation: operationType,
              fieldName,
              context,
              transformedSchema,
              info
            };
            if (typeof selectionSet !== "function") {
              commonDelegateOptions.returnType = rootTypeField.type;
            }
            if (shouldHaveSelectionSet) {
              let selectionCount = 0;
              for (const fieldNode of info.fieldNodes) {
                if (fieldNode.selectionSet != null) {
                  selectionCount += fieldNode.selectionSet.selections.length;
                }
              }
              if (selectionCount === 0) {
                if (!selectionSet) {
                  throw new Error(`You have to provide 'selectionSet' for context.${rawSource.name}.${rootType.name}.${fieldName}`);
                }
                commonDelegateOptions.info = {
                  ...info,
                  fieldNodes: [
                    {
                      ...info.fieldNodes[0],
                      selectionSet: {
                        kind: Kind.SELECTION_SET,
                        selections: [
                          {
                            kind: Kind.FIELD,
                            name: {
                              kind: Kind.NAME,
                              value: "__typename"
                            }
                          }
                        ]
                      }
                    },
                    ...info.fieldNodes.slice(1)
                  ]
                };
              }
            }
            if (key && argsFromKeys) {
              const batchDelegationOptions = {
                ...commonDelegateOptions,
                key,
                argsFromKeys,
                valuesFromResults
              };
              if (selectionSet) {
                const selectionSetFactory = normalizeSelectionSetParamOrFactory(selectionSet);
                const path2 = [fieldName];
                const wrapQueryTransform = new WrapQuery(path2, selectionSetFactory, identical2);
                batchDelegationOptions.transforms = [wrapQueryTransform];
              }
              return batchDelegateToSchema(batchDelegationOptions);
            } else {
              const regularDelegateOptions = {
                ...commonDelegateOptions,
                args
              };
              if (selectionSet) {
                const selectionSetFactory = normalizeSelectionSetParamOrFactory(selectionSet);
                const path2 = [fieldName];
                const wrapQueryTransform = new WrapQuery(path2, selectionSetFactory, valuesFromResults || identical2);
                regularDelegateOptions.transforms = [wrapQueryTransform];
              }
              return delegateToSchema(regularDelegateOptions);
            }
          };
        }
      }
    }
    meshContext[rawSource.name] = rawSourceContext;
  }));
  const plugins = [
    useSchema(unifiedSchema),
    useExtendContext(() => meshContext),
    enableIf(!!unifiedSchema.getDirective("oneOf"), () => useExtendedValidation({
      rules: [OneOfInputObjectsRule]
    })),
    {
      onParse({ setParseFn }) {
        setParseFn(parseWithCache);
      }
    },
    ...additionalEnvelopPlugins
  ];
  const EMPTY_ROOT_VALUE = {};
  const EMPTY_CONTEXT_VALUE = {};
  const EMPTY_VARIABLES_VALUE = {};
  async function meshExecute(documentOrSDL, variableValues = EMPTY_VARIABLES_VALUE, contextValue = EMPTY_CONTEXT_VALUE, rootValue = EMPTY_ROOT_VALUE, operationName) {
    const getEnveloped = memoizedGetEnvelopedFactory(plugins);
    const { execute: execute5, contextFactory, parse: parse2 } = getEnveloped(contextValue);
    return execute5({
      document: typeof documentOrSDL === "string" ? parse2(documentOrSDL) : documentOrSDL,
      contextValue: await contextFactory(),
      rootValue,
      variableValues,
      schema: unifiedSchema,
      operationName
    });
  }
  async function meshSubscribe(documentOrSDL, variableValues = EMPTY_VARIABLES_VALUE, contextValue = EMPTY_CONTEXT_VALUE, rootValue = EMPTY_ROOT_VALUE, operationName) {
    const getEnveloped = memoizedGetEnvelopedFactory(plugins);
    const { subscribe: subscribe2, contextFactory, parse: parse2 } = getEnveloped(contextValue);
    return subscribe2({
      document: typeof documentOrSDL === "string" ? parse2(documentOrSDL) : documentOrSDL,
      contextValue: await contextFactory(),
      rootValue,
      variableValues,
      schema: unifiedSchema,
      operationName
    });
  }
  function sdkRequesterFactory(globalContext) {
    return async function meshSdkRequester(document, variables, contextValue) {
      var _a2, _b;
      if (memoizedGetOperationType(document) === "subscription") {
        const result = await meshSubscribe(document, variables, {
          ...globalContext,
          ...contextValue
        });
        if (isAsyncIterable3(result)) {
          return mapAsyncIterator3(result, (result2) => {
            var _a3;
            if ((_a3 = result2 === null || result2 === void 0 ? void 0 : result2.errors) === null || _a3 === void 0 ? void 0 : _a3.length) {
              return new AggregateErrorImpl(result2.errors);
            }
            return result2 === null || result2 === void 0 ? void 0 : result2.data;
          });
        }
        if ((_a2 = result === null || result === void 0 ? void 0 : result.errors) === null || _a2 === void 0 ? void 0 : _a2.length) {
          return new AggregateErrorImpl(result.errors);
        }
        return result === null || result === void 0 ? void 0 : result.data;
      } else {
        const result = await meshExecute(document, variables, {
          ...globalContext,
          ...contextValue
        });
        if ((_b = result === null || result === void 0 ? void 0 : result.errors) === null || _b === void 0 ? void 0 : _b.length) {
          return new AggregateErrorImpl(result.errors);
        }
        return result === null || result === void 0 ? void 0 : result.data;
      }
    };
  }
  return {
    execute: meshExecute,
    subscribe: meshSubscribe,
    schema: unifiedSchema,
    rawSources,
    cache,
    pubsub,
    destroy() {
      return pubsub.publish("destroy", void 0);
    },
    logger,
    meshContext,
    plugins,
    get getEnveloped() {
      return memoizedGetEnvelopedFactory(plugins);
    },
    sdkRequesterFactory
  };
}
function normalizeSelectionSetParam(selectionSetParam) {
  if (typeof selectionSetParam === "string") {
    return parseSelectionSet(selectionSetParam);
  }
  if (isDocumentNode(selectionSetParam)) {
    return parseSelectionSet(print(selectionSetParam));
  }
  return selectionSetParam;
}
function normalizeSelectionSetParamOrFactory(selectionSetParamOrFactory) {
  return function getSelectionSet(subtree) {
    if (typeof selectionSetParamOrFactory === "function") {
      const selectionSetParam = selectionSetParamOrFactory(subtree);
      return normalizeSelectionSetParam(selectionSetParam);
    } else {
      return normalizeSelectionSetParam(selectionSetParamOrFactory);
    }
  };
}
function identical2(val) {
  return val;
}

// node_modules/@graphql-mesh/store/index.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/@graphql-inspector/core/index.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/tslib/modules/index.js
init_virtual_process_polyfill();
init_buffer();
var import_tslib = __toESM(require_tslib(), 1);
var {
  __extends: __extends2,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter: __awaiter2,
  __generator: __generator2,
  __exportStar,
  __createBinding,
  __values: __values2,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await: __await2,
  __asyncGenerator: __asyncGenerator2,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn
} = import_tslib.default;

// node_modules/@graphql-inspector/core/index.mjs
init_graphql();
var import_object_inspect = __toESM(require_object_inspect(), 1);
var import_dependency_graph = __toESM(require_dep_graph(), 1);
function keyMap3(list, keyFn) {
  return list.reduce((map2, item) => {
    map2[keyFn(item)] = item;
    return map2;
  }, /* @__PURE__ */ Object.create(null));
}
function isEqual(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length)
      return false;
    for (var index = 0; index < a.length; index++) {
      if (a[index] !== b[index]) {
        return false;
      }
    }
    return true;
  }
  return a === b || !a && !b;
}
function isNotEqual(a, b) {
  return !isEqual(a, b);
}
function isVoid(a) {
  return typeof a === "undefined" || a === null;
}
function diffArrays(a, b) {
  return a.filter((c) => !b.some((d) => d === c));
}
function compareLists(oldList, newList, callbacks) {
  const oldMap = keyMap3(oldList, ({ name }) => name);
  const newMap = keyMap3(newList, ({ name }) => name);
  const added = [];
  const removed = [];
  const mutual = [];
  for (const oldItem of oldList) {
    const newItem = newMap[oldItem.name];
    if (newItem === void 0) {
      removed.push(oldItem);
    } else {
      mutual.push({
        newVersion: newItem,
        oldVersion: oldItem
      });
    }
  }
  for (const newItem of newList) {
    if (oldMap[newItem.name] === void 0) {
      added.push(newItem);
    }
  }
  if (callbacks) {
    if (callbacks.onAdded) {
      added.forEach(callbacks.onAdded);
    }
    if (callbacks.onRemoved) {
      removed.forEach(callbacks.onRemoved);
    }
    if (callbacks.onMutual) {
      mutual.forEach(callbacks.onMutual);
    }
  }
  return {
    added,
    removed,
    mutual
  };
}
function isDeprecated(fieldOrEnumValue) {
  var _a2, _b;
  if ("isDeprecated" in fieldOrEnumValue) {
    return fieldOrEnumValue["isDeprecated"];
  }
  if (fieldOrEnumValue.deprecationReason != null) {
    return true;
  }
  if ((_b = (_a2 = fieldOrEnumValue.astNode) === null || _a2 === void 0 ? void 0 : _a2.directives) === null || _b === void 0 ? void 0 : _b.some((directive) => directive.name.value === "deprecated")) {
    return true;
  }
  return false;
}
function safeChangeForField(oldType, newType) {
  if (!isWrappingType(oldType) && !isWrappingType(newType)) {
    return oldType.toString() === newType.toString();
  }
  if (isNonNullType(newType)) {
    const ofType = isNonNullType(oldType) ? oldType.ofType : oldType;
    return safeChangeForField(ofType, newType.ofType);
  }
  if (isListType(oldType)) {
    return isListType(newType) && safeChangeForField(oldType.ofType, newType.ofType) || isNonNullType(newType) && safeChangeForField(oldType, newType.ofType);
  }
  return false;
}
function safeChangeForInputValue(oldType, newType) {
  if (!isWrappingType(oldType) && !isWrappingType(newType)) {
    return oldType.toString() === newType.toString();
  }
  if (isListType(oldType) && isListType(newType)) {
    return safeChangeForInputValue(oldType.ofType, newType.ofType);
  }
  if (isNonNullType(oldType)) {
    const ofType = isNonNullType(newType) ? newType : newType;
    return safeChangeForInputValue(oldType.ofType, ofType);
  }
  return false;
}
function getKind(type2) {
  const node = type2.astNode;
  return node && node.kind || "";
}
function isPrimitive(type2) {
  return ["String", "Int", "Float", "Boolean", "ID"].indexOf(typeof type2 === "string" ? type2 : type2.name) !== -1;
}
var ChangeType;
(function(ChangeType2) {
  ChangeType2["FieldArgumentDescriptionChanged"] = "FIELD_ARGUMENT_DESCRIPTION_CHANGED";
  ChangeType2["FieldArgumentDefaultChanged"] = "FIELD_ARGUMENT_DEFAULT_CHANGED";
  ChangeType2["FieldArgumentTypeChanged"] = "FIELD_ARGUMENT_TYPE_CHANGED";
  ChangeType2["DirectiveRemoved"] = "DIRECTIVE_REMOVED";
  ChangeType2["DirectiveAdded"] = "DIRECTIVE_ADDED";
  ChangeType2["DirectiveDescriptionChanged"] = "DIRECTIVE_DESCRIPTION_CHANGED";
  ChangeType2["DirectiveLocationAdded"] = "DIRECTIVE_LOCATION_ADDED";
  ChangeType2["DirectiveLocationRemoved"] = "DIRECTIVE_LOCATION_REMOVED";
  ChangeType2["DirectiveArgumentAdded"] = "DIRECTIVE_ARGUMENT_ADDED";
  ChangeType2["DirectiveArgumentRemoved"] = "DIRECTIVE_ARGUMENT_REMOVED";
  ChangeType2["DirectiveArgumentDescriptionChanged"] = "DIRECTIVE_ARGUMENT_DESCRIPTION_CHANGED";
  ChangeType2["DirectiveArgumentDefaultValueChanged"] = "DIRECTIVE_ARGUMENT_DEFAULT_VALUE_CHANGED";
  ChangeType2["DirectiveArgumentTypeChanged"] = "DIRECTIVE_ARGUMENT_TYPE_CHANGED";
  ChangeType2["EnumValueRemoved"] = "ENUM_VALUE_REMOVED";
  ChangeType2["EnumValueAdded"] = "ENUM_VALUE_ADDED";
  ChangeType2["EnumValueDescriptionChanged"] = "ENUM_VALUE_DESCRIPTION_CHANGED";
  ChangeType2["EnumValueDeprecationReasonChanged"] = "ENUM_VALUE_DEPRECATION_REASON_CHANGED";
  ChangeType2["EnumValueDeprecationReasonAdded"] = "ENUM_VALUE_DEPRECATION_REASON_ADDED";
  ChangeType2["EnumValueDeprecationReasonRemoved"] = "ENUM_VALUE_DEPRECATION_REASON_REMOVED";
  ChangeType2["FieldRemoved"] = "FIELD_REMOVED";
  ChangeType2["FieldAdded"] = "FIELD_ADDED";
  ChangeType2["FieldDescriptionChanged"] = "FIELD_DESCRIPTION_CHANGED";
  ChangeType2["FieldDescriptionAdded"] = "FIELD_DESCRIPTION_ADDED";
  ChangeType2["FieldDescriptionRemoved"] = "FIELD_DESCRIPTION_REMOVED";
  ChangeType2["FieldDeprecationAdded"] = "FIELD_DEPRECATION_ADDED";
  ChangeType2["FieldDeprecationRemoved"] = "FIELD_DEPRECATION_REMOVED";
  ChangeType2["FieldDeprecationReasonChanged"] = "FIELD_DEPRECATION_REASON_CHANGED";
  ChangeType2["FieldDeprecationReasonAdded"] = "FIELD_DEPRECATION_REASON_ADDED";
  ChangeType2["FieldDeprecationReasonRemoved"] = "FIELD_DEPRECATION_REASON_REMOVED";
  ChangeType2["FieldTypeChanged"] = "FIELD_TYPE_CHANGED";
  ChangeType2["FieldArgumentAdded"] = "FIELD_ARGUMENT_ADDED";
  ChangeType2["FieldArgumentRemoved"] = "FIELD_ARGUMENT_REMOVED";
  ChangeType2["InputFieldRemoved"] = "INPUT_FIELD_REMOVED";
  ChangeType2["InputFieldAdded"] = "INPUT_FIELD_ADDED";
  ChangeType2["InputFieldDescriptionAdded"] = "INPUT_FIELD_DESCRIPTION_ADDED";
  ChangeType2["InputFieldDescriptionRemoved"] = "INPUT_FIELD_DESCRIPTION_REMOVED";
  ChangeType2["InputFieldDescriptionChanged"] = "INPUT_FIELD_DESCRIPTION_CHANGED";
  ChangeType2["InputFieldDefaultValueChanged"] = "INPUT_FIELD_DEFAULT_VALUE_CHANGED";
  ChangeType2["InputFieldTypeChanged"] = "INPUT_FIELD_TYPE_CHANGED";
  ChangeType2["ObjectTypeInterfaceAdded"] = "OBJECT_TYPE_INTERFACE_ADDED";
  ChangeType2["ObjectTypeInterfaceRemoved"] = "OBJECT_TYPE_INTERFACE_REMOVED";
  ChangeType2["SchemaQueryTypeChanged"] = "SCHEMA_QUERY_TYPE_CHANGED";
  ChangeType2["SchemaMutationTypeChanged"] = "SCHEMA_MUTATION_TYPE_CHANGED";
  ChangeType2["SchemaSubscriptionTypeChanged"] = "SCHEMA_SUBSCRIPTION_TYPE_CHANGED";
  ChangeType2["TypeRemoved"] = "TYPE_REMOVED";
  ChangeType2["TypeAdded"] = "TYPE_ADDED";
  ChangeType2["TypeKindChanged"] = "TYPE_KIND_CHANGED";
  ChangeType2["TypeDescriptionChanged"] = "TYPE_DESCRIPTION_CHANGED";
  ChangeType2["TypeDescriptionRemoved"] = "TYPE_DESCRIPTION_REMOVED";
  ChangeType2["TypeDescriptionAdded"] = "TYPE_DESCRIPTION_ADDED";
  ChangeType2["UnionMemberRemoved"] = "UNION_MEMBER_REMOVED";
  ChangeType2["UnionMemberAdded"] = "UNION_MEMBER_ADDED";
})(ChangeType || (ChangeType = {}));
var CriticalityLevel;
(function(CriticalityLevel2) {
  CriticalityLevel2["Breaking"] = "BREAKING";
  CriticalityLevel2["NonBreaking"] = "NON_BREAKING";
  CriticalityLevel2["Dangerous"] = "DANGEROUS";
})(CriticalityLevel || (CriticalityLevel = {}));
function schemaQueryTypeChanged(oldSchema, newSchema) {
  const oldName = (oldSchema.getQueryType() || {}).name || "unknown";
  const newName = (newSchema.getQueryType() || {}).name || "unknown";
  return {
    criticality: {
      level: CriticalityLevel.Breaking
    },
    type: ChangeType.SchemaQueryTypeChanged,
    message: `Schema query root has changed from '${oldName}' to '${newName}'`
  };
}
function schemaMutationTypeChanged(oldSchema, newSchema) {
  const oldName = (oldSchema.getMutationType() || {}).name || "unknown";
  const newName = (newSchema.getMutationType() || {}).name || "unknown";
  return {
    criticality: {
      level: CriticalityLevel.Breaking
    },
    type: ChangeType.SchemaMutationTypeChanged,
    message: `Schema mutation root has changed from '${oldName}' to '${newName}'`
  };
}
function schemaSubscriptionTypeChanged(oldSchema, newSchema) {
  const oldName = (oldSchema.getSubscriptionType() || {}).name || "unknown";
  const newName = (newSchema.getSubscriptionType() || {}).name || "unknown";
  return {
    criticality: {
      level: CriticalityLevel.Breaking
    },
    type: ChangeType.SchemaSubscriptionTypeChanged,
    message: `Schema subscription root has changed from '${oldName}' to '${newName}'`
  };
}
function typeRemoved(type2) {
  return {
    criticality: {
      level: CriticalityLevel.Breaking
    },
    type: ChangeType.TypeRemoved,
    message: `Type '${type2.name}' was removed`,
    path: type2.name
  };
}
function typeAdded(type2) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.TypeAdded,
    message: `Type '${type2.name}' was added`,
    path: type2.name
  };
}
function typeKindChanged(oldType, newType) {
  return {
    criticality: {
      level: CriticalityLevel.Breaking,
      reason: `Changing the kind of a type is a breaking change because it can cause existing queries to error. For example, turning an object type to a scalar type would break queries that define a selection set for this type.`
    },
    type: ChangeType.TypeKindChanged,
    message: `'${oldType.name}' kind changed from '${getKind(oldType)}' to '${getKind(newType)}'`,
    path: oldType.name
  };
}
function typeDescriptionChanged(oldType, newType) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.TypeDescriptionChanged,
    message: `Description '${oldType.description}' on type '${oldType.name}' has changed to '${newType.description}'`,
    path: oldType.name
  };
}
function typeDescriptionRemoved(type2) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.TypeDescriptionRemoved,
    message: `Description '${type2.description}' was removed from object type '${type2.name}'`,
    path: type2.name
  };
}
function typeDescriptionAdded(type2) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.TypeDescriptionAdded,
    message: `Object type '${type2.name}' has description '${type2.description}'`,
    path: type2.name
  };
}
function directiveRemoved(directive) {
  return {
    criticality: {
      level: CriticalityLevel.Breaking
    },
    type: ChangeType.DirectiveRemoved,
    message: `Directive '${directive.name}' was removed`,
    path: `@${directive.name}`
  };
}
function directiveAdded(directive) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.DirectiveAdded,
    message: `Directive '${directive.name}' was added`,
    path: `@${directive.name}`
  };
}
function directiveDescriptionChanged(oldDirective, newDirective) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.DirectiveDescriptionChanged,
    message: `Directive '${oldDirective.name}' description changed from '${oldDirective.description}' to '${newDirective.description}'`,
    path: `@${oldDirective.name}`
  };
}
function directiveLocationAdded(directive, location) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.DirectiveLocationAdded,
    message: `Location '${location}' was added to directive '${directive.name}'`,
    path: `@${directive.name}`
  };
}
function directiveLocationRemoved(directive, location) {
  return {
    criticality: {
      level: CriticalityLevel.Breaking
    },
    type: ChangeType.DirectiveLocationRemoved,
    message: `Location '${location}' was removed from directive '${directive.name}'`,
    path: `@${directive.name}`
  };
}
function directiveArgumentAdded(directive, arg) {
  return {
    criticality: {
      level: isNonNullType(arg.type) ? CriticalityLevel.Breaking : CriticalityLevel.NonBreaking
    },
    type: ChangeType.DirectiveArgumentAdded,
    message: `Argument '${arg.name}' was added to directive '${directive.name}'`,
    path: `@${directive.name}`
  };
}
function directiveArgumentRemoved(directive, arg) {
  return {
    criticality: {
      level: CriticalityLevel.Breaking
    },
    type: ChangeType.DirectiveArgumentRemoved,
    message: `Argument '${arg.name}' was removed from directive '${directive.name}'`,
    path: `@${directive.name}.${arg.name}`
  };
}
function directiveArgumentDescriptionChanged(directive, oldArg, newArg) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.DirectiveArgumentDescriptionChanged,
    message: `Description for argument '${oldArg.name}' on directive '${directive.name}' changed from '${oldArg.description}' to '${newArg.description}'`,
    path: `@${directive.name}.${oldArg.name}`
  };
}
function directiveArgumentDefaultValueChanged(directive, oldArg, newArg) {
  return {
    criticality: {
      level: CriticalityLevel.Dangerous,
      reason: "Changing the default value for an argument may change the runtime behaviour of a field if it was never provided."
    },
    type: ChangeType.DirectiveArgumentDefaultValueChanged,
    message: typeof oldArg.defaultValue === "undefined" ? `Default value '${newArg.defaultValue}' was added to argument '${newArg.name}' on directive '${directive.name}'` : `Default value for argument '${oldArg.name}' on directive '${directive.name}' changed from '${oldArg.defaultValue}' to '${newArg.defaultValue}'`,
    path: `@${directive.name}.${oldArg.name}`
  };
}
function directiveArgumentTypeChanged(directive, oldArg, newArg) {
  return {
    criticality: safeChangeForInputValue(oldArg.type, newArg.type) ? {
      level: CriticalityLevel.NonBreaking,
      reason: "Changing an input field from non-null to null is considered non-breaking."
    } : {
      level: CriticalityLevel.Breaking
    },
    type: ChangeType.DirectiveArgumentTypeChanged,
    message: `Type for argument '${oldArg.name}' on directive '${directive.name}' changed from '${oldArg.type}' to '${newArg.type}'`,
    path: `@${directive.name}.${oldArg.name}`
  };
}
function enumValueRemoved(oldEnum, value) {
  return {
    criticality: {
      level: CriticalityLevel.Breaking,
      reason: `Removing an enum value will cause existing queries that use this enum value to error.`
    },
    type: ChangeType.EnumValueRemoved,
    message: `Enum value '${value.name}' ${isDeprecated(value) ? "(deprecated) " : ""}was removed from enum '${oldEnum.name}'`,
    path: [oldEnum.name, value.name].join(".")
  };
}
function enumValueAdded(newEnum, value) {
  return {
    criticality: {
      level: CriticalityLevel.Dangerous,
      reason: `Adding an enum value may break existing clients that were not programming defensively against an added case when querying an enum.`
    },
    type: ChangeType.EnumValueAdded,
    message: `Enum value '${value.name}' was added to enum '${newEnum.name}'`,
    path: [newEnum.name, value.name].join(".")
  };
}
function enumValueDescriptionChanged(newEnum, oldValue, newValue) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.EnumValueDescriptionChanged,
    message: typeof oldValue.description === "undefined" ? `Description '${newValue.description}' was added to enum value '${newEnum.name}.${newValue.name}'` : `Description for enum value '${newEnum.name}.${newValue.name}' changed from '${oldValue.description}' to '${newValue.description}'`,
    path: [newEnum.name, oldValue.name].join(".")
  };
}
function enumValueDeprecationReasonChanged(newEnum, oldValue, newValue) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.EnumValueDeprecationReasonChanged,
    message: `Enum value '${newEnum.name}.${newValue.name}' deprecation reason changed from '${oldValue.deprecationReason}' to '${newValue.deprecationReason}'`,
    path: [newEnum.name, oldValue.name].join(".")
  };
}
function enumValueDeprecationReasonAdded(newEnum, oldValue, newValue) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.EnumValueDeprecationReasonAdded,
    message: `Enum value '${newEnum.name}.${newValue.name}' was deprecated with reason '${newValue.deprecationReason}'`,
    path: [newEnum.name, oldValue.name].join(".")
  };
}
function enumValueDeprecationReasonRemoved(newEnum, oldValue, newValue) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.EnumValueDeprecationReasonRemoved,
    message: `Deprecation reason was removed from enum value '${newEnum.name}.${newValue.name}'`,
    path: [newEnum.name, oldValue.name].join(".")
  };
}
function changesInEnum(oldEnum, newEnum, addChange) {
  compareLists(oldEnum.getValues(), newEnum.getValues(), {
    onAdded(value) {
      addChange(enumValueAdded(newEnum, value));
    },
    onRemoved(value) {
      addChange(enumValueRemoved(oldEnum, value));
    },
    onMutual(value) {
      const oldValue = value.oldVersion;
      const newValue = value.newVersion;
      if (isNotEqual(oldValue.description, newValue.description)) {
        addChange(enumValueDescriptionChanged(newEnum, oldValue, newValue));
      }
      if (isNotEqual(oldValue.deprecationReason, newValue.deprecationReason)) {
        if (isVoid(oldValue.deprecationReason)) {
          addChange(enumValueDeprecationReasonAdded(newEnum, oldValue, newValue));
        } else if (isVoid(newValue.deprecationReason)) {
          addChange(enumValueDeprecationReasonRemoved(newEnum, oldValue, newValue));
        } else {
          addChange(enumValueDeprecationReasonChanged(newEnum, oldValue, newValue));
        }
      }
    }
  });
}
function unionMemberRemoved(union2, type2) {
  return {
    criticality: {
      level: CriticalityLevel.Breaking,
      reason: "Removing a union member from a union can cause existing queries that use this union member in a fragment spread to error."
    },
    type: ChangeType.UnionMemberRemoved,
    message: `Member '${type2.name}' was removed from Union type '${union2.name}'`,
    path: union2.name
  };
}
function unionMemberAdded(union2, type2) {
  return {
    criticality: {
      level: CriticalityLevel.Dangerous,
      reason: "Adding a possible type to Unions may break existing clients that were not programming defensively against a new possible type."
    },
    type: ChangeType.UnionMemberAdded,
    message: `Member '${type2.name}' was added to Union type '${union2.name}'`,
    path: union2.name
  };
}
function changesInUnion(oldUnion, newUnion, addChange) {
  const oldTypes = oldUnion.getTypes();
  const newTypes = newUnion.getTypes();
  compareLists(oldTypes, newTypes, {
    onAdded(t) {
      addChange(unionMemberAdded(newUnion, t));
    },
    onRemoved(t) {
      addChange(unionMemberRemoved(oldUnion, t));
    }
  });
}
function inputFieldRemoved(input, field) {
  return {
    criticality: {
      level: CriticalityLevel.Breaking,
      reason: "Removing an input field will cause existing queries that use this input field to error."
    },
    type: ChangeType.InputFieldRemoved,
    message: `Input field '${field.name}' was removed from input object type '${input.name}'`,
    path: [input.name, field.name].join(".")
  };
}
function inputFieldAdded(input, field) {
  return {
    criticality: isNonNullType(field.type) ? {
      level: CriticalityLevel.Breaking,
      reason: "Adding a required input field to an existing input object type is a breaking change because it will cause existing uses of this input object type to error."
    } : {
      level: CriticalityLevel.Dangerous
    },
    type: ChangeType.InputFieldAdded,
    message: `Input field '${field.name}' was added to input object type '${input.name}'`,
    path: [input.name, field.name].join(".")
  };
}
function inputFieldDescriptionAdded(type2, field) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.InputFieldDescriptionAdded,
    message: `Input field '${type2.name}.${field.name}' has description '${field.description}'`,
    path: [type2.name, field.name].join(".")
  };
}
function inputFieldDescriptionRemoved(type2, field) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.InputFieldDescriptionRemoved,
    message: `Description was removed from input field '${type2.name}.${field.name}'`,
    path: [type2.name, field.name].join(".")
  };
}
function inputFieldDescriptionChanged(input, oldField, newField) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.InputFieldDescriptionChanged,
    message: `Input field '${input.name}.${oldField.name}' description changed from '${oldField.description}' to '${newField.description}'`,
    path: [input.name, oldField.name].join(".")
  };
}
function inputFieldDefaultValueChanged(input, oldField, newField) {
  return {
    criticality: {
      level: CriticalityLevel.Dangerous,
      reason: "Changing the default value for an argument may change the runtime behaviour of a field if it was never provided."
    },
    type: ChangeType.InputFieldDefaultValueChanged,
    message: `Input field '${input.name}.${oldField.name}' default value changed from '${oldField.defaultValue}' to '${newField.defaultValue}'`,
    path: [input.name, oldField.name].join(".")
  };
}
function inputFieldTypeChanged(input, oldField, newField) {
  return {
    criticality: safeChangeForInputValue(oldField.type, newField.type) ? {
      level: CriticalityLevel.NonBreaking,
      reason: "Changing an input field from non-null to null is considered non-breaking."
    } : {
      level: CriticalityLevel.Breaking,
      reason: "Changing the type of an input field can cause existing queries that use this field to error."
    },
    type: ChangeType.InputFieldTypeChanged,
    message: `Input field '${input.name}.${oldField.name}' changed type from '${oldField.type.toString()}' to '${newField.type.toString()}'`,
    path: [input.name, oldField.name].join(".")
  };
}
function changesInInputObject(oldInput, newInput, addChange) {
  const oldFields = oldInput.getFields();
  const newFields = newInput.getFields();
  compareLists(Object.values(oldFields), Object.values(newFields), {
    onAdded(field) {
      addChange(inputFieldAdded(newInput, field));
    },
    onRemoved(field) {
      addChange(inputFieldRemoved(oldInput, field));
    },
    onMutual(field) {
      changesInInputField(oldInput, field.oldVersion, field.newVersion, addChange);
    }
  });
}
function changesInInputField(input, oldField, newField, addChange) {
  if (isNotEqual(oldField.description, newField.description)) {
    if (isVoid(oldField.description)) {
      addChange(inputFieldDescriptionAdded(input, newField));
    } else if (isVoid(newField.description)) {
      addChange(inputFieldDescriptionRemoved(input, oldField));
    } else {
      addChange(inputFieldDescriptionChanged(input, oldField, newField));
    }
  }
  if (isNotEqual(oldField.defaultValue, newField.defaultValue)) {
    if (Array.isArray(oldField.defaultValue) && Array.isArray(newField.defaultValue)) {
      if (diffArrays(oldField.defaultValue, newField.defaultValue).length > 0) {
        addChange(inputFieldDefaultValueChanged(input, oldField, newField));
      }
    } else if (JSON.stringify(oldField.defaultValue) !== JSON.stringify(newField.defaultValue)) {
      addChange(inputFieldDefaultValueChanged(input, oldField, newField));
    }
  }
  if (isNotEqual(oldField.type.toString(), newField.type.toString())) {
    addChange(inputFieldTypeChanged(input, oldField, newField));
  }
}
function objectTypeInterfaceAdded(iface, type2) {
  return {
    criticality: {
      level: CriticalityLevel.Dangerous,
      reason: "Adding an interface to an object type may break existing clients that were not programming defensively against a new possible type."
    },
    type: ChangeType.ObjectTypeInterfaceAdded,
    message: `'${type2.name}' object implements '${iface.name}' interface`,
    path: type2.name
  };
}
function objectTypeInterfaceRemoved(iface, type2) {
  return {
    criticality: {
      level: CriticalityLevel.Breaking,
      reason: "Removing an interface from an object type can cause existing queries that use this in a fragment spread to error."
    },
    type: ChangeType.ObjectTypeInterfaceRemoved,
    message: `'${type2.name}' object type no longer implements '${iface.name}' interface`,
    path: type2.name
  };
}
function fieldRemoved(type2, field) {
  const entity = isInterfaceType(type2) ? "interface" : "object type";
  return {
    criticality: {
      level: CriticalityLevel.Breaking,
      reason: field.deprecationReason ? `Removing a deprecated field is a breaking change. Before removing it, you may want to look at the field's usage to see the impact of removing the field.` : `Removing a field is a breaking change. It is preferable to deprecate the field before removing it.`
    },
    type: ChangeType.FieldRemoved,
    message: `Field '${field.name}' ${isDeprecated(field) ? "(deprecated) " : ""}was removed from ${entity} '${type2.name}'`,
    path: [type2.name, field.name].join(".")
  };
}
function fieldAdded(type2, field) {
  const entity = isInterfaceType(type2) ? "interface" : "object type";
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.FieldAdded,
    message: `Field '${field.name}' was added to ${entity} '${type2.name}'`,
    path: [type2.name, field.name].join(".")
  };
}
function fieldDescriptionChanged(type2, oldField, newField) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.FieldDescriptionChanged,
    message: `Field '${type2.name}.${oldField.name}' description changed from '${oldField.description}' to '${newField.description}'`,
    path: [type2.name, oldField.name].join(".")
  };
}
function fieldDescriptionAdded(type2, field) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.FieldDescriptionAdded,
    message: `Field '${type2.name}.${field.name}' has description '${field.description}'`,
    path: [type2.name, field.name].join(".")
  };
}
function fieldDescriptionRemoved(type2, field) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.FieldDescriptionRemoved,
    message: `Description was removed from field '${type2.name}.${field.name}'`,
    path: [type2.name, field.name].join(".")
  };
}
function fieldDeprecationAdded(type2, field) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.FieldDeprecationAdded,
    message: `Field '${type2.name}.${field.name}' is deprecated`,
    path: [type2.name, field.name].join(".")
  };
}
function fieldDeprecationRemoved(type2, field) {
  return {
    criticality: {
      level: CriticalityLevel.Dangerous
    },
    type: ChangeType.FieldDeprecationRemoved,
    message: `Field '${type2.name}.${field.name}' is no longer deprecated`,
    path: [type2.name, field.name].join(".")
  };
}
function fieldDeprecationReasonChanged(type2, oldField, newField) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.FieldDeprecationReasonChanged,
    message: `Deprecation reason on field '${type2.name}.${newField.name}' has changed from '${oldField.deprecationReason}' to '${newField.deprecationReason}'`,
    path: [type2.name, oldField.name].join(".")
  };
}
function fieldDeprecationReasonAdded(type2, field) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.FieldDeprecationReasonAdded,
    message: `Field '${type2.name}.${field.name}' has deprecation reason '${field.deprecationReason}'`,
    path: [type2.name, field.name].join(".")
  };
}
function fieldDeprecationReasonRemoved(type2, field) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.FieldDeprecationReasonRemoved,
    message: `Deprecation reason was removed from field '${type2.name}.${field.name}'`,
    path: [type2.name, field.name].join(".")
  };
}
function fieldTypeChanged(type2, oldField, newField) {
  return {
    criticality: {
      level: safeChangeForField(oldField.type, newField.type) ? CriticalityLevel.NonBreaking : CriticalityLevel.Breaking
    },
    type: ChangeType.FieldTypeChanged,
    message: `Field '${type2}.${oldField.name}' changed type from '${oldField.type}' to '${newField.type}'`,
    path: [type2.name, oldField.name].join(".")
  };
}
function fieldArgumentAdded(type2, field, arg) {
  return {
    criticality: isNonNullType(arg.type) ? {
      level: CriticalityLevel.Breaking,
      reason: `Adding a required argument to an existing field is a breaking change because it will cause existing uses of this field to error.`
    } : {
      level: CriticalityLevel.Dangerous,
      reason: `Adding a new argument to an existing field may involve a change in resolve function logic that potentially may cause some side effects.`
    },
    type: ChangeType.FieldArgumentAdded,
    message: `Argument '${arg.name}: ${arg.type}' added to field '${type2.name}.${field.name}'`,
    path: [type2.name, field.name, arg.name].join(".")
  };
}
function fieldArgumentRemoved(type2, field, arg) {
  return {
    criticality: {
      level: CriticalityLevel.Breaking,
      reason: `Removing a field argument is a breaking change because it will cause existing queries that use this argument to error.`
    },
    type: ChangeType.FieldArgumentRemoved,
    message: `Argument '${arg.name}: ${arg.type}' was removed from field '${type2.name}.${field.name}'`,
    path: [type2.name, field.name, arg.name].join(".")
  };
}
function safeString(obj) {
  return (0, import_object_inspect.default)(obj).replace(/\[Object\: null prototype\] /g, "");
}
function fieldArgumentDescriptionChanged(type2, field, oldArg, newArg) {
  return {
    criticality: {
      level: CriticalityLevel.NonBreaking
    },
    type: ChangeType.FieldArgumentDescriptionChanged,
    message: `Description for argument '${newArg.name}' on field '${type2.name}.${field.name}' changed from '${oldArg.description}' to '${newArg.description}'`,
    path: [type2.name, field.name, oldArg.name].join(".")
  };
}
function fieldArgumentDefaultChanged(type2, field, oldArg, newArg) {
  return {
    criticality: {
      level: CriticalityLevel.Dangerous,
      reason: "Changing the default value for an argument may change the runtime behaviour of a field if it was never provided."
    },
    type: ChangeType.FieldArgumentDefaultChanged,
    message: typeof oldArg.defaultValue === "undefined" ? `Default value '${safeString(newArg.defaultValue)}' was added to argument '${newArg.name}' on field '${type2.name}.${field.name}'` : `Default value for argument '${newArg.name}' on field '${type2.name}.${field.name}' changed from '${safeString(oldArg.defaultValue)}' to '${safeString(newArg.defaultValue)}'`,
    path: [type2.name, field.name, oldArg.name].join(".")
  };
}
function fieldArgumentTypeChanged(type2, field, oldArg, newArg) {
  return {
    criticality: safeChangeForInputValue(oldArg.type, newArg.type) ? {
      level: CriticalityLevel.NonBreaking,
      reason: `Changing an input field from non-null to null is considered non-breaking.`
    } : {
      level: CriticalityLevel.Breaking,
      reason: `Changing the type of a field's argument can cause existing queries that use this argument to error.`
    },
    type: ChangeType.FieldArgumentTypeChanged,
    message: `Type for argument '${newArg.name}' on field '${type2.name}.${field.name}' changed from '${oldArg.type}' to '${newArg.type}'`,
    path: [type2.name, field.name, oldArg.name].join(".")
  };
}
function changesInArgument(type2, field, oldArg, newArg, addChange) {
  if (isNotEqual(oldArg.description, newArg.description)) {
    addChange(fieldArgumentDescriptionChanged(type2, field, oldArg, newArg));
  }
  if (isNotEqual(oldArg.defaultValue, newArg.defaultValue)) {
    if (Array.isArray(oldArg.defaultValue) && Array.isArray(newArg.defaultValue)) {
      const diff2 = diffArrays(oldArg.defaultValue, newArg.defaultValue);
      if (diff2.length > 0) {
        addChange(fieldArgumentDefaultChanged(type2, field, oldArg, newArg));
      }
    } else if (JSON.stringify(oldArg.defaultValue) !== JSON.stringify(newArg.defaultValue)) {
      addChange(fieldArgumentDefaultChanged(type2, field, oldArg, newArg));
    }
  }
  if (isNotEqual(oldArg.type.toString(), newArg.type.toString())) {
    addChange(fieldArgumentTypeChanged(type2, field, oldArg, newArg));
  }
}
function changesInField(type2, oldField, newField, addChange) {
  if (isNotEqual(oldField.description, newField.description)) {
    if (isVoid(oldField.description)) {
      addChange(fieldDescriptionAdded(type2, newField));
    } else if (isVoid(newField.description)) {
      addChange(fieldDescriptionRemoved(type2, oldField));
    } else {
      addChange(fieldDescriptionChanged(type2, oldField, newField));
    }
  }
  if (isNotEqual(isDeprecated(oldField), isDeprecated(newField))) {
    if (isDeprecated(newField)) {
      addChange(fieldDeprecationAdded(type2, newField));
    } else {
      addChange(fieldDeprecationRemoved(type2, oldField));
    }
  }
  if (isNotEqual(oldField.deprecationReason, newField.deprecationReason)) {
    if (isVoid(oldField.deprecationReason)) {
      addChange(fieldDeprecationReasonAdded(type2, newField));
    } else if (isVoid(newField.deprecationReason)) {
      addChange(fieldDeprecationReasonRemoved(type2, oldField));
    } else {
      addChange(fieldDeprecationReasonChanged(type2, oldField, newField));
    }
  }
  if (isNotEqual(oldField.type.toString(), newField.type.toString())) {
    addChange(fieldTypeChanged(type2, oldField, newField));
  }
  compareLists(oldField.args, newField.args, {
    onAdded(arg) {
      addChange(fieldArgumentAdded(type2, newField, arg));
    },
    onRemoved(arg) {
      addChange(fieldArgumentRemoved(type2, oldField, arg));
    },
    onMutual(arg) {
      changesInArgument(type2, oldField, arg.oldVersion, arg.newVersion, addChange);
    }
  });
}
function changesInObject(oldType, newType, addChange) {
  const oldInterfaces = oldType.getInterfaces();
  const newInterfaces = newType.getInterfaces();
  const oldFields = oldType.getFields();
  const newFields = newType.getFields();
  compareLists(oldInterfaces, newInterfaces, {
    onAdded(i) {
      addChange(objectTypeInterfaceAdded(i, newType));
    },
    onRemoved(i) {
      addChange(objectTypeInterfaceRemoved(i, oldType));
    }
  });
  compareLists(Object.values(oldFields), Object.values(newFields), {
    onAdded(f) {
      addChange(fieldAdded(newType, f));
    },
    onRemoved(f) {
      addChange(fieldRemoved(oldType, f));
    },
    onMutual(f) {
      changesInField(oldType, f.oldVersion, f.newVersion, addChange);
    }
  });
}
function changesInInterface(oldInterface, newInterface, addChange) {
  compareLists(Object.values(oldInterface.getFields()), Object.values(newInterface.getFields()), {
    onAdded(field) {
      addChange(fieldAdded(newInterface, field));
    },
    onRemoved(field) {
      addChange(fieldRemoved(oldInterface, field));
    },
    onMutual(field) {
      changesInField(oldInterface, field.oldVersion, field.newVersion, addChange);
    }
  });
}
function changesInDirective(oldDirective, newDirective, addChange) {
  if (isNotEqual(oldDirective.description, newDirective.description)) {
    addChange(directiveDescriptionChanged(oldDirective, newDirective));
  }
  const locations = {
    added: diffArrays(newDirective.locations, oldDirective.locations),
    removed: diffArrays(oldDirective.locations, newDirective.locations)
  };
  locations.added.forEach((location) => addChange(directiveLocationAdded(newDirective, location)));
  locations.removed.forEach((location) => addChange(directiveLocationRemoved(oldDirective, location)));
  compareLists(oldDirective.args, newDirective.args, {
    onAdded(arg) {
      addChange(directiveArgumentAdded(newDirective, arg));
    },
    onRemoved(arg) {
      addChange(directiveArgumentRemoved(oldDirective, arg));
    },
    onMutual(arg) {
      changesInDirectiveArgument(oldDirective, arg.oldVersion, arg.newVersion, addChange);
    }
  });
}
function changesInDirectiveArgument(directive, oldArg, newArg, addChange) {
  if (isNotEqual(oldArg.description, newArg.description)) {
    addChange(directiveArgumentDescriptionChanged(directive, oldArg, newArg));
  }
  if (isNotEqual(oldArg.defaultValue, newArg.defaultValue)) {
    addChange(directiveArgumentDefaultValueChanged(directive, oldArg, newArg));
  }
  if (isNotEqual(oldArg.type.toString(), newArg.type.toString())) {
    addChange(directiveArgumentTypeChanged(directive, oldArg, newArg));
  }
}
function diffSchema(oldSchema, newSchema) {
  const changes = [];
  function addChange(change) {
    changes.push(change);
  }
  changesInSchema(oldSchema, newSchema, addChange);
  compareLists(Object.values(oldSchema.getTypeMap()).filter((t) => !isPrimitive(t)), Object.values(newSchema.getTypeMap()).filter((t) => !isPrimitive(t)), {
    onAdded(type2) {
      addChange(typeAdded(type2));
    },
    onRemoved(type2) {
      addChange(typeRemoved(type2));
    },
    onMutual(type2) {
      changesInType(type2.oldVersion, type2.newVersion, addChange);
    }
  });
  compareLists(oldSchema.getDirectives(), newSchema.getDirectives(), {
    onAdded(directive) {
      addChange(directiveAdded(directive));
    },
    onRemoved(directive) {
      addChange(directiveRemoved(directive));
    },
    onMutual(directive) {
      changesInDirective(directive.oldVersion, directive.newVersion, addChange);
    }
  });
  return changes;
}
function changesInSchema(oldSchema, newSchema, addChange) {
  var _a2, _b, _c, _d, _e, _f;
  const defaultNames = {
    query: "Query",
    mutation: "Mutation",
    subscription: "Subscription"
  };
  const oldRoot = {
    query: (_a2 = (oldSchema.getQueryType() || {}).name) !== null && _a2 !== void 0 ? _a2 : defaultNames.query,
    mutation: (_b = (oldSchema.getMutationType() || {}).name) !== null && _b !== void 0 ? _b : defaultNames.mutation,
    subscription: (_c = (oldSchema.getSubscriptionType() || {}).name) !== null && _c !== void 0 ? _c : defaultNames.subscription
  };
  const newRoot = {
    query: (_d = (newSchema.getQueryType() || {}).name) !== null && _d !== void 0 ? _d : defaultNames.query,
    mutation: (_e = (newSchema.getMutationType() || {}).name) !== null && _e !== void 0 ? _e : defaultNames.mutation,
    subscription: (_f = (newSchema.getSubscriptionType() || {}).name) !== null && _f !== void 0 ? _f : defaultNames.subscription
  };
  if (isNotEqual(oldRoot.query, newRoot.query)) {
    addChange(schemaQueryTypeChanged(oldSchema, newSchema));
  }
  if (isNotEqual(oldRoot.mutation, newRoot.mutation)) {
    addChange(schemaMutationTypeChanged(oldSchema, newSchema));
  }
  if (isNotEqual(oldRoot.subscription, newRoot.subscription)) {
    addChange(schemaSubscriptionTypeChanged(oldSchema, newSchema));
  }
}
function changesInType(oldType, newType, addChange) {
  if (isEnumType(oldType) && isEnumType(newType)) {
    changesInEnum(oldType, newType, addChange);
  } else if (isUnionType(oldType) && isUnionType(newType)) {
    changesInUnion(oldType, newType, addChange);
  } else if (isInputObjectType(oldType) && isInputObjectType(newType)) {
    changesInInputObject(oldType, newType, addChange);
  } else if (isObjectType(oldType) && isObjectType(newType)) {
    changesInObject(oldType, newType, addChange);
  } else if (isInterfaceType(oldType) && isInterfaceType(newType)) {
    changesInInterface(oldType, newType, addChange);
  } else if (isScalarType(oldType) && isScalarType(newType))
    ;
  else {
    addChange(typeKindChanged(oldType, newType));
  }
  if (isNotEqual(oldType.description, newType.description)) {
    if (isVoid(oldType.description)) {
      addChange(typeDescriptionAdded(newType));
    } else if (isVoid(newType.description)) {
      addChange(typeDescriptionRemoved(oldType));
    } else {
      addChange(typeDescriptionChanged(oldType, newType));
    }
  }
}
var descriptionChangeTypes = [
  ChangeType.FieldArgumentDescriptionChanged,
  ChangeType.DirectiveDescriptionChanged,
  ChangeType.DirectiveArgumentDescriptionChanged,
  ChangeType.EnumValueDescriptionChanged,
  ChangeType.FieldDescriptionChanged,
  ChangeType.FieldDescriptionAdded,
  ChangeType.FieldDescriptionRemoved,
  ChangeType.InputFieldDescriptionAdded,
  ChangeType.InputFieldDescriptionRemoved,
  ChangeType.InputFieldDescriptionChanged,
  ChangeType.TypeDescriptionChanged
];
function diff(oldSchema, newSchema, rules = [], config2) {
  const changes = diffSchema(oldSchema, newSchema);
  return rules.reduce((prev, rule) => __awaiter2(this, void 0, void 0, function* () {
    const prevChanges = yield prev;
    return rule({
      changes: prevChanges,
      oldSchema,
      newSchema,
      config: config2
    });
  }), Promise.resolve(changes));
}

// node_modules/@graphql-mesh/store/index.mjs
init_graphql();
var ReadonlyStoreError = class extends Error {
};
var ValidationError = class extends Error {
};
var FsStoreStorageAdapter = class {
  constructor(options) {
    this.options = options;
  }
  getAbsolutePath(jsFileName) {
    return import_path_browserify.default.isAbsolute(jsFileName) ? jsFileName : import_path_browserify.default.join(this.options.cwd, jsFileName);
  }
  async read(key, options) {
    let absoluteModulePath = this.getAbsolutePath(key);
    if (this.options.fileType !== "ts") {
      absoluteModulePath += "." + this.options.fileType;
    }
    try {
      const importedData = await this.options.importFn(absoluteModulePath).then((m) => m.default || m);
      if (this.options.fileType === "json") {
        return await options.fromJSON(importedData, key);
      }
      return importedData;
    } catch (e) {
      if (e.message.startsWith("Cannot find module")) {
        return void 0;
      }
      throw e;
    }
  }
  async write(key, data, options) {
    const asString = this.options.fileType === "json" ? JSON.stringify(await options.toJSON(data, key)) : `// @ts-nocheck
` + await options.codify(data, key);
    const modulePath = this.getAbsolutePath(key);
    const filePath = modulePath + "." + this.options.fileType;
    await writeFile(filePath, asString);
    await this.options.importFn(this.options.fileType !== "ts" ? filePath : modulePath);
  }
  async delete(key) {
    const filePath = this.getAbsolutePath(key) + "." + this.options.fileType;
    return fs.promises.unlink(filePath);
  }
};
var PredefinedProxyOptionsName;
(function(PredefinedProxyOptionsName2) {
  PredefinedProxyOptionsName2["JsonWithoutValidation"] = "JsonWithoutValidation";
  PredefinedProxyOptionsName2["StringWithoutValidation"] = "StringWithoutValidation";
  PredefinedProxyOptionsName2["GraphQLSchemaWithDiffing"] = "GraphQLSchemaWithDiffing";
})(PredefinedProxyOptionsName || (PredefinedProxyOptionsName = {}));
var PredefinedProxyOptions = {
  JsonWithoutValidation: {
    codify: (v) => `export default ${JSON.stringify(v, null, 2)}`,
    fromJSON: (v) => v,
    toJSON: (v) => v,
    validate: () => null
  },
  StringWithoutValidation: {
    codify: (v) => `export default ${JSON.stringify(v, null, 2)}`,
    fromJSON: (v) => v,
    toJSON: (v) => v,
    validate: () => null
  },
  GraphQLSchemaWithDiffing: {
    codify: (schema2) => `
import { buildASTSchema } from 'graphql';

const schemaAST = ${JSON.stringify(getDocumentNodeFromSchema(schema2), null, 2)};

export default buildASTSchema(schemaAST, {
  assumeValid: true,
  assumeValidSDL: true
});
    `.trim(),
    fromJSON: (schemaAST4) => buildASTSchema(schemaAST4, { assumeValid: true, assumeValidSDL: true }),
    toJSON: (schema2) => getDocumentNodeFromSchema(schema2),
    validate: async (oldSchema, newSchema) => {
      const changes = await diff(oldSchema, newSchema);
      const errors = [];
      for (const change of changes) {
        if (change.criticality.level === CriticalityLevel.Breaking || change.criticality.level === CriticalityLevel.Dangerous) {
          errors.push(change.message);
        }
      }
      if (errors.length) {
        throw new AggregateErrorImpl(errors);
      }
    }
  }
};
var MeshStore = class {
  constructor(identifier, storage, flags) {
    this.identifier = identifier;
    this.storage = storage;
    this.flags = flags;
  }
  child(childIdentifier, flags) {
    return new MeshStore(import_path_browserify.default.join(this.identifier, childIdentifier), this.storage, {
      ...this.flags,
      ...flags
    });
  }
  proxy(id, options) {
    const path$1 = import_path_browserify.default.join(this.identifier, id);
    let value;
    let isValueCached = false;
    const ensureValueCached = async () => {
      if (!isValueCached) {
        value = await this.storage.read(path$1, options);
        isValueCached = true;
      }
    };
    const doValidation = async (newValue) => {
      await ensureValueCached();
      if (value && newValue) {
        try {
          await options.validate(value, newValue, id);
        } catch (e) {
          throw new ValidationError(`Validation failed for "${id}" under "${this.identifier}": ${e.message}`);
        }
      }
    };
    const proxy = {
      getWithSet: async (setterFn) => {
        await ensureValueCached();
        if (this.flags.validate || !value) {
          const newValue = await setterFn();
          if (this.flags.validate && this.flags.readonly) {
            await doValidation(newValue);
          }
          if (!this.flags.readonly) {
            await proxy.set(newValue);
          }
        }
        return value;
      },
      get: async () => {
        await ensureValueCached();
        return value;
      },
      set: async (newValue) => {
        if (this.flags.readonly) {
          throw new ReadonlyStoreError(`Unable to set value for "${id}" under "${this.identifier}" because the store is in read-only mode.`);
        }
        if (this.flags.validate) {
          await doValidation(newValue);
        }
        value = newValue;
        isValueCached = true;
        await this.storage.write(path$1, value, options);
      },
      delete: () => this.storage.delete(path$1)
    };
    return proxy;
  }
};

// node_modules/@graphql-mesh/cache-localforage/index.mjs
init_virtual_process_polyfill();
init_buffer();
var import_localforage = __toESM(require_localforage(), 1);
function nextTick2() {
  return new Promise((resolve2) => setTimeout(resolve2));
}
function createInMemoryLRUDriver(ttl) {
  let lru4;
  return {
    _driver: "INMEMORY_LRU",
    _initStorage(options) {
      lru4 = createLruCache(options.size, ttl);
    },
    async getItem(key, callback) {
      try {
        await nextTick2();
        const value = lru4.get(key);
        if (callback) {
          callback(null, value);
        }
        return value;
      } catch (err) {
        if (callback) {
          callback(err);
        }
        throw err;
      }
    },
    async setItem(key, value, callback) {
      try {
        await nextTick2();
        lru4.set(key, value);
        if (callback) {
          callback(null, value);
        }
        return value;
      } catch (err) {
        if (callback) {
          callback(err);
        }
        throw err;
      }
    },
    async removeItem(key, callback) {
      try {
        await nextTick2();
        lru4.delete(key);
        if (callback) {
          callback(null);
        }
      } catch (err) {
        callback(err);
        throw err;
      }
    },
    async clear(callback) {
      try {
        await nextTick2();
        lru4.clear();
        if (callback) {
          callback(null);
        }
      } catch (err) {
        if (callback) {
          callback(err);
        }
        throw err;
      }
    },
    async length(callback) {
      try {
        await nextTick2();
        const value = lru4.size;
        if (callback) {
          callback(null, value);
        }
        return value;
      } catch (err) {
        if (callback) {
          callback(err);
        }
        throw err;
      }
    },
    async key(n, callback) {
      try {
        await nextTick2();
        const value = lru4.keys()[n];
        if (callback) {
          callback(null, value);
        }
        return value;
      } catch (err) {
        if (callback) {
          callback(err);
        }
        throw err;
      }
    },
    async keys(callback) {
      try {
        await nextTick2();
        const value = lru4.keys();
        if (callback) {
          callback(null, value);
        }
        return value;
      } catch (err) {
        if (callback) {
          callback(err);
        }
        throw err;
      }
    },
    async iterate(iteratee, callback) {
      try {
        await nextTick2();
        lru4.keys().forEach((key, i) => {
          iteratee(lru4.get(key), key, i);
        });
        if (callback) {
          callback(null);
        }
      } catch (err) {
        if (callback) {
          callback(err);
        }
        throw err;
      }
    }
  };
}
import_localforage.default.defineDriver(createInMemoryLRUDriver()).catch((err) => console.error("Failed at defining InMemoryLRU driver", err));
var LocalforageCache = class {
  constructor(config2) {
    const driverNames = (config2 === null || config2 === void 0 ? void 0 : config2.driver) || ["INDEXEDDB", "WEBSQL", "LOCALSTORAGE", "INMEMORY_LRU"];
    this.localforage = import_localforage.default.createInstance({
      name: (config2 === null || config2 === void 0 ? void 0 : config2.name) || "graphql-mesh-cache",
      storeName: (config2 === null || config2 === void 0 ? void 0 : config2.storeName) || "graphql-mesh-cache-store",
      driver: driverNames.map((driverName) => {
        var _a2;
        return (_a2 = import_localforage.default[driverName]) !== null && _a2 !== void 0 ? _a2 : driverName;
      })
    });
  }
  async get(key) {
    const expiresAt = await this.localforage.getItem(`${key}.expiresAt`);
    if (expiresAt && Date.now() > expiresAt) {
      await this.localforage.removeItem(key);
    }
    return this.localforage.getItem(key.toString());
  }
  async set(key, value, options) {
    const jobs = [this.localforage.setItem(key, value)];
    if (options === null || options === void 0 ? void 0 : options.ttl) {
      jobs.push(this.localforage.setItem(`${key}.expiresAt`, Date.now() + options.ttl * 1e3));
    }
    await Promise.all(jobs);
  }
  delete(key) {
    return this.localforage.removeItem(key);
  }
};
var cache_localforage_default = LocalforageCache;

// node_modules/@graphql-mesh/graphql/index.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/@graphql-tools/url-loader/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();

// node_modules/graphql-ws/lib/client.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/graphql-ws/lib/common.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/graphql-ws/lib/utils.mjs
init_virtual_process_polyfill();
init_buffer();
function extendedTypeof(val) {
  if (val === null) {
    return "null";
  }
  if (Array.isArray(val)) {
    return "array";
  }
  return typeof val;
}
function isObject3(val) {
  return extendedTypeof(val) === "object";
}
function areGraphQLErrors(obj) {
  return Array.isArray(obj) && obj.length > 0 && obj.every((ob) => "message" in ob);
}
function limitCloseReason(reason, whenTooLong) {
  return reason.length < 124 ? reason : whenTooLong;
}

// node_modules/graphql-ws/lib/common.mjs
var GRAPHQL_TRANSPORT_WS_PROTOCOL = "graphql-transport-ws";
var CloseCode;
(function(CloseCode2) {
  CloseCode2[CloseCode2["InternalServerError"] = 4500] = "InternalServerError";
  CloseCode2[CloseCode2["InternalClientError"] = 4005] = "InternalClientError";
  CloseCode2[CloseCode2["BadRequest"] = 4400] = "BadRequest";
  CloseCode2[CloseCode2["BadResponse"] = 4004] = "BadResponse";
  CloseCode2[CloseCode2["Unauthorized"] = 4401] = "Unauthorized";
  CloseCode2[CloseCode2["Forbidden"] = 4403] = "Forbidden";
  CloseCode2[CloseCode2["SubprotocolNotAcceptable"] = 4406] = "SubprotocolNotAcceptable";
  CloseCode2[CloseCode2["ConnectionInitialisationTimeout"] = 4408] = "ConnectionInitialisationTimeout";
  CloseCode2[CloseCode2["ConnectionAcknowledgementTimeout"] = 4504] = "ConnectionAcknowledgementTimeout";
  CloseCode2[CloseCode2["SubscriberAlreadyExists"] = 4409] = "SubscriberAlreadyExists";
  CloseCode2[CloseCode2["TooManyInitialisationRequests"] = 4429] = "TooManyInitialisationRequests";
})(CloseCode || (CloseCode = {}));
var MessageType;
(function(MessageType2) {
  MessageType2["ConnectionInit"] = "connection_init";
  MessageType2["ConnectionAck"] = "connection_ack";
  MessageType2["Ping"] = "ping";
  MessageType2["Pong"] = "pong";
  MessageType2["Subscribe"] = "subscribe";
  MessageType2["Next"] = "next";
  MessageType2["Error"] = "error";
  MessageType2["Complete"] = "complete";
})(MessageType || (MessageType = {}));
function validateMessage(val) {
  if (!isObject3(val)) {
    throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);
  }
  if (!val.type) {
    throw new Error(`Message is missing the 'type' property`);
  }
  if (typeof val.type !== "string") {
    throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);
  }
  switch (val.type) {
    case MessageType.ConnectionInit:
    case MessageType.ConnectionAck:
    case MessageType.Ping:
    case MessageType.Pong: {
      if ("payload" in val && !isObject3(val.payload)) {
        throw new Error(`"${val.type}" message expects the 'payload' property to be an object or missing, but got "${val.payload}"`);
      }
      break;
    }
    case MessageType.Subscribe: {
      if (typeof val.id !== "string") {
        throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
      }
      if (!val.id) {
        throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
      }
      if (!isObject3(val.payload)) {
        throw new Error(`"${val.type}" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);
      }
      if (typeof val.payload.query !== "string") {
        throw new Error(`"${val.type}" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);
      }
      if (val.payload.variables != null && !isObject3(val.payload.variables)) {
        throw new Error(`"${val.type}" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);
      }
      if (val.payload.operationName != null && extendedTypeof(val.payload.operationName) !== "string") {
        throw new Error(`"${val.type}" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);
      }
      if (val.payload.extensions != null && !isObject3(val.payload.extensions)) {
        throw new Error(`"${val.type}" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);
      }
      break;
    }
    case MessageType.Next: {
      if (typeof val.id !== "string") {
        throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
      }
      if (!val.id) {
        throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
      }
      if (!isObject3(val.payload)) {
        throw new Error(`"${val.type}" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);
      }
      break;
    }
    case MessageType.Error: {
      if (typeof val.id !== "string") {
        throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
      }
      if (!val.id) {
        throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
      }
      if (!areGraphQLErrors(val.payload)) {
        throw new Error(`"${val.type}" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);
      }
      break;
    }
    case MessageType.Complete: {
      if (typeof val.id !== "string") {
        throw new Error(`"${val.type}" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);
      }
      if (!val.id) {
        throw new Error(`"${val.type}" message requires a non-empty 'id' property`);
      }
      break;
    }
    default:
      throw new Error(`Invalid message 'type' property "${val.type}"`);
  }
  return val;
}
function parseMessage(data, reviver) {
  try {
    return validateMessage(data);
  } catch (_a2) {
    if (typeof data !== "string") {
      throw new Error("Only strings are parsable messages");
    }
    const message = JSON.parse(data, reviver);
    return validateMessage(message);
  }
}
function stringifyMessage(msg, replacer) {
  validateMessage(msg);
  return JSON.stringify(msg, replacer);
}

// node_modules/graphql-ws/lib/client.mjs
function createClient(options) {
  const {
    url,
    connectionParams,
    lazy = true,
    onNonLazyError = console.error,
    lazyCloseTimeout = 0,
    keepAlive = 0,
    disablePong,
    connectionAckWaitTimeout = 0,
    retryAttempts = 5,
    retryWait = async function randomisedExponentialBackoff(retries2) {
      let retryDelay = 1e3;
      for (let i = 0; i < retries2; i++) {
        retryDelay *= 2;
      }
      await new Promise((resolve2) => setTimeout(resolve2, retryDelay + Math.floor(Math.random() * (3e3 - 300) + 300)));
    },
    shouldRetry = isLikeCloseEvent,
    isFatalConnectionProblem,
    on: on2,
    webSocketImpl,
    generateID = function generateUUID() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
        const r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    },
    jsonMessageReplacer: replacer,
    jsonMessageReviver: reviver
  } = options;
  let ws;
  if (webSocketImpl) {
    if (!isWebSocket(webSocketImpl)) {
      throw new Error("Invalid WebSocket implementation provided");
    }
    ws = webSocketImpl;
  } else if (typeof WebSocket !== "undefined") {
    ws = WebSocket;
  } else if (typeof globalThis !== "undefined") {
    ws = globalThis.WebSocket || globalThis.MozWebSocket;
  } else if (typeof window !== "undefined") {
    ws = window.WebSocket || window.MozWebSocket;
  }
  if (!ws)
    throw new Error("WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`");
  const WebSocketImpl = ws;
  const emitter = (() => {
    const message = (() => {
      const listeners3 = {};
      return {
        on(id, listener) {
          listeners3[id] = listener;
          return () => {
            delete listeners3[id];
          };
        },
        emit(message2) {
          var _a2;
          if ("id" in message2)
            (_a2 = listeners3[message2.id]) === null || _a2 === void 0 ? void 0 : _a2.call(listeners3, message2);
        }
      };
    })();
    const listeners2 = {
      connecting: (on2 === null || on2 === void 0 ? void 0 : on2.connecting) ? [on2.connecting] : [],
      opened: (on2 === null || on2 === void 0 ? void 0 : on2.opened) ? [on2.opened] : [],
      connected: (on2 === null || on2 === void 0 ? void 0 : on2.connected) ? [on2.connected] : [],
      ping: (on2 === null || on2 === void 0 ? void 0 : on2.ping) ? [on2.ping] : [],
      pong: (on2 === null || on2 === void 0 ? void 0 : on2.pong) ? [on2.pong] : [],
      message: (on2 === null || on2 === void 0 ? void 0 : on2.message) ? [message.emit, on2.message] : [message.emit],
      closed: (on2 === null || on2 === void 0 ? void 0 : on2.closed) ? [on2.closed] : [],
      error: (on2 === null || on2 === void 0 ? void 0 : on2.error) ? [on2.error] : []
    };
    return {
      onMessage: message.on,
      on(event, listener) {
        const l = listeners2[event];
        l.push(listener);
        return () => {
          l.splice(l.indexOf(listener), 1);
        };
      },
      emit(event, ...args) {
        for (const listener of [...listeners2[event]]) {
          listener(...args);
        }
      }
    };
  })();
  function errorOrClosed(cb) {
    const listening = [
      emitter.on("error", (err) => {
        listening.forEach((unlisten) => unlisten());
        cb(err);
      }),
      emitter.on("closed", (event) => {
        listening.forEach((unlisten) => unlisten());
        cb(event);
      })
    ];
  }
  let connecting, locks = 0, retrying = false, retries = 0, disposed = false;
  async function connect() {
    const [socket, throwOnClose] = await (connecting !== null && connecting !== void 0 ? connecting : connecting = new Promise((connected, denied) => (async () => {
      if (retrying) {
        await retryWait(retries);
        if (!locks) {
          connecting = void 0;
          return denied({ code: 1e3, reason: "All Subscriptions Gone" });
        }
        retries++;
      }
      emitter.emit("connecting");
      const socket2 = new WebSocketImpl(typeof url === "function" ? await url() : url, GRAPHQL_TRANSPORT_WS_PROTOCOL);
      let connectionAckTimeout, queuedPing;
      function enqueuePing() {
        if (isFinite(keepAlive) && keepAlive > 0) {
          clearTimeout(queuedPing);
          queuedPing = setTimeout(() => {
            if (socket2.readyState === WebSocketImpl.OPEN) {
              socket2.send(stringifyMessage({ type: MessageType.Ping }));
              emitter.emit("ping", false, void 0);
            }
          }, keepAlive);
        }
      }
      errorOrClosed((errOrEvent) => {
        connecting = void 0;
        clearTimeout(connectionAckTimeout);
        clearTimeout(queuedPing);
        denied(errOrEvent);
        if (isLikeCloseEvent(errOrEvent) && errOrEvent.code === 4499) {
          socket2.close(4499, "Terminated");
          socket2.onerror = null;
          socket2.onclose = null;
        }
      });
      socket2.onerror = (err) => emitter.emit("error", err);
      socket2.onclose = (event) => emitter.emit("closed", event);
      socket2.onopen = async () => {
        try {
          emitter.emit("opened", socket2);
          const payload = typeof connectionParams === "function" ? await connectionParams() : connectionParams;
          if (socket2.readyState !== WebSocketImpl.OPEN)
            return;
          socket2.send(stringifyMessage(payload ? {
            type: MessageType.ConnectionInit,
            payload
          } : {
            type: MessageType.ConnectionInit
          }, replacer));
          if (isFinite(connectionAckWaitTimeout) && connectionAckWaitTimeout > 0) {
            connectionAckTimeout = setTimeout(() => {
              socket2.close(CloseCode.ConnectionAcknowledgementTimeout, "Connection acknowledgement timeout");
            }, connectionAckWaitTimeout);
          }
          enqueuePing();
        } catch (err) {
          emitter.emit("error", err);
          socket2.close(CloseCode.InternalClientError, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, "Internal client error"));
        }
      };
      let acknowledged = false;
      socket2.onmessage = ({ data }) => {
        try {
          const message = parseMessage(data, reviver);
          emitter.emit("message", message);
          if (message.type === "ping" || message.type === "pong") {
            emitter.emit(message.type, true, message.payload);
            if (message.type === "pong") {
              enqueuePing();
            } else if (!disablePong) {
              socket2.send(stringifyMessage(message.payload ? {
                type: MessageType.Pong,
                payload: message.payload
              } : {
                type: MessageType.Pong
              }));
              emitter.emit("pong", false, message.payload);
            }
            return;
          }
          if (acknowledged)
            return;
          if (message.type !== MessageType.ConnectionAck)
            throw new Error(`First message cannot be of type ${message.type}`);
          clearTimeout(connectionAckTimeout);
          acknowledged = true;
          emitter.emit("connected", socket2, message.payload);
          retrying = false;
          retries = 0;
          connected([
            socket2,
            new Promise((_, reject3) => errorOrClosed(reject3))
          ]);
        } catch (err) {
          socket2.onmessage = null;
          emitter.emit("error", err);
          socket2.close(CloseCode.BadResponse, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, "Bad response"));
        }
      };
    })()));
    if (socket.readyState === WebSocketImpl.CLOSING)
      await throwOnClose;
    let release2 = () => {
    };
    const released = new Promise((resolve2) => release2 = resolve2);
    return [
      socket,
      release2,
      Promise.race([
        released.then(() => {
          if (!locks) {
            const complete = () => socket.close(1e3, "Normal Closure");
            if (isFinite(lazyCloseTimeout) && lazyCloseTimeout > 0) {
              setTimeout(() => {
                if (!locks && socket.readyState === WebSocketImpl.OPEN)
                  complete();
              }, lazyCloseTimeout);
            } else {
              complete();
            }
          }
        }),
        throwOnClose
      ])
    ];
  }
  function shouldRetryConnectOrThrow(errOrCloseEvent) {
    if (isLikeCloseEvent(errOrCloseEvent) && (isFatalInternalCloseCode(errOrCloseEvent.code) || [
      CloseCode.InternalServerError,
      CloseCode.InternalClientError,
      CloseCode.BadRequest,
      CloseCode.BadResponse,
      CloseCode.Unauthorized,
      CloseCode.SubprotocolNotAcceptable,
      CloseCode.SubscriberAlreadyExists,
      CloseCode.TooManyInitialisationRequests
    ].includes(errOrCloseEvent.code)))
      throw errOrCloseEvent;
    if (disposed)
      return false;
    if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1e3)
      return locks > 0;
    if (!retryAttempts || retries >= retryAttempts)
      throw errOrCloseEvent;
    if (!shouldRetry(errOrCloseEvent))
      throw errOrCloseEvent;
    if (isFatalConnectionProblem === null || isFatalConnectionProblem === void 0 ? void 0 : isFatalConnectionProblem(errOrCloseEvent))
      throw errOrCloseEvent;
    return retrying = true;
  }
  if (!lazy) {
    (async () => {
      locks++;
      for (; ; ) {
        try {
          const [, , throwOnClose] = await connect();
          await throwOnClose;
        } catch (errOrCloseEvent) {
          try {
            if (!shouldRetryConnectOrThrow(errOrCloseEvent))
              return;
          } catch (errOrCloseEvent2) {
            return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(errOrCloseEvent2);
          }
        }
      }
    })();
  }
  return {
    on: emitter.on,
    subscribe(payload, sink) {
      const id = generateID();
      let done = false, errored = false, releaser = () => {
        locks--;
        done = true;
      };
      (async () => {
        locks++;
        for (; ; ) {
          try {
            const [socket, release2, waitForReleaseOrThrowOnClose] = await connect();
            if (done)
              return release2();
            const unlisten = emitter.onMessage(id, (message) => {
              switch (message.type) {
                case MessageType.Next: {
                  sink.next(message.payload);
                  return;
                }
                case MessageType.Error: {
                  errored = true, done = true;
                  sink.error(message.payload);
                  releaser();
                  return;
                }
                case MessageType.Complete: {
                  done = true;
                  releaser();
                  return;
                }
              }
            });
            socket.send(stringifyMessage({
              id,
              type: MessageType.Subscribe,
              payload
            }, replacer));
            releaser = () => {
              if (!done && socket.readyState === WebSocketImpl.OPEN)
                socket.send(stringifyMessage({
                  id,
                  type: MessageType.Complete
                }, replacer));
              locks--;
              done = true;
              release2();
            };
            await waitForReleaseOrThrowOnClose.finally(unlisten);
            return;
          } catch (errOrCloseEvent) {
            if (!shouldRetryConnectOrThrow(errOrCloseEvent))
              return;
          }
        }
      })().then(() => {
        if (!errored)
          sink.complete();
      }).catch((err) => {
        sink.error(err);
      });
      return () => {
        if (!done)
          releaser();
      };
    },
    async dispose() {
      disposed = true;
      if (connecting) {
        const [socket] = await connecting;
        socket.close(1e3, "Normal Closure");
      }
    },
    terminate() {
      if (connecting) {
        emitter.emit("closed", {
          code: 4499,
          reason: "Terminated",
          wasClean: false
        });
      }
    }
  };
}
function isLikeCloseEvent(val) {
  return isObject3(val) && "code" in val && "reason" in val;
}
function isFatalInternalCloseCode(code) {
  if ([
    1e3,
    1001,
    1006,
    1005,
    1012,
    1013,
    1013
  ].includes(code))
    return false;
  return code >= 1e3 && code <= 1999;
}
function isWebSocket(val) {
  return typeof val === "function" && "constructor" in val && "CLOSED" in val && "CLOSING" in val && "CONNECTING" in val && "OPEN" in val;
}

// node_modules/@graphql-tools/url-loader/index.mjs
var import_isomorphic_ws = __toESM(require_browser2(), 1);

// node_modules/extract-files/public/index.mjs
init_virtual_process_polyfill();
init_buffer();
var import_extractFiles = __toESM(require_extractFiles(), 1);
var import_isExtractableFile = __toESM(require_isExtractableFile(), 1);

// node_modules/@n1ru4l/graphql-live-query/esm/index.js
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var GraphQLLiveDirective = new GraphQLDirective({
  name: "live",
  description: "Instruction for establishing a live connection that is updated once the underlying data changes.",
  locations: [DirectiveLocation.QUERY],
  args: {
    if: {
      type: GraphQLBoolean,
      defaultValue: true,
      description: "Whether the query should be live or not."
    },
    throttle: {
      type: GraphQLInt,
      description: 'Propose a desired throttle interval ot the server in order to receive updates to at most once per "throttle" milliseconds. The server must not accept this value.'
    }
  }
});
var isNone = (input) => input == null;
var getLiveDirectiveNode = (input) => {
  var _a2;
  if (input.kind !== "OperationDefinition" || input.operation !== "query") {
    return null;
  }
  const liveDirective = (_a2 = input.directives) === null || _a2 === void 0 ? void 0 : _a2.find((d) => d.name.value === "live");
  if (isNone(liveDirective)) {
    return null;
  }
  return liveDirective;
};
var getLiveDirectiveArgumentValues = (node, variableValues) => {
  var _a2;
  const values = getDirectiveValues(GraphQLLiveDirective, { directives: [node] }, variableValues);
  return {
    isLive: (values === null || values === void 0 ? void 0 : values["if"]) === true,
    throttleValue: (_a2 = values === null || values === void 0 ? void 0 : values["throttle"]) !== null && _a2 !== void 0 ? _a2 : null
  };
};
var isLiveQueryOperationDefinitionNode = (input, variables) => {
  const liveDirectiveNode = getLiveDirectiveNode(input);
  if (isNone(liveDirectiveNode)) {
    return false;
  }
  return getLiveDirectiveArgumentValues(liveDirectiveNode, variables).isLive;
};

// node_modules/@graphql-tools/url-loader/index.mjs
var import_cross_undici_fetch3 = __toESM(require_global_ponyfill(), 1);
var import_sync_fetch = __toESM(require_browser3(), 1);

// node_modules/meros/node/index.mjs
init_virtual_process_polyfill();
init_buffer();
var separator = "\r\n\r\n";
async function* generate(stream, boundary, options) {
  const is_eager = !options || !options.multiple;
  let len_boundary = Buffer2.byteLength(boundary), buffer = Buffer2.alloc(0), is_preamble = true, payloads = [];
  outer:
    for await (const chunk of stream) {
      let idx_boundary = buffer.byteLength;
      buffer = Buffer2.concat([buffer, chunk]);
      const idx_chunk = chunk.indexOf(boundary);
      if (!!~idx_chunk) {
        idx_boundary += idx_chunk;
      } else {
        idx_boundary = buffer.indexOf(boundary);
      }
      payloads = [];
      while (!!~idx_boundary) {
        const current = buffer.slice(0, idx_boundary);
        const next = buffer.slice(idx_boundary + len_boundary);
        if (is_preamble) {
          is_preamble = false;
          boundary = "\r\n" + boundary;
          len_boundary += 2;
        } else {
          const headers = {};
          const idx_headers = current.indexOf(separator);
          const arr_headers = buffer.slice(0, idx_headers).toString().trim().split(/\r\n/);
          let tmp;
          while (tmp = arr_headers.shift()) {
            tmp = tmp.split(": ");
            headers[tmp.shift().toLowerCase()] = tmp.join(": ");
          }
          const last_idx = current.lastIndexOf("\r\n", idx_headers + separator.length);
          let body = current.slice(idx_headers + separator.length, last_idx > -1 ? void 0 : last_idx);
          let is_json = false;
          tmp = headers["content-type"];
          if (tmp && !!~tmp.indexOf("application/json")) {
            try {
              body = JSON.parse(body.toString());
              is_json = true;
            } catch (_) {
            }
          }
          tmp = { headers, body, json: is_json };
          is_eager ? yield tmp : payloads.push(tmp);
          if (next.slice(0, 2).toString() === "--")
            break outer;
        }
        buffer = next;
        idx_boundary = buffer.indexOf(boundary);
      }
      if (payloads.length)
        yield payloads;
    }
  if (payloads.length)
    yield payloads;
}
async function meros(response, options) {
  const ctype = response.headers["content-type"];
  if (!ctype || !~ctype.indexOf("multipart/mixed"))
    return response;
  const idx_boundary = ctype.indexOf("boundary=");
  return generate(response, `--${!!~idx_boundary ? ctype.substring(idx_boundary + 9).trim().replace(/['"]/g, "") : "-"}`, options);
}

// node_modules/meros/browser/index.mjs
init_virtual_process_polyfill();
init_buffer();
var separator2 = "\r\n\r\n";
var decoder = new TextDecoder();
async function* generate2(stream, boundary, options) {
  const reader = stream.getReader(), is_eager = !options || !options.multiple;
  let buffer = "", is_preamble = true, payloads = [];
  try {
    let result;
    outer:
      while (!(result = await reader.read()).done) {
        const chunk = decoder.decode(result.value);
        const idx_chunk = chunk.indexOf(boundary);
        let idx_boundary = buffer.length;
        buffer += chunk;
        if (!!~idx_chunk) {
          idx_boundary += idx_chunk;
        } else {
          idx_boundary = buffer.indexOf(boundary);
        }
        payloads = [];
        while (!!~idx_boundary) {
          const current = buffer.substring(0, idx_boundary);
          const next = buffer.substring(idx_boundary + boundary.length);
          if (is_preamble) {
            is_preamble = false;
            boundary = "\r\n" + boundary;
          } else {
            const headers = {};
            const idx_headers = current.indexOf(separator2);
            const arr_headers = buffer.slice(0, idx_headers).trim().split(/\r\n/);
            let tmp;
            while (tmp = arr_headers.shift()) {
              tmp = tmp.split(": ");
              headers[tmp.shift().toLowerCase()] = tmp.join(": ");
            }
            const last_idx = current.lastIndexOf("\r\n", idx_headers + separator2.length);
            let body = current.substring(idx_headers + separator2.length, last_idx > -1 ? void 0 : last_idx);
            let is_json = false;
            tmp = headers["content-type"];
            if (tmp && !!~tmp.indexOf("application/json")) {
              try {
                body = JSON.parse(body);
                is_json = true;
              } catch (_) {
              }
            }
            tmp = { headers, body, json: is_json };
            is_eager ? yield tmp : payloads.push(tmp);
            if (next.substring(0, 2) === "--")
              break outer;
          }
          buffer = next;
          idx_boundary = buffer.indexOf(boundary);
        }
        if (payloads.length)
          yield payloads;
      }
  } finally {
    if (payloads.length)
      yield payloads;
    reader.releaseLock();
  }
}
async function meros2(response, options) {
  if (!response.ok || !response.body || response.bodyUsed)
    return response;
  const ctype = response.headers.get("content-type");
  if (!ctype || !~ctype.indexOf("multipart/mixed"))
    return response;
  const idx_boundary = ctype.indexOf("boundary=");
  return generate2(response.body, `--${!!~idx_boundary ? ctype.substring(idx_boundary + 9).trim().replace(/['"]/g, "") : "-"}`, options);
}

// node_modules/dset/merge/index.mjs
init_virtual_process_polyfill();
init_buffer();
function merge3(a, b, k) {
  if (typeof a === "object" && typeof b === "object") {
    if (Array.isArray(a) && Array.isArray(b)) {
      for (k = 0; k < b.length; k++) {
        a[k] = merge3(a[k], b[k]);
      }
    } else {
      for (k in b) {
        if (k === "__proto__" || k === "constructor" || k === "prototype")
          break;
        a[k] = merge3(a[k], b[k]);
      }
    }
    return a;
  }
  return b;
}
function dset2(obj, keys, val) {
  keys.split && (keys = keys.split("."));
  var i = 0, l = keys.length, t = obj, x, k;
  while (i < l) {
    k = keys[i++];
    if (k === "__proto__" || k === "constructor" || k === "prototype")
      break;
    t = t[k] = i === l ? merge3(t[k], val) : typeof (x = t[k]) === typeof keys ? x : keys[i] * 0 !== 0 || !!~("" + keys[i]).indexOf(".") ? {} : [];
  }
}

// node_modules/@graphql-tools/url-loader/index.mjs
var defaultAsyncFetch = async (input, init2) => {
  return (0, import_cross_undici_fetch3.fetch)(input, init2);
};
var defaultSyncFetch = (input, init2) => {
  if (typeof input === "string") {
    init2 === null || init2 === void 0 ? true : delete init2.signal;
  } else {
    delete input.signal;
  }
  return (0, import_sync_fetch.default)(input, init2);
};
function isIncomingMessage(body) {
  return body != null && typeof body === "object" && "pipe" in body;
}
async function handleMultipartMixedResponse(response) {
  const body = await response.body;
  const contentType = response.headers.get("content-type") || "";
  let asyncIterator;
  if (isIncomingMessage(body)) {
    body.headers = {
      "content-type": contentType
    };
    asyncIterator = await meros(body);
  } else {
    asyncIterator = await meros2(response);
  }
  const executionResult = {};
  return mapAsyncIterator3(asyncIterator, (part) => {
    if (part.json) {
      const chunk = part.body;
      if (chunk.path) {
        if (chunk.data) {
          const path2 = ["data"];
          dset2(executionResult, path2.concat(chunk.path), chunk.data);
        }
        if (chunk.errors) {
          executionResult.errors = (executionResult.errors || []).concat(chunk.errors);
        }
      } else {
        if (chunk.data) {
          executionResult.data = chunk.data;
        }
        if (chunk.errors) {
          executionResult.errors = chunk.errors;
        }
      }
      return executionResult;
    }
  });
}
var decodeUint8Array;
if (globalThis.Buffer) {
  decodeUint8Array = (uint8Array) => globalThis.Buffer.from(uint8Array).toString("utf-8");
} else {
  const textDecoder = new TextDecoder();
  decodeUint8Array = (uint8Array) => textDecoder.decode(uint8Array);
}
async function* handleReadable(readable) {
  outer:
    for await (const chunk of readable) {
      const chunkStr = typeof chunk === "string" ? chunk : decodeUint8Array(chunk);
      for (const part of chunkStr.split("\n\n")) {
        if (part) {
          const eventStr = part.split("event: ")[1];
          const dataStr = part.split("data: ")[1];
          if (eventStr === "complete") {
            break outer;
          }
          if (dataStr) {
            const data = JSON.parse(dataStr);
            yield data.payload || data;
          }
        }
      }
    }
}
async function* handleReadableStream(stream) {
  const decoder2 = new TextDecoder();
  const reader = stream.getReader();
  let buffer;
  let position = 0;
  let fieldLength = -1;
  let discardTrailingNewline = false;
  try {
    let result;
    let message = {
      data: "",
      event: "",
      id: "",
      retry: void 0
    };
    while (!(result = await reader.read()).done) {
      const arr = result.value;
      if (buffer === void 0) {
        buffer = arr;
        position = 0;
        fieldLength = -1;
      } else {
        buffer = concat2(buffer, arr);
      }
      const bufLength = buffer.length;
      let lineStart = 0;
      while (position < bufLength) {
        if (discardTrailingNewline) {
          if (buffer[position] === 10) {
            lineStart = ++position;
          }
          discardTrailingNewline = false;
        }
        let lineEnd = -1;
        for (; position < bufLength && lineEnd === -1; ++position) {
          switch (buffer[position]) {
            case 58: {
              if (fieldLength === -1) {
                fieldLength = position - lineStart;
              }
              break;
            }
            case 13: {
              discardTrailingNewline = true;
              break;
            }
            case 10: {
              lineEnd = position;
              break;
            }
          }
        }
        if (lineEnd === -1) {
          break;
        }
        const line = buffer.subarray(lineStart, lineEnd);
        if (line.length === 0) {
          if (message.event || message.data) {
            yield JSON.parse(message.data);
            message = {
              data: "",
              event: "",
              id: "",
              retry: void 0
            };
          }
        } else if (fieldLength > 0) {
          const field = decoder2.decode(line.subarray(0, fieldLength));
          const valueOffset = fieldLength + (line[fieldLength + 1] === 32 ? 2 : 1);
          const value = decoder2.decode(line.subarray(valueOffset));
          switch (field) {
            case "data":
              message.data = message.data ? message.data + "\n" + value : value;
              break;
            case "event":
              message.event = value;
              break;
            case "id":
              message.id = value;
              break;
            case "retry": {
              const retry = parseInt(value, 10);
              message.retry = retry;
              break;
            }
          }
        }
        lineStart = position;
        fieldLength = -1;
      }
      if (lineStart === bufLength) {
        buffer = void 0;
      } else if (lineStart !== 0) {
        buffer = buffer.subarray(lineStart);
        position -= lineStart;
      }
    }
  } finally {
    reader.releaseLock();
  }
}
function concat2(a, b) {
  const res = new Uint8Array(a.length + b.length);
  res.set(a);
  res.set(b, a.length);
  return res;
}
async function handleEventStreamResponse(response) {
  const body = await response.body;
  if (body) {
    if (isAsyncIterable3(body)) {
      return handleReadable(body);
    }
    return handleReadableStream(body);
  }
  throw new Error("Response body is expected to be a readable stream but got; " + inspect2(body));
}
function addCancelToResponseStream(resultStream, controller) {
  return getAsyncIterableWithCancel(resultStream, () => {
    if (!controller.signal.aborted) {
      controller.abort();
    }
  });
}
function isBlob(obj) {
  return typeof obj.arrayBuffer === "function";
}
function isGraphQLUpload(upload) {
  return typeof upload.createReadStream === "function";
}
function isPromiseLike2(obj) {
  return typeof obj.then === "function";
}
var LEGACY_WS;
(function(LEGACY_WS2) {
  LEGACY_WS2["CONNECTION_INIT"] = "connection_init";
  LEGACY_WS2["CONNECTION_ACK"] = "connection_ack";
  LEGACY_WS2["CONNECTION_ERROR"] = "connection_error";
  LEGACY_WS2["CONNECTION_KEEP_ALIVE"] = "ka";
  LEGACY_WS2["START"] = "start";
  LEGACY_WS2["STOP"] = "stop";
  LEGACY_WS2["CONNECTION_TERMINATE"] = "connection_terminate";
  LEGACY_WS2["DATA"] = "data";
  LEGACY_WS2["ERROR"] = "error";
  LEGACY_WS2["COMPLETE"] = "complete";
})(LEGACY_WS || (LEGACY_WS = {}));
var asyncImport = (moduleName) => import(moduleName);
var syncImport = (moduleName) => __require(moduleName);
var SubscriptionProtocol;
(function(SubscriptionProtocol2) {
  SubscriptionProtocol2["WS"] = "WS";
  SubscriptionProtocol2["LEGACY_WS"] = "LEGACY_WS";
  SubscriptionProtocol2["SSE"] = "SSE";
  SubscriptionProtocol2["GRAPHQL_SSE"] = "GRAPHQL_SSE";
})(SubscriptionProtocol || (SubscriptionProtocol = {}));
function isCompatibleUri(uri) {
  try {
    new URL(uri);
    return true;
  } catch (_a2) {
    return false;
  }
}
var UrlLoader = class {
  createFormDataFromVariables({ query, variables, operationName, extensions }) {
    const vars = Object.assign({}, variables);
    const { clone, files } = (0, import_extractFiles.default)(vars, "variables", (v) => (0, import_isExtractableFile.default)(v) || (v === null || v === void 0 ? void 0 : v.promise) || isAsyncIterable3(v) || (v === null || v === void 0 ? void 0 : v.then) || typeof (v === null || v === void 0 ? void 0 : v.arrayBuffer) === "function");
    const map2 = {};
    const uploads = [];
    let currIndex = 0;
    for (const [file, curr] of files) {
      map2[currIndex] = curr;
      uploads[currIndex] = file;
      currIndex++;
    }
    const form = new import_cross_undici_fetch3.FormData();
    form.append("operations", JSON.stringify({
      query,
      variables: clone,
      operationName,
      extensions
    }));
    form.append("map", JSON.stringify(map2));
    function handleUpload(upload, i) {
      const indexStr = i.toString();
      if (upload != null) {
        const filename = upload.filename || upload.name || upload.path || `blob-${indexStr}`;
        if (isPromiseLike2(upload)) {
          return upload.then((resolvedUpload) => handleUpload(resolvedUpload, i));
        } else if (isBlob(upload)) {
          return upload.arrayBuffer().then((arrayBuffer) => {
            form.append(indexStr, new import_cross_undici_fetch3.File([arrayBuffer], filename, { type: upload.type }), filename);
          });
        } else if (isGraphQLUpload(upload)) {
          const stream = upload.createReadStream();
          const chunks = [];
          return Promise.resolve().then(async () => {
            for await (const chunk of stream) {
              if (chunk) {
                chunks.push(...chunk);
              }
            }
            const blobPart = new Uint8Array(chunks);
            form.append(indexStr, new import_cross_undici_fetch3.File([blobPart], filename, { type: upload.mimetype }), filename);
          });
        } else {
          form.append(indexStr, new import_cross_undici_fetch3.File([upload], filename), filename);
        }
      }
    }
    return ValueOrPromise.all(uploads.map((upload, i) => new ValueOrPromise(() => handleUpload(upload, i)))).then(() => form).resolve();
  }
  prepareGETUrl({ baseUrl, query, variables, operationName, extensions }) {
    const HTTP_URL = switchProtocols(baseUrl, {
      wss: "https",
      ws: "http"
    });
    const dummyHostname = "https://dummyhostname.com";
    const validUrl = HTTP_URL.startsWith("http") ? HTTP_URL : HTTP_URL.startsWith("/") ? `${dummyHostname}${HTTP_URL}` : `${dummyHostname}/${HTTP_URL}`;
    const urlObj = new URL(validUrl);
    urlObj.searchParams.set("query", query);
    if (variables && Object.keys(variables).length > 0) {
      urlObj.searchParams.set("variables", JSON.stringify(variables));
    }
    if (operationName) {
      urlObj.searchParams.set("operationName", operationName);
    }
    if (extensions) {
      urlObj.searchParams.set("extensions", JSON.stringify(extensions));
    }
    const finalUrl = urlObj.toString().replace(dummyHostname, "");
    return finalUrl;
  }
  buildHTTPExecutor(initialEndpoint, fetch5, options) {
    const defaultMethod = this.getDefaultMethodFromOptions(options === null || options === void 0 ? void 0 : options.method, "POST");
    const HTTP_URL = switchProtocols(initialEndpoint, {
      wss: "https",
      ws: "http"
    });
    const executor = (request) => {
      var _a2, _b;
      const controller = new import_cross_undici_fetch3.AbortController();
      let method = defaultMethod;
      const operationAst = getOperationASTFromRequest(request);
      const operationType = operationAst.operation;
      if ((options === null || options === void 0 ? void 0 : options.useGETForQueries) && operationType === "query") {
        method = "GET";
      }
      let accept = "application/json, multipart/mixed";
      if (operationType === "subscription" || isLiveQueryOperationDefinitionNode(operationAst)) {
        method = "GET";
        accept = "text/event-stream";
      }
      const endpoint = ((_a2 = request.extensions) === null || _a2 === void 0 ? void 0 : _a2.endpoint) || HTTP_URL;
      const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers, ((_b = request.extensions) === null || _b === void 0 ? void 0 : _b.headers) || {});
      const query = print(request.document);
      const requestBody = {
        query,
        variables: request.variables,
        operationName: request.operationName,
        extensions: request.extensions
      };
      let timeoutId;
      if (options === null || options === void 0 ? void 0 : options.timeout) {
        timeoutId = setTimeout(() => {
          if (!controller.signal.aborted) {
            controller.abort();
          }
        }, options.timeout);
      }
      const credentials = (options === null || options === void 0 ? void 0 : options.credentials) || "same-origin";
      return new ValueOrPromise(() => {
        switch (method) {
          case "GET":
            const finalUrl = this.prepareGETUrl({
              baseUrl: endpoint,
              ...requestBody
            });
            return fetch5(finalUrl, {
              method: "GET",
              credentials,
              headers: {
                accept,
                ...headers
              },
              signal: controller.signal
            });
          case "POST":
            if (options === null || options === void 0 ? void 0 : options.multipart) {
              return new ValueOrPromise(() => this.createFormDataFromVariables(requestBody)).then((form) => fetch5(endpoint, {
                method: "POST",
                credentials,
                body: form,
                headers: {
                  accept,
                  ...headers
                },
                signal: controller.signal
              })).resolve();
            } else {
              return fetch5(endpoint, {
                method: "POST",
                credentials,
                body: JSON.stringify(requestBody),
                headers: {
                  accept,
                  "content-type": "application/json",
                  ...headers
                },
                signal: controller.signal
              });
            }
        }
      }).then((fetchResult) => {
        if (timeoutId != null) {
          clearTimeout(timeoutId);
        }
        if ((options === null || options === void 0 ? void 0 : options.retry) != null && !fetchResult.status.toString().startsWith("2")) {
          throw new Error(fetchResult.statusText || `HTTP Error: ${fetchResult.status}`);
        }
        const contentType = fetchResult.headers.get("content-type");
        if (contentType === null || contentType === void 0 ? void 0 : contentType.includes("text/event-stream")) {
          return handleEventStreamResponse(fetchResult).then((resultStream) => addCancelToResponseStream(resultStream, controller));
        } else if (contentType === null || contentType === void 0 ? void 0 : contentType.includes("multipart/mixed")) {
          return handleMultipartMixedResponse(fetchResult).then((resultStream) => addCancelToResponseStream(resultStream, controller));
        }
        return fetchResult.text();
      }).then((result) => {
        if (typeof result === "string") {
          if (result) {
            return JSON.parse(result);
          }
        } else {
          return result;
        }
      }).resolve();
    };
    if ((options === null || options === void 0 ? void 0 : options.retry) != null) {
      return function retryExecutor(request) {
        let result;
        let error;
        let attempt = 0;
        function retryAttempt() {
          attempt++;
          if (attempt > options.retry) {
            if (result != null) {
              return result;
            }
            if (error != null) {
              throw error;
            }
            throw new Error("No result");
          }
          return new ValueOrPromise(() => executor(request)).then((res) => {
            var _a2;
            result = res;
            if ((_a2 = result === null || result === void 0 ? void 0 : result.errors) === null || _a2 === void 0 ? void 0 : _a2.length) {
              return retryAttempt();
            }
            return result;
          }).catch((e) => {
            error = e;
            return retryAttempt();
          }).resolve();
        }
        return retryAttempt();
      };
    }
    return executor;
  }
  buildWSExecutor(subscriptionsEndpoint, webSocketImpl, connectionParams) {
    const WS_URL = switchProtocols(subscriptionsEndpoint, {
      https: "wss",
      http: "ws"
    });
    const subscriptionClient = createClient({
      url: WS_URL,
      webSocketImpl,
      connectionParams,
      lazy: true
    });
    return ({ document, variables, operationName, extensions }) => {
      const query = print(document);
      return observableToAsyncIterable({
        subscribe: (observer) => {
          const unsubscribe = subscriptionClient.subscribe({
            query,
            variables,
            operationName,
            extensions
          }, observer);
          return {
            unsubscribe
          };
        }
      });
    };
  }
  buildWSLegacyExecutor(subscriptionsEndpoint, WebSocketImpl, options) {
    const WS_URL = switchProtocols(subscriptionsEndpoint, {
      https: "wss",
      http: "ws"
    });
    return function legacyExecutor(request) {
      const id = Date.now().toString();
      return observableToAsyncIterable({
        subscribe(observer) {
          const websocket = new WebSocketImpl(WS_URL, "graphql-ws", {
            followRedirects: true,
            headers: options === null || options === void 0 ? void 0 : options.headers,
            rejectUnauthorized: false,
            skipUTF8Validation: true
          });
          websocket.onopen = () => {
            websocket.send(JSON.stringify({
              type: LEGACY_WS.CONNECTION_INIT,
              payload: {
                ...request.extensions
              }
            }));
          };
          websocket.onmessage = (event) => {
            const data = JSON.parse(event.data.toString("utf-8"));
            switch (data.type) {
              case LEGACY_WS.CONNECTION_ACK: {
                websocket.send(JSON.stringify({
                  type: LEGACY_WS.START,
                  id,
                  payload: {
                    query: print(request.document),
                    variables: request.variables,
                    operationName: request.operationName
                  }
                }));
                break;
              }
              case LEGACY_WS.CONNECTION_ERROR: {
                observer.error(data.payload);
                break;
              }
              case LEGACY_WS.CONNECTION_KEEP_ALIVE: {
                break;
              }
              case LEGACY_WS.DATA: {
                observer.next(data.payload);
                break;
              }
              case LEGACY_WS.COMPLETE: {
                websocket.send(JSON.stringify({
                  type: LEGACY_WS.CONNECTION_TERMINATE
                }));
                websocket.terminate();
                observer.complete();
                break;
              }
            }
          };
          return {
            unsubscribe: () => {
              websocket.send(JSON.stringify({
                type: LEGACY_WS.STOP,
                id
              }));
              websocket.send(JSON.stringify({
                type: LEGACY_WS.CONNECTION_TERMINATE
              }));
              websocket.terminate();
            }
          };
        }
      });
    };
  }
  getFetch(customFetch, importFn2) {
    if (customFetch) {
      if (typeof customFetch === "string") {
        const [moduleName, fetchFnName] = customFetch.split("#");
        return new ValueOrPromise(() => importFn2(moduleName)).then((module) => fetchFnName ? module[fetchFnName] : module).resolve();
      } else if (typeof customFetch === "function") {
        return customFetch;
      }
    }
    if (importFn2 === asyncImport) {
      return defaultAsyncFetch;
    } else {
      return defaultSyncFetch;
    }
  }
  getDefaultMethodFromOptions(method, defaultMethod) {
    if (method) {
      defaultMethod = method;
    }
    return defaultMethod;
  }
  getWebSocketImpl(importFn2, options) {
    if (typeof (options === null || options === void 0 ? void 0 : options.webSocketImpl) === "string") {
      const [moduleName, webSocketImplName] = options.webSocketImpl.split("#");
      return new ValueOrPromise(() => importFn2(moduleName)).then((importedModule) => webSocketImplName ? importedModule[webSocketImplName] : importedModule).resolve();
    } else {
      const websocketImpl = (options === null || options === void 0 ? void 0 : options.webSocketImpl) || import_isomorphic_ws.default;
      return websocketImpl;
    }
  }
  buildSubscriptionExecutor(subscriptionsEndpoint, fetch5, importFn2, options) {
    if ((options === null || options === void 0 ? void 0 : options.subscriptionsProtocol) === SubscriptionProtocol.SSE) {
      return this.buildHTTPExecutor(subscriptionsEndpoint, fetch5, options);
    } else if ((options === null || options === void 0 ? void 0 : options.subscriptionsProtocol) === SubscriptionProtocol.GRAPHQL_SSE) {
      if (!(options === null || options === void 0 ? void 0 : options.subscriptionsEndpoint)) {
        subscriptionsEndpoint += "/stream";
      }
      return this.buildHTTPExecutor(subscriptionsEndpoint, fetch5, options);
    } else {
      const webSocketImpl$ = new ValueOrPromise(() => this.getWebSocketImpl(importFn2, options));
      const connectionParams = () => ({ headers: options === null || options === void 0 ? void 0 : options.headers });
      const executor$ = webSocketImpl$.then((webSocketImpl) => {
        if ((options === null || options === void 0 ? void 0 : options.subscriptionsProtocol) === SubscriptionProtocol.LEGACY_WS) {
          return this.buildWSLegacyExecutor(subscriptionsEndpoint, webSocketImpl, options);
        } else {
          return this.buildWSExecutor(subscriptionsEndpoint, webSocketImpl, connectionParams);
        }
      });
      return (request) => executor$.then((executor) => executor(request)).resolve();
    }
  }
  getExecutor(endpoint, importFn2, options) {
    const fetch$ = new ValueOrPromise(() => this.getFetch(options === null || options === void 0 ? void 0 : options.customFetch, importFn2));
    const httpExecutor$ = fetch$.then((fetch5) => {
      return this.buildHTTPExecutor(endpoint, fetch5, options);
    });
    if ((options === null || options === void 0 ? void 0 : options.subscriptionsEndpoint) != null || (options === null || options === void 0 ? void 0 : options.subscriptionsProtocol) !== SubscriptionProtocol.SSE) {
      let getExecutorByRequest = function(request) {
        const operationAst = getOperationASTFromRequest(request);
        if (operationAst.operation === "subscription" || isLiveQueryOperationDefinitionNode(operationAst, request.variables)) {
          return subscriptionExecutor$;
        } else {
          return httpExecutor$;
        }
      };
      const subscriptionExecutor$ = fetch$.then((fetch5) => {
        const subscriptionsEndpoint = (options === null || options === void 0 ? void 0 : options.subscriptionsEndpoint) || endpoint;
        return this.buildSubscriptionExecutor(subscriptionsEndpoint, fetch5, importFn2, options);
      });
      return (request) => getExecutorByRequest(request).then((executor) => executor(request)).resolve();
    } else {
      return (request) => httpExecutor$.then((executor) => executor(request)).resolve();
    }
  }
  getExecutorAsync(endpoint, options) {
    return this.getExecutor(endpoint, asyncImport, options);
  }
  getExecutorSync(endpoint, options) {
    return this.getExecutor(endpoint, syncImport, options);
  }
  handleSDL(pointer, fetch5, options) {
    const defaultMethod = this.getDefaultMethodFromOptions(options === null || options === void 0 ? void 0 : options.method, "GET");
    return new ValueOrPromise(() => fetch5(pointer, {
      method: defaultMethod,
      headers: options.headers
    })).then((response) => response.text()).then((schemaString) => parseGraphQLSDL(pointer, schemaString, options)).resolve();
  }
  async load(pointer, options) {
    if (!isCompatibleUri(pointer)) {
      return [];
    }
    let source = {
      location: pointer
    };
    let executor;
    if ((options === null || options === void 0 ? void 0 : options.handleAsSDL) || pointer.endsWith(".graphql") || pointer.endsWith(".graphqls")) {
      const fetch5 = await this.getFetch(options === null || options === void 0 ? void 0 : options.customFetch, asyncImport);
      source = await this.handleSDL(pointer, fetch5, options);
      if (!source.schema && !source.document && !source.rawSDL) {
        throw new Error(`Invalid SDL response`);
      }
      source.schema = source.schema || (source.document ? buildASTSchema(source.document, options) : source.rawSDL ? buildSchema(source.rawSDL, options) : void 0);
    } else {
      executor = this.getExecutorAsync(pointer, options);
      source.schema = await introspectSchema(executor, {}, options);
    }
    if (!source.schema) {
      throw new Error(`Invalid introspected schema`);
    }
    if (options === null || options === void 0 ? void 0 : options.endpoint) {
      executor = this.getExecutorAsync(options.endpoint, options);
    }
    if (executor) {
      source.schema = wrapSchema({
        schema: source.schema,
        executor
      });
    }
    return [source];
  }
  loadSync(pointer, options) {
    if (!isCompatibleUri(pointer)) {
      return [];
    }
    let source = {
      location: pointer
    };
    let executor;
    if ((options === null || options === void 0 ? void 0 : options.handleAsSDL) || pointer.endsWith(".graphql") || pointer.endsWith(".graphqls")) {
      const fetch5 = this.getFetch(options === null || options === void 0 ? void 0 : options.customFetch, syncImport);
      source = this.handleSDL(pointer, fetch5, options);
      if (!source.schema && !source.document && !source.rawSDL) {
        throw new Error(`Invalid SDL response`);
      }
      source.schema = source.schema || (source.document ? buildASTSchema(source.document, options) : source.rawSDL ? buildSchema(source.rawSDL, options) : void 0);
    } else {
      executor = this.getExecutorSync(pointer, options);
      source.schema = introspectSchema(executor, {}, options);
    }
    if (!source.schema) {
      throw new Error(`Invalid introspected schema`);
    }
    if (options === null || options === void 0 ? void 0 : options.endpoint) {
      executor = this.getExecutorSync(options.endpoint, options);
    }
    if (executor) {
      source.schema = wrapSchema({
        schema: source.schema,
        executor
      });
    }
    return [source];
  }
};
function switchProtocols(pointer, protocolMap) {
  return Object.entries(protocolMap).reduce((prev, [source, target]) => prev.replace(`${source}://`, `${target}://`).replace(`${source}:\\`, `${target}:\\`), pointer);
}

// node_modules/@graphql-mesh/graphql/index.mjs
init_graphql();
var import_lodash5 = __toESM(require_lodash(), 1);
var getResolverData = memoize1(function getResolverData2(params) {
  return {
    root: params.rootValue,
    args: params.variables,
    context: params.context,
    env: processObj.env
  };
});
var GraphQLHandler = class {
  constructor({ config: config2, baseDir: baseDir2, cache, store, importFn: importFn2 }) {
    this.urlLoader = new UrlLoader();
    this.interpolationStringSet = /* @__PURE__ */ new Set();
    this.config = config2;
    this.baseDir = baseDir2;
    this.cache = cache;
    this.nonExecutableSchema = store.proxy("introspectionSchema", PredefinedProxyOptions.GraphQLSchemaWithDiffing);
    this.importFn = importFn2;
  }
  getArgsAndContextVariables() {
    return parseInterpolationStrings(this.interpolationStringSet);
  }
  getCustomFetchImpl(customFetchConfig) {
    return customFetchConfig ? loadFromModuleExportExpression(customFetchConfig, {
      cwd: this.baseDir,
      defaultExportName: "default",
      importFn: this.importFn
    }) : getCachedFetch(this.cache);
  }
  async getExecutorForHTTPSourceConfig(httpSourceConfig) {
    const { endpoint, customFetch: customFetchConfig, operationHeaders = {} } = httpSourceConfig;
    this.interpolationStringSet.add(endpoint);
    Object.keys(operationHeaders).forEach((headerName) => {
      this.interpolationStringSet.add(headerName.toString());
    });
    const customFetch = await this.getCustomFetchImpl(customFetchConfig);
    const endpointFactory = getInterpolatedStringFactory(endpoint);
    const operationHeadersFactory = getInterpolatedHeadersFactory(operationHeaders);
    const executor = this.urlLoader.getExecutorAsync(endpoint, {
      ...httpSourceConfig,
      subscriptionsProtocol: httpSourceConfig.subscriptionsProtocol,
      customFetch
    });
    return function meshExecutor(params) {
      const resolverData = getResolverData(params);
      return executor({
        ...params,
        extensions: {
          ...params.extensions,
          headers: operationHeadersFactory(resolverData),
          endpoint: endpointFactory(resolverData)
        }
      });
    };
  }
  async getNonExecutableSchemaForHTTPSource(httpSourceConfig) {
    this.interpolationStringSet.add(httpSourceConfig.endpoint);
    Object.keys(httpSourceConfig.schemaHeaders || {}).forEach((headerName) => {
      this.interpolationStringSet.add(headerName.toString());
    });
    const schemaHeadersFactory = getInterpolatedHeadersFactory(httpSourceConfig.schemaHeaders || {});
    const customFetch = await this.getCustomFetchImpl(httpSourceConfig.customFetch);
    if (httpSourceConfig.introspection) {
      const headers = schemaHeadersFactory({
        env: processObj.env
      });
      const sdlOrIntrospection = await readFileOrUrl(httpSourceConfig.introspection, {
        cwd: this.baseDir,
        allowUnknownExtensions: true,
        fetch: customFetch,
        headers
      });
      if (typeof sdlOrIntrospection === "string") {
        return buildSchema(sdlOrIntrospection);
      } else if (isDocumentNode(sdlOrIntrospection)) {
        return buildASTSchema(sdlOrIntrospection);
      } else if (sdlOrIntrospection.__schema) {
        return buildClientSchema(sdlOrIntrospection);
      }
      throw new Error(`Invalid introspection data: ${util.inspect(sdlOrIntrospection)}`);
    }
    return this.nonExecutableSchema.getWithSet(() => {
      const endpointFactory = getInterpolatedStringFactory(httpSourceConfig.endpoint);
      const executor = this.urlLoader.getExecutorAsync(httpSourceConfig.endpoint, {
        ...httpSourceConfig,
        customFetch,
        subscriptionsProtocol: httpSourceConfig.subscriptionsProtocol
      });
      return introspectSchema(function meshIntrospectionExecutor(params) {
        const resolverData = getResolverData(params);
        return executor({
          ...params,
          extensions: {
            ...params.extensions,
            headers: schemaHeadersFactory(resolverData),
            endpoint: endpointFactory(resolverData)
          }
        });
      });
    });
  }
  async getCodeFirstSource({ schema: schemaConfig }) {
    if (schemaConfig.endsWith(".graphql")) {
      const rawSDL = await readFileOrUrl(schemaConfig, {
        cwd: this.baseDir,
        allowUnknownExtensions: true,
        importFn: this.importFn
      });
      const schema2 = buildSchema(rawSDL);
      const { contextVariables } = this.getArgsAndContextVariables();
      return {
        schema: schema2,
        contextVariables
      };
    } else {
      const schemaOrStringOrDocumentNode = await loadFromModuleExportExpression(schemaConfig, { cwd: this.baseDir, defaultExportName: "schema", importFn: this.importFn });
      let schema2;
      if (schemaOrStringOrDocumentNode instanceof GraphQLSchema) {
        schema2 = schemaOrStringOrDocumentNode;
      } else if (typeof schemaOrStringOrDocumentNode === "string") {
        schema2 = buildSchema(schemaOrStringOrDocumentNode);
      } else if (typeof schemaOrStringOrDocumentNode === "object" && (schemaOrStringOrDocumentNode === null || schemaOrStringOrDocumentNode === void 0 ? void 0 : schemaOrStringOrDocumentNode.kind) === Kind.DOCUMENT) {
        schema2 = buildASTSchema(schemaOrStringOrDocumentNode);
      } else {
        throw new Error(`Provided file '${schemaConfig} exports an unknown type: ${util.inspect(schemaOrStringOrDocumentNode)}': expected GraphQLSchema, SDL or DocumentNode.`);
      }
      const { contextVariables } = this.getArgsAndContextVariables();
      return {
        schema: schema2,
        contextVariables
      };
    }
  }
  getRaceExecutor(executors) {
    return function raceExecutor(params) {
      return Promise.race(executors.map((executor) => executor(params)));
    };
  }
  getFallbackExecutor(executors) {
    return async function fallbackExecutor(params) {
      var _a2;
      let error;
      let response;
      for (const executor of executors) {
        try {
          const executorResponse = await executor(params);
          if ("errors" in executorResponse && ((_a2 = executorResponse.errors) === null || _a2 === void 0 ? void 0 : _a2.length)) {
            response = executorResponse;
            continue;
          } else {
            return executorResponse;
          }
        } catch (e) {
          error = e;
        }
      }
      if (response != null) {
        return response;
      }
      throw error;
    };
  }
  async getMeshSource() {
    if ("sources" in this.config) {
      if (this.config.strategy === "race") {
        const schemaPromises = [];
        const executorPromises = [];
        let batch = true;
        for (const httpSourceConfig of this.config.sources) {
          if (httpSourceConfig.batch === false) {
            batch = false;
          }
          schemaPromises.push(this.getNonExecutableSchemaForHTTPSource(httpSourceConfig));
          executorPromises.push(this.getExecutorForHTTPSourceConfig(httpSourceConfig));
        }
        const [schema2, ...executors] = await Promise.all([Promise.race(schemaPromises), ...executorPromises]);
        const executor = this.getRaceExecutor(executors);
        const { contextVariables } = this.getArgsAndContextVariables();
        return {
          schema: schema2,
          executor,
          batch,
          contextVariables
        };
      } else if (this.config.strategy === "highestValue") {
        if (this.config.strategyConfig == null) {
          throw new Error(`You must configure 'highestValue' strategy`);
        }
        let schema2;
        const executorPromises = [];
        let error;
        for (const httpSourceConfig of this.config.sources) {
          executorPromises.push(this.getExecutorForHTTPSourceConfig(httpSourceConfig));
          if (schema2 == null) {
            try {
              schema2 = await this.getNonExecutableSchemaForHTTPSource(httpSourceConfig);
            } catch (e) {
              error = e;
            }
          }
        }
        if (schema2 == null) {
          throw error;
        }
        const executors = await Promise.all(executorPromises);
        const parsedSelectionSet = parseSelectionSet(this.config.strategyConfig.selectionSet);
        const valuePath = this.config.strategyConfig.value;
        const highestValueExecutor = async function highestValueExecutor2(executionRequest) {
          const operationAST = getOperationASTFromRequest(executionRequest);
          operationAST.selectionSet.selections.push(...parsedSelectionSet.selections);
          const results = await Promise.all(executors.map((executor) => executor(executionRequest)));
          let highestValue = -Infinity;
          let resultWithHighestResult = results[0];
          for (const result of results) {
            if (isAsyncIterable3(result)) {
              console.warn("Incremental delivery is not supported currently");
              return result;
            } else if (result.data != null) {
              const currentValue = (0, import_lodash5.default)(result.data, valuePath);
              if (currentValue > highestValue) {
                resultWithHighestResult = result;
                highestValue = currentValue;
              }
            }
          }
          return resultWithHighestResult;
        };
        const { contextVariables } = this.getArgsAndContextVariables();
        return {
          schema: schema2,
          executor: highestValueExecutor,
          batch: false,
          contextVariables
        };
      } else {
        let schema2;
        const executorPromises = [];
        let error;
        for (const httpSourceConfig of this.config.sources) {
          executorPromises.push(this.getExecutorForHTTPSourceConfig(httpSourceConfig));
          if (schema2 == null) {
            try {
              schema2 = await this.getNonExecutableSchemaForHTTPSource(httpSourceConfig);
            } catch (e) {
              error = e;
            }
          }
        }
        if (schema2 == null) {
          throw error;
        }
        const executors = await Promise.all(executorPromises);
        const executor = this.getFallbackExecutor(executors);
        const { contextVariables } = this.getArgsAndContextVariables();
        return {
          schema: schema2,
          executor,
          batch: false,
          contextVariables
        };
      }
    } else if ("endpoint" in this.config) {
      const [schemaResult, executorResult] = await Promise.allSettled([
        this.getNonExecutableSchemaForHTTPSource(this.config),
        this.getExecutorForHTTPSourceConfig(this.config)
      ]);
      if (schemaResult.status === "rejected") {
        throw new Error(`Failed to fetch introspection from ${this.config.endpoint}: ${util.inspect(schemaResult.reason)}`);
      }
      if (executorResult.status === "rejected") {
        throw new Error(`Failed to create executor for ${this.config.endpoint}: ${util.inspect(executorResult.reason)}`);
      }
      const { contextVariables } = this.getArgsAndContextVariables();
      return {
        schema: schemaResult.value,
        executor: executorResult.value,
        batch: this.config.batch != null ? this.config.batch : true,
        contextVariables
      };
    } else if ("schema" in this.config) {
      return this.getCodeFirstSource(this.config);
    }
    throw new Error(`Unexpected config: ${util.inspect(this.config)}`);
  }
};
var graphql_default = GraphQLHandler;

// node_modules/@graphql-mesh/merger-stitching/index.mjs
init_virtual_process_polyfill();
init_buffer();

// node_modules/@graphql-tools/stitch/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var backcompatOptions = { commentDescriptions: true };
function typeFromAST2(node) {
  switch (node.kind) {
    case Kind.OBJECT_TYPE_DEFINITION:
      return makeObjectType(node);
    case Kind.INTERFACE_TYPE_DEFINITION:
      return makeInterfaceType(node);
    case Kind.ENUM_TYPE_DEFINITION:
      return makeEnumType(node);
    case Kind.UNION_TYPE_DEFINITION:
      return makeUnionType(node);
    case Kind.SCALAR_TYPE_DEFINITION:
      return makeScalarType(node);
    case Kind.INPUT_OBJECT_TYPE_DEFINITION:
      return makeInputObjectType(node);
    case Kind.DIRECTIVE_DEFINITION:
      return makeDirective(node);
    default:
      return null;
  }
}
function makeObjectType(node) {
  const config2 = {
    name: node.name.value,
    description: getDescription(node, backcompatOptions),
    interfaces: () => {
      var _a2;
      return ((_a2 = node.interfaces) === null || _a2 === void 0 ? void 0 : _a2.map((iface) => createNamedStub(iface.name.value, "interface"))) || [];
    },
    fields: () => node.fields != null ? makeFields(node.fields) : {},
    astNode: node
  };
  return new GraphQLObjectType(config2);
}
function makeInterfaceType(node) {
  const config2 = {
    name: node.name.value,
    description: getDescription(node, backcompatOptions),
    interfaces: () => {
      var _a2;
      return (_a2 = node.interfaces) === null || _a2 === void 0 ? void 0 : _a2.map((iface) => createNamedStub(iface.name.value, "interface"));
    },
    fields: () => node.fields != null ? makeFields(node.fields) : {},
    astNode: node
  };
  return new GraphQLInterfaceType(config2);
}
function makeEnumType(node) {
  var _a2, _b;
  const values = (_b = (_a2 = node.values) === null || _a2 === void 0 ? void 0 : _a2.reduce((prev, value) => ({
    ...prev,
    [value.name.value]: {
      description: getDescription(value, backcompatOptions),
      deprecationReason: getDeprecationReason2(value),
      astNode: value
    }
  }), {})) !== null && _b !== void 0 ? _b : {};
  return new GraphQLEnumType({
    name: node.name.value,
    description: getDescription(node, backcompatOptions),
    values,
    astNode: node
  });
}
function makeUnionType(node) {
  return new GraphQLUnionType({
    name: node.name.value,
    description: getDescription(node, backcompatOptions),
    types: () => {
      var _a2, _b;
      return (_b = (_a2 = node.types) === null || _a2 === void 0 ? void 0 : _a2.map((type2) => createNamedStub(type2.name.value, "object"))) !== null && _b !== void 0 ? _b : [];
    },
    astNode: node
  });
}
function makeScalarType(node) {
  return new GraphQLScalarType({
    name: node.name.value,
    description: getDescription(node, backcompatOptions),
    astNode: node,
    serialize: (value) => value
  });
}
function makeInputObjectType(node) {
  return new GraphQLInputObjectType({
    name: node.name.value,
    description: getDescription(node, backcompatOptions),
    fields: () => node.fields ? makeValues(node.fields) : {},
    astNode: node
  });
}
function makeFields(nodes) {
  return nodes.reduce((prev, node) => {
    var _a2;
    return {
      ...prev,
      [node.name.value]: {
        type: createStub(node.type, "output"),
        description: getDescription(node, backcompatOptions),
        args: makeValues((_a2 = node.arguments) !== null && _a2 !== void 0 ? _a2 : []),
        deprecationReason: getDeprecationReason2(node),
        astNode: node
      }
    };
  }, {});
}
function makeValues(nodes) {
  return nodes.reduce((prev, node) => ({
    ...prev,
    [node.name.value]: {
      type: createStub(node.type, "input"),
      defaultValue: node.defaultValue !== void 0 ? valueFromASTUntyped(node.defaultValue) : void 0,
      description: getDescription(node, backcompatOptions),
      astNode: node
    }
  }), {});
}
function isLocationValue(value) {
  return value in DirectiveLocation;
}
function makeDirective(node) {
  var _a2;
  const locations = [];
  for (const location of node.locations) {
    const locationValue = location.value;
    if (isLocationValue(locationValue)) {
      locations.push(locationValue);
    }
  }
  return new GraphQLDirective({
    name: node.name.value,
    description: node.description != null ? node.description.value : null,
    locations,
    isRepeatable: node.repeatable,
    args: makeValues((_a2 = node.arguments) !== null && _a2 !== void 0 ? _a2 : []),
    astNode: node
  });
}
function getDeprecationReason2(node) {
  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);
  return deprecated === null || deprecated === void 0 ? void 0 : deprecated["reason"];
}
var ValidationLevel;
(function(ValidationLevel2) {
  ValidationLevel2["Error"] = "error";
  ValidationLevel2["Warn"] = "warn";
  ValidationLevel2["Off"] = "off";
})(ValidationLevel || (ValidationLevel = {}));
function validateFieldConsistency(finalFieldConfig, candidates, typeMergingOptions) {
  const fieldNamespace = `${candidates[0].type.name}.${candidates[0].fieldName}`;
  const finalFieldNull = isNonNullType(finalFieldConfig.type);
  validateTypeConsistency(finalFieldConfig, candidates.map((c) => c.fieldConfig), "field", fieldNamespace, typeMergingOptions);
  if (getValidationSettings(fieldNamespace, typeMergingOptions).strictNullComparison && candidates.some((c) => finalFieldNull !== isNonNullType(c.fieldConfig.type))) {
    validationMessage(`Nullability of field "${fieldNamespace}" does not match across subschemas. Disable typeMergingOptions.validationSettings.strictNullComparison to permit safe divergences.`, fieldNamespace, typeMergingOptions);
  } else if (finalFieldNull && candidates.some((c) => !isNonNullType(c.fieldConfig.type))) {
    validationMessage(`Canonical definition of field "${fieldNamespace}" is not-null while some subschemas permit null. This will be an automatic error in future versions.`, fieldNamespace, typeMergingOptions);
  }
  const argCandidatesMap = /* @__PURE__ */ Object.create(null);
  for (const { fieldConfig } of candidates) {
    if (fieldConfig.args == null) {
      continue;
    }
    for (const argName in fieldConfig.args) {
      const arg = fieldConfig.args[argName];
      argCandidatesMap[argName] = argCandidatesMap[argName] || [];
      argCandidatesMap[argName].push(arg);
    }
  }
  if (Object.values(argCandidatesMap).some((argCandidates) => candidates.length !== argCandidates.length)) {
    validationMessage(`Canonical definition of field "${fieldNamespace}" implements inconsistent argument names across subschemas. Input may be filtered from some requests.`, fieldNamespace, typeMergingOptions);
  }
  for (const argName in argCandidatesMap) {
    if (finalFieldConfig.args == null) {
      continue;
    }
    const argCandidates = argCandidatesMap[argName];
    const argNamespace = `${fieldNamespace}.${argName}`;
    const finalArgConfig = finalFieldConfig.args[argName] || argCandidates[argCandidates.length - 1];
    const finalArgType = getNamedType(finalArgConfig.type);
    const finalArgNull = isNonNullType(finalArgConfig.type);
    validateTypeConsistency(finalArgConfig, argCandidates, "argument", argNamespace, typeMergingOptions);
    if (getValidationSettings(argNamespace, typeMergingOptions).strictNullComparison && argCandidates.some((c) => finalArgNull !== isNonNullType(c.type))) {
      validationMessage(`Nullability of argument "${argNamespace}" does not match across subschemas. Disable typeMergingOptions.validationSettings.strictNullComparison to permit safe divergences.`, argNamespace, typeMergingOptions);
    } else if (!finalArgNull && argCandidates.some((c) => isNonNullType(c.type))) {
      validationMessage(`Canonical definition of argument "${argNamespace}" permits null while some subschemas require not-null. This will be an automatic error in future versions.`, argNamespace, typeMergingOptions);
    }
    if (isEnumType(finalArgType)) {
      validateInputEnumConsistency(finalArgType, argCandidates, typeMergingOptions);
    }
  }
}
function validateInputObjectConsistency(fieldInclusionMap, candidates, typeMergingOptions) {
  for (const fieldName in fieldInclusionMap) {
    const count = fieldInclusionMap[fieldName];
    if (candidates.length !== count) {
      const namespace = `${candidates[0].type.name}.${fieldName}`;
      validationMessage(`Definition of input field "${namespace}" is not implemented by all subschemas. Input may be filtered from some requests.`, namespace, typeMergingOptions);
    }
  }
}
function validateInputFieldConsistency(finalInputFieldConfig, candidates, typeMergingOptions) {
  const inputFieldNamespace = `${candidates[0].type.name}.${candidates[0].fieldName}`;
  const inputFieldConfigs = candidates.map((c) => c.inputFieldConfig);
  const finalInputFieldType = getNamedType(finalInputFieldConfig.type);
  const finalInputFieldNull = isNonNullType(finalInputFieldConfig.type);
  validateTypeConsistency(finalInputFieldConfig, inputFieldConfigs, "input field", inputFieldNamespace, typeMergingOptions);
  if (getValidationSettings(inputFieldNamespace, typeMergingOptions).strictNullComparison && candidates.some((c) => finalInputFieldNull !== isNonNullType(c.inputFieldConfig.type))) {
    validationMessage(`Nullability of input field "${inputFieldNamespace}" does not match across subschemas. Disable typeMergingOptions.validationSettings.strictNullComparison to permit safe divergences.`, inputFieldNamespace, typeMergingOptions);
  } else if (!finalInputFieldNull && candidates.some((c) => isNonNullType(c.inputFieldConfig.type))) {
    validationMessage(`Canonical definition of input field "${inputFieldNamespace}" permits null while some subschemas require not-null. This will be an automatic error in future versions.`, inputFieldNamespace, typeMergingOptions);
  }
  if (isEnumType(finalInputFieldType)) {
    validateInputEnumConsistency(finalInputFieldType, inputFieldConfigs, typeMergingOptions);
  }
}
function validateTypeConsistency(finalElementConfig, candidates, definitionType, settingNamespace, typeMergingOptions) {
  var _a2, _b, _c;
  const finalNamedType = getNamedType(finalElementConfig.type);
  const finalIsScalar = isScalarType(finalNamedType);
  const finalIsList = hasListType(finalElementConfig.type);
  for (const c of candidates) {
    if (finalIsList !== hasListType(c.type)) {
      throw new Error(`Definitions of ${definitionType} "${settingNamespace}" implement inconsistent list types across subschemas and cannot be merged.`);
    }
    const currentNamedType = getNamedType(c.type);
    if (finalNamedType.toString() !== currentNamedType.toString()) {
      const proxiableScalar = !!((_c = (_b = (_a2 = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.validationSettings) === null || _a2 === void 0 ? void 0 : _a2.proxiableScalars) === null || _b === void 0 ? void 0 : _b[finalNamedType.toString()]) === null || _c === void 0 ? void 0 : _c.includes(currentNamedType.toString()));
      const bothScalars = finalIsScalar && isScalarType(currentNamedType);
      const permitScalar = proxiableScalar && bothScalars;
      if (proxiableScalar && !bothScalars) {
        throw new Error(`Types ${finalNamedType} and ${currentNamedType} are not proxiable scalars.`);
      }
      if (!permitScalar) {
        validationMessage(`Definitions of ${definitionType} "${settingNamespace}" implement inconsistent named types across subschemas. This will be an automatic error in future versions.`, settingNamespace, typeMergingOptions);
      }
    }
  }
}
function hasListType(type2) {
  return isListType(getNullableType(type2));
}
function validateInputEnumConsistency(inputEnumType, candidates, typeMergingOptions) {
  const enumValueInclusionMap = /* @__PURE__ */ Object.create(null);
  for (const candidate of candidates) {
    const enumType = getNamedType(candidate.type);
    if (isEnumType(enumType)) {
      for (const { value } of enumType.getValues()) {
        enumValueInclusionMap[value] = enumValueInclusionMap[value] || 0;
        enumValueInclusionMap[value] += 1;
      }
    }
  }
  if (Object.values(enumValueInclusionMap).some((count) => candidates.length !== count)) {
    validationMessage(`Enum "${inputEnumType.name}" is used as an input with inconsistent values across subschemas. This will be an automatic error in future versions.`, inputEnumType.name, typeMergingOptions);
  }
}
function validationMessage(message, settingNamespace, typeMergingOptions) {
  var _a2;
  const override = `typeMergingOptions.validationScopes['${settingNamespace}'].validationLevel`;
  const settings = getValidationSettings(settingNamespace, typeMergingOptions);
  switch ((_a2 = settings.validationLevel) !== null && _a2 !== void 0 ? _a2 : ValidationLevel.Warn) {
    case ValidationLevel.Off:
      return;
    case ValidationLevel.Error:
      throw new Error(`${message} If this is intentional, you may disable this error by setting ${override} = "warn|off"`);
    default:
      console.warn(`${message} To disable this warning or elevate it to an error, set ${override} = "error|off"`);
  }
}
function getValidationSettings(settingNamespace, typeMergingOptions) {
  var _a2, _b, _c;
  return {
    ...(_a2 = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.validationSettings) !== null && _a2 !== void 0 ? _a2 : {},
    ...(_c = (_b = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.validationScopes) === null || _b === void 0 ? void 0 : _b[settingNamespace]) !== null && _c !== void 0 ? _c : {}
  };
}
function mergeCandidates(typeName, candidates, typeMergingOptions) {
  const initialCandidateType = candidates[0].type;
  if (candidates.some((candidate) => candidate.type.constructor !== initialCandidateType.constructor)) {
    throw new Error(`Cannot merge different type categories into common type ${typeName}.`);
  }
  if (isObjectType(initialCandidateType)) {
    return mergeObjectTypeCandidates(typeName, candidates, typeMergingOptions);
  } else if (isInputObjectType(initialCandidateType)) {
    return mergeInputObjectTypeCandidates(typeName, candidates, typeMergingOptions);
  } else if (isInterfaceType(initialCandidateType)) {
    return mergeInterfaceTypeCandidates(typeName, candidates, typeMergingOptions);
  } else if (isUnionType(initialCandidateType)) {
    return mergeUnionTypeCandidates(typeName, candidates, typeMergingOptions);
  } else if (isEnumType(initialCandidateType)) {
    return mergeEnumTypeCandidates(typeName, candidates, typeMergingOptions);
  } else if (isScalarType(initialCandidateType)) {
    return mergeScalarTypeCandidates(typeName, candidates, typeMergingOptions);
  } else {
    throw new Error(`Type ${typeName} has unknown GraphQL type.`);
  }
}
function mergeObjectTypeCandidates(typeName, candidates, typeMergingOptions) {
  candidates = orderedTypeCandidates(candidates, typeMergingOptions);
  const description = mergeTypeDescriptions(candidates, typeMergingOptions);
  const fields = fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);
  const typeConfigs = candidates.map((candidate) => candidate.type.toConfig());
  const interfaceMap = typeConfigs.map((typeConfig2) => typeConfig2.interfaces).reduce((acc, interfaces2) => {
    if (interfaces2 != null) {
      for (const iface of interfaces2) {
        acc[iface.name] = iface;
      }
    }
    return acc;
  }, /* @__PURE__ */ Object.create(null));
  const interfaces = Object.values(interfaceMap);
  const astNodes = pluck("astNode", candidates);
  const fieldAstNodes = canonicalFieldNamesForType(candidates).map((fieldName) => {
    var _a2;
    return (_a2 = fields[fieldName]) === null || _a2 === void 0 ? void 0 : _a2.astNode;
  }).filter((n) => n != null);
  if (astNodes.length > 1 && fieldAstNodes.length) {
    astNodes.push({
      ...astNodes[astNodes.length - 1],
      fields: JSON.parse(JSON.stringify(fieldAstNodes))
    });
  }
  const astNode = astNodes.slice(1).reduce((acc, astNode2) => mergeType(astNode2, acc, { ignoreFieldConflicts: true }), astNodes[0]);
  const extensionASTNodes = pluck("extensionASTNodes", candidates);
  const extensions = Object.assign({}, ...pluck("extensions", candidates));
  const typeConfig = {
    name: typeName,
    description,
    fields,
    interfaces,
    astNode,
    extensionASTNodes,
    extensions
  };
  return new GraphQLObjectType(typeConfig);
}
function mergeInputObjectTypeCandidates(typeName, candidates, typeMergingOptions) {
  candidates = orderedTypeCandidates(candidates, typeMergingOptions);
  const description = mergeTypeDescriptions(candidates, typeMergingOptions);
  const fields = inputFieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);
  const astNodes = pluck("astNode", candidates);
  const fieldAstNodes = canonicalFieldNamesForType(candidates).map((fieldName) => {
    var _a2;
    return (_a2 = fields[fieldName]) === null || _a2 === void 0 ? void 0 : _a2.astNode;
  }).filter((n) => n != null);
  if (astNodes.length > 1 && fieldAstNodes.length) {
    astNodes.push({
      ...astNodes[astNodes.length - 1],
      fields: JSON.parse(JSON.stringify(fieldAstNodes))
    });
  }
  const astNode = astNodes.slice(1).reduce((acc, astNode2) => mergeInputType(astNode2, acc, {
    ignoreFieldConflicts: true
  }), astNodes[0]);
  const extensionASTNodes = pluck("extensionASTNodes", candidates);
  const extensions = Object.assign({}, ...pluck("extensions", candidates));
  const typeConfig = {
    name: typeName,
    description,
    fields,
    astNode,
    extensionASTNodes,
    extensions
  };
  return new GraphQLInputObjectType(typeConfig);
}
function pluck(typeProperty, candidates) {
  return candidates.map((candidate) => candidate.type[typeProperty]).filter((value) => value != null);
}
function mergeInterfaceTypeCandidates(typeName, candidates, typeMergingOptions) {
  candidates = orderedTypeCandidates(candidates, typeMergingOptions);
  const description = mergeTypeDescriptions(candidates, typeMergingOptions);
  const fields = fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);
  const typeConfigs = candidates.map((candidate) => candidate.type.toConfig());
  const interfaceMap = typeConfigs.map((typeConfig2) => "interfaces" in typeConfig2 ? typeConfig2.interfaces : []).reduce((acc, interfaces2) => {
    if (interfaces2 != null) {
      for (const iface of interfaces2) {
        acc[iface.name] = iface;
      }
    }
    return acc;
  }, /* @__PURE__ */ Object.create(null));
  const interfaces = Object.values(interfaceMap);
  const astNodes = pluck("astNode", candidates);
  const fieldAstNodes = canonicalFieldNamesForType(candidates).map((fieldName) => {
    var _a2;
    return (_a2 = fields[fieldName]) === null || _a2 === void 0 ? void 0 : _a2.astNode;
  }).filter((n) => n != null);
  if (astNodes.length > 1 && fieldAstNodes.length) {
    astNodes.push({
      ...astNodes[astNodes.length - 1],
      fields: JSON.parse(JSON.stringify(fieldAstNodes))
    });
  }
  const astNode = astNodes.slice(1).reduce((acc, astNode2) => mergeInterface(astNode2, acc, {
    ignoreFieldConflicts: true
  }), astNodes[0]);
  const extensionASTNodes = pluck("extensionASTNodes", candidates);
  const extensions = Object.assign({}, ...pluck("extensions", candidates));
  const typeConfig = {
    name: typeName,
    description,
    fields,
    interfaces,
    astNode,
    extensionASTNodes,
    extensions
  };
  return new GraphQLInterfaceType(typeConfig);
}
function mergeUnionTypeCandidates(typeName, candidates, typeMergingOptions) {
  candidates = orderedTypeCandidates(candidates, typeMergingOptions);
  const description = mergeTypeDescriptions(candidates, typeMergingOptions);
  const typeConfigs = candidates.map((candidate) => {
    if (!isUnionType(candidate.type)) {
      throw new Error(`Expected ${candidate.type} to be a union type!`);
    }
    return candidate.type.toConfig();
  });
  const typeMap = typeConfigs.reduce((acc, typeConfig2) => {
    for (const type2 of typeConfig2.types) {
      acc[type2.name] = type2;
    }
    return acc;
  }, /* @__PURE__ */ Object.create(null));
  const types = Object.values(typeMap);
  const astNodes = pluck("astNode", candidates);
  const astNode = astNodes.slice(1).reduce((acc, astNode2) => mergeUnion(astNode2, acc), astNodes[0]);
  const extensionASTNodes = pluck("extensionASTNodes", candidates);
  const extensions = Object.assign({}, ...pluck("extensions", candidates));
  const typeConfig = {
    name: typeName,
    description,
    types,
    astNode,
    extensionASTNodes,
    extensions
  };
  return new GraphQLUnionType(typeConfig);
}
function mergeEnumTypeCandidates(typeName, candidates, typeMergingOptions) {
  candidates = orderedTypeCandidates(candidates, typeMergingOptions);
  const description = mergeTypeDescriptions(candidates, typeMergingOptions);
  const values = enumValueConfigMapFromTypeCandidates(candidates, typeMergingOptions);
  const astNodes = pluck("astNode", candidates);
  const astNode = astNodes.slice(1).reduce((acc, astNode2) => mergeEnum(astNode2, acc, { consistentEnumMerge: true }), astNodes[0]);
  const extensionASTNodes = pluck("extensionASTNodes", candidates);
  const extensions = Object.assign({}, ...pluck("extensions", candidates));
  const typeConfig = {
    name: typeName,
    description,
    values,
    astNode,
    extensionASTNodes,
    extensions
  };
  return new GraphQLEnumType(typeConfig);
}
function enumValueConfigMapFromTypeCandidates(candidates, typeMergingOptions) {
  var _a2;
  const enumValueConfigCandidatesMap = /* @__PURE__ */ Object.create(null);
  for (const candidate of candidates) {
    const valueMap = candidate.type.toConfig().values;
    for (const enumValue in valueMap) {
      const enumValueConfigCandidate = {
        enumValueConfig: valueMap[enumValue],
        enumValue,
        type: candidate.type,
        subschema: candidate.subschema,
        transformedSubschema: candidate.transformedSubschema
      };
      if (enumValue in enumValueConfigCandidatesMap) {
        enumValueConfigCandidatesMap[enumValue].push(enumValueConfigCandidate);
      } else {
        enumValueConfigCandidatesMap[enumValue] = [enumValueConfigCandidate];
      }
    }
  }
  const enumValueConfigMap = /* @__PURE__ */ Object.create(null);
  for (const enumValue in enumValueConfigCandidatesMap) {
    const enumValueConfigMerger = (_a2 = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.enumValueConfigMerger) !== null && _a2 !== void 0 ? _a2 : defaultEnumValueConfigMerger;
    enumValueConfigMap[enumValue] = enumValueConfigMerger(enumValueConfigCandidatesMap[enumValue]);
  }
  return enumValueConfigMap;
}
function defaultEnumValueConfigMerger(candidates) {
  const preferred = candidates.find(({ type: type2, transformedSubschema }) => {
    var _a2, _b;
    return isSubschemaConfig(transformedSubschema) && ((_b = (_a2 = transformedSubschema.merge) === null || _a2 === void 0 ? void 0 : _a2[type2.name]) === null || _b === void 0 ? void 0 : _b.canonical);
  });
  return (preferred || candidates[candidates.length - 1]).enumValueConfig;
}
function mergeScalarTypeCandidates(typeName, candidates, typeMergingOptions) {
  candidates = orderedTypeCandidates(candidates, typeMergingOptions);
  const description = mergeTypeDescriptions(candidates, typeMergingOptions);
  const serializeFns = pluck("serialize", candidates);
  const serialize = serializeFns[serializeFns.length - 1];
  const parseValueFns = pluck("parseValue", candidates);
  const parseValue2 = parseValueFns[parseValueFns.length - 1];
  const parseLiteralFns = pluck("parseLiteral", candidates);
  const parseLiteral = parseLiteralFns[parseLiteralFns.length - 1];
  const astNodes = pluck("astNode", candidates);
  const astNode = astNodes.slice(1).reduce((acc, astNode2) => mergeScalar(astNode2, acc), astNodes[0]);
  const extensionASTNodes = pluck("extensionASTNodes", candidates);
  const extensions = Object.assign({}, ...pluck("extensions", candidates));
  const typeConfig = {
    name: typeName,
    description,
    serialize,
    parseValue: parseValue2,
    parseLiteral,
    astNode,
    extensionASTNodes,
    extensions
  };
  return new GraphQLScalarType(typeConfig);
}
function orderedTypeCandidates(candidates, typeMergingOptions) {
  var _a2;
  const typeCandidateMerger = (_a2 = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.typeCandidateMerger) !== null && _a2 !== void 0 ? _a2 : defaultTypeCandidateMerger;
  const candidate = typeCandidateMerger(candidates);
  return candidates.filter((c) => c !== candidate).concat([candidate]);
}
function defaultTypeCandidateMerger(candidates) {
  const canonical = candidates.filter(({ type: type2, transformedSubschema }) => {
    var _a2, _b;
    return isSubschemaConfig(transformedSubschema) ? (_b = (_a2 = transformedSubschema.merge) === null || _a2 === void 0 ? void 0 : _a2[type2.name]) === null || _b === void 0 ? void 0 : _b.canonical : false;
  });
  if (canonical.length > 1) {
    throw new Error(`Multiple canonical definitions for "${canonical[0].type.name}"`);
  } else if (canonical.length) {
    return canonical[0];
  }
  return candidates[candidates.length - 1];
}
function mergeTypeDescriptions(candidates, typeMergingOptions) {
  var _a2;
  const typeDescriptionsMerger = (_a2 = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.typeDescriptionsMerger) !== null && _a2 !== void 0 ? _a2 : defaultTypeDescriptionMerger;
  return typeDescriptionsMerger(candidates);
}
function defaultTypeDescriptionMerger(candidates) {
  return candidates[candidates.length - 1].type.description;
}
function fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions) {
  const fieldConfigCandidatesMap = /* @__PURE__ */ Object.create(null);
  for (const candidate of candidates) {
    const typeConfig = candidate.type.toConfig();
    const fieldConfigMap2 = typeConfig.fields;
    for (const fieldName in fieldConfigMap2) {
      const fieldConfig = fieldConfigMap2[fieldName];
      const fieldConfigCandidate = {
        fieldConfig,
        fieldName,
        type: candidate.type,
        subschema: candidate.subschema,
        transformedSubschema: candidate.transformedSubschema
      };
      if (fieldName in fieldConfigCandidatesMap) {
        fieldConfigCandidatesMap[fieldName].push(fieldConfigCandidate);
      } else {
        fieldConfigCandidatesMap[fieldName] = [fieldConfigCandidate];
      }
    }
  }
  const fieldConfigMap = /* @__PURE__ */ Object.create(null);
  for (const fieldName in fieldConfigCandidatesMap) {
    fieldConfigMap[fieldName] = mergeFieldConfigs(fieldConfigCandidatesMap[fieldName], typeMergingOptions);
  }
  return fieldConfigMap;
}
function mergeFieldConfigs(candidates, typeMergingOptions) {
  var _a2;
  const fieldConfigMerger = (_a2 = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.fieldConfigMerger) !== null && _a2 !== void 0 ? _a2 : defaultFieldConfigMerger;
  const finalFieldConfig = fieldConfigMerger(candidates);
  validateFieldConsistency(finalFieldConfig, candidates, typeMergingOptions);
  return finalFieldConfig;
}
function defaultFieldConfigMerger(candidates) {
  var _a2, _b, _c, _d, _e, _f;
  const canonicalByField = [];
  const canonicalByType = [];
  for (const { type: type2, fieldName, fieldConfig, transformedSubschema } of candidates) {
    if (!isSubschemaConfig(transformedSubschema))
      continue;
    if ((_d = (_c = (_b = (_a2 = transformedSubschema.merge) === null || _a2 === void 0 ? void 0 : _a2[type2.name]) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c[fieldName]) === null || _d === void 0 ? void 0 : _d.canonical) {
      canonicalByField.push(fieldConfig);
    } else if ((_f = (_e = transformedSubschema.merge) === null || _e === void 0 ? void 0 : _e[type2.name]) === null || _f === void 0 ? void 0 : _f.canonical) {
      canonicalByType.push(fieldConfig);
    }
  }
  if (canonicalByField.length > 1) {
    throw new Error(`Multiple canonical definitions for "${candidates[0].type.name}.${candidates[0].fieldName}"`);
  } else if (canonicalByField.length) {
    return canonicalByField[0];
  } else if (canonicalByType.length) {
    return canonicalByType[0];
  }
  return candidates[candidates.length - 1].fieldConfig;
}
function inputFieldConfigMapFromTypeCandidates(candidates, typeMergingOptions) {
  var _a2;
  const inputFieldConfigCandidatesMap = /* @__PURE__ */ Object.create(null);
  const fieldInclusionMap = /* @__PURE__ */ Object.create(null);
  for (const candidate of candidates) {
    const typeConfig = candidate.type.toConfig();
    const inputFieldConfigMap2 = typeConfig.fields;
    for (const fieldName in inputFieldConfigMap2) {
      const inputFieldConfig = inputFieldConfigMap2[fieldName];
      fieldInclusionMap[fieldName] = fieldInclusionMap[fieldName] || 0;
      fieldInclusionMap[fieldName] += 1;
      const inputFieldConfigCandidate = {
        inputFieldConfig,
        fieldName,
        type: candidate.type,
        subschema: candidate.subschema,
        transformedSubschema: candidate.transformedSubschema
      };
      if (fieldName in inputFieldConfigCandidatesMap) {
        inputFieldConfigCandidatesMap[fieldName].push(inputFieldConfigCandidate);
      } else {
        inputFieldConfigCandidatesMap[fieldName] = [inputFieldConfigCandidate];
      }
    }
  }
  validateInputObjectConsistency(fieldInclusionMap, candidates, typeMergingOptions);
  const inputFieldConfigMap = /* @__PURE__ */ Object.create(null);
  for (const fieldName in inputFieldConfigCandidatesMap) {
    const inputFieldConfigMerger = (_a2 = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.inputFieldConfigMerger) !== null && _a2 !== void 0 ? _a2 : defaultInputFieldConfigMerger;
    inputFieldConfigMap[fieldName] = inputFieldConfigMerger(inputFieldConfigCandidatesMap[fieldName]);
    validateInputFieldConsistency(inputFieldConfigMap[fieldName], inputFieldConfigCandidatesMap[fieldName], typeMergingOptions);
  }
  return inputFieldConfigMap;
}
function defaultInputFieldConfigMerger(candidates) {
  var _a2, _b, _c, _d, _e, _f;
  const canonicalByField = [];
  const canonicalByType = [];
  for (const { type: type2, fieldName, inputFieldConfig, transformedSubschema } of candidates) {
    if (!isSubschemaConfig(transformedSubschema))
      continue;
    if ((_d = (_c = (_b = (_a2 = transformedSubschema.merge) === null || _a2 === void 0 ? void 0 : _a2[type2.name]) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c[fieldName]) === null || _d === void 0 ? void 0 : _d.canonical) {
      canonicalByField.push(inputFieldConfig);
    } else if ((_f = (_e = transformedSubschema.merge) === null || _e === void 0 ? void 0 : _e[type2.name]) === null || _f === void 0 ? void 0 : _f.canonical) {
      canonicalByType.push(inputFieldConfig);
    }
  }
  if (canonicalByField.length > 1) {
    throw new Error(`Multiple canonical definitions for "${candidates[0].type.name}.${candidates[0].fieldName}"`);
  } else if (canonicalByField.length) {
    return canonicalByField[0];
  } else if (canonicalByType.length) {
    return canonicalByType[0];
  }
  return candidates[candidates.length - 1].inputFieldConfig;
}
function canonicalFieldNamesForType(candidates) {
  var _a2;
  const canonicalFieldNames = /* @__PURE__ */ Object.create(null);
  for (const { type: type2, transformedSubschema } of candidates) {
    if (!isSubschemaConfig(transformedSubschema))
      continue;
    const mergeConfig = (_a2 = transformedSubschema.merge) === null || _a2 === void 0 ? void 0 : _a2[type2.name];
    if (mergeConfig != null && mergeConfig.fields != null && !mergeConfig.canonical) {
      for (const fieldName in mergeConfig.fields) {
        const mergedFieldConfig = mergeConfig.fields[fieldName];
        if (mergedFieldConfig.canonical) {
          canonicalFieldNames[fieldName] = true;
        }
      }
    }
  }
  return Object.keys(canonicalFieldNames);
}
function extractDefinitions(ast) {
  const typeDefinitions = [];
  const directiveDefs = [];
  const schemaDefs = [];
  const schemaExtensions = [];
  const extensionDefs = [];
  for (const def of ast.definitions) {
    switch (def.kind) {
      case Kind.OBJECT_TYPE_DEFINITION:
      case Kind.INTERFACE_TYPE_DEFINITION:
      case Kind.INPUT_OBJECT_TYPE_DEFINITION:
      case Kind.UNION_TYPE_DEFINITION:
      case Kind.ENUM_TYPE_DEFINITION:
      case Kind.SCALAR_TYPE_DEFINITION:
        typeDefinitions.push(def);
        break;
      case Kind.DIRECTIVE_DEFINITION:
        directiveDefs.push(def);
        break;
      case Kind.SCHEMA_DEFINITION:
        schemaDefs.push(def);
        break;
      case Kind.SCHEMA_EXTENSION:
        schemaExtensions.push(def);
        break;
      case Kind.OBJECT_TYPE_EXTENSION:
      case Kind.INTERFACE_TYPE_EXTENSION:
      case Kind.INPUT_OBJECT_TYPE_EXTENSION:
      case Kind.UNION_TYPE_EXTENSION:
      case Kind.ENUM_TYPE_EXTENSION:
      case Kind.SCALAR_TYPE_EXTENSION:
        extensionDefs.push(def);
        break;
    }
  }
  return {
    typeDefinitions,
    directiveDefs,
    schemaDefs,
    schemaExtensions,
    extensionDefs
  };
}
function buildTypeCandidates({ subschemas, originalSubschemaMap, types, typeDefs, parseOptions, extensions, directiveMap, schemaDefs, mergeDirectives: mergeDirectives2 }) {
  const typeCandidates = /* @__PURE__ */ Object.create(null);
  let schemaDef;
  let schemaExtensions = [];
  let document;
  let extraction;
  if (typeDefs && !Array.isArray(typeDefs) || Array.isArray(typeDefs) && typeDefs.length) {
    document = mergeTypeDefs(typeDefs, parseOptions);
    extraction = extractDefinitions(document);
    schemaDef = extraction.schemaDefs[0];
    schemaExtensions = schemaExtensions.concat(extraction.schemaExtensions);
  }
  schemaDefs.schemaDef = schemaDef !== null && schemaDef !== void 0 ? schemaDef : schemaDefs.schemaDef;
  schemaDefs.schemaExtensions = schemaExtensions;
  const rootTypeNameMap = getRootTypeNameMap(schemaDefs);
  for (const subschema of subschemas) {
    const schema2 = wrapSchema(subschema);
    const rootTypeMap = getRootTypeMap(schema2);
    const rootTypes = getRootTypes(schema2);
    for (const [operation, rootType] of rootTypeMap.entries()) {
      addTypeCandidate(typeCandidates, rootTypeNameMap[operation], {
        type: rootType,
        subschema: originalSubschemaMap.get(subschema),
        transformedSubschema: subschema
      });
    }
    if (mergeDirectives2 === true) {
      for (const directive of schema2.getDirectives()) {
        directiveMap[directive.name] = directive;
      }
    }
    const originalTypeMap = schema2.getTypeMap();
    for (const typeName in originalTypeMap) {
      const type2 = originalTypeMap[typeName];
      if (isNamedType(type2) && getNamedType(type2).name.slice(0, 2) !== "__" && !rootTypes.has(type2)) {
        addTypeCandidate(typeCandidates, type2.name, {
          type: type2,
          subschema: originalSubschemaMap.get(subschema),
          transformedSubschema: subschema
        });
      }
    }
  }
  if (document != null && extraction != null) {
    for (const def of extraction.typeDefinitions) {
      const type2 = typeFromAST2(def);
      if (!isNamedType(type2)) {
        throw new Error(`Expected to get named typed but got ${inspect2(def)}`);
      }
      if (type2 != null) {
        addTypeCandidate(typeCandidates, type2.name, { type: type2 });
      }
    }
    for (const def of extraction.directiveDefs) {
      const directive = typeFromAST2(def);
      if (!isDirective(directive)) {
        throw new Error(`Expected to get directive type but got ${inspect2(def)}`);
      }
      directiveMap[directive.name] = directive;
    }
    if (extraction.extensionDefs.length > 0) {
      extensions.push({
        ...document,
        definitions: extraction.extensionDefs
      });
    }
  }
  for (const type2 of types) {
    addTypeCandidate(typeCandidates, type2.name, { type: type2 });
  }
  return [typeCandidates, rootTypeNameMap];
}
function getRootTypeNameMap({ schemaDef, schemaExtensions }) {
  const rootTypeNameMap = {
    query: "Query",
    mutation: "Mutation",
    subscription: "Subscription"
  };
  const allNodes = schemaExtensions.slice();
  if (schemaDef != null) {
    allNodes.unshift(schemaDef);
  }
  for (const node of allNodes) {
    if (node.operationTypes != null) {
      for (const operationType of node.operationTypes) {
        rootTypeNameMap[operationType.operation] = operationType.type.name.value;
      }
    }
  }
  return rootTypeNameMap;
}
function addTypeCandidate(typeCandidates, name, typeCandidate) {
  if (!(name in typeCandidates)) {
    typeCandidates[name] = [];
  }
  typeCandidates[name].push(typeCandidate);
}
function buildTypes({ typeCandidates, directives, stitchingInfo, rootTypeNames, onTypeConflict, mergeTypes, typeMergingOptions }) {
  const typeMap = /* @__PURE__ */ Object.create(null);
  for (const typeName in typeCandidates) {
    if (rootTypeNames.includes(typeName) || mergeTypes === true && !typeCandidates[typeName].some((candidate) => isSpecifiedScalarType(candidate.type)) || typeof mergeTypes === "function" && mergeTypes(typeCandidates[typeName], typeName) || Array.isArray(mergeTypes) && mergeTypes.includes(typeName) || stitchingInfo != null && typeName in stitchingInfo.mergedTypes) {
      typeMap[typeName] = mergeCandidates(typeName, typeCandidates[typeName], typeMergingOptions);
    } else {
      const candidateSelector = onTypeConflict != null ? onTypeConflictToCandidateSelector(onTypeConflict) : (cands) => cands[cands.length - 1];
      typeMap[typeName] = candidateSelector(typeCandidates[typeName]).type;
    }
  }
  return rewireTypes(typeMap, directives);
}
function onTypeConflictToCandidateSelector(onTypeConflict) {
  return (cands) => cands.reduce((prev, next) => {
    const type2 = onTypeConflict(prev.type, next.type, {
      left: {
        subschema: prev.subschema,
        transformedSubschema: prev.transformedSubschema
      },
      right: {
        subschema: next.subschema,
        transformedSubschema: next.transformedSubschema
      }
    });
    if (prev.type === type2) {
      return prev;
    } else if (next.type === type2) {
      return next;
    }
    return {
      schemaName: "unknown",
      type: type2
    };
  });
}
function createMergedTypeResolver(mergedTypeResolverOptions) {
  const { fieldName, argsFromKeys, valuesFromResults, args } = mergedTypeResolverOptions;
  if (argsFromKeys != null) {
    return function mergedBatchedTypeResolver(_originalResult, context, info, subschema, selectionSet, key, type2 = getNamedType(info.returnType)) {
      return batchDelegateToSchema({
        schema: subschema,
        operation: "query",
        fieldName,
        returnType: new GraphQLList(type2),
        key,
        argsFromKeys,
        valuesFromResults,
        selectionSet,
        context,
        info,
        skipTypeMerging: true
      });
    };
  }
  if (args != null) {
    return function mergedTypeResolver(originalResult, context, info, subschema, selectionSet, _key, type2 = getNamedType(info.returnType)) {
      return delegateToSchema({
        schema: subschema,
        operation: "query",
        fieldName,
        returnType: type2,
        args: args(originalResult),
        selectionSet,
        context,
        info,
        skipTypeMerging: true
      });
    };
  }
  return void 0;
}
function getFieldsNotInSubschema(schema2, stitchingInfo, gatewayType, subschemaType, fieldNodes, fragments, variableValues) {
  var _a2;
  const subFieldNodesByResponseKey = collectSubFields(schema2, fragments, variableValues, gatewayType, fieldNodes);
  const fieldNodesByField = stitchingInfo === null || stitchingInfo === void 0 ? void 0 : stitchingInfo.fieldNodesByField;
  const fields = subschemaType.getFields();
  const fieldsNotInSchema = /* @__PURE__ */ new Set();
  for (const [, subFieldNodes] of subFieldNodesByResponseKey) {
    const fieldName = subFieldNodes[0].name.value;
    if (!fields[fieldName]) {
      for (const subFieldNode of subFieldNodes) {
        fieldsNotInSchema.add(subFieldNode);
      }
    }
    const fieldNodesForField = (_a2 = fieldNodesByField === null || fieldNodesByField === void 0 ? void 0 : fieldNodesByField[gatewayType.name]) === null || _a2 === void 0 ? void 0 : _a2[fieldName];
    if (fieldNodesForField) {
      for (const fieldNode of fieldNodesForField) {
        if (!fields[fieldNode.name.value]) {
          fieldsNotInSchema.add(fieldNode);
        }
      }
    }
  }
  return Array.from(fieldsNotInSchema);
}
function calculateDelegationStage(mergedTypeInfo, sourceSubschemas, targetSubschemas, fieldNodes) {
  var _a2;
  const { selectionSets, fieldSelectionSets, uniqueFields, nonUniqueFields } = mergedTypeInfo;
  const proxiableSubschemas = [];
  const nonProxiableSubschemas = [];
  for (const t of targetSubschemas) {
    const selectionSet = selectionSets.get(t);
    const fieldSelectionSetsMap = fieldSelectionSets.get(t);
    if (selectionSet != null && !subschemaTypesContainSelectionSet(mergedTypeInfo, sourceSubschemas, selectionSet)) {
      nonProxiableSubschemas.push(t);
    } else {
      if (fieldSelectionSetsMap == null || fieldNodes.every((fieldNode) => {
        const fieldName = fieldNode.name.value;
        const fieldSelectionSet = fieldSelectionSetsMap[fieldName];
        return fieldSelectionSet == null || subschemaTypesContainSelectionSet(mergedTypeInfo, sourceSubschemas, fieldSelectionSet);
      })) {
        proxiableSubschemas.push(t);
      } else {
        nonProxiableSubschemas.push(t);
      }
    }
  }
  const unproxiableFieldNodes = [];
  const delegationMap = /* @__PURE__ */ new Map();
  for (const fieldNode of fieldNodes) {
    if (fieldNode.name.value === "__typename") {
      continue;
    }
    const uniqueSubschema = uniqueFields[fieldNode.name.value];
    if (uniqueSubschema != null) {
      if (!proxiableSubschemas.includes(uniqueSubschema)) {
        unproxiableFieldNodes.push(fieldNode);
        continue;
      }
      const existingSubschema2 = (_a2 = delegationMap.get(uniqueSubschema)) === null || _a2 === void 0 ? void 0 : _a2.selections;
      if (existingSubschema2 != null) {
        existingSubschema2.push(fieldNode);
      } else {
        delegationMap.set(uniqueSubschema, {
          kind: Kind.SELECTION_SET,
          selections: [fieldNode]
        });
      }
      continue;
    }
    let nonUniqueSubschemas = nonUniqueFields[fieldNode.name.value];
    if (nonUniqueSubschemas == null) {
      unproxiableFieldNodes.push(fieldNode);
      continue;
    }
    nonUniqueSubschemas = nonUniqueSubschemas.filter((s) => proxiableSubschemas.includes(s));
    if (!nonUniqueSubschemas.length) {
      unproxiableFieldNodes.push(fieldNode);
      continue;
    }
    const existingSubschema = nonUniqueSubschemas.find((s) => delegationMap.has(s));
    if (existingSubschema != null) {
      delegationMap.get(existingSubschema).selections.push(fieldNode);
    } else {
      delegationMap.set(nonUniqueSubschemas[0], {
        kind: Kind.SELECTION_SET,
        selections: [fieldNode]
      });
    }
  }
  return {
    delegationMap,
    proxiableSubschemas,
    nonProxiableSubschemas,
    unproxiableFieldNodes
  };
}
function getStitchingInfo(schema2) {
  var _a2;
  const stitchingInfo = (_a2 = schema2.extensions) === null || _a2 === void 0 ? void 0 : _a2["stitchingInfo"];
  if (!stitchingInfo) {
    throw new Error(`Schema is not a stitched schema.`);
  }
  return stitchingInfo;
}
function createDelegationPlanBuilder(mergedTypeInfo) {
  return memoize5(function delegationPlanBuilder(schema2, sourceSubschema, variableValues, fragments, fieldNodes) {
    var _a2;
    const stitchingInfo = getStitchingInfo(schema2);
    const targetSubschemas = mergedTypeInfo === null || mergedTypeInfo === void 0 ? void 0 : mergedTypeInfo.targetSubschemas.get(sourceSubschema);
    if (!targetSubschemas || !targetSubschemas.length) {
      return [];
    }
    const typeName = mergedTypeInfo.typeName;
    const fieldsNotInSubschema = getFieldsNotInSubschema(schema2, stitchingInfo, schema2.getType(typeName), (_a2 = mergedTypeInfo.typeMaps.get(sourceSubschema)) === null || _a2 === void 0 ? void 0 : _a2[typeName], fieldNodes, fragments, variableValues);
    if (!fieldsNotInSubschema.length) {
      return [];
    }
    const delegationMaps = [];
    let sourceSubschemas = createSubschemas(sourceSubschema);
    let delegationStage = calculateDelegationStage(mergedTypeInfo, sourceSubschemas, targetSubschemas, fieldsNotInSubschema);
    let { delegationMap } = delegationStage;
    while (delegationMap.size) {
      delegationMaps.push(delegationMap);
      const { proxiableSubschemas, nonProxiableSubschemas, unproxiableFieldNodes } = delegationStage;
      sourceSubschemas = combineSubschemas(sourceSubschemas, proxiableSubschemas);
      delegationStage = calculateDelegationStage(mergedTypeInfo, sourceSubschemas, nonProxiableSubschemas, unproxiableFieldNodes);
      delegationMap = delegationStage.delegationMap;
    }
    return delegationMaps;
  });
}
var createSubschemas = memoize1(function createSubschemas2(sourceSubschema) {
  return [sourceSubschema];
});
var combineSubschemas = memoize2(function combineSubschemas2(sourceSubschemas, additionalSubschemas) {
  return sourceSubschemas.concat(additionalSubschemas);
});
var subschemaTypesContainSelectionSet = memoize32(function subschemaTypesContainSelectionSet2(mergedTypeInfo, sourceSubchemas, selectionSet) {
  return typesContainSelectionSet(sourceSubchemas.map((sourceSubschema) => sourceSubschema.transformedSchema.getType(mergedTypeInfo.typeName)), selectionSet);
});
function typesContainSelectionSet(types, selectionSet) {
  var _a2;
  const fieldMaps = types.map((type2) => type2.getFields());
  for (const selection of selectionSet.selections) {
    if (selection.kind === Kind.FIELD) {
      const fields = fieldMaps.map((fieldMap) => fieldMap[selection.name.value]).filter((field) => field != null);
      if (!fields.length) {
        return false;
      }
      if (selection.selectionSet != null) {
        return typesContainSelectionSet(fields.map((field) => getNamedType(field.type)), selection.selectionSet);
      }
    } else if (selection.kind === Kind.INLINE_FRAGMENT && ((_a2 = selection.typeCondition) === null || _a2 === void 0 ? void 0 : _a2.name.value) === types[0].name) {
      return typesContainSelectionSet(types, selection.selectionSet);
    }
  }
  return true;
}
function createStitchingInfo(subschemaMap, typeCandidates, mergeTypes) {
  const mergedTypes = createMergedTypes(typeCandidates, mergeTypes);
  return {
    subschemaMap,
    fieldNodesByType: /* @__PURE__ */ Object.create(null),
    fieldNodesByField: /* @__PURE__ */ Object.create(null),
    dynamicSelectionSetsByField: /* @__PURE__ */ Object.create(null),
    mergedTypes
  };
}
function createMergedTypes(typeCandidates, mergeTypes) {
  var _a2, _b;
  const mergedTypes = /* @__PURE__ */ Object.create(null);
  for (const typeName in typeCandidates) {
    if (typeCandidates[typeName].length > 1 && (isObjectType(typeCandidates[typeName][0].type) || isInterfaceType(typeCandidates[typeName][0].type))) {
      const typeCandidatesWithMergedTypeConfig = typeCandidates[typeName].filter((typeCandidate) => typeCandidate.transformedSubschema != null && typeCandidate.transformedSubschema.merge != null && typeName in typeCandidate.transformedSubschema.merge);
      if (mergeTypes === true || typeof mergeTypes === "function" && mergeTypes(typeCandidates[typeName], typeName) || Array.isArray(mergeTypes) && mergeTypes.includes(typeName) || typeCandidatesWithMergedTypeConfig.length) {
        const targetSubschemas = [];
        const typeMaps = /* @__PURE__ */ new Map();
        const supportedBySubschemas = /* @__PURE__ */ Object.create({});
        const selectionSets = /* @__PURE__ */ new Map();
        const fieldSelectionSets = /* @__PURE__ */ new Map();
        const resolvers = /* @__PURE__ */ new Map();
        for (const typeCandidate of typeCandidates[typeName]) {
          const subschema = typeCandidate.transformedSubschema;
          if (subschema == null) {
            continue;
          }
          typeMaps.set(subschema, subschema.transformedSchema.getTypeMap());
          const mergedTypeConfig = (_a2 = subschema === null || subschema === void 0 ? void 0 : subschema.merge) === null || _a2 === void 0 ? void 0 : _a2[typeName];
          if (mergedTypeConfig == null) {
            continue;
          }
          if (mergedTypeConfig.selectionSet) {
            const selectionSet2 = parseSelectionSet(mergedTypeConfig.selectionSet, { noLocation: true });
            selectionSets.set(subschema, selectionSet2);
          }
          if (mergedTypeConfig.fields) {
            const parsedFieldSelectionSets = /* @__PURE__ */ Object.create(null);
            for (const fieldName in mergedTypeConfig.fields) {
              if (mergedTypeConfig.fields[fieldName].selectionSet) {
                const rawFieldSelectionSet = mergedTypeConfig.fields[fieldName].selectionSet;
                parsedFieldSelectionSets[fieldName] = rawFieldSelectionSet ? parseSelectionSet(rawFieldSelectionSet, { noLocation: true }) : void 0;
              }
            }
            fieldSelectionSets.set(subschema, parsedFieldSelectionSets);
          }
          const resolver = (_b = mergedTypeConfig.resolve) !== null && _b !== void 0 ? _b : createMergedTypeResolver(mergedTypeConfig);
          if (resolver == null) {
            continue;
          }
          const keyFn = mergedTypeConfig.key;
          resolvers.set(subschema, keyFn ? function batchMergedTypeResolverWrapper(originalResult, context, info, subschema2, selectionSet2, type3) {
            return new ValueOrPromise(() => keyFn(originalResult)).then((key) => resolver(originalResult, context, info, subschema2, selectionSet2, key, type3)).resolve();
          } : resolver);
          targetSubschemas.push(subschema);
          const type2 = subschema.transformedSchema.getType(typeName);
          const fieldMap = type2.getFields();
          const selectionSet = selectionSets.get(subschema);
          for (const fieldName in fieldMap) {
            const field = fieldMap[fieldName];
            const fieldType = getNamedType(field.type);
            if (selectionSet && isLeafType(fieldType) && selectionSetContainsTopLevelField(selectionSet, fieldName)) {
              continue;
            }
            if (!(fieldName in supportedBySubschemas)) {
              supportedBySubschemas[fieldName] = [];
            }
            supportedBySubschemas[fieldName].push(subschema);
          }
        }
        const sourceSubschemas = typeCandidates[typeName].map((typeCandidate) => typeCandidate === null || typeCandidate === void 0 ? void 0 : typeCandidate.transformedSubschema).filter(isSome);
        const targetSubschemasBySubschema = /* @__PURE__ */ new Map();
        for (const subschema of sourceSubschemas) {
          const filteredSubschemas = targetSubschemas.filter((s) => s !== subschema);
          if (filteredSubschemas.length) {
            targetSubschemasBySubschema.set(subschema, filteredSubschemas);
          }
        }
        mergedTypes[typeName] = {
          typeName,
          targetSubschemas: targetSubschemasBySubschema,
          typeMaps,
          selectionSets,
          fieldSelectionSets,
          uniqueFields: /* @__PURE__ */ Object.create({}),
          nonUniqueFields: /* @__PURE__ */ Object.create({}),
          resolvers
        };
        mergedTypes[typeName].delegationPlanBuilder = createDelegationPlanBuilder(mergedTypes[typeName]);
        for (const fieldName in supportedBySubschemas) {
          if (supportedBySubschemas[fieldName].length === 1) {
            mergedTypes[typeName].uniqueFields[fieldName] = supportedBySubschemas[fieldName][0];
          } else {
            mergedTypes[typeName].nonUniqueFields[fieldName] = supportedBySubschemas[fieldName];
          }
        }
      }
    }
  }
  return mergedTypes;
}
function completeStitchingInfo(stitchingInfo, resolvers, schema2) {
  const { fieldNodesByType, fieldNodesByField, dynamicSelectionSetsByField, mergedTypes } = stitchingInfo;
  const rootTypes = [schema2.getQueryType(), schema2.getMutationType()];
  for (const rootType of rootTypes) {
    if (rootType) {
      fieldNodesByType[rootType.name] = [
        parseSelectionSet("{ __typename }", { noLocation: true }).selections[0]
      ];
    }
  }
  const selectionSetsByField = /* @__PURE__ */ Object.create(null);
  for (const typeName in mergedTypes) {
    const mergedTypeInfo = mergedTypes[typeName];
    if (mergedTypeInfo.selectionSets == null && mergedTypeInfo.fieldSelectionSets == null) {
      continue;
    }
    for (const [subschemaConfig, selectionSet] of mergedTypeInfo.selectionSets) {
      const schema3 = subschemaConfig.transformedSchema;
      const type2 = schema3.getType(typeName);
      const fields = type2.getFields();
      for (const fieldName in fields) {
        const field = fields[fieldName];
        const fieldType = getNamedType(field.type);
        if (selectionSet && isLeafType(fieldType) && selectionSetContainsTopLevelField(selectionSet, fieldName)) {
          continue;
        }
        updateSelectionSetMap(selectionSetsByField, typeName, fieldName, selectionSet, true);
      }
    }
    for (const [, selectionSetFieldMap] of mergedTypeInfo.fieldSelectionSets) {
      for (const fieldName in selectionSetFieldMap) {
        const selectionSet = selectionSetFieldMap[fieldName];
        updateSelectionSetMap(selectionSetsByField, typeName, fieldName, selectionSet, true);
      }
    }
  }
  for (const typeName in resolvers) {
    const type2 = schema2.getType(typeName);
    if (type2 === void 0 || isLeafType(type2) || isInputObjectType(type2) || isUnionType(type2)) {
      continue;
    }
    const resolver = resolvers[typeName];
    for (const fieldName in resolver) {
      const field = resolver[fieldName];
      if (typeof field.selectionSet === "function") {
        if (!(typeName in dynamicSelectionSetsByField)) {
          dynamicSelectionSetsByField[typeName] = /* @__PURE__ */ Object.create(null);
        }
        if (!(fieldName in dynamicSelectionSetsByField[typeName])) {
          dynamicSelectionSetsByField[typeName][fieldName] = [];
        }
        dynamicSelectionSetsByField[typeName][fieldName].push(field.selectionSet);
      } else if (field.selectionSet) {
        const selectionSet = parseSelectionSet(field.selectionSet, { noLocation: true });
        updateSelectionSetMap(selectionSetsByField, typeName, fieldName, selectionSet);
      }
    }
  }
  const variableValues = /* @__PURE__ */ Object.create(null);
  const fragments = /* @__PURE__ */ Object.create(null);
  const fieldNodeMap = /* @__PURE__ */ Object.create(null);
  for (const typeName in selectionSetsByField) {
    const type2 = schema2.getType(typeName);
    for (const fieldName in selectionSetsByField[typeName]) {
      for (const selectionSet of selectionSetsByField[typeName][fieldName]) {
        const fieldNodesByResponseKey = collectFields2(schema2, fragments, variableValues, type2, selectionSet, /* @__PURE__ */ new Map(), /* @__PURE__ */ new Set());
        for (const [, fieldNodes] of fieldNodesByResponseKey) {
          for (const fieldNode of fieldNodes) {
            const key = print(fieldNode);
            if (fieldNodeMap[key] == null) {
              fieldNodeMap[key] = fieldNode;
              updateArrayMap(fieldNodesByField, typeName, fieldName, fieldNode);
            } else {
              updateArrayMap(fieldNodesByField, typeName, fieldName, fieldNodeMap[key]);
            }
          }
        }
      }
    }
  }
  return stitchingInfo;
}
function updateSelectionSetMap(map2, typeName, fieldName, selectionSet, includeTypename) {
  if (includeTypename) {
    const typenameSelectionSet = parseSelectionSet("{ __typename }", { noLocation: true });
    updateArrayMap(map2, typeName, fieldName, selectionSet, typenameSelectionSet);
    return;
  }
  updateArrayMap(map2, typeName, fieldName, selectionSet);
}
function updateArrayMap(map2, typeName, fieldName, value, initialValue) {
  if (map2[typeName] == null) {
    const initialItems = initialValue === void 0 ? [value] : [initialValue, value];
    map2[typeName] = {
      [fieldName]: initialItems
    };
  } else if (map2[typeName][fieldName] == null) {
    const initialItems = initialValue === void 0 ? [value] : [initialValue, value];
    map2[typeName][fieldName] = initialItems;
  } else {
    map2[typeName][fieldName].push(value);
  }
}
function addStitchingInfo(stitchedSchema, stitchingInfo) {
  return new GraphQLSchema({
    ...stitchedSchema.toConfig(),
    extensions: {
      ...stitchedSchema.extensions,
      stitchingInfo
    }
  });
}
function selectionSetContainsTopLevelField(selectionSet, fieldName) {
  return selectionSet.selections.some((selection) => selection.kind === Kind.FIELD && selection.name.value === fieldName);
}
function computedDirectiveTransformer(computedDirectiveName) {
  return (subschemaConfig) => {
    const newSubschemaConfig = cloneSubschemaConfig(subschemaConfig);
    mapSchema(subschemaConfig.schema, {
      [MapperKind.OBJECT_FIELD]: (fieldConfig, fieldName, typeName, schema2) => {
        var _a2, _b, _c, _d, _e;
        const mergeTypeConfig = (_a2 = newSubschemaConfig.merge) === null || _a2 === void 0 ? void 0 : _a2[typeName];
        if (mergeTypeConfig == null) {
          return void 0;
        }
        const computed = (_b = getDirective(schema2, fieldConfig, computedDirectiveName)) === null || _b === void 0 ? void 0 : _b[0];
        if (computed == null) {
          return void 0;
        }
        const selectionSet = computed["fields"] != null ? `{ ${computed["fields"]} }` : computed["selectionSet"];
        if (selectionSet == null) {
          return void 0;
        }
        mergeTypeConfig.fields = (_c = mergeTypeConfig.fields) !== null && _c !== void 0 ? _c : {};
        mergeTypeConfig.fields[fieldName] = (_d = mergeTypeConfig.fields[fieldName]) !== null && _d !== void 0 ? _d : {};
        const mergeFieldConfig = mergeTypeConfig.fields[fieldName];
        mergeFieldConfig.selectionSet = (_e = mergeFieldConfig.selectionSet) !== null && _e !== void 0 ? _e : selectionSet;
        mergeFieldConfig.computed = true;
        return void 0;
      }
    });
    return newSubschemaConfig;
  };
}
function isolateComputedFieldsTransformer(subschemaConfig) {
  var _a2, _b;
  if (subschemaConfig.merge == null) {
    return [subschemaConfig];
  }
  const baseSchemaTypes = /* @__PURE__ */ Object.create(null);
  const isolatedSchemaTypes = /* @__PURE__ */ Object.create(null);
  for (const typeName in subschemaConfig.merge) {
    const mergedTypeConfig = subschemaConfig.merge[typeName];
    baseSchemaTypes[typeName] = mergedTypeConfig;
    if (mergedTypeConfig.computedFields) {
      const mergeConfigFields = (_a2 = mergedTypeConfig.fields) !== null && _a2 !== void 0 ? _a2 : /* @__PURE__ */ Object.create(null);
      for (const fieldName in mergedTypeConfig.computedFields) {
        const mergedFieldConfig = mergedTypeConfig.computedFields[fieldName];
        console.warn(`The "computedFields" setting is deprecated. Update your @graphql-tools/stitching-directives package, and/or update static merged type config to "${typeName}.fields.${fieldName} = { selectionSet: '${mergedFieldConfig.selectionSet}', computed: true }"`);
        mergeConfigFields[fieldName] = {
          ...(_b = mergeConfigFields[fieldName]) !== null && _b !== void 0 ? _b : {},
          ...mergedFieldConfig,
          computed: true
        };
      }
      delete mergedTypeConfig.computedFields;
      mergedTypeConfig.fields = mergeConfigFields;
    }
    if (mergedTypeConfig.fields) {
      const baseFields = /* @__PURE__ */ Object.create(null);
      const isolatedFields = /* @__PURE__ */ Object.create(null);
      for (const fieldName in mergedTypeConfig.fields) {
        const mergedFieldConfig = mergedTypeConfig.fields[fieldName];
        if (mergedFieldConfig.computed && mergedFieldConfig.selectionSet) {
          isolatedFields[fieldName] = mergedFieldConfig;
        } else if (mergedFieldConfig.computed) {
          throw new Error(`A selectionSet is required for computed field "${typeName}.${fieldName}"`);
        } else {
          baseFields[fieldName] = mergedFieldConfig;
        }
      }
      const isolatedFieldCount = Object.keys(isolatedFields).length;
      const objectType = subschemaConfig.schema.getType(typeName);
      if (isolatedFieldCount && isolatedFieldCount !== Object.keys(objectType.getFields()).length) {
        baseSchemaTypes[typeName] = {
          ...mergedTypeConfig,
          fields: baseFields
        };
        isolatedSchemaTypes[typeName] = {
          ...mergedTypeConfig,
          fields: isolatedFields,
          canonical: void 0
        };
      }
    }
  }
  if (Object.keys(isolatedSchemaTypes).length) {
    return [
      filterBaseSubschema({ ...subschemaConfig, merge: baseSchemaTypes }, isolatedSchemaTypes),
      filterIsolatedSubschema({ ...subschemaConfig, merge: isolatedSchemaTypes })
    ];
  }
  return [subschemaConfig];
}
function filterBaseSubschema(subschemaConfig, isolatedSchemaTypes) {
  var _a2;
  const schema2 = subschemaConfig.schema;
  const typesForInterface = {};
  const filteredSchema = pruneSchema(filterSchema({
    schema: schema2,
    objectFieldFilter: (typeName, fieldName) => {
      var _a3, _b;
      return !((_b = (_a3 = isolatedSchemaTypes[typeName]) === null || _a3 === void 0 ? void 0 : _a3.fields) === null || _b === void 0 ? void 0 : _b[fieldName]);
    },
    interfaceFieldFilter: (typeName, fieldName) => {
      if (!typesForInterface[typeName]) {
        typesForInterface[typeName] = getImplementingTypes(typeName, schema2);
      }
      return !typesForInterface[typeName].some((implementingTypeName) => {
        var _a3, _b;
        return (_b = (_a3 = isolatedSchemaTypes[implementingTypeName]) === null || _a3 === void 0 ? void 0 : _a3.fields) === null || _b === void 0 ? void 0 : _b[fieldName];
      });
    }
  }));
  const filteredFields = {};
  for (const typeName in filteredSchema.getTypeMap()) {
    const type2 = filteredSchema.getType(typeName);
    if (isObjectType(type2) || isInterfaceType(type2)) {
      filteredFields[typeName] = { __typename: true };
      const fieldMap = type2.getFields();
      for (const fieldName in fieldMap) {
        filteredFields[typeName][fieldName] = true;
      }
    }
  }
  const filteredSubschema = {
    ...subschemaConfig,
    merge: subschemaConfig.merge ? {
      ...subschemaConfig.merge
    } : void 0,
    transforms: ((_a2 = subschemaConfig.transforms) !== null && _a2 !== void 0 ? _a2 : []).concat([
      new TransformCompositeFields((typeName, fieldName) => {
        var _a3;
        return ((_a3 = filteredFields[typeName]) === null || _a3 === void 0 ? void 0 : _a3[fieldName]) ? void 0 : null;
      }, (typeName, fieldName) => {
        var _a3;
        return ((_a3 = filteredFields[typeName]) === null || _a3 === void 0 ? void 0 : _a3[fieldName]) ? void 0 : null;
      })
    ])
  };
  const remainingTypes = filteredSchema.getTypeMap();
  const mergeConfig = filteredSubschema.merge;
  if (mergeConfig) {
    for (const mergeType2 in mergeConfig) {
      if (!remainingTypes[mergeType2]) {
        delete mergeConfig[mergeType2];
      }
    }
    if (!Object.keys(mergeConfig).length) {
      delete filteredSubschema.merge;
    }
  }
  return filteredSubschema;
}
function filterIsolatedSubschema(subschemaConfig) {
  var _a2, _b, _c;
  const rootFields = {};
  for (const typeName in subschemaConfig.merge) {
    const mergedTypeConfig = subschemaConfig.merge[typeName];
    const entryPoints = (_a2 = mergedTypeConfig.entryPoints) !== null && _a2 !== void 0 ? _a2 : [mergedTypeConfig];
    for (const entryPoint of entryPoints) {
      if (entryPoint.fieldName != null) {
        rootFields[entryPoint.fieldName] = true;
      }
    }
  }
  const interfaceFields = {};
  for (const typeName in subschemaConfig.merge) {
    const type2 = subschemaConfig.schema.getType(typeName);
    if (!type2 || !("getInterfaces" in type2)) {
      throw new Error(`${typeName} expected to have 'getInterfaces' method`);
    }
    for (const int2 of type2.getInterfaces()) {
      const intType = subschemaConfig.schema.getType(int2.name);
      if (!intType || !("getFields" in intType)) {
        throw new Error(`${int2.name} expected to have 'getFields' method`);
      }
      for (const intFieldName in intType.getFields()) {
        if ((_b = subschemaConfig.merge[typeName].fields) === null || _b === void 0 ? void 0 : _b[intFieldName]) {
          interfaceFields[int2.name] = interfaceFields[int2.name] || {};
          interfaceFields[int2.name][intFieldName] = true;
        }
      }
    }
  }
  const filteredSchema = pruneSchema(filterSchema({
    schema: subschemaConfig.schema,
    rootFieldFilter: (operation, fieldName) => operation === "Query" && rootFields[fieldName] != null,
    objectFieldFilter: (typeName, fieldName) => {
      var _a3, _b2;
      return ((_b2 = (_a3 = subschemaConfig.merge[typeName]) === null || _a3 === void 0 ? void 0 : _a3.fields) === null || _b2 === void 0 ? void 0 : _b2[fieldName]) != null;
    },
    interfaceFieldFilter: (typeName, fieldName) => {
      var _a3;
      return ((_a3 = interfaceFields[typeName]) === null || _a3 === void 0 ? void 0 : _a3[fieldName]) != null;
    }
  }));
  const filteredFields = {};
  for (const typeName in filteredSchema.getTypeMap()) {
    const type2 = filteredSchema.getType(typeName);
    if (isObjectType(type2) || isInterfaceType(type2)) {
      filteredFields[typeName] = { __typename: true };
      const fieldMap = type2.getFields();
      for (const fieldName in fieldMap) {
        filteredFields[typeName][fieldName] = true;
      }
    }
  }
  return {
    ...subschemaConfig,
    transforms: ((_c = subschemaConfig.transforms) !== null && _c !== void 0 ? _c : []).concat([
      new TransformCompositeFields((typeName, fieldName) => {
        var _a3;
        return ((_a3 = filteredFields[typeName]) === null || _a3 === void 0 ? void 0 : _a3[fieldName]) ? void 0 : null;
      }, (typeName, fieldName) => {
        var _a3;
        return ((_a3 = filteredFields[typeName]) === null || _a3 === void 0 ? void 0 : _a3[fieldName]) ? void 0 : null;
      })
    ])
  };
}
function splitMergedTypeEntryPointsTransformer(subschemaConfig) {
  var _a2, _b, _c, _d;
  if (!subschemaConfig.merge)
    return [subschemaConfig];
  const maxEntryPoints = Object.values(subschemaConfig.merge).reduce((max, mergedTypeConfig) => {
    var _a3, _b2;
    return Math.max(max, (_b2 = (_a3 = mergedTypeConfig === null || mergedTypeConfig === void 0 ? void 0 : mergedTypeConfig.entryPoints) === null || _a3 === void 0 ? void 0 : _a3.length) !== null && _b2 !== void 0 ? _b2 : 0);
  }, 0);
  if (maxEntryPoints === 0)
    return [subschemaConfig];
  const subschemaPermutations = [];
  for (let i = 0; i < maxEntryPoints; i += 1) {
    const subschemaPermutation = cloneSubschemaConfig(subschemaConfig);
    const mergedTypesCopy = (_a2 = subschemaPermutation.merge) !== null && _a2 !== void 0 ? _a2 : /* @__PURE__ */ Object.create(null);
    let currentMerge = mergedTypesCopy;
    if (i > 0) {
      subschemaPermutation.merge = currentMerge = /* @__PURE__ */ Object.create(null);
    }
    for (const typeName in mergedTypesCopy) {
      const mergedTypeConfig = mergedTypesCopy[typeName];
      const mergedTypeEntryPoint = (_b = mergedTypeConfig === null || mergedTypeConfig === void 0 ? void 0 : mergedTypeConfig.entryPoints) === null || _b === void 0 ? void 0 : _b[i];
      if (mergedTypeEntryPoint) {
        if ((_d = (_c = mergedTypeConfig.selectionSet) !== null && _c !== void 0 ? _c : mergedTypeConfig.fieldName) !== null && _d !== void 0 ? _d : mergedTypeConfig.resolve) {
          throw new Error(`Merged type ${typeName} may not define entryPoints in addition to selectionSet, fieldName, or resolve`);
        }
        Object.assign(mergedTypeConfig, mergedTypeEntryPoint);
        delete mergedTypeConfig.entryPoints;
        if (i > 0) {
          delete mergedTypeConfig.canonical;
          if (mergedTypeConfig.fields != null) {
            for (const mergedFieldName in mergedTypeConfig.fields) {
              const mergedFieldConfig = mergedTypeConfig.fields[mergedFieldName];
              delete mergedFieldConfig.canonical;
            }
          }
        }
        currentMerge[typeName] = mergedTypeConfig;
      }
    }
    subschemaPermutations.push(subschemaPermutation);
  }
  return subschemaPermutations;
}
var defaultSubschemaConfigTransforms = [
  computedDirectiveTransformer("computed")
];
function stitchSchemas({ subschemas = [], types = [], typeDefs, onTypeConflict, mergeDirectives: mergeDirectives2, mergeTypes = true, typeMergingOptions, subschemaConfigTransforms = defaultSubschemaConfigTransforms, resolvers = {}, inheritResolversFromInterfaces = false, resolverValidationOptions = {}, parseOptions = {}, pruningOptions, updateResolversInPlace, schemaExtensions }) {
  if (typeof resolverValidationOptions !== "object") {
    throw new Error("Expected `resolverValidationOptions` to be an object");
  }
  const transformedSubschemas = [];
  const subschemaMap = /* @__PURE__ */ new Map();
  const originalSubschemaMap = /* @__PURE__ */ new Map();
  for (const subschemaOrSubschemaArray of subschemas) {
    if (Array.isArray(subschemaOrSubschemaArray)) {
      for (const s of subschemaOrSubschemaArray) {
        for (const transformedSubschemaConfig of applySubschemaConfigTransforms(subschemaConfigTransforms, s, subschemaMap, originalSubschemaMap)) {
          transformedSubschemas.push(transformedSubschemaConfig);
        }
      }
    } else {
      for (const transformedSubschemaConfig of applySubschemaConfigTransforms(subschemaConfigTransforms, subschemaOrSubschemaArray, subschemaMap, originalSubschemaMap)) {
        transformedSubschemas.push(transformedSubschemaConfig);
      }
    }
  }
  const extensions = [];
  const directiveMap = /* @__PURE__ */ Object.create(null);
  for (const directive of specifiedDirectives) {
    directiveMap[directive.name] = directive;
  }
  const schemaDefs = /* @__PURE__ */ Object.create(null);
  const [typeCandidates, rootTypeNameMap] = buildTypeCandidates({
    subschemas: transformedSubschemas,
    originalSubschemaMap,
    types,
    typeDefs: typeDefs || [],
    parseOptions,
    extensions,
    directiveMap,
    schemaDefs,
    mergeDirectives: mergeDirectives2
  });
  let stitchingInfo = createStitchingInfo(subschemaMap, typeCandidates, mergeTypes);
  const { typeMap: newTypeMap, directives: newDirectives } = buildTypes({
    typeCandidates,
    directives: Object.values(directiveMap),
    stitchingInfo,
    rootTypeNames: Object.values(rootTypeNameMap),
    onTypeConflict,
    mergeTypes,
    typeMergingOptions
  });
  let schema2 = new GraphQLSchema({
    query: newTypeMap[rootTypeNameMap.query],
    mutation: newTypeMap[rootTypeNameMap.mutation],
    subscription: newTypeMap[rootTypeNameMap.subscription],
    types: Object.values(newTypeMap),
    directives: newDirectives,
    astNode: schemaDefs.schemaDef,
    extensionASTNodes: schemaDefs.schemaExtensions,
    extensions: null
  });
  for (const extension of extensions) {
    schema2 = extendSchema(schema2, extension, {
      commentDescriptions: true
    });
  }
  const resolverMap = mergeResolvers(resolvers);
  const finalResolvers = inheritResolversFromInterfaces ? extendResolversFromInterfaces(schema2, resolverMap) : resolverMap;
  stitchingInfo = completeStitchingInfo(stitchingInfo, finalResolvers, schema2);
  schema2 = addResolversToSchema({
    schema: schema2,
    defaultFieldResolver: defaultMergedResolver,
    resolvers: finalResolvers,
    resolverValidationOptions,
    inheritResolversFromInterfaces: false,
    updateResolversInPlace
  });
  if (Object.keys(resolverValidationOptions).length > 0 && Object.values(resolverValidationOptions).some((o) => o !== "ignore")) {
    assertResolversPresent(schema2, resolverValidationOptions);
  }
  schema2 = addStitchingInfo(schema2, stitchingInfo);
  if (pruningOptions) {
    schema2 = pruneSchema(schema2, pruningOptions);
  }
  if (schemaExtensions) {
    if (Array.isArray(schemaExtensions)) {
      schemaExtensions = mergeExtensions(schemaExtensions);
    }
    applyExtensions(schema2, schemaExtensions);
  }
  return schema2;
}
var subschemaConfigTransformerPresets = [
  isolateComputedFieldsTransformer,
  splitMergedTypeEntryPointsTransformer
];
function applySubschemaConfigTransforms(subschemaConfigTransforms, subschemaOrSubschemaConfig, subschemaMap, originalSubschemaMap) {
  let subschemaConfig;
  if (isSubschemaConfig(subschemaOrSubschemaConfig)) {
    subschemaConfig = subschemaOrSubschemaConfig;
  } else if (subschemaOrSubschemaConfig instanceof GraphQLSchema) {
    subschemaConfig = { schema: subschemaOrSubschemaConfig };
  } else {
    throw new TypeError("Received invalid input.");
  }
  const transformedSubschemaConfigs = subschemaConfigTransforms.concat(subschemaConfigTransformerPresets).reduce((transformedSubschemaConfigs2, subschemaConfigTransform) => transformedSubschemaConfigs2.flatMap((ssConfig) => subschemaConfigTransform(ssConfig)), [subschemaConfig]);
  const transformedSubschemas = transformedSubschemaConfigs.map((ssConfig) => new Subschema(ssConfig));
  const baseSubschema = transformedSubschemas[0];
  subschemaMap.set(subschemaOrSubschemaConfig, baseSubschema);
  for (const subschema of transformedSubschemas) {
    originalSubschemaMap.set(subschema, subschemaOrSubschemaConfig);
  }
  return transformedSubschemas;
}

// node_modules/@graphql-tools/stitching-directives/index.mjs
init_virtual_process_polyfill();
init_buffer();
init_graphql();
var defaultStitchingDirectiveOptions = {
  keyDirectiveName: "key",
  computedDirectiveName: "computed",
  canonicalDirectiveName: "canonical",
  mergeDirectiveName: "merge",
  pathToDirectivesInExtensions: ["directives"]
};
function extractVariables(inputValue) {
  const path2 = [];
  const variablePaths = /* @__PURE__ */ Object.create(null);
  const keyPathVisitor = {
    enter: (_node, key) => {
      if (typeof key === "number") {
        path2.push(key);
      }
    },
    leave: (_node, key) => {
      if (typeof key === "number") {
        path2.pop();
      }
    }
  };
  const fieldPathVisitor = {
    enter: (node) => {
      path2.push(node.name.value);
    },
    leave: () => {
      path2.pop();
    }
  };
  const variableVisitor = {
    enter: (node, key) => {
      if (typeof key === "number") {
        variablePaths[node.name.value] = path2.concat([key]);
      } else {
        variablePaths[node.name.value] = path2.slice();
      }
      return {
        kind: Kind.NULL
      };
    }
  };
  const newInputValue = visit(inputValue, {
    [Kind.OBJECT]: keyPathVisitor,
    [Kind.LIST]: keyPathVisitor,
    [Kind.OBJECT_FIELD]: fieldPathVisitor,
    [Kind.VARIABLE]: variableVisitor
  });
  return {
    inputValue: newInputValue,
    variablePaths
  };
}
var KEY_DELIMITER = "__dot__";
var EXPANSION_PREFIX = "__exp";
function preparseMergeArgsExpr(mergeArgsExpr) {
  const variableRegex = /\$[_A-Za-z][_A-Za-z0-9.]*/g;
  const dotRegex = /\./g;
  mergeArgsExpr = mergeArgsExpr.replace(variableRegex, (variable) => variable.replace(dotRegex, KEY_DELIMITER));
  const segments = mergeArgsExpr.split("[[");
  const expansionExpressions = /* @__PURE__ */ Object.create(null);
  if (segments.length === 1) {
    return { mergeArgsExpr, expansionExpressions };
  }
  let finalSegments = [segments[0]];
  for (let i = 1; i < segments.length; i++) {
    const additionalSegments = segments[i].split("]]");
    if (additionalSegments.length !== 2) {
      throw new Error(`Each opening "[[" must be matched by a closing "]]" without nesting.`);
    }
    finalSegments = finalSegments.concat(additionalSegments);
  }
  let finalMergeArgsExpr = finalSegments[0];
  for (let i = 1; i < finalSegments.length - 1; i += 2) {
    const variableName = `${EXPANSION_PREFIX}${(i - 1) / 2 + 1}`;
    expansionExpressions[variableName] = finalSegments[i];
    finalMergeArgsExpr += `$${variableName}${finalSegments[i + 1]}`;
  }
  return { mergeArgsExpr: finalMergeArgsExpr, expansionExpressions };
}
function addProperty(object, path2, value) {
  const initialSegment = path2[0];
  if (path2.length === 1) {
    object[initialSegment] = value;
    return;
  }
  let field = object[initialSegment];
  if (field != null) {
    addProperty(field, path2.slice(1), value);
    return;
  }
  if (typeof path2[1] === "string") {
    field = /* @__PURE__ */ Object.create(null);
  } else {
    field = [];
  }
  addProperty(field, path2.slice(1), value);
  object[initialSegment] = field;
}
function getProperty(object, path2) {
  if (!path2.length || object == null) {
    return object;
  }
  const newPath = path2.slice();
  const key = newPath.shift();
  if (key == null) {
    return;
  }
  const prop = object[key];
  return getProperty(prop, newPath);
}
function getProperties(object, propertyTree) {
  if (object == null) {
    return object;
  }
  const newObject = /* @__PURE__ */ Object.create(null);
  for (const key in propertyTree) {
    const subKey = propertyTree[key];
    if (subKey == null) {
      newObject[key] = object[key];
      continue;
    }
    const prop = object[key];
    newObject[key] = deepMap(prop, function deepMapFn(item) {
      return getProperties(item, subKey);
    });
  }
  return newObject;
}
function propertyTreeFromPaths(paths) {
  const propertyTree = /* @__PURE__ */ Object.create(null);
  for (const path2 of paths) {
    addProperty(propertyTree, path2, null);
  }
  return propertyTree;
}
function deepMap(arrayOrItem, fn) {
  if (Array.isArray(arrayOrItem)) {
    return arrayOrItem.map((nestedArrayOrItem) => deepMap(nestedArrayOrItem, fn));
  }
  return fn(arrayOrItem);
}
function pathsFromSelectionSet(selectionSet, path2 = []) {
  var _a2;
  const paths = [];
  for (const selection of selectionSet.selections) {
    const additions = (_a2 = pathsFromSelection(selection, path2)) !== null && _a2 !== void 0 ? _a2 : [];
    for (const addition of additions) {
      paths.push(addition);
    }
  }
  return paths;
}
function pathsFromSelection(selection, path2) {
  var _a2, _b;
  if (selection.kind === Kind.FIELD) {
    const responseKey = (_b = (_a2 = selection.alias) === null || _a2 === void 0 ? void 0 : _a2.value) !== null && _b !== void 0 ? _b : selection.name.value;
    if (selection.selectionSet) {
      return pathsFromSelectionSet(selection.selectionSet, path2.concat([responseKey]));
    } else {
      return [path2.concat([responseKey])];
    }
  } else if (selection.kind === Kind.INLINE_FRAGMENT) {
    return pathsFromSelectionSet(selection.selectionSet, path2);
  }
}
function getSourcePaths(mappingInstructions, selectionSet) {
  const sourcePaths = [];
  for (const mappingInstruction of mappingInstructions) {
    const { sourcePath } = mappingInstruction;
    if (sourcePath.length) {
      sourcePaths.push(sourcePath);
      continue;
    }
    if (selectionSet == null) {
      continue;
    }
    const paths = pathsFromSelectionSet(selectionSet);
    for (const path2 of paths) {
      sourcePaths.push(path2);
    }
    sourcePaths.push([TypeNameMetaFieldDef.name]);
  }
  return sourcePaths;
}
function parseMergeArgsExpr(mergeArgsExpr, selectionSet) {
  const { mergeArgsExpr: newMergeArgsExpr, expansionExpressions } = preparseMergeArgsExpr(mergeArgsExpr);
  const inputValue = parseValue(`{ ${newMergeArgsExpr} }`, { noLocation: true });
  const { inputValue: newInputValue, variablePaths } = extractVariables(inputValue);
  if (!Object.keys(expansionExpressions).length) {
    if (!Object.keys(variablePaths).length) {
      throw new Error("Merge arguments must declare a key.");
    }
    const mappingInstructions = getMappingInstructions(variablePaths);
    const usedProperties2 = propertyTreeFromPaths(getSourcePaths(mappingInstructions, selectionSet));
    return { args: valueFromASTUntyped(newInputValue), usedProperties: usedProperties2, mappingInstructions };
  }
  const expansionRegEx = new RegExp(`^${EXPANSION_PREFIX}[0-9]+$`);
  for (const variableName in variablePaths) {
    if (!variableName.match(expansionRegEx)) {
      throw new Error("Expansions cannot be mixed with single key declarations.");
    }
  }
  const expansions = [];
  const sourcePaths = [];
  for (const variableName in expansionExpressions) {
    const str2 = expansionExpressions[variableName];
    const valuePath = variablePaths[variableName];
    const { inputValue: expansionInputValue, variablePaths: expansionVariablePaths } = extractVariables(parseValue(`${str2}`, { noLocation: true }));
    if (!Object.keys(expansionVariablePaths).length) {
      throw new Error("Merge arguments must declare a key.");
    }
    const mappingInstructions = getMappingInstructions(expansionVariablePaths);
    const value = valueFromASTUntyped(expansionInputValue);
    sourcePaths.push(...getSourcePaths(mappingInstructions, selectionSet));
    assertNotWithinList(valuePath);
    expansions.push({
      valuePath,
      value,
      mappingInstructions
    });
  }
  const usedProperties = propertyTreeFromPaths(sourcePaths);
  return { args: valueFromASTUntyped(newInputValue), usedProperties, expansions };
}
function getMappingInstructions(variablePaths) {
  const mappingInstructions = [];
  for (const keyPath in variablePaths) {
    const valuePath = variablePaths[keyPath];
    const splitKeyPath = keyPath.split(KEY_DELIMITER).slice(1);
    assertNotWithinList(valuePath);
    mappingInstructions.push({
      destinationPath: valuePath,
      sourcePath: splitKeyPath
    });
  }
  return mappingInstructions;
}
function assertNotWithinList(path2) {
  for (const pathSegment of path2) {
    if (typeof pathSegment === "number") {
      throw new Error("Insertions cannot be made into a list.");
    }
  }
}
var dottedNameRegEx = /^[_A-Za-z][_0-9A-Za-z]*(.[_A-Za-z][_0-9A-Za-z]*)*$/;
function stitchingDirectivesValidator(options = {}) {
  const { keyDirectiveName, computedDirectiveName, mergeDirectiveName, pathToDirectivesInExtensions } = {
    ...defaultStitchingDirectiveOptions,
    ...options
  };
  return (schema2) => {
    var _a2;
    const queryTypeName = (_a2 = schema2.getQueryType()) === null || _a2 === void 0 ? void 0 : _a2.name;
    mapSchema(schema2, {
      [MapperKind.OBJECT_TYPE]: (type2) => {
        var _a3;
        const keyDirective = (_a3 = getDirective(schema2, type2, keyDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (keyDirective != null) {
          parseSelectionSet(keyDirective["selectionSet"]);
        }
        return void 0;
      },
      [MapperKind.OBJECT_FIELD]: (fieldConfig, _fieldName, typeName) => {
        var _a3, _b, _c;
        const computedDirective = (_a3 = getDirective(schema2, fieldConfig, computedDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (computedDirective != null) {
          parseSelectionSet(computedDirective["selectionSet"]);
        }
        const mergeDirective2 = (_b = getDirective(schema2, fieldConfig, mergeDirectiveName, pathToDirectivesInExtensions)) === null || _b === void 0 ? void 0 : _b[0];
        if (mergeDirective2 != null) {
          if (typeName !== queryTypeName) {
            throw new Error("@merge directive may be used only for root fields of the root Query type.");
          }
          let returnType = getNullableType(fieldConfig.type);
          if (isListType(returnType)) {
            returnType = getNullableType(returnType.ofType);
          }
          if (!isNamedType(returnType)) {
            throw new Error("@merge directive must be used on a field that returns an object or a list of objects.");
          }
          const mergeArgsExpr = mergeDirective2["argsExpr"];
          if (mergeArgsExpr != null) {
            parseMergeArgsExpr(mergeArgsExpr);
          }
          const args = Object.keys((_c = fieldConfig.args) !== null && _c !== void 0 ? _c : {});
          const keyArg = mergeDirective2["keyArg"];
          if (keyArg == null) {
            if (!mergeArgsExpr && args.length !== 1) {
              throw new Error("Cannot use @merge directive without `keyArg` argument if resolver takes more than one argument.");
            }
          } else if (!keyArg.match(dottedNameRegEx)) {
            throw new Error("`keyArg` argument for @merge directive must be a set of valid GraphQL SDL names separated by periods.");
          }
          const keyField = mergeDirective2["keyField"];
          if (keyField != null && !keyField.match(dottedNameRegEx)) {
            throw new Error("`keyField` argument for @merge directive must be a set of valid GraphQL SDL names separated by periods.");
          }
          const key = mergeDirective2["key"];
          if (key != null) {
            if (keyField != null) {
              throw new Error("Cannot use @merge directive with both `keyField` and `key` arguments.");
            }
            for (const keyDef of key) {
              let [aliasOrKeyPath, keyPath] = keyDef.split(":");
              let aliasPath;
              if (keyPath == null) {
                keyPath = aliasPath = aliasOrKeyPath;
              } else {
                aliasPath = aliasOrKeyPath;
              }
              if (keyPath != null && !keyPath.match(dottedNameRegEx)) {
                throw new Error("Each partial key within the `key` argument for @merge directive must be a set of valid GraphQL SDL names separated by periods.");
              }
              if (aliasPath != null && !aliasOrKeyPath.match(dottedNameRegEx)) {
                throw new Error("Each alias within the `key` argument for @merge directive must be a set of valid GraphQL SDL names separated by periods.");
              }
            }
          }
          const additionalArgs = mergeDirective2["additionalArgs"];
          if (additionalArgs != null) {
            parseValue(`{ ${additionalArgs} }`, { noLocation: true });
          }
          if (mergeArgsExpr != null && (keyArg != null || additionalArgs != null)) {
            throw new Error("Cannot use @merge directive with both `argsExpr` argument and any additional argument.");
          }
          if (!isInterfaceType(returnType) && !isUnionType(returnType) && !isObjectType(returnType)) {
            throw new Error("@merge directive may be used only with resolver that return an object, interface, or union.");
          }
          const typeNames = mergeDirective2["types"];
          if (typeNames != null) {
            if (!isAbstractType(returnType)) {
              throw new Error("Types argument can only be used with a field that returns an abstract type.");
            }
            const implementingTypes = isInterfaceType(returnType) ? getImplementingTypes(returnType.name, schema2).map((typeName2) => schema2.getType(typeName2)) : returnType.getTypes();
            const implementingTypeNames = implementingTypes.map((type2) => type2 === null || type2 === void 0 ? void 0 : type2.name).filter(isSome);
            for (const typeName2 of typeNames) {
              if (!implementingTypeNames.includes(typeName2)) {
                throw new Error(`Types argument can only include only type names that implement the field return type's abstract type.`);
              }
            }
          }
        }
        return void 0;
      }
    });
    return schema2;
  };
}
function stitchingDirectivesTransformer(options = {}) {
  const { keyDirectiveName, computedDirectiveName, mergeDirectiveName, canonicalDirectiveName, pathToDirectivesInExtensions } = {
    ...defaultStitchingDirectiveOptions,
    ...options
  };
  return (subschemaConfig) => {
    var _a2, _b, _c, _d, _e, _f, _g, _h;
    const newSubschemaConfig = cloneSubschemaConfig(subschemaConfig);
    const selectionSetsByType = /* @__PURE__ */ Object.create(null);
    const computedFieldSelectionSets = /* @__PURE__ */ Object.create(null);
    const mergedTypesResolversInfo = /* @__PURE__ */ Object.create(null);
    const canonicalTypesInfo = /* @__PURE__ */ Object.create(null);
    const schema2 = subschemaConfig.schema;
    stitchingDirectivesValidator(options)(schema2);
    function setCanonicalDefinition(typeName, fieldName) {
      var _a3;
      canonicalTypesInfo[typeName] = canonicalTypesInfo[typeName] || /* @__PURE__ */ Object.create(null);
      if (fieldName) {
        const fields = (_a3 = canonicalTypesInfo[typeName].fields) !== null && _a3 !== void 0 ? _a3 : /* @__PURE__ */ Object.create(null);
        canonicalTypesInfo[typeName].fields = fields;
        fields[fieldName] = true;
      } else {
        canonicalTypesInfo[typeName].canonical = true;
      }
    }
    mapSchema(schema2, {
      [MapperKind.OBJECT_TYPE]: (type2) => {
        var _a3, _b2;
        const keyDirective = (_a3 = getDirective(schema2, type2, keyDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (keyDirective != null) {
          const selectionSet = parseSelectionSet(keyDirective["selectionSet"], { noLocation: true });
          selectionSetsByType[type2.name] = selectionSet;
        }
        const canonicalDirective = (_b2 = getDirective(schema2, type2, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _b2 === void 0 ? void 0 : _b2[0];
        if (canonicalDirective != null) {
          setCanonicalDefinition(type2.name);
        }
        return void 0;
      },
      [MapperKind.OBJECT_FIELD]: (fieldConfig, fieldName, typeName) => {
        var _a3, _b2, _c2;
        const computedDirective = (_a3 = getDirective(schema2, fieldConfig, computedDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (computedDirective != null) {
          const selectionSet = parseSelectionSet(computedDirective["selectionSet"], { noLocation: true });
          if (!computedFieldSelectionSets[typeName]) {
            computedFieldSelectionSets[typeName] = /* @__PURE__ */ Object.create(null);
          }
          computedFieldSelectionSets[typeName][fieldName] = selectionSet;
        }
        const mergeDirective2 = (_b2 = getDirective(schema2, fieldConfig, mergeDirectiveName, pathToDirectivesInExtensions)) === null || _b2 === void 0 ? void 0 : _b2[0];
        if ((mergeDirective2 === null || mergeDirective2 === void 0 ? void 0 : mergeDirective2["keyField"]) != null) {
          const mergeDirectiveKeyField = mergeDirective2["keyField"];
          const selectionSet = parseSelectionSet(`{ ${mergeDirectiveKeyField}}`, { noLocation: true });
          const typeNames = mergeDirective2["types"];
          const returnType = getNamedType(fieldConfig.type);
          forEachConcreteType(schema2, returnType, typeNames, (typeName2) => {
            if (typeNames == null || typeNames.includes(typeName2)) {
              const existingSelectionSet = selectionSetsByType[typeName2];
              selectionSetsByType[typeName2] = existingSelectionSet ? mergeSelectionSets(existingSelectionSet, selectionSet) : selectionSet;
            }
          });
        }
        const canonicalDirective = (_c2 = getDirective(schema2, fieldConfig, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _c2 === void 0 ? void 0 : _c2[0];
        if (canonicalDirective != null) {
          setCanonicalDefinition(typeName, fieldName);
        }
        return void 0;
      },
      [MapperKind.INTERFACE_TYPE]: (type2) => {
        var _a3;
        const canonicalDirective = (_a3 = getDirective(schema2, type2, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (canonicalDirective) {
          setCanonicalDefinition(type2.name);
        }
        return void 0;
      },
      [MapperKind.INTERFACE_FIELD]: (fieldConfig, fieldName, typeName) => {
        var _a3;
        const canonicalDirective = (_a3 = getDirective(schema2, fieldConfig, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (canonicalDirective) {
          setCanonicalDefinition(typeName, fieldName);
        }
        return void 0;
      },
      [MapperKind.INPUT_OBJECT_TYPE]: (type2) => {
        var _a3;
        const canonicalDirective = (_a3 = getDirective(schema2, type2, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (canonicalDirective) {
          setCanonicalDefinition(type2.name);
        }
        return void 0;
      },
      [MapperKind.INPUT_OBJECT_FIELD]: (inputFieldConfig, fieldName, typeName) => {
        var _a3;
        const canonicalDirective = (_a3 = getDirective(schema2, inputFieldConfig, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (canonicalDirective != null) {
          setCanonicalDefinition(typeName, fieldName);
        }
        return void 0;
      },
      [MapperKind.UNION_TYPE]: (type2) => {
        var _a3;
        const canonicalDirective = (_a3 = getDirective(schema2, type2, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (canonicalDirective != null) {
          setCanonicalDefinition(type2.name);
        }
        return void 0;
      },
      [MapperKind.ENUM_TYPE]: (type2) => {
        var _a3;
        const canonicalDirective = (_a3 = getDirective(schema2, type2, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (canonicalDirective != null) {
          setCanonicalDefinition(type2.name);
        }
        return void 0;
      },
      [MapperKind.SCALAR_TYPE]: (type2) => {
        var _a3;
        const canonicalDirective = (_a3 = getDirective(schema2, type2, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (canonicalDirective != null) {
          setCanonicalDefinition(type2.name);
        }
        return void 0;
      }
    });
    if (subschemaConfig.merge) {
      for (const typeName in subschemaConfig.merge) {
        const mergedTypeConfig = subschemaConfig.merge[typeName];
        if (mergedTypeConfig.selectionSet) {
          const selectionSet = parseSelectionSet(mergedTypeConfig.selectionSet, { noLocation: true });
          if (selectionSet) {
            if (selectionSetsByType[typeName]) {
              selectionSetsByType[typeName] = mergeSelectionSets(selectionSetsByType[typeName], selectionSet);
            } else {
              selectionSetsByType[typeName] = selectionSet;
            }
          }
        }
        if (mergedTypeConfig.fields) {
          for (const fieldName in mergedTypeConfig.fields) {
            const fieldConfig = mergedTypeConfig.fields[fieldName];
            if (!fieldConfig.selectionSet)
              continue;
            const selectionSet = parseSelectionSet(fieldConfig.selectionSet, { noLocation: true });
            if (selectionSet) {
              if ((_a2 = computedFieldSelectionSets[typeName]) === null || _a2 === void 0 ? void 0 : _a2[fieldName]) {
                computedFieldSelectionSets[typeName][fieldName] = mergeSelectionSets(computedFieldSelectionSets[typeName][fieldName], selectionSet);
              } else {
                if (computedFieldSelectionSets[typeName] == null) {
                  computedFieldSelectionSets[typeName] = /* @__PURE__ */ Object.create(null);
                }
                computedFieldSelectionSets[typeName][fieldName] = selectionSet;
              }
            }
          }
        }
      }
    }
    const allSelectionSetsByType = /* @__PURE__ */ Object.create(null);
    for (const typeName in selectionSetsByType) {
      allSelectionSetsByType[typeName] = allSelectionSetsByType[typeName] || [];
      const selectionSet = selectionSetsByType[typeName];
      allSelectionSetsByType[typeName].push(selectionSet);
    }
    for (const typeName in computedFieldSelectionSets) {
      const selectionSets = computedFieldSelectionSets[typeName];
      for (const i in selectionSets) {
        allSelectionSetsByType[typeName] = allSelectionSetsByType[typeName] || [];
        const selectionSet = selectionSets[i];
        allSelectionSetsByType[typeName].push(selectionSet);
      }
    }
    mapSchema(schema2, {
      [MapperKind.OBJECT_FIELD]: function objectFieldMapper(fieldConfig, fieldName) {
        var _a3, _b2;
        const mergeDirective2 = (_a3 = getDirective(schema2, fieldConfig, mergeDirectiveName, pathToDirectivesInExtensions)) === null || _a3 === void 0 ? void 0 : _a3[0];
        if (mergeDirective2 != null) {
          const returnType = getNullableType(fieldConfig.type);
          const returnsList = isListType(returnType);
          const namedType = getNamedType(returnType);
          let mergeArgsExpr = mergeDirective2["argsExpr"];
          if (mergeArgsExpr == null) {
            const key = mergeDirective2["key"];
            const keyField = mergeDirective2["keyField"];
            const keyExpr = key != null ? buildKeyExpr(key) : keyField != null ? `$key.${keyField}` : "$key";
            const keyArg = mergeDirective2["keyArg"];
            const argNames = keyArg == null ? [Object.keys((_b2 = fieldConfig.args) !== null && _b2 !== void 0 ? _b2 : {})[0]] : keyArg.split(".");
            const lastArgName = argNames.pop();
            mergeArgsExpr = returnsList ? `${lastArgName}: [[${keyExpr}]]` : `${lastArgName}: ${keyExpr}`;
            for (const argName of argNames.reverse()) {
              mergeArgsExpr = `${argName}: { ${mergeArgsExpr} }`;
            }
          }
          const typeNames = mergeDirective2["types"];
          forEachConcreteTypeName(namedType, schema2, typeNames, function generateResolveInfo(typeName) {
            const parsedMergeArgsExpr = parseMergeArgsExpr(mergeArgsExpr, allSelectionSetsByType[typeName] == null ? void 0 : mergeSelectionSets(...allSelectionSetsByType[typeName]));
            const additionalArgs = mergeDirective2["additionalArgs"];
            if (additionalArgs != null) {
              parsedMergeArgsExpr.args = mergeDeep([
                parsedMergeArgsExpr.args,
                valueFromASTUntyped(parseValue(`{ ${additionalArgs} }`, { noLocation: true }))
              ]);
            }
            mergedTypesResolversInfo[typeName] = {
              fieldName,
              returnsList,
              ...parsedMergeArgsExpr
            };
          });
        }
        return void 0;
      }
    });
    for (const typeName in selectionSetsByType) {
      const selectionSet = selectionSetsByType[typeName];
      const mergeConfig = (_b = newSubschemaConfig.merge) !== null && _b !== void 0 ? _b : /* @__PURE__ */ Object.create(null);
      newSubschemaConfig.merge = mergeConfig;
      if (mergeConfig[typeName] == null) {
        newSubschemaConfig.merge[typeName] = /* @__PURE__ */ Object.create(null);
      }
      const mergeTypeConfig = mergeConfig[typeName];
      mergeTypeConfig.selectionSet = print(selectionSet);
    }
    for (const typeName in computedFieldSelectionSets) {
      const selectionSets = computedFieldSelectionSets[typeName];
      const mergeConfig = (_c = newSubschemaConfig.merge) !== null && _c !== void 0 ? _c : /* @__PURE__ */ Object.create(null);
      newSubschemaConfig.merge = mergeConfig;
      if (mergeConfig[typeName] == null) {
        mergeConfig[typeName] = /* @__PURE__ */ Object.create(null);
      }
      const mergeTypeConfig = newSubschemaConfig.merge[typeName];
      const mergeTypeConfigFields = (_d = mergeTypeConfig.fields) !== null && _d !== void 0 ? _d : /* @__PURE__ */ Object.create(null);
      mergeTypeConfig.fields = mergeTypeConfigFields;
      for (const fieldName in selectionSets) {
        const selectionSet = selectionSets[fieldName];
        const fieldConfig = (_e = mergeTypeConfigFields[fieldName]) !== null && _e !== void 0 ? _e : /* @__PURE__ */ Object.create(null);
        mergeTypeConfigFields[fieldName] = fieldConfig;
        fieldConfig.selectionSet = print(selectionSet);
        fieldConfig.computed = true;
      }
    }
    for (const typeName in mergedTypesResolversInfo) {
      const mergedTypeResolverInfo = mergedTypesResolversInfo[typeName];
      const mergeConfig = (_f = newSubschemaConfig.merge) !== null && _f !== void 0 ? _f : /* @__PURE__ */ Object.create(null);
      newSubschemaConfig.merge = mergeConfig;
      if (newSubschemaConfig.merge[typeName] == null) {
        newSubschemaConfig.merge[typeName] = /* @__PURE__ */ Object.create(null);
      }
      const mergeTypeConfig = newSubschemaConfig.merge[typeName];
      mergeTypeConfig.fieldName = mergedTypeResolverInfo.fieldName;
      if (mergedTypeResolverInfo.returnsList) {
        mergeTypeConfig.key = generateKeyFn(mergedTypeResolverInfo);
        mergeTypeConfig.argsFromKeys = generateArgsFromKeysFn(mergedTypeResolverInfo);
      } else {
        mergeTypeConfig.args = generateArgsFn(mergedTypeResolverInfo);
      }
    }
    for (const typeName in canonicalTypesInfo) {
      const canonicalTypeInfo = canonicalTypesInfo[typeName];
      const mergeConfig = (_g = newSubschemaConfig.merge) !== null && _g !== void 0 ? _g : /* @__PURE__ */ Object.create(null);
      newSubschemaConfig.merge = mergeConfig;
      if (newSubschemaConfig.merge[typeName] == null) {
        newSubschemaConfig.merge[typeName] = /* @__PURE__ */ Object.create(null);
      }
      const mergeTypeConfig = newSubschemaConfig.merge[typeName];
      if (canonicalTypeInfo.canonical) {
        mergeTypeConfig.canonical = true;
      }
      if (canonicalTypeInfo.fields) {
        const mergeTypeConfigFields = (_h = mergeTypeConfig.fields) !== null && _h !== void 0 ? _h : /* @__PURE__ */ Object.create(null);
        mergeTypeConfig.fields = mergeTypeConfigFields;
        for (const fieldName in canonicalTypeInfo.fields) {
          if (mergeTypeConfigFields[fieldName] == null) {
            mergeTypeConfigFields[fieldName] = /* @__PURE__ */ Object.create(null);
          }
          mergeTypeConfigFields[fieldName].canonical = true;
        }
      }
    }
    return newSubschemaConfig;
  };
}
function forEachConcreteType(schema2, type2, typeNames, fn) {
  if (isInterfaceType(type2)) {
    for (const typeName of getImplementingTypes(type2.name, schema2)) {
      if (typeNames == null || typeNames.includes(typeName)) {
        fn(typeName);
      }
    }
  } else if (isUnionType(type2)) {
    for (const { name: typeName } of type2.getTypes()) {
      if (typeNames == null || typeNames.includes(typeName)) {
        fn(typeName);
      }
    }
  } else if (isObjectType(type2)) {
    fn(type2.name);
  }
}
function generateKeyFn(mergedTypeResolverInfo) {
  return function keyFn(originalResult) {
    return getProperties(originalResult, mergedTypeResolverInfo.usedProperties);
  };
}
function generateArgsFromKeysFn(mergedTypeResolverInfo) {
  const { expansions, args } = mergedTypeResolverInfo;
  return function generateArgsFromKeys(keys) {
    const newArgs = mergeDeep([{}, args]);
    if (expansions) {
      for (const expansion of expansions) {
        const mappingInstructions = expansion.mappingInstructions;
        const expanded = [];
        for (const key of keys) {
          let newValue = mergeDeep([{}, expansion.valuePath]);
          for (const { destinationPath, sourcePath } of mappingInstructions) {
            if (destinationPath.length) {
              addProperty(newValue, destinationPath, getProperty(key, sourcePath));
            } else {
              newValue = getProperty(key, sourcePath);
            }
          }
          expanded.push(newValue);
        }
        addProperty(newArgs, expansion.valuePath, expanded);
      }
    }
    return newArgs;
  };
}
function generateArgsFn(mergedTypeResolverInfo) {
  const { mappingInstructions, args, usedProperties } = mergedTypeResolverInfo;
  return function generateArgs(originalResult) {
    const newArgs = mergeDeep([{}, args]);
    const filteredResult = getProperties(originalResult, usedProperties);
    if (mappingInstructions) {
      for (const mappingInstruction of mappingInstructions) {
        const { destinationPath, sourcePath } = mappingInstruction;
        addProperty(newArgs, destinationPath, getProperty(filteredResult, sourcePath));
      }
    }
    return newArgs;
  };
}
function buildKeyExpr(key) {
  let mergedObject = {};
  for (const keyDef of key) {
    let [aliasOrKeyPath, keyPath] = keyDef.split(":");
    let aliasPath;
    if (keyPath == null) {
      keyPath = aliasPath = aliasOrKeyPath;
    } else {
      aliasPath = aliasOrKeyPath;
    }
    const aliasParts = aliasPath.split(".");
    const lastAliasPart = aliasParts.pop();
    if (lastAliasPart == null) {
      throw new Error(`Key "${key}" is invalid, no path provided.`);
    }
    let object = { [lastAliasPart]: `$key.${keyPath}` };
    for (const aliasPart of aliasParts.reverse()) {
      object = { [aliasPart]: object };
    }
    mergedObject = mergeDeep([mergedObject, object]);
  }
  return JSON.stringify(mergedObject).replace(/"/g, "");
}
function mergeSelectionSets(...selectionSets) {
  const normalizedSelections = /* @__PURE__ */ Object.create(null);
  for (const selectionSet of selectionSets) {
    for (const selection of selectionSet.selections) {
      const normalizedSelection = print(selection);
      normalizedSelections[normalizedSelection] = selection;
    }
  }
  const newSelectionSet = {
    kind: Kind.SELECTION_SET,
    selections: Object.values(normalizedSelections)
  };
  return newSelectionSet;
}
function forEachConcreteTypeName(returnType, schema2, typeNames, fn) {
  if (isInterfaceType(returnType)) {
    for (const typeName of getImplementingTypes(returnType.name, schema2)) {
      if (typeNames == null || typeNames.includes(typeName)) {
        fn(typeName);
      }
    }
  } else if (isUnionType(returnType)) {
    for (const type2 of returnType.getTypes()) {
      if (typeNames == null || typeNames.includes(type2.name)) {
        fn(type2.name);
      }
    }
  } else if (isObjectType(returnType) && (typeNames == null || typeNames.includes(returnType.name))) {
    fn(returnType.name);
  }
}
function stitchingDirectives(options = {}) {
  const finalOptions = {
    ...defaultStitchingDirectiveOptions,
    ...options
  };
  const { keyDirectiveName, computedDirectiveName, mergeDirectiveName, canonicalDirectiveName } = finalOptions;
  const keyDirectiveTypeDefs = `directive @${keyDirectiveName}(selectionSet: String!) on OBJECT`;
  const computedDirectiveTypeDefs = `directive @${computedDirectiveName}(selectionSet: String!) on FIELD_DEFINITION`;
  const mergeDirectiveTypeDefs = `directive @${mergeDirectiveName}(argsExpr: String, keyArg: String, keyField: String, key: [String!], additionalArgs: String) on FIELD_DEFINITION`;
  const canonicalDirectiveTypeDefs = `directive @${canonicalDirectiveName} on OBJECT | INTERFACE | INPUT_OBJECT | UNION | ENUM | SCALAR | FIELD_DEFINITION | INPUT_FIELD_DEFINITION`;
  const keyDirective = new GraphQLDirective({
    name: keyDirectiveName,
    locations: ["OBJECT"],
    args: {
      selectionSet: { type: new GraphQLNonNull(GraphQLString) }
    }
  });
  const computedDirective = new GraphQLDirective({
    name: computedDirectiveName,
    locations: ["FIELD_DEFINITION"],
    args: {
      selectionSet: { type: new GraphQLNonNull(GraphQLString) }
    }
  });
  const mergeDirective2 = new GraphQLDirective({
    name: mergeDirectiveName,
    locations: ["FIELD_DEFINITION"],
    args: {
      argsExpr: { type: GraphQLString },
      keyArg: { type: GraphQLString },
      keyField: { type: GraphQLString },
      key: { type: new GraphQLList(new GraphQLNonNull(GraphQLString)) },
      additionalArgs: { type: GraphQLString }
    }
  });
  const canonicalDirective = new GraphQLDirective({
    name: canonicalDirectiveName,
    locations: [
      "OBJECT",
      "INTERFACE",
      "INPUT_OBJECT",
      "UNION",
      "ENUM",
      "SCALAR",
      "FIELD_DEFINITION",
      "INPUT_FIELD_DEFINITION"
    ]
  });
  const allStitchingDirectivesTypeDefs = [
    keyDirectiveTypeDefs,
    computedDirectiveTypeDefs,
    mergeDirectiveTypeDefs,
    canonicalDirectiveTypeDefs
  ].join("\n");
  return {
    keyDirectiveTypeDefs,
    computedDirectiveTypeDefs,
    mergeDirectiveTypeDefs,
    canonicalDirectiveTypeDefs,
    stitchingDirectivesTypeDefs: allStitchingDirectivesTypeDefs,
    allStitchingDirectivesTypeDefs,
    keyDirective,
    computedDirective,
    mergeDirective: mergeDirective2,
    canonicalDirective,
    allStitchingDirectives: [keyDirective, computedDirective, mergeDirective2, canonicalDirective],
    stitchingDirectivesValidator: stitchingDirectivesValidator(finalOptions),
    stitchingDirectivesTransformer: stitchingDirectivesTransformer(finalOptions)
  };
}
var extensionKind = /Extension$/;
var entityKinds = [
  Kind.OBJECT_TYPE_DEFINITION,
  Kind.OBJECT_TYPE_EXTENSION,
  Kind.INTERFACE_TYPE_DEFINITION,
  Kind.INTERFACE_TYPE_EXTENSION
];
function isEntityKind(def) {
  return entityKinds.includes(def.kind);
}
function getQueryTypeDef(definitions) {
  var _a2;
  const schemaDef = definitions.find((def) => def.kind === Kind.SCHEMA_DEFINITION);
  const typeName = schemaDef ? (_a2 = schemaDef.operationTypes.find(({ operation }) => operation === "query")) === null || _a2 === void 0 ? void 0 : _a2.type.name.value : "Query";
  return definitions.find((def) => def.kind === Kind.OBJECT_TYPE_DEFINITION && def.name.value === typeName);
}
function federationToStitchingSDL(federationSDL, stitchingConfig = stitchingDirectives()) {
  const doc = parse(federationSDL);
  const entityTypes = [];
  const baseTypeNames = doc.definitions.reduce((memo, typeDef) => {
    if (!extensionKind.test(typeDef.kind) && "name" in typeDef && typeDef.name) {
      memo[typeDef.name.value] = true;
    }
    return memo;
  }, {});
  doc.definitions.forEach((typeDef) => {
    var _a2, _b, _c;
    if (extensionKind.test(typeDef.kind) && "name" in typeDef && typeDef.name && !baseTypeNames[typeDef.name.value]) {
      typeDef.kind = typeDef.kind.replace(extensionKind, "Definition");
    }
    if (!isEntityKind(typeDef))
      return;
    const keyDirs = [];
    const otherDirs = [];
    (_a2 = typeDef.directives) === null || _a2 === void 0 ? void 0 : _a2.forEach((dir) => {
      if (dir.name.value === "key") {
        keyDirs.push(dir);
      } else {
        otherDirs.push(dir);
      }
    });
    if (!keyDirs.length)
      return;
    const selectionSet = `{ ${keyDirs.map((dir) => dir.arguments[0].value.value).join(" ")} }`;
    const keyFields = parse(selectionSet).definitions[0].selectionSet.selections.map((sel) => sel.name.value);
    const keyDir = keyDirs[0];
    keyDir.name.value = stitchingConfig.keyDirective.name;
    keyDir.arguments[0].name.value = "selectionSet";
    keyDir.arguments[0].value.value = selectionSet;
    typeDef.directives = [keyDir, ...otherDirs];
    typeDef.fields = (_b = typeDef.fields) === null || _b === void 0 ? void 0 : _b.filter((fieldDef) => {
      var _a3;
      return keyFields.includes(fieldDef.name.value) || !((_a3 = fieldDef.directives) === null || _a3 === void 0 ? void 0 : _a3.find((dir) => dir.name.value === "external"));
    });
    (_c = typeDef.fields) === null || _c === void 0 ? void 0 : _c.forEach((fieldDef) => {
      fieldDef.directives = fieldDef.directives.filter((dir) => !/^(external|provides)$/.test(dir.name.value));
      fieldDef.directives.forEach((dir) => {
        if (dir.name.value === "requires") {
          dir.name.value = stitchingConfig.computedDirective.name;
          dir.arguments[0].name.value = "selectionSet";
          dir.arguments[0].value.value = `{ ${dir.arguments[0].value.value} }`;
        }
      });
    });
    if (typeDef.kind === Kind.OBJECT_TYPE_DEFINITION || typeDef.kind === Kind.OBJECT_TYPE_EXTENSION) {
      entityTypes.push(typeDef.name.value);
    }
  });
  if (entityTypes.length) {
    const queryDef = getQueryTypeDef(doc.definitions);
    const entitiesSchema = parse(`
      scalar _Any
      union _Entity = ${entityTypes.filter((v, i, a) => a.indexOf(v) === i).join(" | ")}
      type Query { _entities(representations: [_Any!]!): [_Entity]! @${stitchingConfig.mergeDirective.name} }
    `).definitions;
    doc.definitions.push(entitiesSchema[0]);
    doc.definitions.push(entitiesSchema[1]);
    if (queryDef) {
      queryDef.fields.push(entitiesSchema[2].fields[0]);
    } else {
      doc.definitions.push(entitiesSchema[2]);
    }
  }
  return [stitchingConfig.stitchingDirectivesTypeDefs, print(doc)].join("\n");
}

// node_modules/@graphql-mesh/merger-stitching/index.mjs
init_graphql();
var APOLLO_GET_SERVICE_DEFINITION_QUERY = `
  query __ApolloGetServiceDefinition__ {
    _service {
      sdl
    }
  }
`;
var StitchingMerger = class {
  constructor(options) {
    this.name = "stitching";
    this.logger = options.logger;
    this.store = options.store;
  }
  isFederatedSchema(schema2) {
    const queryType = schema2.getQueryType();
    if (queryType) {
      const queryFields = queryType.getFields();
      return "_service" in queryFields;
    }
    return false;
  }
  async replaceFederationSDLWithStitchingSDL(name, oldSchema, executor, stitchingDirectives2) {
    const rawSourceLogger = this.logger.child(name);
    rawSourceLogger.debug(`Extracting existing resolvers if available`);
    const resolvers = extractResolvers(oldSchema);
    let newSchema = await this.store.proxy(`${name}_stitching`, PredefinedProxyOptions.GraphQLSchemaWithDiffing).getWithSet(async () => {
      var _a2;
      this.logger.debug(`Fetching Apollo Federated Service SDL for ${name}`);
      const sdlQueryResult = await executor({
        document: parse(APOLLO_GET_SERVICE_DEFINITION_QUERY)
      });
      if ((_a2 = sdlQueryResult.errors) === null || _a2 === void 0 ? void 0 : _a2.length) {
        throw new AggregateErrorImpl(sdlQueryResult.errors, `Failed on fetching Federated SDL for ${name}`);
      }
      const federationSdl = sdlQueryResult.data._service.sdl;
      this.logger.debug(`Generating Stitching SDL for ${name}`);
      const stitchingSdl = federationToStitchingSDL(federationSdl, stitchingDirectives2);
      return buildSchema(stitchingSdl, {
        assumeValid: true,
        assumeValidSDL: true
      });
    });
    rawSourceLogger.debug(`Adding existing resolvers back to the schema`);
    newSchema = addResolversToSchema({
      schema: newSchema,
      resolvers,
      updateResolversInPlace: true,
      resolverValidationOptions: {
        requireResolversToMatchSchema: "ignore"
      }
    });
    return newSchema;
  }
  async getUnifiedSchema(context) {
    const { rawSources, typeDefs, resolvers, transforms } = context;
    this.logger.debug(`Stitching directives are being generated`);
    const defaultStitchingDirectives = stitchingDirectives({
      pathToDirectivesInExtensions: ["directives"]
    });
    this.logger.debug(`Checking if any of sources has federation metadata`);
    const subschemas = await Promise.all(rawSources.map(async (rawSource) => {
      if (rawSource.batch == null) {
        rawSource.batch = true;
      }
      if (this.isFederatedSchema(rawSource.schema)) {
        this.logger.debug(`${rawSource.name} has federated schema.`);
        rawSource.schema = await this.replaceFederationSDLWithStitchingSDL(rawSource.name, rawSource.schema, rawSource.executor, defaultStitchingDirectives);
      }
      rawSource.merge = defaultStitchingDirectives.stitchingDirectivesTransformer(rawSource).merge;
      return rawSource;
    }));
    this.logger.debug(`Stitching the source schemas`);
    let unifiedSchema = stitchSchemas({
      subschemas,
      typeDefs,
      resolvers,
      typeMergingOptions: {
        validationSettings: {
          validationLevel: ValidationLevel.Off
        }
      }
    });
    this.logger.debug(`sourceMap is being generated and attached to the unified schema`);
    unifiedSchema.extensions = unifiedSchema.extensions || {};
    Object.assign(unifiedSchema.extensions, {
      sourceMap: new Proxy({}, {
        get: (_, pKey) => {
          if (pKey === "get") {
            return (rawSource) => {
              const stitchingInfo = unifiedSchema.extensions.stitchingInfo;
              for (const [subschemaConfig, subschema] of stitchingInfo.subschemaMap) {
                if (subschemaConfig.name === rawSource.name) {
                  return subschema.transformedSchema;
                }
              }
              return void 0;
            };
          }
          return () => {
            throw new Error("Not Implemented");
          };
        }
      })
    });
    if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {
      this.logger.debug(`Root level transformations are being applied`);
      const { noWrapTransforms, wrapTransforms } = groupTransforms(transforms);
      if (wrapTransforms.length) {
        unifiedSchema = wrapSchema({
          schema: unifiedSchema,
          transforms,
          batch: true
        });
      }
      if (noWrapTransforms.length) {
        unifiedSchema = applySchemaTransforms(unifiedSchema, { schema: unifiedSchema }, null, noWrapTransforms);
      }
    }
    return unifiedSchema;
  }
};
var merger_stitching_default = StitchingMerger;

// .mesh/index.ts
var baseDir = import_path_browserify.default.join(import_path_browserify.default.dirname(fileURLToPath(import.meta.url)), "..");
var importFn = (moduleId) => {
  const relativeModuleId = (import_path_browserify.default.isAbsolute(moduleId) ? import_path_browserify.default.relative(baseDir, moduleId) : moduleId).split("\\").join("/").replace(baseDir + "/", "");
  switch (relativeModuleId) {
    case ".mesh/sources/Countries/introspectionSchema":
      return Promise.resolve().then(() => (init_introspectionSchema(), introspectionSchema_exports));
    case ".mesh/sources/Star wars/introspectionSchema":
      return Promise.resolve().then(() => (init_introspectionSchema2(), introspectionSchema_exports2));
    case ".mesh/stitchingMerger/Countries_stitching":
      return Promise.resolve().then(() => (init_Countries_stitching(), Countries_stitching_exports));
    default:
      return Promise.reject(new Error(`Cannot find module '${relativeModuleId}'.`));
  }
};
var rootStore = new MeshStore(".mesh", new FsStoreStorageAdapter({
  cwd: baseDir,
  importFn,
  fileType: "ts"
}), {
  readonly: true,
  validate: false
});
async function getMeshOptions() {
  const pubsub = new PubSub();
  const cache = new cache_localforage_default({
    ...{},
    importFn,
    store: rootStore.child("cache"),
    pubsub
  });
  const sourcesStore = rootStore.child("sources");
  const logger = new DefaultLogger("\u{1F578}\uFE0F  Mesh");
  const sources = [];
  const transforms = [];
  const additionalEnvelopPlugins = [];
  const countriesTransforms = [];
  const starWarsTransforms = [];
  const additionalTypeDefs = [];
  const countriesHandler = new graphql_default({
    name: "Countries",
    config: { "endpoint": "https://countries.trevorblades.com/" },
    baseDir,
    cache,
    pubsub,
    store: sourcesStore.child("Countries"),
    logger: logger.child("Countries"),
    importFn
  });
  const starWarsHandler = new graphql_default({
    name: "Star wars",
    config: { "endpoint": "https://swapi-graphql.netlify.app/.netlify/functions/index" },
    baseDir,
    cache,
    pubsub,
    store: sourcesStore.child("Star wars"),
    logger: logger.child("Star wars"),
    importFn
  });
  sources[0] = {
    name: "Countries",
    handler: countriesHandler,
    transforms: countriesTransforms
  };
  sources[1] = {
    name: "Star wars",
    handler: starWarsHandler,
    transforms: starWarsTransforms
  };
  const merger = new merger_stitching_default({
    cache,
    pubsub,
    logger: logger.child("stitchingMerger"),
    store: rootStore.child("stitchingMerger")
  });
  const additionalResolvers = [];
  return {
    sources,
    transforms,
    additionalTypeDefs,
    additionalResolvers,
    cache,
    pubsub,
    merger,
    logger,
    additionalEnvelopPlugins,
    get documents() {
      return [];
    }
  };
}
var meshInstance$;
function getBuiltMesh() {
  if (meshInstance$ == null) {
    meshInstance$ = getMeshOptions().then((meshOptions) => getMesh(meshOptions)).then((mesh) => {
      const id$ = mesh.pubsub.subscribe("destroy", () => {
        meshInstance$ = void 0;
        id$.then((id) => mesh.pubsub.unsubscribe(id)).catch((err) => console.error(err));
      });
      return mesh;
    });
  }
  return meshInstance$;
}

// src/index.ts
var worker = {
  async fetch(req) {
    console.log("getting mesh");
    const mesh = await getBuiltMesh();
    console.log("retrieved mesh");
    const yoga = createServer({
      logging: {
        debug: console.log,
        error: console.log,
        info: console.log,
        warn: console.log
      },
      plugins: mesh.plugins,
      graphiql: {
        endpoint: "/graphql",
        title: "Mesh Gateway"
      }
    });
    console.log("executing fetch");
    const result = await yoga.fetch(req);
    console.log("fetch result", JSON.stringify(result));
    return result;
  }
};
var src_default = worker;
export {
  src_default as default
};
/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */
//# sourceMappingURL=index.js.map

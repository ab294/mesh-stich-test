{
  "version": 3,
  "sources": ["../node_modules/@esbuild-plugins/node-globals-polyfill/_virtual-process-polyfill_.js", "../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js", "../node_modules/@esbuild-plugins/node-globals-polyfill/_buffer.js", "../node_modules/graphql/version.mjs", "../node_modules/graphql/jsutils/devAssert.mjs", "../node_modules/graphql/jsutils/isPromise.mjs", "../node_modules/graphql/jsutils/isObjectLike.mjs", "../node_modules/graphql/jsutils/invariant.mjs", "../node_modules/graphql/language/location.mjs", "../node_modules/graphql/language/printLocation.mjs", "../node_modules/graphql/error/GraphQLError.mjs", "../node_modules/graphql/error/syntaxError.mjs", "../node_modules/graphql/language/ast.mjs", "../node_modules/graphql/language/directiveLocation.mjs", "../node_modules/graphql/language/kinds.mjs", "../node_modules/graphql/language/characterClasses.mjs", "../node_modules/graphql/language/blockString.mjs", "../node_modules/graphql/language/tokenKind.mjs", "../node_modules/graphql/language/lexer.mjs", "../node_modules/graphql/jsutils/inspect.mjs", "../node_modules/graphql/jsutils/instanceOf.mjs", "../node_modules/graphql/language/source.mjs", "../node_modules/graphql/language/parser.mjs", "../node_modules/graphql/jsutils/didYouMean.mjs", "../node_modules/graphql/jsutils/identityFunc.mjs", "../node_modules/graphql/jsutils/keyMap.mjs", "../node_modules/graphql/jsutils/keyValMap.mjs", "../node_modules/graphql/jsutils/mapValue.mjs", "../node_modules/graphql/jsutils/naturalCompare.mjs", "../node_modules/graphql/jsutils/suggestionList.mjs", "../node_modules/graphql/jsutils/toObjMap.mjs", "../node_modules/graphql/language/printString.mjs", "../node_modules/graphql/language/visitor.mjs", "../node_modules/graphql/language/printer.mjs", "../node_modules/graphql/utilities/valueFromASTUntyped.mjs", "../node_modules/graphql/type/assertName.mjs", "../node_modules/graphql/type/definition.mjs", "../node_modules/graphql/utilities/typeComparators.mjs", "../node_modules/graphql/type/scalars.mjs", "../node_modules/graphql/type/directives.mjs", "../node_modules/graphql/jsutils/isIterableObject.mjs", "../node_modules/graphql/utilities/astFromValue.mjs", "../node_modules/graphql/type/introspection.mjs", "../node_modules/graphql/type/schema.mjs", "../node_modules/graphql/type/validate.mjs", "../node_modules/graphql/utilities/typeFromAST.mjs", "../node_modules/graphql/utilities/TypeInfo.mjs", "../node_modules/graphql/language/predicates.mjs", "../node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs", "../node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs", "../node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs", "../node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs", "../node_modules/graphql/validation/rules/KnownDirectivesRule.mjs", "../node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs", "../node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs", "../node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs", "../node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs", "../node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs", "../node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs", "../node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs", "../node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs", "../node_modules/graphql/utilities/sortValueNode.mjs", "../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs", "../node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs", "../node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs", "../node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs", "../node_modules/graphql/validation/rules/ScalarLeafsRule.mjs", "../node_modules/graphql/jsutils/printPathArray.mjs", "../node_modules/graphql/jsutils/Path.mjs", "../node_modules/graphql/utilities/coerceInputValue.mjs", "../node_modules/graphql/utilities/valueFromAST.mjs", "../node_modules/graphql/execution/values.mjs", "../node_modules/graphql/execution/collectFields.mjs", "../node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs", "../node_modules/graphql/jsutils/groupBy.mjs", "../node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs", "../node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs", "../node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs", "../node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs", "../node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs", "../node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs", "../node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs", "../node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs", "../node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs", "../node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs", "../node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs", "../node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs", "../node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs", "../node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs", "../node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs", "../node_modules/graphql/validation/specifiedRules.mjs", "../node_modules/graphql/validation/ValidationContext.mjs", "../node_modules/graphql/validation/validate.mjs", "../node_modules/graphql/jsutils/memoize3.mjs", "../node_modules/graphql/jsutils/promiseForObject.mjs", "../node_modules/graphql/jsutils/promiseReduce.mjs", "../node_modules/graphql/jsutils/toError.mjs", "../node_modules/graphql/error/locatedError.mjs", "../node_modules/graphql/execution/execute.mjs", "../node_modules/graphql/type/index.mjs", "../node_modules/graphql/language/index.mjs", "../node_modules/graphql/jsutils/isAsyncIterable.mjs", "../node_modules/graphql/execution/mapAsyncIterator.mjs", "../node_modules/graphql/execution/subscribe.mjs", "../node_modules/graphql/execution/index.mjs", "../node_modules/graphql/validation/index.mjs", "../node_modules/graphql/error/index.mjs", "../node_modules/graphql/utilities/getIntrospectionQuery.mjs", "../node_modules/graphql/utilities/getOperationAST.mjs", "../node_modules/graphql/utilities/buildClientSchema.mjs", "../node_modules/graphql/utilities/extendSchema.mjs", "../node_modules/graphql/utilities/buildASTSchema.mjs", "../node_modules/graphql/utilities/index.mjs", "../node_modules/graphql/index.mjs", "../node_modules/@envelop/validation-cache/node_modules/tiny-lru/lib/tiny-lru.js", "../node_modules/@envelop/parser-cache/node_modules/tiny-lru/lib/tiny-lru.js", "../node_modules/cross-undici-fetch/dist/global-ponyfill.js", "../node_modules/http-cache-semantics/index.js", "../node_modules/is-url/index.js", "../node_modules/path-browserify/index.js", "../node_modules/tiny-lru/lib/tiny-lru.js", "../node_modules/iterall/index.js", "../node_modules/graphql-subscriptions/src/pubsub-async-iterator.ts", "../node_modules/graphql-subscriptions/src/pubsub-engine.ts", "node-modules-polyfills:events", "node-modules-polyfills-commonjs:events", "../node_modules/graphql-subscriptions/src/pubsub.ts", "../node_modules/graphql-subscriptions/src/with-filter.ts", "../node_modules/graphql-subscriptions/src/index.ts", "../node_modules/lodash.get/index.js", "../node_modules/lodash.set/index.js", "../node_modules/lodash.topath/index.js", "../node_modules/foreach/index.js", "../node_modules/json-pointer/index.js", "../node_modules/dayjs/dayjs.min.js", "../node_modules/color-name/index.js", "../node_modules/color-convert/conversions.js", "../node_modules/color-convert/route.js", "../node_modules/color-convert/index.js", "../node_modules/ansi-styles/index.js", "../node_modules/supports-color/browser.js", "../node_modules/chalk/source/util.js", "../node_modules/chalk/source/templates.js", "../node_modules/chalk/source/index.js", "node-modules-polyfills:path", "node-modules-polyfills-commonjs:path", "../node_modules/file-uri-to-path/src/index.ts", "../node_modules/dataloader/index.js", "../node_modules/tslib/tslib.js", "../node_modules/object-inspect/util.inspect", "../node_modules/object-inspect/index.js", "../node_modules/dependency-graph/lib/dep_graph.js", "../node_modules/localforage/dist/localforage.js", "../node_modules/isomorphic-ws/browser.js", "../node_modules/extract-files/public/ReactNativeFile.js", "../node_modules/extract-files/public/isExtractableFile.js", "../node_modules/extract-files/public/extractFiles.js", "../node_modules/base64-js/index.js", "../node_modules/ieee754/index.js", "../node_modules/buffer/index.js", "../node_modules/sync-fetch/browser.js", "../.mesh/sources/Countries/introspectionSchema.ts", "../.mesh/sources/Star wars/introspectionSchema.ts", "../.mesh/stitchingMerger/Countries_stitching.ts", "../src/index.ts", "../node_modules/@graphql-yoga/common/index.mjs", "../node_modules/@envelop/core/index.mjs", "../node_modules/@graphql-tools/utils/index.mjs", "../node_modules/@envelop/validation-cache/index.mjs", "../node_modules/@envelop/parser-cache/index.mjs", "../node_modules/@graphql-tools/schema/index.mjs", "../node_modules/@graphql-tools/merge/index.mjs", "../node_modules/dset/dist/index.mjs", "../node_modules/@graphql-yoga/subscription/index.mjs", "../node_modules/@repeaterjs/repeater/repeater.js", "../.mesh/index.ts", "../node_modules/@graphql-mesh/runtime/index.mjs", "../node_modules/@graphql-mesh/utils/index.mjs", "../node_modules/fetchache/index.mjs", "../node_modules/js-yaml/dist/js-yaml.mjs", "../node_modules/@graphql-mesh/cross-helpers/browser.js", "../node_modules/@graphql-mesh/cross-helpers/node_modules/@graphql-tools/utils/index.mjs", "../node_modules/@graphql-mesh/string-interpolation/dist/index.mjs", "../node_modules/@graphql-tools/delegate/index.mjs", "../node_modules/graphql-executor/index.mjs", "../node_modules/graphql-executor/type/directives.mjs", "../node_modules/graphql-executor/executorSchema/toExecutorSchema.mjs", "../node_modules/graphql-executor/jsutils/inspect.mjs", "../node_modules/graphql-executor/jsutils/invariant.mjs", "../node_modules/graphql-executor/jsutils/memoize1.mjs", "../node_modules/graphql-executor/type/introspection.mjs", "../node_modules/graphql-executor/executorSchema/getPossibleInputTypes.mjs", "../node_modules/graphql-executor/executorSchema/typeTree.mjs", "../node_modules/graphql-executor/execution/index.mjs", "../node_modules/graphql-executor/jsutils/Path.mjs", "../node_modules/graphql-executor/execution/executor.mjs", "../node_modules/graphql-executor/jsutils/memoize1and1.mjs", "../node_modules/graphql-executor/jsutils/memoize2.mjs", "../node_modules/graphql-executor/jsutils/devAssert.mjs", "../node_modules/graphql-executor/jsutils/isPromise.mjs", "../node_modules/graphql-executor/jsutils/isObjectLike.mjs", "../node_modules/graphql-executor/jsutils/promiseReduce.mjs", "../node_modules/graphql-executor/jsutils/isAsyncIterable.mjs", "../node_modules/graphql-executor/jsutils/isIterableObject.mjs", "../node_modules/graphql-executor/jsutils/resolveAfterAll.mjs", "../node_modules/graphql-executor/jsutils/toError.mjs", "../node_modules/graphql-executor/execution/values.mjs", "../node_modules/graphql-executor/jsutils/keyMap.mjs", "../node_modules/graphql-executor/jsutils/printPathArray.mjs", "../node_modules/graphql-executor/utilities/coerceInputValue.mjs", "../node_modules/graphql-executor/jsutils/didYouMean.mjs", "../node_modules/graphql-executor/jsutils/suggestionList.mjs", "../node_modules/graphql-executor/jsutils/naturalCompare.mjs", "../node_modules/graphql-executor/error/isGraphQLError.mjs", "../node_modules/graphql-executor/utilities/valueFromAST.mjs", "../node_modules/graphql-executor/execution/publisher.mjs", "../node_modules/graphql-executor/jsutils/repeater.mjs", "../node_modules/graphql-executor/execution/bundler.mjs", "../node_modules/graphql-executor/execution/getSequentialBundler.mjs", "../node_modules/graphql-executor/execution/mapAsyncIterable.mjs", "../node_modules/graphql-executor/execution/flattenAsyncIterable.mjs", "../node_modules/value-or-promise/src/index.ts", "../node_modules/value-or-promise/src/ValueOrPromise.ts", "../node_modules/@graphql-tools/batch-execute/index.mjs", "../node_modules/@graphql-tools/batch-delegate/index.mjs", "../node_modules/@graphql-tools/wrap/index.mjs", "../node_modules/@envelop/extended-validation/index.mjs", "../node_modules/@graphql-mesh/store/index.mjs", "../node_modules/@graphql-inspector/core/index.mjs", "../node_modules/tslib/modules/index.js", "../node_modules/@graphql-mesh/cache-localforage/index.mjs", "../node_modules/@graphql-mesh/graphql/index.mjs", "../node_modules/@graphql-tools/url-loader/index.mjs", "../node_modules/graphql-ws/lib/client.mjs", "../node_modules/graphql-ws/lib/common.mjs", "../node_modules/graphql-ws/lib/utils.mjs", "../node_modules/extract-files/public/index.mjs", "../node_modules/@n1ru4l/graphql-live-query/esm/index.js", "../node_modules/meros/node/index.mjs", "../node_modules/meros/browser/index.mjs", "../node_modules/dset/merge/index.mjs", "../node_modules/@graphql-mesh/merger-stitching/index.mjs", "../node_modules/@graphql-tools/stitch/index.mjs", "../node_modules/@graphql-tools/stitching-directives/index.mjs"],
  "sourcesContent": ["// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined')\n}\nfunction defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined')\n}\nvar cachedSetTimeout = defaultSetTimout\nvar cachedClearTimeout = defaultClearTimeout\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0)\n    }\n    // if setTimeout wasn't available but was latter defined\n    if (\n        (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&\n        setTimeout\n    ) {\n        cachedSetTimeout = setTimeout\n        return setTimeout(fun, 0)\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0)\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0)\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0)\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker)\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if (\n        (cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) &&\n        clearTimeout\n    ) {\n        cachedClearTimeout = clearTimeout\n        return clearTimeout(marker)\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker)\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker)\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker)\n        }\n    }\n}\nvar queue = []\nvar draining = false\nvar currentQueue\nvar queueIndex = -1\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return\n    }\n    draining = false\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue)\n    } else {\n        queueIndex = -1\n    }\n    if (queue.length) {\n        drainQueue()\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return\n    }\n    var timeout = runTimeout(cleanUpNextTick)\n    draining = true\n\n    var len = queue.length\n    while (len) {\n        currentQueue = queue\n        queue = []\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run()\n            }\n        }\n        queueIndex = -1\n        len = queue.length\n    }\n    currentQueue = null\n    draining = false\n    runClearTimeout(timeout)\n}\nfunction nextTick(fun) {\n    var args = new Array(arguments.length - 1)\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i]\n        }\n    }\n    queue.push(new Item(fun, args))\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue)\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun\n    this.array = array\n}\nItem.prototype.run = function() {\n    this.fun.apply(null, this.array)\n}\nvar title = 'browser'\nvar platform = 'browser'\nvar browser = true\nvar env = {}\nvar argv = []\nvar version = '' // empty string to avoid regexp issues\nvar versions = {}\nvar release = {}\nvar config = {}\n\nfunction noop() {}\n\nvar on = noop\nvar addListener = noop\nvar once = noop\nvar off = noop\nvar removeListener = noop\nvar removeAllListeners = noop\nvar emit = noop\n\nfunction binding(name) {\n    throw new Error('process.binding is not supported')\n}\n\nfunction cwd() {\n    return '/'\n}\nfunction chdir(dir) {\n    throw new Error('process.chdir is not supported')\n}\nfunction umask() {\n    return 0\n}\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {}\nvar performanceNow =\n    performance.now ||\n    performance.mozNow ||\n    performance.msNow ||\n    performance.oNow ||\n    performance.webkitNow ||\n    function() {\n        return new Date().getTime()\n    }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp) {\n    var clocktime = performanceNow.call(performance) * 1e-3\n    var seconds = Math.floor(clocktime)\n    var nanoseconds = Math.floor((clocktime % 1) * 1e9)\n    if (previousTimestamp) {\n        seconds = seconds - previousTimestamp[0]\n        nanoseconds = nanoseconds - previousTimestamp[1]\n        if (nanoseconds < 0) {\n            seconds--\n            nanoseconds += 1e9\n        }\n    }\n    return [seconds, nanoseconds]\n}\n\nvar startTime = new Date()\nfunction uptime() {\n    var currentTime = new Date()\n    var dif = currentTime - startTime\n    return dif / 1000\n}\n\nexport var process = {\n    nextTick: nextTick,\n    title: title,\n    browser: browser,\n    env: env,\n    argv: argv,\n    version: version,\n    versions: versions,\n    on: on,\n    addListener: addListener,\n    once: once,\n    off: off,\n    removeListener: removeListener,\n    removeAllListeners: removeAllListeners,\n    emit: emit,\n    binding: binding,\n    cwd: cwd,\n    chdir: chdir,\n    umask: umask,\n    hrtime: hrtime,\n    platform: platform,\n    release: release,\n    config: config,\n    uptime: uptime,\n}\n\n// replace process.env.VAR with define\n\nconst defines = {\n\n}\nObject.keys(defines).forEach((key) => {\n    const segs = key.split('.')\n    let target = process\n    for (let i = 0; i < segs.length; i++) {\n        const seg = segs[i]\n        if (i === segs.length - 1) {\n            target[seg] = defines[key]\n        } else {\n            target = target[seg] || (target[seg] = {})\n        }\n    }\n})\n", "// taken from https://github.com/calvinmetcalf/buffer-es6\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\nvar inited = false\nfunction init() {\n    inited = true\n    var code =\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    for (var i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i]\n        revLookup[code.charCodeAt(i)] = i\n    }\n\n    revLookup['-'.charCodeAt(0)] = 62\n    revLookup['_'.charCodeAt(0)] = 63\n}\n\nfunction base64toByteArray(b64) {\n    if (!inited) {\n        init()\n    }\n    var i, j, l, tmp, placeHolders, arr\n    var len = b64.length\n\n    if (len % 4 > 0) {\n        throw new Error('Invalid string. Length must be a multiple of 4')\n    }\n\n    // the number of equal signs (place holders)\n    // if there are two placeholders, than the two characters before it\n    // represent one byte\n    // if there is only one, then the three characters before it represent 2 bytes\n    // this is just a cheap hack to not do indexOf twice\n    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n    // base64 is 4/3 + up to two characters of the original data\n    arr = new Arr((len * 3) / 4 - placeHolders)\n\n    // if there are placeholders, only get up to the last complete 4 chars\n    l = placeHolders > 0 ? len - 4 : len\n\n    var L = 0\n\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n        tmp =\n            (revLookup[b64.charCodeAt(i)] << 18) |\n            (revLookup[b64.charCodeAt(i + 1)] << 12) |\n            (revLookup[b64.charCodeAt(i + 2)] << 6) |\n            revLookup[b64.charCodeAt(i + 3)]\n        arr[L++] = (tmp >> 16) & 0xff\n        arr[L++] = (tmp >> 8) & 0xff\n        arr[L++] = tmp & 0xff\n    }\n\n    if (placeHolders === 2) {\n        tmp =\n            (revLookup[b64.charCodeAt(i)] << 2) |\n            (revLookup[b64.charCodeAt(i + 1)] >> 4)\n        arr[L++] = tmp & 0xff\n    } else if (placeHolders === 1) {\n        tmp =\n            (revLookup[b64.charCodeAt(i)] << 10) |\n            (revLookup[b64.charCodeAt(i + 1)] << 4) |\n            (revLookup[b64.charCodeAt(i + 2)] >> 2)\n        arr[L++] = (tmp >> 8) & 0xff\n        arr[L++] = tmp & 0xff\n    }\n\n    return arr\n}\n\nfunction tripletToBase64(num) {\n    return (\n        lookup[(num >> 18) & 0x3f] +\n        lookup[(num >> 12) & 0x3f] +\n        lookup[(num >> 6) & 0x3f] +\n        lookup[num & 0x3f]\n    )\n}\n\nfunction encodeChunk(uint8, start, end) {\n    var tmp\n    var output = []\n    for (var i = start; i < end; i += 3) {\n        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]\n        output.push(tripletToBase64(tmp))\n    }\n    return output.join('')\n}\n\nfunction base64fromByteArray(uint8) {\n    if (!inited) {\n        init()\n    }\n    var tmp\n    var len = uint8.length\n    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    var output = ''\n    var parts = []\n    var maxChunkLength = 16383 // must be multiple of 3\n\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n        parts.push(\n            encodeChunk(\n                uint8,\n                i,\n                i + maxChunkLength > len2 ? len2 : i + maxChunkLength,\n            ),\n        )\n    }\n\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1]\n        output += lookup[tmp >> 2]\n        output += lookup[(tmp << 4) & 0x3f]\n        output += '=='\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n        output += lookup[tmp >> 10]\n        output += lookup[(tmp >> 4) & 0x3f]\n        output += lookup[(tmp << 2) & 0x3f]\n        output += '='\n    }\n\n    parts.push(output)\n\n    return parts.join('')\n}\n\nvar INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT =\n    global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : true\n\nfunction kMaxLength() {\n    return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff\n}\n\nfunction createBuffer(that, length) {\n    if (kMaxLength() < length) {\n        throw new RangeError('Invalid typed array length')\n    }\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        // Return an augmented `Uint8Array` instance, for best performance\n        that = new Uint8Array(length)\n        that.__proto__ = Buffer.prototype\n    } else {\n        // Fallback: Return an object instance of the Buffer class\n        if (that === null) {\n            that = new Buffer(length)\n        }\n        that.length = length\n    }\n\n    return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nexport function Buffer(arg, encodingOrOffset, length) {\n    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n        return new Buffer(arg, encodingOrOffset, length)\n    }\n\n    // Common case.\n    if (typeof arg === 'number') {\n        if (typeof encodingOrOffset === 'string') {\n            throw new Error(\n                'If encoding is specified then the first argument must be a string',\n            )\n        }\n        return allocUnsafe(this, arg)\n    }\n    return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function(arr) {\n    arr.__proto__ = Buffer.prototype\n    return arr\n}\n\nfunction from(that, value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n        throw new TypeError('\"value\" argument must not be a number')\n    }\n\n    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n        return fromArrayBuffer(that, value, encodingOrOffset, length)\n    }\n\n    if (typeof value === 'string') {\n        return fromString(that, value, encodingOrOffset)\n    }\n\n    return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function(value, encodingOrOffset, length) {\n    return from(null, value, encodingOrOffset, length)\n}\n\nBuffer.kMaxLength = kMaxLength()\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n    Buffer.prototype.__proto__ = Uint8Array.prototype\n    Buffer.__proto__ = Uint8Array\n    if (\n        typeof Symbol !== 'undefined' &&\n        Symbol.species &&\n        Buffer[Symbol.species] === Buffer\n    ) {\n        // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n        // Object.defineProperty(Buffer, Symbol.species, {\n        //   value: null,\n        //   configurable: true\n        // })\n    }\n}\n\nfunction assertSize(size) {\n    if (typeof size !== 'number') {\n        throw new TypeError('\"size\" argument must be a number')\n    } else if (size < 0) {\n        throw new RangeError('\"size\" argument must not be negative')\n    }\n}\n\nfunction alloc(that, size, fill, encoding) {\n    assertSize(size)\n    if (size <= 0) {\n        return createBuffer(that, size)\n    }\n    if (fill !== undefined) {\n        // Only pay attention to encoding if it's a string. This\n        // prevents accidentally sending in a number that would\n        // be interpretted as a start offset.\n        return typeof encoding === 'string'\n            ? createBuffer(that, size).fill(fill, encoding)\n            : createBuffer(that, size).fill(fill)\n    }\n    return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function(size, fill, encoding) {\n    return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe(that, size) {\n    assertSize(size)\n    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n    if (!Buffer.TYPED_ARRAY_SUPPORT) {\n        for (var i = 0; i < size; ++i) {\n            that[i] = 0\n        }\n    }\n    return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function(size) {\n    return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function(size) {\n    return allocUnsafe(null, size)\n}\n\nfunction fromString(that, string, encoding) {\n    if (typeof encoding !== 'string' || encoding === '') {\n        encoding = 'utf8'\n    }\n\n    if (!Buffer.isEncoding(encoding)) {\n        throw new TypeError('\"encoding\" must be a valid string encoding')\n    }\n\n    var length = byteLength(string, encoding) | 0\n    that = createBuffer(that, length)\n\n    var actual = that.write(string, encoding)\n\n    if (actual !== length) {\n        // Writing a hex string, for example, that contains invalid characters will\n        // cause everything after the first invalid character to be ignored. (e.g.\n        // 'abxxcd' will be treated as 'ab')\n        that = that.slice(0, actual)\n    }\n\n    return that\n}\n\nfunction fromArrayLike(that, array) {\n    var length = array.length < 0 ? 0 : checked(array.length) | 0\n    that = createBuffer(that, length)\n    for (var i = 0; i < length; i += 1) {\n        that[i] = array[i] & 255\n    }\n    return that\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n    array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError(\"'offset' is out of bounds\")\n    }\n\n    if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError(\"'length' is out of bounds\")\n    }\n\n    if (byteOffset === undefined && length === undefined) {\n        array = new Uint8Array(array)\n    } else if (length === undefined) {\n        array = new Uint8Array(array, byteOffset)\n    } else {\n        array = new Uint8Array(array, byteOffset, length)\n    }\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        // Return an augmented `Uint8Array` instance, for best performance\n        that = array\n        that.__proto__ = Buffer.prototype\n    } else {\n        // Fallback: Return an object instance of the Buffer class\n        that = fromArrayLike(that, array)\n    }\n    return that\n}\n\nfunction fromObject(that, obj) {\n    if (internalIsBuffer(obj)) {\n        var len = checked(obj.length) | 0\n        that = createBuffer(that, len)\n\n        if (that.length === 0) {\n            return that\n        }\n\n        obj.copy(that, 0, 0, len)\n        return that\n    }\n\n    if (obj) {\n        if (\n            (typeof ArrayBuffer !== 'undefined' &&\n                obj.buffer instanceof ArrayBuffer) ||\n            'length' in obj\n        ) {\n            if (typeof obj.length !== 'number' || isnan(obj.length)) {\n                return createBuffer(that, 0)\n            }\n            return fromArrayLike(that, obj)\n        }\n\n        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n            return fromArrayLike(that, obj.data)\n        }\n    }\n\n    throw new TypeError(\n        'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.',\n    )\n}\n\nfunction checked(length) {\n    // Note: cannot use `length < kMaxLength()` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= kMaxLength()) {\n        throw new RangeError(\n            'Attempt to allocate Buffer larger than maximum ' +\n                'size: 0x' +\n                kMaxLength().toString(16) +\n                ' bytes',\n        )\n    }\n    return length | 0\n}\n\nexport function SlowBuffer(length) {\n    if (+length != length) {\n        // eslint-disable-line eqeqeq\n        length = 0\n    }\n    return Buffer.alloc(+length)\n}\nBuffer.isBuffer = isBuffer\nfunction internalIsBuffer(b) {\n    return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare(a, b) {\n    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n        throw new TypeError('Arguments must be Buffers')\n    }\n\n    if (a === b) return 0\n\n    var x = a.length\n    var y = b.length\n\n    for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n        if (a[i] !== b[i]) {\n            x = a[i]\n            y = b[i]\n            break\n        }\n    }\n\n    if (x < y) return -1\n    if (y < x) return 1\n    return 0\n}\n\nBuffer.isEncoding = function isEncoding(encoding) {\n    switch (String(encoding).toLowerCase()) {\n        case 'hex':\n        case 'utf8':\n        case 'utf-8':\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n        case 'base64':\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n            return true\n        default:\n            return false\n    }\n}\n\nBuffer.concat = function concat(list, length) {\n    if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n\n    if (list.length === 0) {\n        return Buffer.alloc(0)\n    }\n\n    var i\n    if (length === undefined) {\n        length = 0\n        for (i = 0; i < list.length; ++i) {\n            length += list[i].length\n        }\n    }\n\n    var buffer = Buffer.allocUnsafe(length)\n    var pos = 0\n    for (i = 0; i < list.length; ++i) {\n        var buf = list[i]\n        if (!internalIsBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers')\n        }\n        buf.copy(buffer, pos)\n        pos += buf.length\n    }\n    return buffer\n}\n\nfunction byteLength(string, encoding) {\n    if (internalIsBuffer(string)) {\n        return string.length\n    }\n    if (\n        typeof ArrayBuffer !== 'undefined' &&\n        typeof ArrayBuffer.isView === 'function' &&\n        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)\n    ) {\n        return string.byteLength\n    }\n    if (typeof string !== 'string') {\n        string = '' + string\n    }\n\n    var len = string.length\n    if (len === 0) return 0\n\n    // Use a for loop to avoid recursion\n    var loweredCase = false\n    for (;;) {\n        switch (encoding) {\n            case 'ascii':\n            case 'latin1':\n            case 'binary':\n                return len\n            case 'utf8':\n            case 'utf-8':\n            case undefined:\n                return utf8ToBytes(string).length\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n                return len * 2\n            case 'hex':\n                return len >>> 1\n            case 'base64':\n                return base64ToBytes(string).length\n            default:\n                if (loweredCase) return utf8ToBytes(string).length // assume utf8\n                encoding = ('' + encoding).toLowerCase()\n                loweredCase = true\n        }\n    }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString(encoding, start, end) {\n    var loweredCase = false\n\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n    if (start === undefined || start < 0) {\n        start = 0\n    }\n    // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n    if (start > this.length) {\n        return ''\n    }\n\n    if (end === undefined || end > this.length) {\n        end = this.length\n    }\n\n    if (end <= 0) {\n        return ''\n    }\n\n    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0\n    start >>>= 0\n\n    if (end <= start) {\n        return ''\n    }\n\n    if (!encoding) encoding = 'utf8'\n\n    while (true) {\n        switch (encoding) {\n            case 'hex':\n                return hexSlice(this, start, end)\n\n            case 'utf8':\n            case 'utf-8':\n                return utf8Slice(this, start, end)\n\n            case 'ascii':\n                return asciiSlice(this, start, end)\n\n            case 'latin1':\n            case 'binary':\n                return latin1Slice(this, start, end)\n\n            case 'base64':\n                return base64Slice(this, start, end)\n\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n                return utf16leSlice(this, start, end)\n\n            default:\n                if (loweredCase)\n                    throw new TypeError('Unknown encoding: ' + encoding)\n                encoding = (encoding + '').toLowerCase()\n                loweredCase = true\n        }\n    }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap(b, n, m) {\n    var i = b[n]\n    b[n] = b[m]\n    b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16() {\n    var len = this.length\n    if (len % 2 !== 0) {\n        throw new RangeError('Buffer size must be a multiple of 16-bits')\n    }\n    for (var i = 0; i < len; i += 2) {\n        swap(this, i, i + 1)\n    }\n    return this\n}\n\nBuffer.prototype.swap32 = function swap32() {\n    var len = this.length\n    if (len % 4 !== 0) {\n        throw new RangeError('Buffer size must be a multiple of 32-bits')\n    }\n    for (var i = 0; i < len; i += 4) {\n        swap(this, i, i + 3)\n        swap(this, i + 1, i + 2)\n    }\n    return this\n}\n\nBuffer.prototype.swap64 = function swap64() {\n    var len = this.length\n    if (len % 8 !== 0) {\n        throw new RangeError('Buffer size must be a multiple of 64-bits')\n    }\n    for (var i = 0; i < len; i += 8) {\n        swap(this, i, i + 7)\n        swap(this, i + 1, i + 6)\n        swap(this, i + 2, i + 5)\n        swap(this, i + 3, i + 4)\n    }\n    return this\n}\n\nBuffer.prototype.toString = function toString() {\n    var length = this.length | 0\n    if (length === 0) return ''\n    if (arguments.length === 0) return utf8Slice(this, 0, length)\n    return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals(b) {\n    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n    if (this === b) return true\n    return Buffer.compare(this, b) === 0\n}\n\n\nBuffer.prototype.compare = function compare(\n    target,\n    start,\n    end,\n    thisStart,\n    thisEnd,\n) {\n    if (!internalIsBuffer(target)) {\n        throw new TypeError('Argument must be a Buffer')\n    }\n\n    if (start === undefined) {\n        start = 0\n    }\n    if (end === undefined) {\n        end = target ? target.length : 0\n    }\n    if (thisStart === undefined) {\n        thisStart = 0\n    }\n    if (thisEnd === undefined) {\n        thisEnd = this.length\n    }\n\n    if (\n        start < 0 ||\n        end > target.length ||\n        thisStart < 0 ||\n        thisEnd > this.length\n    ) {\n        throw new RangeError('out of range index')\n    }\n\n    if (thisStart >= thisEnd && start >= end) {\n        return 0\n    }\n    if (thisStart >= thisEnd) {\n        return -1\n    }\n    if (start >= end) {\n        return 1\n    }\n\n    start >>>= 0\n    end >>>= 0\n    thisStart >>>= 0\n    thisEnd >>>= 0\n\n    if (this === target) return 0\n\n    var x = thisEnd - thisStart\n    var y = end - start\n    var len = Math.min(x, y)\n\n    var thisCopy = this.slice(thisStart, thisEnd)\n    var targetCopy = target.slice(start, end)\n\n    for (var i = 0; i < len; ++i) {\n        if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i]\n            y = targetCopy[i]\n            break\n        }\n    }\n\n    if (x < y) return -1\n    if (y < x) return 1\n    return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1\n\n    // Normalize byteOffset\n    if (typeof byteOffset === 'string') {\n        encoding = byteOffset\n        byteOffset = 0\n    } else if (byteOffset > 0x7fffffff) {\n        byteOffset = 0x7fffffff\n    } else if (byteOffset < -0x80000000) {\n        byteOffset = -0x80000000\n    }\n    byteOffset = +byteOffset // Coerce to Number.\n    if (isNaN(byteOffset)) {\n        // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n        byteOffset = dir ? 0 : buffer.length - 1\n    }\n\n    // Normalize byteOffset: negative offsets start from the end of the buffer\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n    if (byteOffset >= buffer.length) {\n        if (dir) return -1\n        else byteOffset = buffer.length - 1\n    } else if (byteOffset < 0) {\n        if (dir) byteOffset = 0\n        else return -1\n    }\n\n    // Normalize val\n    if (typeof val === 'string') {\n        val = Buffer.from(val, encoding)\n    }\n\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\n    if (internalIsBuffer(val)) {\n        // Special case: looking for empty string/buffer always fails\n        if (val.length === 0) {\n            return -1\n        }\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n    } else if (typeof val === 'number') {\n        val = val & 0xff // Search for a byte value [0-255]\n        if (\n            Buffer.TYPED_ARRAY_SUPPORT &&\n            typeof Uint8Array.prototype.indexOf === 'function'\n        ) {\n            if (dir) {\n                return Uint8Array.prototype.indexOf.call(\n                    buffer,\n                    val,\n                    byteOffset,\n                )\n            } else {\n                return Uint8Array.prototype.lastIndexOf.call(\n                    buffer,\n                    val,\n                    byteOffset,\n                )\n            }\n        }\n        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n    }\n\n    throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    var indexSize = 1\n    var arrLength = arr.length\n    var valLength = val.length\n\n    if (encoding !== undefined) {\n        encoding = String(encoding).toLowerCase()\n        if (\n            encoding === 'ucs2' ||\n            encoding === 'ucs-2' ||\n            encoding === 'utf16le' ||\n            encoding === 'utf-16le'\n        ) {\n            if (arr.length < 2 || val.length < 2) {\n                return -1\n            }\n            indexSize = 2\n            arrLength /= 2\n            valLength /= 2\n            byteOffset /= 2\n        }\n    }\n\n    function read(buf, i) {\n        if (indexSize === 1) {\n            return buf[i]\n        } else {\n            return buf.readUInt16BE(i * indexSize)\n        }\n    }\n\n    var i\n    if (dir) {\n        var foundIndex = -1\n        for (i = byteOffset; i < arrLength; i++) {\n            if (\n                read(arr, i) ===\n                read(val, foundIndex === -1 ? 0 : i - foundIndex)\n            ) {\n                if (foundIndex === -1) foundIndex = i\n                if (i - foundIndex + 1 === valLength)\n                    return foundIndex * indexSize\n            } else {\n                if (foundIndex !== -1) i -= i - foundIndex\n                foundIndex = -1\n            }\n        }\n    } else {\n        if (byteOffset + valLength > arrLength)\n            byteOffset = arrLength - valLength\n        for (i = byteOffset; i >= 0; i--) {\n            var found = true\n            for (var j = 0; j < valLength; j++) {\n                if (read(arr, i + j) !== read(val, j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return i\n        }\n    }\n\n    return -1\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0\n    var remaining = buf.length - offset\n    if (!length) {\n        length = remaining\n    } else {\n        length = Number(length)\n        if (length > remaining) {\n            length = remaining\n        }\n    }\n\n    // must be an even number of digits\n    var strLen = string.length\n    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n    if (length > strLen / 2) {\n        length = strLen / 2\n    }\n    for (var i = 0; i < length; ++i) {\n        var parsed = parseInt(string.substr(i * 2, 2), 16)\n        if (isNaN(parsed)) return i\n        buf[offset + i] = parsed\n    }\n    return i\n}\n\nfunction utf8Write(buf, string, offset, length) {\n    return blitBuffer(\n        utf8ToBytes(string, buf.length - offset),\n        buf,\n        offset,\n        length,\n    )\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write(buf, string, offset, length) {\n    return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write(buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n    return blitBuffer(\n        utf16leToBytes(string, buf.length - offset),\n        buf,\n        offset,\n        length,\n    )\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n        encoding = 'utf8'\n        length = this.length\n        offset = 0\n        // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === 'string') {\n        encoding = offset\n        length = this.length\n        offset = 0\n        // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n        offset = offset | 0\n        if (isFinite(length)) {\n            length = length | 0\n            if (encoding === undefined) encoding = 'utf8'\n        } else {\n            encoding = length\n            length = undefined\n        }\n        // legacy write(string, encoding, offset, length) - remove in v0.13\n    } else {\n        throw new Error(\n            'Buffer.write(string, encoding, offset[, length]) is no longer supported',\n        )\n    }\n\n    var remaining = this.length - offset\n    if (length === undefined || length > remaining) length = remaining\n\n    if (\n        (string.length > 0 && (length < 0 || offset < 0)) ||\n        offset > this.length\n    ) {\n        throw new RangeError('Attempt to write outside buffer bounds')\n    }\n\n    if (!encoding) encoding = 'utf8'\n\n    var loweredCase = false\n    for (;;) {\n        switch (encoding) {\n            case 'hex':\n                return hexWrite(this, string, offset, length)\n\n            case 'utf8':\n            case 'utf-8':\n                return utf8Write(this, string, offset, length)\n\n            case 'ascii':\n                return asciiWrite(this, string, offset, length)\n\n            case 'latin1':\n            case 'binary':\n                return latin1Write(this, string, offset, length)\n\n            case 'base64':\n                // Warning: maxLength not taken into account in base64Write\n                return base64Write(this, string, offset, length)\n\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n                return ucs2Write(this, string, offset, length)\n\n            default:\n                if (loweredCase)\n                    throw new TypeError('Unknown encoding: ' + encoding)\n                encoding = ('' + encoding).toLowerCase()\n                loweredCase = true\n        }\n    }\n}\n\nBuffer.prototype.toJSON = function toJSON() {\n    return {\n        type: 'Buffer',\n        data: Array.prototype.slice.call(this._arr || this, 0),\n    }\n}\n\nfunction base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) {\n        return base64fromByteArray(buf)\n    } else {\n        return base64fromByteArray(buf.slice(start, end))\n    }\n}\n\nfunction utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end)\n    var res = []\n\n    var i = start\n    while (i < end) {\n        var firstByte = buf[i]\n        var codePoint = null\n        var bytesPerSequence =\n            firstByte > 0xef\n                ? 4\n                : firstByte > 0xdf\n                ? 3\n                : firstByte > 0xbf\n                ? 2\n                : 1\n\n        if (i + bytesPerSequence <= end) {\n            var secondByte, thirdByte, fourthByte, tempCodePoint\n\n            switch (bytesPerSequence) {\n                case 1:\n                    if (firstByte < 0x80) {\n                        codePoint = firstByte\n                    }\n                    break\n                case 2:\n                    secondByte = buf[i + 1]\n                    if ((secondByte & 0xc0) === 0x80) {\n                        tempCodePoint =\n                            ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f)\n                        if (tempCodePoint > 0x7f) {\n                            codePoint = tempCodePoint\n                        }\n                    }\n                    break\n                case 3:\n                    secondByte = buf[i + 1]\n                    thirdByte = buf[i + 2]\n                    if (\n                        (secondByte & 0xc0) === 0x80 &&\n                        (thirdByte & 0xc0) === 0x80\n                    ) {\n                        tempCodePoint =\n                            ((firstByte & 0xf) << 0xc) |\n                            ((secondByte & 0x3f) << 0x6) |\n                            (thirdByte & 0x3f)\n                        if (\n                            tempCodePoint > 0x7ff &&\n                            (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)\n                        ) {\n                            codePoint = tempCodePoint\n                        }\n                    }\n                    break\n                case 4:\n                    secondByte = buf[i + 1]\n                    thirdByte = buf[i + 2]\n                    fourthByte = buf[i + 3]\n                    if (\n                        (secondByte & 0xc0) === 0x80 &&\n                        (thirdByte & 0xc0) === 0x80 &&\n                        (fourthByte & 0xc0) === 0x80\n                    ) {\n                        tempCodePoint =\n                            ((firstByte & 0xf) << 0x12) |\n                            ((secondByte & 0x3f) << 0xc) |\n                            ((thirdByte & 0x3f) << 0x6) |\n                            (fourthByte & 0x3f)\n                        if (\n                            tempCodePoint > 0xffff &&\n                            tempCodePoint < 0x110000\n                        ) {\n                            codePoint = tempCodePoint\n                        }\n                    }\n            }\n        }\n\n        if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xfffd\n            bytesPerSequence = 1\n        } else if (codePoint > 0xffff) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000\n            res.push(((codePoint >>> 10) & 0x3ff) | 0xd800)\n            codePoint = 0xdc00 | (codePoint & 0x3ff)\n        }\n\n        res.push(codePoint)\n        i += bytesPerSequence\n    }\n\n    return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray(codePoints) {\n    var len = codePoints.length\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n    }\n\n    // Decode in chunks to avoid \"call stack size exceeded\".\n    var res = ''\n    var i = 0\n    while (i < len) {\n        res += String.fromCharCode.apply(\n            String,\n            codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH)),\n        )\n    }\n    return res\n}\n\nfunction asciiSlice(buf, start, end) {\n    var ret = ''\n    end = Math.min(buf.length, end)\n\n    for (var i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i] & 0x7f)\n    }\n    return ret\n}\n\nfunction latin1Slice(buf, start, end) {\n    var ret = ''\n    end = Math.min(buf.length, end)\n\n    for (var i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i])\n    }\n    return ret\n}\n\nfunction hexSlice(buf, start, end) {\n    var len = buf.length\n\n    if (!start || start < 0) start = 0\n    if (!end || end < 0 || end > len) end = len\n\n    var out = ''\n    for (var i = start; i < end; ++i) {\n        out += toHex(buf[i])\n    }\n    return out\n}\n\nfunction utf16leSlice(buf, start, end) {\n    var bytes = buf.slice(start, end)\n    var res = ''\n    for (var i = 0; i < bytes.length; i += 2) {\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n    }\n    return res\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n    var len = this.length\n    start = ~~start\n    end = end === undefined ? len : ~~end\n\n    if (start < 0) {\n        start += len\n        if (start < 0) start = 0\n    } else if (start > len) {\n        start = len\n    }\n\n    if (end < 0) {\n        end += len\n        if (end < 0) end = 0\n    } else if (end > len) {\n        end = len\n    }\n\n    if (end < start) end = start\n\n    var newBuf\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        newBuf = this.subarray(start, end)\n        newBuf.__proto__ = Buffer.prototype\n    } else {\n        var sliceLen = end - start\n        newBuf = new Buffer(sliceLen, undefined)\n        for (var i = 0; i < sliceLen; ++i) {\n            newBuf[i] = this[i + start]\n        }\n    }\n\n    return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0)\n        throw new RangeError('offset is not uint')\n    if (offset + ext > length)\n        throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE(\n    offset,\n    byteLength,\n    noAssert,\n) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n    var val = this[offset]\n    var mul = 1\n    var i = 0\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += this[offset + i] * mul\n    }\n\n    return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE(\n    offset,\n    byteLength,\n    noAssert,\n) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) {\n        checkOffset(offset, byteLength, this.length)\n    }\n\n    var val = this[offset + --byteLength]\n    var mul = 1\n    while (byteLength > 0 && (mul *= 0x100)) {\n        val += this[offset + --byteLength] * mul\n    }\n\n    return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length)\n    return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        (this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +\n        this[offset + 3] * 0x1000000\n    )\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        this[offset] * 0x1000000 +\n        ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3])\n    )\n}\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n    var val = this[offset]\n    var mul = 1\n    var i = 0\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += this[offset + i] * mul\n    }\n    mul *= 0x80\n\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n    return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n    var i = byteLength\n    var mul = 1\n    var val = this[offset + --i]\n    while (i > 0 && (mul *= 0x100)) {\n        val += this[offset + --i] * mul\n    }\n    mul *= 0x80\n\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n    return val\n}\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length)\n    if (!(this[offset] & 0x80)) return this[offset]\n    return (0xff - this[offset] + 1) * -1\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    var val = this[offset] | (this[offset + 1] << 8)\n    return val & 0x8000 ? val | 0xffff0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    var val = this[offset + 1] | (this[offset] << 8)\n    return val & 0x8000 ? val | 0xffff0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        this[offset] |\n        (this[offset + 1] << 8) |\n        (this[offset + 2] << 16) |\n        (this[offset + 3] << 24)\n    )\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        (this[offset] << 24) |\n        (this[offset + 1] << 16) |\n        (this[offset + 2] << 8) |\n        this[offset + 3]\n    )\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n    return ieee754read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n    return ieee754read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length)\n    return ieee754read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length)\n    return ieee754read(this, offset, false, 52, 8)\n}\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n    if (!internalIsBuffer(buf))\n        throw new TypeError('\"buffer\" argument must be a Buffer instance')\n    if (value > max || value < min)\n        throw new RangeError('\"value\" argument is out of bounds')\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength) - 1\n        checkInt(this, value, offset, byteLength, maxBytes, 0)\n    }\n\n    var mul = 1\n    var i = 0\n    this[offset] = value & 0xff\n    while (++i < byteLength && (mul *= 0x100)) {\n        this[offset + i] = (value / mul) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength) - 1\n        checkInt(this, value, offset, byteLength, maxBytes, 0)\n    }\n\n    var i = byteLength - 1\n    var mul = 1\n    this[offset + i] = value & 0xff\n    while (--i >= 0 && (mul *= 0x100)) {\n        this[offset + i] = (value / mul) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n    this[offset] = value & 0xff\n    return offset + 1\n}\n\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffff + value + 1\n    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n        buf[offset + i] =\n            (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n            ((littleEndian ? i : 1 - i) * 8)\n    }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value & 0xff\n        this[offset + 1] = value >>> 8\n    } else {\n        objectWriteUInt16(this, value, offset, true)\n    }\n    return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 8\n        this[offset + 1] = value & 0xff\n    } else {\n        objectWriteUInt16(this, value, offset, false)\n    }\n    return offset + 2\n}\n\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffffffff + value + 1\n    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n        buf[offset + i] = (value >>> ((littleEndian ? i : 3 - i) * 8)) & 0xff\n    }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset + 3] = value >>> 24\n        this[offset + 2] = value >>> 16\n        this[offset + 1] = value >>> 8\n        this[offset] = value & 0xff\n    } else {\n        objectWriteUInt32(this, value, offset, true)\n    }\n    return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 24\n        this[offset + 1] = value >>> 16\n        this[offset + 2] = value >>> 8\n        this[offset + 3] = value & 0xff\n    } else {\n        objectWriteUInt32(this, value, offset, false)\n    }\n    return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength - 1)\n\n        checkInt(this, value, offset, byteLength, limit - 1, -limit)\n    }\n\n    var i = 0\n    var mul = 1\n    var sub = 0\n    this[offset] = value & 0xff\n    while (++i < byteLength && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1\n        }\n        this[offset + i] = (((value / mul) >> 0) - sub) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength - 1)\n\n        checkInt(this, value, offset, byteLength, limit - 1, -limit)\n    }\n\n    var i = byteLength - 1\n    var mul = 1\n    var sub = 0\n    this[offset + i] = value & 0xff\n    while (--i >= 0 && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1\n        }\n        this[offset + i] = (((value / mul) >> 0) - sub) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n    if (value < 0) value = 0xff + value + 1\n    this[offset] = value & 0xff\n    return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value & 0xff\n        this[offset + 1] = value >>> 8\n    } else {\n        objectWriteUInt16(this, value, offset, true)\n    }\n    return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 8\n        this[offset + 1] = value & 0xff\n    } else {\n        objectWriteUInt16(this, value, offset, false)\n    }\n    return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value & 0xff\n        this[offset + 1] = value >>> 8\n        this[offset + 2] = value >>> 16\n        this[offset + 3] = value >>> 24\n    } else {\n        objectWriteUInt32(this, value, offset, true)\n    }\n    return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n    if (value < 0) value = 0xffffffff + value + 1\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 24\n        this[offset + 1] = value >>> 16\n        this[offset + 2] = value >>> 8\n        this[offset + 3] = value & 0xff\n    } else {\n        objectWriteUInt32(this, value, offset, false)\n    }\n    return offset + 4\n}\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\n    if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n        checkIEEE754(\n            buf,\n            value,\n            offset,\n            4,\n            3.4028234663852886e38,\n            -3.4028234663852886e38,\n        )\n    }\n    ieee754write(buf, value, offset, littleEndian, 23, 4)\n    return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n        checkIEEE754(\n            buf,\n            value,\n            offset,\n            8,\n            1.7976931348623157e308,\n            -1.7976931348623157e308,\n        )\n    }\n    ieee754write(buf, value, offset, littleEndian, 52, 8)\n    return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(\n    value,\n    offset,\n    noAssert,\n) {\n    return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(\n    value,\n    offset,\n    noAssert,\n) {\n    return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!start) start = 0\n    if (!end && end !== 0) end = this.length\n    if (targetStart >= target.length) targetStart = target.length\n    if (!targetStart) targetStart = 0\n    if (end > 0 && end < start) end = start\n\n    // Copy 0 bytes; we're done\n    if (end === start) return 0\n    if (target.length === 0 || this.length === 0) return 0\n\n    // Fatal error conditions\n    if (targetStart < 0) {\n        throw new RangeError('targetStart out of bounds')\n    }\n    if (start < 0 || start >= this.length)\n        throw new RangeError('sourceStart out of bounds')\n    if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n    // Are we oob?\n    if (end > this.length) end = this.length\n    if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start\n    }\n\n    var len = end - start\n    var i\n\n    if (this === target && start < targetStart && targetStart < end) {\n        // descending copy from end\n        for (i = len - 1; i >= 0; --i) {\n            target[i + targetStart] = this[i + start]\n        }\n    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n        // ascending copy from start\n        for (i = 0; i < len; ++i) {\n            target[i + targetStart] = this[i + start]\n        }\n    } else {\n        Uint8Array.prototype.set.call(\n            target,\n            this.subarray(start, start + len),\n            targetStart,\n        )\n    }\n\n    return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === 'string') {\n        if (typeof start === 'string') {\n            encoding = start\n            start = 0\n            end = this.length\n        } else if (typeof end === 'string') {\n            encoding = end\n            end = this.length\n        }\n        if (val.length === 1) {\n            var code = val.charCodeAt(0)\n            if (code < 256) {\n                val = code\n            }\n        }\n        if (encoding !== undefined && typeof encoding !== 'string') {\n            throw new TypeError('encoding must be a string')\n        }\n        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n            throw new TypeError('Unknown encoding: ' + encoding)\n        }\n    } else if (typeof val === 'number') {\n        val = val & 255\n    }\n\n    // Invalid ranges are not set to a default, so can range check early.\n    if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError('Out of range index')\n    }\n\n    if (end <= start) {\n        return this\n    }\n\n    start = start >>> 0\n    end = end === undefined ? this.length : end >>> 0\n\n    if (!val) val = 0\n\n    var i\n    if (typeof val === 'number') {\n        for (i = start; i < end; ++i) {\n            this[i] = val\n        }\n    } else {\n        var bytes = internalIsBuffer(val)\n            ? val\n            : utf8ToBytes(new Buffer(val, encoding).toString())\n        var len = bytes.length\n        for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len]\n        }\n    }\n\n    return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean(str) {\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n    // Node converts strings with length < 2 to ''\n    if (str.length < 2) return ''\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n    while (str.length % 4 !== 0) {\n        str = str + '='\n    }\n    return str\n}\n\nfunction stringtrim(str) {\n    if (str.trim) return str.trim()\n    return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex(n) {\n    if (n < 16) return '0' + n.toString(16)\n    return n.toString(16)\n}\n\nfunction utf8ToBytes(string, units) {\n    units = units || Infinity\n    var codePoint\n    var length = string.length\n    var leadSurrogate = null\n    var bytes = []\n\n    for (var i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i)\n\n        // is surrogate component\n        if (codePoint > 0xd7ff && codePoint < 0xe000) {\n            // last char was a lead\n            if (!leadSurrogate) {\n                // no lead yet\n                if (codePoint > 0xdbff) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n                    continue\n                } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n                    continue\n                }\n\n                // valid lead\n                leadSurrogate = codePoint\n\n                continue\n            }\n\n            // 2 leads in a row\n            if (codePoint < 0xdc00) {\n                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n                leadSurrogate = codePoint\n                continue\n            }\n\n            // valid surrogate pair\n            codePoint =\n                (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +\n                0x10000\n        } else if (leadSurrogate) {\n            // valid bmp char, but last char was a lead\n            if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n        }\n\n        leadSurrogate = null\n\n        // encode utf8\n        if (codePoint < 0x80) {\n            if ((units -= 1) < 0) break\n            bytes.push(codePoint)\n        } else if (codePoint < 0x800) {\n            if ((units -= 2) < 0) break\n            bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80)\n        } else if (codePoint < 0x10000) {\n            if ((units -= 3) < 0) break\n            bytes.push(\n                (codePoint >> 0xc) | 0xe0,\n                ((codePoint >> 0x6) & 0x3f) | 0x80,\n                (codePoint & 0x3f) | 0x80,\n            )\n        } else if (codePoint < 0x110000) {\n            if ((units -= 4) < 0) break\n            bytes.push(\n                (codePoint >> 0x12) | 0xf0,\n                ((codePoint >> 0xc) & 0x3f) | 0x80,\n                ((codePoint >> 0x6) & 0x3f) | 0x80,\n                (codePoint & 0x3f) | 0x80,\n            )\n        } else {\n            throw new Error('Invalid code point')\n        }\n    }\n\n    return bytes\n}\n\nfunction asciiToBytes(str) {\n    var byteArray = []\n    for (var i = 0; i < str.length; ++i) {\n        // Node's code seems to be doing this and not & 0x7F..\n        byteArray.push(str.charCodeAt(i) & 0xff)\n    }\n    return byteArray\n}\n\nfunction utf16leToBytes(str, units) {\n    var c, hi, lo\n    var byteArray = []\n    for (var i = 0; i < str.length; ++i) {\n        if ((units -= 2) < 0) break\n\n        c = str.charCodeAt(i)\n        hi = c >> 8\n        lo = c % 256\n        byteArray.push(lo)\n        byteArray.push(hi)\n    }\n\n    return byteArray\n}\n\nfunction base64ToBytes(str) {\n    return base64toByteArray(base64clean(str))\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n    for (var i = 0; i < length; ++i) {\n        if (i + offset >= dst.length || i >= src.length) break\n        dst[i + offset] = src[i]\n    }\n    return i\n}\n\nfunction isnan(val) {\n    return val !== val // eslint-disable-line no-self-compare\n}\n\n// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nfunction isBuffer(obj) {\n    return (\n        obj != null &&\n        (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n    )\n}\n\nfunction isFastBuffer(obj) {\n    return (\n        !!obj.constructor &&\n        typeof obj.constructor.isBuffer === 'function' &&\n        obj.constructor.isBuffer(obj)\n    )\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer(obj) {\n    return (\n        typeof obj.readFloatLE === 'function' &&\n        typeof obj.slice === 'function' &&\n        isFastBuffer(obj.slice(0, 0))\n    )\n}\n\nfunction ieee754read(buffer, offset, isLE, mLen, nBytes) {\n    var e, m\n    var eLen = nBytes * 8 - mLen - 1\n    var eMax = (1 << eLen) - 1\n    var eBias = eMax >> 1\n    var nBits = -7\n    var i = isLE ? nBytes - 1 : 0\n    var d = isLE ? -1 : 1\n    var s = buffer[offset + i]\n\n    i += d\n\n    e = s & ((1 << -nBits) - 1)\n    s >>= -nBits\n    nBits += eLen\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n    m = e & ((1 << -nBits) - 1)\n    e >>= -nBits\n    nBits += mLen\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n    if (e === 0) {\n        e = 1 - eBias\n    } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity\n    } else {\n        m = m + Math.pow(2, mLen)\n        e = e - eBias\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nfunction ieee754write(buffer, value, offset, isLE, mLen, nBytes) {\n    var e, m, c\n    var eLen = nBytes * 8 - mLen - 1\n    var eMax = (1 << eLen) - 1\n    var eBias = eMax >> 1\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0\n    var i = isLE ? 0 : nBytes - 1\n    var d = isLE ? 1 : -1\n    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n    value = Math.abs(value)\n\n    if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0\n        e = eMax\n    } else {\n        e = Math.floor(Math.log(value) / Math.LN2)\n        if (value * (c = Math.pow(2, -e)) < 1) {\n            e--\n            c *= 2\n        }\n        if (e + eBias >= 1) {\n            value += rt / c\n        } else {\n            value += rt * Math.pow(2, 1 - eBias)\n        }\n        if (value * c >= 2) {\n            e++\n            c /= 2\n        }\n\n        if (e + eBias >= eMax) {\n            m = 0\n            e = eMax\n        } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen)\n            e = e + eBias\n        } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n            e = 0\n        }\n    }\n\n    for (\n        ;\n        mLen >= 8;\n        buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8\n    ) {}\n\n    e = (e << mLen) | m\n    eLen += mLen\n    for (\n        ;\n        eLen > 0;\n        buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8\n    ) {}\n\n    buffer[offset + i - d] |= s * 128\n}\n", "export { Buffer } from '_node-buffer-polyfill_.js'\n", "// Note: This file is autogenerated using \"resources/gen-version.js\" script and\n// automatically updated by \"npm version\" command.\n\n/**\n * A string containing the version of the GraphQL.js library\n */\nexport const version = '16.5.0';\n/**\n * An object containing the components of the GraphQL.js version string\n */\n\nexport const versionInfo = Object.freeze({\n  major: 16,\n  minor: 5,\n  patch: 0,\n  preReleaseTag: null,\n});\n", "export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n", "/**\n * Returns true if the value acts like a Promise, i.e. has a \"then\" function,\n * otherwise returns false.\n */\nexport function isPromise(value) {\n  return (\n    typeof (value === null || value === void 0 ? void 0 : value.then) ===\n    'function'\n  );\n}\n", "/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n", "export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n", "import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n", "import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n", "import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n", "import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n", "/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nexport let OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n", "/**\n * The set of allowed directive location values.\n */\nexport let DirectiveLocation;\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n", "/**\n * The set of allowed kind values for AST nodes.\n */\nexport let Kind;\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n", "/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n", "import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n", "/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport let TokenKind;\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n", "const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n", "import { inspect } from './inspect.mjs';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  // eslint-disable-next-line no-undef\n  process.env.NODE_ENV === 'production'\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n", "import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    var _this$_options;\n\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (\n      ((_this$_options = this._options) === null || _this$_options === void 0\n        ? void 0\n        : _this$_options.allowLegacyFragmentVariables) === true\n    ) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    var _this$_options2;\n\n    if (\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0\n        ? void 0\n        : _this$_options2.noLocation) !== true\n    ) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n", "const MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\nexport function didYouMean(firstArg, secondArg) {\n  const [subMessage, suggestionsArg] = secondArg\n    ? [firstArg, secondArg]\n    : [undefined, firstArg];\n  let message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  const suggestions = suggestionsArg.map((x) => `\"${x}\"`);\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  const lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}\n", "/**\n * Returns the first argument it receives.\n */\nexport function identityFunc(x) {\n  return x;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * const entriesByName = keyMap(\n *   phoneBook,\n *   entry => entry.name\n * )\n *\n * // {\n * //   Jon: { name: 'Jon', num: '555-1234' },\n * //   Jenny: { name: 'Jenny', num: '867-5309' }\n * // }\n *\n * const jennyEntry = entriesByName['Jenny']\n *\n * // { name: 'Jenny', num: '857-6309' }\n * ```\n */\nexport function keyMap(list, keyFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = item;\n  }\n\n  return result;\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * // { Jon: '555-1234', Jenny: '867-5309' }\n * const phonesByName = keyValMap(\n *   phoneBook,\n *   entry => entry.name,\n *   entry => entry.num\n * )\n * ```\n */\nexport function keyValMap(list, keyFn, valFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = valFn(item);\n  }\n\n  return result;\n}\n", "/**\n * Creates an object map with the same keys as `map` and values generated by\n * running each value of `map` thru `fn`.\n */\nexport function mapValue(map, fn) {\n  const result = Object.create(null);\n\n  for (const key of Object.keys(map)) {\n    result[key] = fn(map[key], key);\n  }\n\n  return result;\n}\n", "/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */\nexport function naturalCompare(aStr, bStr) {\n  let aIndex = 0;\n  let bIndex = 0;\n\n  while (aIndex < aStr.length && bIndex < bStr.length) {\n    let aChar = aStr.charCodeAt(aIndex);\n    let bChar = bStr.charCodeAt(bIndex);\n\n    if (isDigit(aChar) && isDigit(bChar)) {\n      let aNum = 0;\n\n      do {\n        ++aIndex;\n        aNum = aNum * 10 + aChar - DIGIT_0;\n        aChar = aStr.charCodeAt(aIndex);\n      } while (isDigit(aChar) && aNum > 0);\n\n      let bNum = 0;\n\n      do {\n        ++bIndex;\n        bNum = bNum * 10 + bChar - DIGIT_0;\n        bChar = bStr.charCodeAt(bIndex);\n      } while (isDigit(bChar) && bNum > 0);\n\n      if (aNum < bNum) {\n        return -1;\n      }\n\n      if (aNum > bNum) {\n        return 1;\n      }\n    } else {\n      if (aChar < bChar) {\n        return -1;\n      }\n\n      if (aChar > bChar) {\n        return 1;\n      }\n\n      ++aIndex;\n      ++bIndex;\n    }\n  }\n\n  return aStr.length - bStr.length;\n}\nconst DIGIT_0 = 48;\nconst DIGIT_9 = 57;\n\nfunction isDigit(code) {\n  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;\n}\n", "import { naturalCompare } from './naturalCompare.mjs';\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\n\nexport function suggestionList(input, options) {\n  const optionsByDistance = Object.create(null);\n  const lexicalDistance = new LexicalDistance(input);\n  const threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (const option of options) {\n    const distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort((a, b) => {\n    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nclass LexicalDistance {\n  constructor(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n    ];\n  }\n\n  measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    let a = stringToArray(optionLowerCase);\n    let b = this._inputArray;\n\n    if (a.length < b.length) {\n      const tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    const rows = this._rows;\n\n    for (let j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (let i = 1; i <= aLength; i++) {\n      const upRow = rows[(i - 1) % 3];\n      const currentRow = rows[i % 3];\n      let smallestCell = (currentRow[0] = i);\n\n      for (let j = 1; j <= bLength; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        let currentCell = Math.min(\n          upRow[j] + 1, // delete\n          currentRow[j - 1] + 1, // insert\n          upRow[j - 1] + cost, // substitute\n        );\n\n        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n          // transposition\n          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    const distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  }\n}\n\nfunction stringToArray(str) {\n  const strLength = str.length;\n  const array = new Array(strLength);\n\n  for (let i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n", "export function toObjMap(obj) {\n  if (obj == null) {\n    return Object.create(null);\n  }\n\n  if (Object.getPrototypeOf(obj) === null) {\n    return obj;\n  }\n\n  const map = Object.create(null);\n\n  for (const [key, value] of Object.entries(obj)) {\n    map[key] = value;\n  }\n\n  return map;\n}\n", "/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n", "import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n", "import { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\n\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map((node) =>\n        valueFromASTUntyped(node, variables),\n      );\n\n    case Kind.OBJECT:\n      return keyValMap(\n        valueNode.fields,\n        (field) => field.name.value,\n        (field) => valueFromASTUntyped(field.value, variables),\n      );\n\n    case Kind.VARIABLE:\n      return variables === null || variables === void 0\n        ? void 0\n        : variables[valueNode.name.value];\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isNameContinue, isNameStart } from '../language/characterClasses.mjs';\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertName(name) {\n  name != null || devAssert(false, 'Must provide name.');\n  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new GraphQLError('Expected name to be a non-empty string.');\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!isNameContinue(name.charCodeAt(i))) {\n      throw new GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!isNameStart(name.charCodeAt(0))) {\n    throw new GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nexport function assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new GraphQLError(`Enum values cannot be named: ${name}`);\n  }\n\n  return assertName(name);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { identityFunc } from '../jsutils/identityFunc.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped.mjs';\nimport { assertEnumValueName, assertName } from './assertName.mjs';\nexport function isType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    isListType(type) ||\n    isNonNullType(type)\n  );\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);\n  }\n\n  return type;\n}\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);\n  }\n\n  return type;\n}\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Interface type.`,\n    );\n  }\n\n  return type;\n}\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);\n  }\n\n  return type;\n}\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);\n  }\n\n  return type;\n}\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Input Object type.`,\n    );\n  }\n\n  return type;\n}\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);\n  }\n\n  return type;\n}\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return (\n    isScalarType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    (isWrappingType(type) && isInputType(type.ofType))\n  );\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    (isWrappingType(type) && isOutputType(type.ofType))\n  );\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL composite type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     parents: { type: new GraphQLList(PersonType) },\n *     children: { type: new GraphQLList(PersonType) },\n *   })\n * })\n * ```\n */\n\nexport class GraphQLList {\n  constructor(ofType) {\n    isType(ofType) ||\n      devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n * ```ts\n * const RowType = new GraphQLObjectType({\n *   name: 'Row',\n *   fields: () => ({\n *     id: { type: new GraphQLNonNull(GraphQLString) },\n *   })\n * })\n * ```\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexport class GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) ||\n      devAssert(\n        false,\n        `Expected ${inspect(ofType)} to be a GraphQL nullable type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);\n  }\n\n  return type;\n}\nexport function getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type)\n  );\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);\n  }\n\n  return type;\n}\nexport function getNamedType(type) {\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nexport function resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\nexport function resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function returns `null` or does not return a value\n * (i.e. it returns `undefined`) then an error will be raised and a `null`\n * value will be returned in the response. It is always better to validate\n *\n * Example:\n *\n * ```ts\n * const OddType = new GraphQLScalarType({\n *   name: 'Odd',\n *   serialize(value) {\n *     if (!Number.isFinite(value)) {\n *       throw new Error(\n *         `Scalar \"Odd\" cannot represent \"${value}\" since it is not a finite number.`,\n *       );\n *     }\n *\n *     if (value % 2 === 0) {\n *       throw new Error(`Scalar \"Odd\" cannot represent \"${value}\" since it is even.`);\n *     }\n *     return value;\n *   }\n * });\n * ```\n */\nexport class GraphQLScalarType {\n  constructor(config) {\n    var _config$parseValue,\n      _config$serialize,\n      _config$parseLiteral,\n      _config$extensionASTN;\n\n    const parseValue =\n      (_config$parseValue = config.parseValue) !== null &&\n      _config$parseValue !== void 0\n        ? _config$parseValue\n        : identityFunc;\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize =\n      (_config$serialize = config.serialize) !== null &&\n      _config$serialize !== void 0\n        ? _config$serialize\n        : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral =\n      (_config$parseLiteral = config.parseLiteral) !== null &&\n      _config$parseLiteral !== void 0\n        ? _config$parseLiteral\n        : (node, variables) => parseValue(valueFromASTUntyped(node, variables));\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    config.specifiedByURL == null ||\n      typeof config.specifiedByURL === 'string' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"specifiedByURL\" as a string, ` +\n          `but got: ${inspect(config.specifiedByURL)}.`,\n      );\n    config.serialize == null ||\n      typeof config.serialize === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`,\n      );\n\n    if (config.parseLiteral) {\n      (typeof config.parseValue === 'function' &&\n        typeof config.parseLiteral === 'function') ||\n        devAssert(\n          false,\n          `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`,\n        );\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByURL: this.specifiedByURL,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n * ```ts\n * const AddressType = new GraphQLObjectType({\n *   name: 'Address',\n *   fields: {\n *     street: { type: GraphQLString },\n *     number: { type: GraphQLInt },\n *     formatted: {\n *       type: GraphQLString,\n *       resolve(obj) {\n *         return obj.number + ' ' + obj.street\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     name: { type: GraphQLString },\n *     bestFriend: { type: PersonType },\n *   })\n * });\n * ```\n */\nexport class GraphQLObjectType {\n  constructor(config) {\n    var _config$extensionASTN2;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN2 !== void 0\n        ? _config$extensionASTN2\n        : [];\n\n    this._fields = () => defineFieldMap(config);\n\n    this._interfaces = () => defineInterfaces(config);\n\n    config.isTypeOf == null ||\n      typeof config.isTypeOf === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"isTypeOf\" as a function, ` +\n          `but got: ${inspect(config.isTypeOf)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  const interfaces = resolveReadonlyArrayThunk(\n    (_config$interfaces = config.interfaces) !== null &&\n      _config$interfaces !== void 0\n      ? _config$interfaces\n      : [],\n  );\n  Array.isArray(interfaces) ||\n    devAssert(\n      false,\n      `${config.name} interfaces must be an Array or a function which returns an Array.`,\n    );\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field config must be an object.`,\n      );\n    fieldConfig.resolve == null ||\n      typeof fieldConfig.resolve === 'function' ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field resolver must be a function if ` +\n          `provided, but got: ${inspect(fieldConfig.resolve)}.`,\n      );\n    const argsConfig =\n      (_fieldConfig$args = fieldConfig.args) !== null &&\n      _fieldConfig$args !== void 0\n        ? _fieldConfig$args\n        : {};\n    isPlainObj(argsConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} args must be an object with argument names as keys.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function defineArguments(config) {\n  return Object.entries(config).map(([argName, argConfig]) => ({\n    name: assertName(argName),\n    description: argConfig.description,\n    type: argConfig.type,\n    defaultValue: argConfig.defaultValue,\n    deprecationReason: argConfig.deprecationReason,\n    extensions: toObjMap(argConfig.extensions),\n    astNode: argConfig.astNode,\n  }));\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, (field) => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode,\n  }));\n}\n/**\n * @internal\n */\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(\n    args,\n    (arg) => arg.name,\n    (arg) => ({\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      deprecationReason: arg.deprecationReason,\n      extensions: arg.extensions,\n      astNode: arg.astNode,\n    }),\n  );\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const EntityType = new GraphQLInterfaceType({\n *   name: 'Entity',\n *   fields: {\n *     name: { type: GraphQLString }\n *   }\n * });\n * ```\n */\nexport class GraphQLInterfaceType {\n  constructor(config) {\n    var _config$extensionASTN3;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN3 !== void 0\n        ? _config$extensionASTN3\n        : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const PetType = new GraphQLUnionType({\n *   name: 'Pet',\n *   types: [ DogType, CatType ],\n *   resolveType(value) {\n *     if (value instanceof Dog) {\n *       return DogType;\n *     }\n *     if (value instanceof Cat) {\n *       return CatType;\n *     }\n *   }\n * });\n * ```\n */\nexport class GraphQLUnionType {\n  constructor(config) {\n    var _config$extensionASTN4;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN4 !== void 0\n        ? _config$extensionASTN4\n        : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineTypes(config) {\n  const types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) ||\n    devAssert(\n      false,\n      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,\n    );\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n * ```ts\n * const RGBType = new GraphQLEnumType({\n *   name: 'RGB',\n *   values: {\n *     RED: { value: 0 },\n *     GREEN: { value: 1 },\n *     BLUE: { value: 2 }\n *   }\n * });\n * ```\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport class GraphQLEnumType {\n  /* <T> */\n  constructor(config) {\n    var _config$extensionASTN5;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN5 !== void 0\n        ? _config$extensionASTN5\n        : [];\n    this._values = defineEnumValues(this.name, config.values);\n    this._valueLookup = new Map(\n      this._values.map((enumValue) => [enumValue.value, enumValue]),\n    );\n    this._nameLookup = keyMap(this._values, (value) => value.name);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n  getValues() {\n    return this._values;\n  }\n\n  getValue(name) {\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent value: ${inspect(outputValue)}`,\n      );\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue) /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = inspect(inputValue);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n      );\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(\n        `Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, inputValue),\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables) /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = keyValMap(\n      this.getValues(),\n      (value) => value.name,\n      (value) => ({\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode,\n      }),\n    );\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map((value) => value.name);\n  const suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) ||\n    devAssert(\n      false,\n      `${typeName} values must be an object with value names as keys.`,\n    );\n  return Object.entries(valueMap).map(([valueName, valueConfig]) => {\n    isPlainObj(valueConfig) ||\n      devAssert(\n        false,\n        `${typeName}.${valueName} must refer to an object with a \"value\" key ` +\n          `representing an internal value but got: ${inspect(valueConfig)}.`,\n      );\n    return {\n      name: assertEnumValueName(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode,\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n * ```ts\n * const GeoPoint = new GraphQLInputObjectType({\n *   name: 'GeoPoint',\n *   fields: {\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\n *   }\n * });\n * ```\n */\nexport class GraphQLInputObjectType {\n  constructor(config) {\n    var _config$extensionASTN6;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN6 !== void 0\n        ? _config$extensionASTN6\n        : [];\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = mapValue(this.getFields(), (field) => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode,\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n", "import {\n  isAbstractType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\n\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\nexport function isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  } // If either type is non-null, the other must also be non-null.\n\n  if (isNonNullType(typeA) && isNonNullType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // If either type is a list, the other must also be a list.\n\n  if (isListType(typeA) && isListType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // Otherwise the types are not equal.\n\n  return false;\n}\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n\nexport function isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  } // If superType is non-null, maybeSubType must also be non-null.\n\n  if (isNonNullType(superType)) {\n    if (isNonNullType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isNonNullType(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  } // If superType type is a list, maybeSubType type must also be a list.\n\n  if (isListType(superType)) {\n    if (isListType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isListType(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  } // If superType type is an abstract type, check if it is super type of maybeSubType.\n  // Otherwise, the child type is not a valid subtype of the parent type.\n\n  return (\n    isAbstractType(superType) &&\n    (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) &&\n    schema.isSubType(superType, maybeSubType)\n  );\n}\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\n\nexport function doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if (isAbstractType(typeA)) {\n    if (isAbstractType(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema\n        .getPossibleTypes(typeA)\n        .some((type) => schema.isSubType(typeB, type));\n    } // Determine if the latter type is a possible concrete type of the former.\n\n    return schema.isSubType(typeA, typeB);\n  }\n\n  if (isAbstractType(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isSubType(typeB, typeA);\n  } // Otherwise the types do not overlap.\n\n  return false;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { GraphQLScalarType } from './definition.mjs';\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\n\nexport const GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexport const GRAPHQL_MIN_INT = -2147483648;\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          inspect(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(inputValue)}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new GraphQLError(\n      `String cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new GraphQLError(\n      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new GraphQLError(\n      `ID cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          print(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport {\n  argsToArgsConfig,\n  defineArguments,\n  GraphQLNonNull,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      devAssert(false, `@${config.name} locations must be an Array.`);\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    (isObjectLike(args) && !Array.isArray(args)) ||\n      devAssert(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = defineArguments(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    DirectiveLocation.FIELD_DEFINITION,\n    DirectiveLocation.ARGUMENT_DEFINITION,\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\n    DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * The full list of specified directives.\n */\n\nexport const specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n", "/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and implements the Iterator protocol.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if\n * an object should be iterated-over e.g. Array, Map, Set, Int8Array,\n * TypedArray, etc. but excludes string literals.\n *\n * @example\n * ```ts\n * isIterableObject([ 1, 2, 3 ]) // true\n * isIterableObject(new Map()) // true\n * isIterableObject('ABC') // false\n * isIterableObject({ key: 'value' }) // false\n * isIterableObject({ length: 1, 0: 'Alpha' }) // false\n * ```\n */\nexport function isIterableObject(maybeIterable) {\n  return (\n    typeof maybeIterable === 'object' &&\n    typeof (maybeIterable === null || maybeIterable === void 0\n      ? void 0\n      : maybeIterable[Symbol.iterator]) === 'function'\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\nimport { GraphQLID } from '../type/scalars.mjs';\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Unknown       | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (\n      (astValue === null || astValue === void 0 ? void 0 : astValue.kind) ===\n      Kind.NULL\n    ) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL,\n    };\n  } // undefined\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(value)) {\n      const valuesNodes = [];\n\n      for (const item of value) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes,\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name,\n          },\n          value: fieldValue,\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes,\n    };\n  }\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized,\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum)\n        ? {\n            kind: Kind.INT,\n            value: stringNum,\n          }\n        : {\n            kind: Kind.FLOAT,\n            value: stringNum,\n          };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized,\n        };\n      } // ID types can use Int literals.\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized,\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized,\n      };\n    }\n\n    throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`);\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { print } from '../language/printer.mjs';\nimport { astFromValue } from '../utilities/astFromValue.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  isAbstractType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\nexport const __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: GraphQLString,\n      resolve: (schema) => schema.description,\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),\n\n      resolve(schema) {\n        return Object.values(schema.getTypeMap());\n      },\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new GraphQLNonNull(__Type),\n      resolve: (schema) => schema.getQueryType(),\n    },\n    mutationType: {\n      description:\n        'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getMutationType(),\n    },\n    subscriptionType: {\n      description:\n        'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getSubscriptionType(),\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__Directive)),\n      ),\n      resolve: (schema) => schema.getDirectives(),\n    },\n  }),\n});\nexport const __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description:\n    \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (directive) => directive.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (directive) => directive.description,\n    },\n    isRepeatable: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (directive) => directive.isRepeatable,\n    },\n    locations: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__DirectiveLocation)),\n      ),\n      resolve: (directive) => directive.locations,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n  }),\n});\nexport const __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description:\n    'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.',\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.',\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.',\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.',\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.',\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.',\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.',\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.',\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.',\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.',\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.',\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.',\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.',\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.',\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.',\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.',\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.',\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.',\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.',\n    },\n  },\n});\nexport const __Type = new GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new GraphQLNonNull(__TypeKind),\n\n      resolve(type) {\n        if (isScalarType(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if (isObjectType(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if (isInterfaceType(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if (isUnionType(type)) {\n          return TypeKind.UNION;\n        }\n\n        if (isEnumType(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if (isInputObjectType(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if (isListType(type)) {\n          return TypeKind.LIST;\n        }\n\n        if (isNonNullType(type)) {\n          return TypeKind.NON_NULL;\n        }\n        /* c8 ignore next 3 */\n        // Not reachable, all possible types have been considered)\n\n        false || invariant(false, `Unexpected type: \"${inspect(type)}\".`);\n      },\n    },\n    name: {\n      type: GraphQLString,\n      resolve: (type) => ('name' in type ? type.name : undefined),\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (\n        type, // FIXME: add test case\n      ) =>\n        /* c8 ignore next */\n        'description' in type ? type.description : undefined,\n    },\n    specifiedByURL: {\n      type: GraphQLString,\n      resolve: (obj) =>\n        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,\n    },\n    fields: {\n      type: new GraphQLList(new GraphQLNonNull(__Field)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          const fields = Object.values(type.getFields());\n          return includeDeprecated\n            ? fields\n            : fields.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    interfaces: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          return type.getInterfaces();\n        }\n      },\n    },\n    possibleTypes: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, { schema }) {\n        if (isAbstractType(type)) {\n          return schema.getPossibleTypes(type);\n        }\n      },\n    },\n    enumValues: {\n      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isEnumType(type)) {\n          const values = type.getValues();\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    inputFields: {\n      type: new GraphQLList(new GraphQLNonNull(__InputValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isInputObjectType(type)) {\n          const values = Object.values(type.getFields());\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    ofType: {\n      type: __Type,\n      resolve: (type) => ('ofType' in type ? type.ofType : undefined),\n    },\n  }),\n});\nexport const __Field = new GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (field) => field.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (field) => field.description,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (field) => field.type,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (field) => field.deprecationReason,\n    },\n  }),\n});\nexport const __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (inputValue) => inputValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (inputValue) => inputValue.description,\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (inputValue) => inputValue.type,\n    },\n    defaultValue: {\n      type: GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const { type, defaultValue } = inputValue;\n        const valueAST = astFromValue(defaultValue, type);\n        return valueAST ? print(valueAST) : null;\n      },\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (obj) => obj.deprecationReason,\n    },\n  }),\n});\nexport const __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description:\n    'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (enumValue) => enumValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.description,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (enumValue) => enumValue.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.deprecationReason,\n    },\n  }),\n});\nexport let TypeKind;\n\n(function (TypeKind) {\n  TypeKind['SCALAR'] = 'SCALAR';\n  TypeKind['OBJECT'] = 'OBJECT';\n  TypeKind['INTERFACE'] = 'INTERFACE';\n  TypeKind['UNION'] = 'UNION';\n  TypeKind['ENUM'] = 'ENUM';\n  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  TypeKind['LIST'] = 'LIST';\n  TypeKind['NON_NULL'] = 'NON_NULL';\n})(TypeKind || (TypeKind = {}));\n\nexport const __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.',\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description:\n        'Indicates this type is an object. `fields` and `interfaces` are valid fields.',\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description:\n        'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description:\n        'Indicates this type is a union. `possibleTypes` is a valid field.',\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description:\n        'Indicates this type is an enum. `enumValues` is a valid field.',\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description:\n        'Indicates this type is an input object. `inputFields` is a valid field.',\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.',\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description:\n        'Indicates this type is a non-null. `ofType` is a valid field.',\n    },\n  },\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport const SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, { schema }) => schema,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [\n    {\n      name: 'name',\n      description: undefined,\n      type: new GraphQLNonNull(GraphQLString),\n      defaultValue: undefined,\n      deprecationReason: undefined,\n      extensions: Object.create(null),\n      astNode: undefined,\n    },\n  ],\n  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (_source, _args, _context, { parentType }) => parentType.name,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const introspectionTypes = Object.freeze([\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n]);\nexport function isIntrospectionType(type) {\n  return introspectionTypes.some(({ name }) => type.name === name);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport {\n  getNamedType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isUnionType,\n} from './definition.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport { __Schema } from './introspection.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nexport class GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) ||\n      devAssert(false, 'Must provide configuration object.');\n    !config.types ||\n      Array.isArray(config.types) ||\n      devAssert(\n        false,\n        `\"types\" must be Array if provided but got: ${inspect(config.types)}.`,\n      );\n    !config.directives ||\n      Array.isArray(config.directives) ||\n      devAssert(\n        false,\n        '\"directives\" must be Array if provided but got: ' +\n          `${inspect(config.directives)}.`,\n      );\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives =\n      (_config$directives = config.directives) !== null &&\n      _config$directives !== void 0\n        ? _config$directives\n        : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName ||\n        devAssert(\n          false,\n          'One of the provided types for building the Schema is missing a name.',\n        );\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\n          `Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`,\n        );\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getRootType(operation) {\n    switch (operation) {\n      case OperationTypeNode.QUERY:\n        return this.getQueryType();\n\n      case OperationTypeNode.MUTATION:\n        return this.getMutationType();\n\n      case OperationTypeNode.SUBSCRIPTION:\n        return this.getSubscriptionType();\n    }\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return isUnionType(abstractType)\n      ? abstractType.getTypes()\n      : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0\n      ? implementations\n      : {\n          objects: [],\n          interfaces: [],\n        };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find((directive) => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined,\n    };\n  }\n}\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isOutputType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLDeprecatedDirective, isDirective } from './directives.mjs';\nimport { isIntrospectionType } from './introspection.mjs';\nimport { assertSchema } from './schema.mjs';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n  const context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  const errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  const errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n\nclass SchemaValidationContext {\n  constructor(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  reportError(message, nodes) {\n    const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this._errors.push(\n      new GraphQLError(message, {\n        nodes: _nodes,\n      }),\n    );\n  }\n\n  getErrors() {\n    return this._errors;\n  }\n}\n\nfunction validateRootTypes(context) {\n  const schema = context.schema;\n  const queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    var _getOperationTypeNode;\n\n    context.reportError(\n      `Query root type must be Object type, it cannot be ${inspect(\n        queryType,\n      )}.`,\n      (_getOperationTypeNode = getOperationTypeNode(\n        schema,\n        OperationTypeNode.QUERY,\n      )) !== null && _getOperationTypeNode !== void 0\n        ? _getOperationTypeNode\n        : queryType.astNode,\n    );\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    var _getOperationTypeNode2;\n\n    context.reportError(\n      'Mutation root type must be Object type if provided, it cannot be ' +\n        `${inspect(mutationType)}.`,\n      (_getOperationTypeNode2 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.MUTATION,\n      )) !== null && _getOperationTypeNode2 !== void 0\n        ? _getOperationTypeNode2\n        : mutationType.astNode,\n    );\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    var _getOperationTypeNode3;\n\n    context.reportError(\n      'Subscription root type must be Object type if provided, it cannot be ' +\n        `${inspect(subscriptionType)}.`,\n      (_getOperationTypeNode3 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.SUBSCRIPTION,\n      )) !== null && _getOperationTypeNode3 !== void 0\n        ? _getOperationTypeNode3\n        : subscriptionType.astNode,\n    );\n  }\n}\n\nfunction getOperationTypeNode(schema, operation) {\n  var _flatMap$find;\n\n  return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes]\n    .flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (schemaNode) => {\n        var _schemaNode$operation;\n\n        return (\n          /* c8 ignore next */\n          (_schemaNode$operation =\n            schemaNode === null || schemaNode === void 0\n              ? void 0\n              : schemaNode.operationTypes) !== null &&\n            _schemaNode$operation !== void 0\n            ? _schemaNode$operation\n            : []\n        );\n      },\n    )\n    .find((operationNode) => operationNode.operation === operation)) === null ||\n    _flatMap$find === void 0\n    ? void 0\n    : _flatMap$find.type;\n}\n\nfunction validateDirectives(context) {\n  for (const directive of context.schema.getDirectives()) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError(\n        `Expected directive but got: ${inspect(directive)}.`,\n        directive === null || directive === void 0 ? void 0 : directive.astNode,\n      );\n      continue;\n    } // Ensure they are named correctly.\n\n    validateName(context, directive); // TODO: Ensure proper locations.\n    // Ensure the arguments are valid.\n\n    for (const arg of directive.args) {\n      // Ensure they are named correctly.\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\n          `The type of @${directive.name}(${arg.name}:) must be Input Type ` +\n            `but got: ${inspect(arg.type)}.`,\n          arg.astNode,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode;\n\n        context.reportError(\n          `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0\n              ? void 0\n              : _arg$astNode.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  if (node.name.startsWith('__')) {\n    context.reportError(\n      `Name \"${node.name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`,\n      node.astNode,\n    );\n  }\n}\n\nfunction validateTypes(context) {\n  const validateInputObjectCircularRefs =\n    createInputObjectCircularRefsValidator(context);\n  const typeMap = context.schema.getTypeMap();\n\n  for (const type of Object.values(typeMap)) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(\n        `Expected GraphQL named type but got: ${inspect(type)}.`,\n        type.astNode,\n      );\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  const fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(`Type ${type.name} must define one or more fields.`, [\n      type.astNode,\n      ...type.extensionASTNodes,\n    ]);\n  }\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      var _field$astNode;\n\n      context.reportError(\n        `The type of ${type.name}.${field.name} must be Output Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode = field.astNode) === null || _field$astNode === void 0\n          ? void 0\n          : _field$astNode.type,\n      );\n    } // Ensure the arguments are valid\n\n    for (const arg of field.args) {\n      const argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        var _arg$astNode2;\n\n        context.reportError(\n          `The type of ${type.name}.${field.name}(${argName}:) must be Input ` +\n            `Type but got: ${inspect(arg.type)}.`,\n          (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0\n            ? void 0\n            : _arg$astNode2.type,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode3;\n\n        context.reportError(\n          `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0\n              ? void 0\n              : _arg$astNode3.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  const ifaceTypeNames = Object.create(null);\n\n  for (const iface of type.getInterfaces()) {\n    if (!isInterfaceType(iface)) {\n      context.reportError(\n        `Type ${inspect(type)} must only implement Interface types, ` +\n          `it cannot implement ${inspect(iface)}.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(\n        `Type ${type.name} cannot implement itself because it would create a circular reference.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(\n        `Type ${type.name} can only implement ${iface.name} once.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  const typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (const ifaceField of Object.values(iface.getFields())) {\n    const fieldName = ifaceField.name;\n    const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,\n        [ifaceField.astNode, type.astNode, ...type.extensionASTNodes],\n      );\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {\n      var _ifaceField$astNode, _typeField$astNode;\n\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expects type ` +\n          `${inspect(ifaceField.type)} but ${type.name}.${fieldName} ` +\n          `is type ${inspect(typeField.type)}.`,\n        [\n          (_ifaceField$astNode = ifaceField.astNode) === null ||\n          _ifaceField$astNode === void 0\n            ? void 0\n            : _ifaceField$astNode.type,\n          (_typeField$astNode = typeField.astNode) === null ||\n          _typeField$astNode === void 0\n            ? void 0\n            : _typeField$astNode.type,\n        ],\n      );\n    } // Assert each interface field arg is implemented.\n\n    for (const ifaceArg of ifaceField.args) {\n      const argName = ifaceArg.name;\n      const typeArg = typeField.args.find((arg) => arg.name === argName); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,\n          [ifaceArg.astNode, typeField.astNode],\n        );\n        continue;\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n      if (!isEqualType(ifaceArg.type, typeArg.type)) {\n        var _ifaceArg$astNode, _typeArg$astNode;\n\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) ` +\n            `expects type ${inspect(ifaceArg.type)} but ` +\n            `${type.name}.${fieldName}(${argName}:) is type ` +\n            `${inspect(typeArg.type)}.`,\n          [\n            (_ifaceArg$astNode = ifaceArg.astNode) === null ||\n            _ifaceArg$astNode === void 0\n              ? void 0\n              : _ifaceArg$astNode.type,\n            (_typeArg$astNode = typeArg.astNode) === null ||\n            _typeArg$astNode === void 0\n              ? void 0\n              : _typeArg$astNode.type,\n          ],\n        );\n      } // TODO: validate default values?\n    } // Assert additional arguments must not be required.\n\n    for (const typeArg of typeField.args) {\n      const argName = typeArg.name;\n      const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);\n\n      if (!ifaceArg && isRequiredArgument(typeArg)) {\n        context.reportError(\n          `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,\n          [typeArg.astNode, ifaceField.astNode],\n        );\n      }\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  const ifaceInterfaces = type.getInterfaces();\n\n  for (const transitive of iface.getInterfaces()) {\n    if (!ifaceInterfaces.includes(transitive)) {\n      context.reportError(\n        transitive === type\n          ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.`\n          : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,\n        [\n          ...getAllImplementsInterfaceNodes(iface, transitive),\n          ...getAllImplementsInterfaceNodes(type, iface),\n        ],\n      );\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  const memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\n      `Union type ${union.name} must define one or more member types.`,\n      [union.astNode, ...union.extensionASTNodes],\n    );\n  }\n\n  const includedTypeNames = Object.create(null);\n\n  for (const memberType of memberTypes) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\n        `Union type ${union.name} can only include type ${memberType.name} once.`,\n        getUnionMemberTypeNodes(union, memberType.name),\n      );\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\n        `Union type ${union.name} can only include Object types, ` +\n          `it cannot include ${inspect(memberType)}.`,\n        getUnionMemberTypeNodes(union, String(memberType)),\n      );\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  const enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\n      `Enum type ${enumType.name} must define one or more values.`,\n      [enumType.astNode, ...enumType.extensionASTNodes],\n    );\n  }\n\n  for (const enumValue of enumValues) {\n    // Ensure valid name.\n    validateName(context, enumValue);\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  const fields = Object.values(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\n      `Input Object type ${inputObj.name} must define one or more fields.`,\n      [inputObj.astNode, ...inputObj.extensionASTNodes],\n    );\n  } // Ensure the arguments are valid\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      var _field$astNode2;\n\n      context.reportError(\n        `The type of ${inputObj.name}.${field.name} must be Input Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0\n          ? void 0\n          : _field$astNode2.type,\n      );\n    }\n\n    if (isRequiredInputField(field) && field.deprecationReason != null) {\n      var _field$astNode3;\n\n      context.reportError(\n        `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,\n        [\n          getDeprecatedDirectiveNode(field.astNode),\n          (_field$astNode3 = field.astNode) === null ||\n          _field$astNode3 === void 0\n            ? void 0\n            : _field$astNode3.type,\n        ],\n      );\n    }\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  const fieldPath = []; // Position in the type path\n\n  const fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    const fields = Object.values(inputObj.getFields());\n\n    for (const field of fields) {\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        const fieldType = field.type.ofType;\n        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          const cyclePath = fieldPath.slice(cycleIndex);\n          const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join('.');\n          context.reportError(\n            `Cannot reference Input Object \"${fieldType.name}\" within itself through a series of non-null fields: \"${pathStr}\".`,\n            cyclePath.map((fieldObj) => fieldObj.astNode),\n          );\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  const { astNode, extensionASTNodes } = type;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((typeNode) => {\n      var _typeNode$interfaces;\n\n      return (\n        /* c8 ignore next */\n        (_typeNode$interfaces = typeNode.interfaces) !== null &&\n          _typeNode$interfaces !== void 0\n          ? _typeNode$interfaces\n          : []\n      );\n    })\n    .filter((ifaceNode) => ifaceNode.name.value === iface.name);\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  const { astNode, extensionASTNodes } = union;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((unionNode) => {\n      var _unionNode$types;\n\n      return (\n        /* c8 ignore next */\n        (_unionNode$types = unionNode.types) !== null &&\n          _unionNode$types !== void 0\n          ? _unionNode$types\n          : []\n      );\n    })\n    .filter((typeNode) => typeNode.name.value === typeName);\n}\n\nfunction getDeprecatedDirectiveNode(definitionNode) {\n  var _definitionNode$direc;\n\n  return definitionNode === null || definitionNode === void 0\n    ? void 0\n    : (_definitionNode$direc = definitionNode.directives) === null ||\n      _definitionNode$direc === void 0\n    ? void 0\n    : _definitionNode$direc.find(\n        (node) => node.name.value === GraphQLDeprecatedDirective.name,\n      );\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition.mjs';\nexport function typeFromAST(schema, typeNode) {\n  switch (typeNode.kind) {\n    case Kind.LIST_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLList(innerType);\n    }\n\n    case Kind.NON_NULL_TYPE: {\n      const innerType = typeFromAST(schema, typeNode.type);\n      return innerType && new GraphQLNonNull(innerType);\n    }\n\n    case Kind.NAMED_TYPE:\n      return schema.getType(typeNode.name.value);\n  }\n}\n", "import { isNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { getEnterLeaveForKind } from '../language/visitor.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isListType,\n  isObjectType,\n  isOutputType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { typeFromAST } from './typeFromAST.mjs';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport class TypeInfo {\n  constructor(\n    schema,\n    /**\n     * Initial type may be provided in rare cases to facilitate traversals\n     *  beginning somewhere other than documents.\n     */\n    initialType,\n    /** @deprecated will be removed in 17.0.0 */\n    getFieldDefFn,\n  ) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef =\n      getFieldDefFn !== null && getFieldDefFn !== void 0\n        ? getFieldDefFn\n        : getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'TypeInfo';\n  }\n\n  getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  }\n\n  getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  }\n\n  getDirective() {\n    return this._directive;\n  }\n\n  getArgument() {\n    return this._argument;\n  }\n\n  getEnumValue() {\n    return this._enumValue;\n  }\n\n  enter(node) {\n    const schema = this._schema; // Note: many of the types below are explicitly typed as \"unknown\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET: {\n        const namedType = getNamedType(this.getType());\n\n        this._parentTypeStack.push(\n          isCompositeType(namedType) ? namedType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.FIELD: {\n        const parentType = this.getParentType();\n        let fieldDef;\n        let fieldType;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n        break;\n      }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION: {\n        const rootType = schema.getRootType(node.operation);\n\n        this._typeStack.push(isObjectType(rootType) ? rootType : undefined);\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION: {\n        const typeConditionAST = node.typeCondition;\n        const outputType = typeConditionAST\n          ? typeFromAST(schema, typeConditionAST)\n          : getNamedType(this.getType());\n\n        this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n        break;\n      }\n\n      case Kind.VARIABLE_DEFINITION: {\n        const inputType = typeFromAST(schema, node.type);\n\n        this._inputTypeStack.push(\n          isInputType(inputType) ? inputType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ARGUMENT: {\n        var _this$getDirective;\n\n        let argDef;\n        let argType;\n        const fieldOrDirective =\n          (_this$getDirective = this.getDirective()) !== null &&\n          _this$getDirective !== void 0\n            ? _this$getDirective\n            : this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = fieldOrDirective.args.find(\n            (arg) => arg.name === node.name.value,\n          );\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n        this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n        break;\n      }\n\n      case Kind.LIST: {\n        const listType = getNullableType(this.getInputType());\n        const itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n        this._defaultValueStack.push(undefined);\n\n        this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n        break;\n      }\n\n      case Kind.OBJECT_FIELD: {\n        const objectType = getNamedType(this.getInputType());\n        let inputFieldType;\n        let inputField;\n\n        if (isInputObjectType(objectType)) {\n          inputField = objectType.getFields()[node.name.value];\n\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n\n        this._defaultValueStack.push(\n          inputField ? inputField.defaultValue : undefined,\n        );\n\n        this._inputTypeStack.push(\n          isInputType(inputFieldType) ? inputFieldType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ENUM: {\n        const enumType = getNamedType(this.getInputType());\n        let enumValue;\n\n        if (isEnumType(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n      }\n\n      default: // Ignore other nodes\n    }\n  }\n\n  leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n\n      default: // Ignore other nodes\n    }\n  }\n}\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const name = fieldNode.name.value;\n\n  if (\n    name === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(...args) {\n      const node = args[0];\n      typeInfo.enter(node);\n      const fn = getEnterLeaveForKind(visitor, node.kind).enter;\n\n      if (fn) {\n        const result = fn.apply(visitor, args);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n\n    leave(...args) {\n      const node = args[0];\n      const fn = getEnterLeaveForKind(visitor, node.kind).leave;\n      let result;\n\n      if (fn) {\n        result = fn.apply(visitor, args);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    },\n  };\n}\n", "import { Kind } from './kinds.mjs';\nexport function isDefinitionNode(node) {\n  return (\n    isExecutableDefinitionNode(node) ||\n    isTypeSystemDefinitionNode(node) ||\n    isTypeSystemExtensionNode(node)\n  );\n}\nexport function isExecutableDefinitionNode(node) {\n  return (\n    node.kind === Kind.OPERATION_DEFINITION ||\n    node.kind === Kind.FRAGMENT_DEFINITION\n  );\n}\nexport function isSelectionNode(node) {\n  return (\n    node.kind === Kind.FIELD ||\n    node.kind === Kind.FRAGMENT_SPREAD ||\n    node.kind === Kind.INLINE_FRAGMENT\n  );\n}\nexport function isValueNode(node) {\n  return (\n    node.kind === Kind.VARIABLE ||\n    node.kind === Kind.INT ||\n    node.kind === Kind.FLOAT ||\n    node.kind === Kind.STRING ||\n    node.kind === Kind.BOOLEAN ||\n    node.kind === Kind.NULL ||\n    node.kind === Kind.ENUM ||\n    node.kind === Kind.LIST ||\n    node.kind === Kind.OBJECT\n  );\n}\nexport function isConstValueNode(node) {\n  return (\n    isValueNode(node) &&\n    (node.kind === Kind.LIST\n      ? node.values.some(isConstValueNode)\n      : node.kind === Kind.OBJECT\n      ? node.fields.some((field) => isConstValueNode(field.value))\n      : node.kind !== Kind.VARIABLE)\n  );\n}\nexport function isTypeNode(node) {\n  return (\n    node.kind === Kind.NAMED_TYPE ||\n    node.kind === Kind.LIST_TYPE ||\n    node.kind === Kind.NON_NULL_TYPE\n  );\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCHEMA_DEFINITION ||\n    isTypeDefinitionNode(node) ||\n    node.kind === Kind.DIRECTIVE_DEFINITION\n  );\n}\nexport function isTypeDefinitionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_DEFINITION ||\n    node.kind === Kind.OBJECT_TYPE_DEFINITION ||\n    node.kind === Kind.INTERFACE_TYPE_DEFINITION ||\n    node.kind === Kind.UNION_TYPE_DEFINITION ||\n    node.kind === Kind.ENUM_TYPE_DEFINITION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n  );\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return (\n    node.kind === Kind.SCALAR_TYPE_EXTENSION ||\n    node.kind === Kind.OBJECT_TYPE_EXTENSION ||\n    node.kind === Kind.INTERFACE_TYPE_EXTENSION ||\n    node.kind === Kind.UNION_TYPE_EXTENSION ||\n    node.kind === Kind.ENUM_TYPE_EXTENSION ||\n    node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!isExecutableDefinitionNode(definition)) {\n          const defName =\n            definition.kind === Kind.SCHEMA_DEFINITION ||\n            definition.kind === Kind.SCHEMA_EXTENSION\n              ? 'schema'\n              : '\"' + definition.name.value + '\"';\n          context.reportError(\n            new GraphQLError(`The ${defName} definition is not executable.`, {\n              nodes: definition,\n            }),\n          );\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { naturalCompare } from '../../jsutils/naturalCompare.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isAbstractType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selections\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean(\n            'to use an inline fragment on',\n            getSuggestedTypeNames(schema, type, fieldName),\n          ); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n          context.reportError(\n            new GraphQLError(\n              `Cannot query field \"${fieldName}\" on type \"${type.name}\".` +\n                suggestion,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      var _usageCount$possibleI;\n\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] =\n        ((_usageCount$possibleI = usageCount[possibleInterface.name]) !==\n          null && _usageCount$possibleI !== void 0\n          ? _usageCount$possibleI\n          : 0) + 1;\n    }\n  }\n\n  return [...suggestedTypes]\n    .sort((typeA, typeB) => {\n      // Suggest both interface and object types based on how common they are.\n      const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n      if (usageCountDiff !== 0) {\n        return usageCountDiff;\n      } // Suggest super types first followed by subtypes\n\n      if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n        return -1;\n      }\n\n      if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n        return 1;\n      }\n\n      return naturalCompare(typeA.name, typeB.name);\n    })\n    .map((x) => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n  return [];\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(\n            new GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              {\n                nodes: typeCondition,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            {\n              nodes: node.typeCondition,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(\n          new GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(\n              new GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  didYouMean(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../../language/ast.mjs';\nimport { DirectiveLocation } from '../../language/directiveLocation.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Defined\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map((name) => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(\n          new GraphQLError(`Unknown directive \"@${name}\".`, {\n            nodes: node,\n          }),\n        );\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && !locations.includes(candidateLocation)) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${name}\" may not be used on ${candidateLocation}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  'kind' in appliedTo || invariant(false);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION: {\n      const parentNode = ancestors[ancestors.length - 3];\n      'kind' in parentNode || invariant(false);\n      return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION\n        ? DirectiveLocation.INPUT_FIELD_DEFINITION\n        : DirectiveLocation.ARGUMENT_DEFINITION;\n    }\n    // Not reachable, all possible types have been considered.\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(appliedTo.kind));\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case OperationTypeNode.QUERY:\n      return DirectiveLocation.QUERY;\n\n    case OperationTypeNode.MUTATION:\n      return DirectiveLocation.MUTATION;\n\n    case OperationTypeNode.SUBSCRIPTION:\n      return DirectiveLocation.SUBSCRIPTION;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spread-target-defined\n */\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread(node) {\n      const fragmentName = node.name.value;\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(\n          new GraphQLError(`Unknown fragment \"${fragmentName}\".`, {\n            nodes: node.name,\n          }),\n        );\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeSystemDefinitionNode,\n  isTypeSystemExtensionNode,\n} from '../../language/predicates.mjs';\nimport { introspectionTypes } from '../../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../../type/scalars.mjs';\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Spread-Type-Existence\n */\nexport function KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  const typeNames = [\n    ...Object.keys(existingTypesMap),\n    ...Object.keys(definedTypes),\n  ];\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var _ancestors$;\n\n        const definitionNode =\n          (_ancestors$ = ancestors[2]) !== null && _ancestors$ !== void 0\n            ? _ancestors$\n            : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && standardTypeNames.includes(typeName)) {\n          return;\n        }\n\n        const suggestedTypes = suggestionList(\n          typeName,\n          isSDL ? standardTypeNames.concat(typeNames) : typeNames,\n        );\n        context.reportError(\n          new GraphQLError(\n            `Unknown type \"${typeName}\".` + didYouMean(suggestedTypes),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\nconst standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map(\n  (type) => type.name,\n);\n\nfunction isSDLNode(value) {\n  return (\n    'kind' in value &&\n    (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value))\n  );\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n *\n * See https://spec.graphql.org/draft/#sec-Lone-Anonymous-Operation\n */\nexport function LoneAnonymousOperationRule(context) {\n  let operationCount = 0;\n  return {\n    Document(node) {\n      operationCount = node.definitions.filter(\n        (definition) => definition.kind === Kind.OPERATION_DEFINITION,\n      ).length;\n    },\n\n    OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(\n          new GraphQLError(\n            'This anonymous operation must be the only defined operation.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nexport function LoneSchemaDefinitionRule(context) {\n  var _ref, _ref2, _oldSchema$astNode;\n\n  const oldSchema = context.getSchema();\n  const alreadyDefined =\n    (_ref =\n      (_ref2 =\n        (_oldSchema$astNode =\n          oldSchema === null || oldSchema === void 0\n            ? void 0\n            : oldSchema.astNode) !== null && _oldSchema$astNode !== void 0\n          ? _oldSchema$astNode\n          : oldSchema === null || oldSchema === void 0\n          ? void 0\n          : oldSchema.getQueryType()) !== null && _ref2 !== void 0\n        ? _ref2\n        : oldSchema === null || oldSchema === void 0\n        ? void 0\n        : oldSchema.getMutationType()) !== null && _ref !== void 0\n      ? _ref\n      : oldSchema === null || oldSchema === void 0\n      ? void 0\n      : oldSchema.getSubscriptionType();\n  let schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(\n          new GraphQLError(\n            'Cannot define a new schema within a schema extension.',\n            {\n              nodes: node,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(\n          new GraphQLError('Must provide only one schema definition.', {\n            nodes: node,\n          }),\n        );\n      }\n\n      ++schemaDefinitionsCount;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No fragment cycles\n *\n * The graph of fragment spreads must not form any cycles including spreading itself.\n * Otherwise an operation could infinitely spread or infinitely execute on cycles in the underlying data.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-spreads-must-not-form-cycles\n */\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    },\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath\n          .slice(0, -1)\n          .map((s) => '\"' + s.name.value + '\"')\n          .join(', ');\n        context.reportError(\n          new GraphQLError(\n            `Cannot spread fragment \"${spreadName}\" within itself` +\n              (viaPath !== '' ? ` via ${viaPath}.` : '.'),\n            {\n              nodes: cyclePath,\n            },\n          ),\n        );\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Uses-Defined\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".`\n                  : `Variable \"$${varName}\" is not defined.`,\n                {\n                  nodes: [node, operation],\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new GraphQLError(`Fragment \"${fragName}\" is never used.`, {\n                nodes: fragmentDef,\n              }),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variables-Used\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(\n              new GraphQLError(\n                operation.name\n                  ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".`\n                  : `Variable \"$${variableName}\" is never used.`,\n                {\n                  nodes: variableDef,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    },\n  };\n}\n", "import { naturalCompare } from '../jsutils/naturalCompare.mjs';\nimport { Kind } from '../language/kinds.mjs';\n/**\n * Sort ValueNode.\n *\n * This function returns a sorted copy of the given ValueNode.\n *\n * @internal\n */\n\nexport function sortValueNode(valueNode) {\n  switch (valueNode.kind) {\n    case Kind.OBJECT:\n      return { ...valueNode, fields: sortFields(valueNode.fields) };\n\n    case Kind.LIST:\n      return { ...valueNode, values: valueNode.values.map(sortValueNode) };\n\n    case Kind.INT:\n    case Kind.FLOAT:\n    case Kind.STRING:\n    case Kind.BOOLEAN:\n    case Kind.NULL:\n    case Kind.ENUM:\n    case Kind.VARIABLE:\n      return valueNode;\n  }\n}\n\nfunction sortFields(fields) {\n  return fields\n    .map((fieldNode) => ({\n      ...fieldNode,\n      value: sortValueNode(fieldNode.value),\n    }))\n    .sort((fieldA, fieldB) =>\n      naturalCompare(fieldA.name.value, fieldB.name.value),\n    );\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  isInterfaceType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../../type/definition.mjs';\nimport { sortValueNode } from '../../utilities/sortValueNode.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason\n      .map(\n        ([responseName, subReason]) =>\n          `subfields \"${responseName}\" conflict because ` +\n          reasonMessage(subReason),\n      )\n      .join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n *\n * See https://spec.graphql.org/draft/#sec-Field-Selection-Merging\n */\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(\n        context,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        context.getParentType(),\n        selectionSet,\n      );\n\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(\n          new GraphQLError(\n            `Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`,\n            {\n              nodes: fields1.concat(fields2),\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentType,\n  selectionSet,\n) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType,\n    selectionSet,\n  ); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    fieldMap,\n  );\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        false,\n        fieldMap,\n        fragmentNames[i],\n      ); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(\n          context,\n          conflicts,\n          cachedFieldsAndFragmentNames,\n          comparedFragmentPairs,\n          false,\n          fragmentNames[i],\n          fragmentNames[j],\n        );\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\nfunction collectConflictsBetweenFieldsAndFragment(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fieldMap,\n  fragmentName,\n) {\n  const fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  const [fieldMap2, referencedFragmentNames] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment,\n    ); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap,\n    fieldMap2,\n  ); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (const referencedFragmentName of referencedFragmentNames) {\n    // Memoize so two fragments are not compared for conflicts more than once.\n    if (\n      comparedFragmentPairs.has(\n        referencedFragmentName,\n        fragmentName,\n        areMutuallyExclusive,\n      )\n    ) {\n      continue;\n    }\n\n    comparedFragmentPairs.add(\n      referencedFragmentName,\n      fragmentName,\n      areMutuallyExclusive,\n    );\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap,\n      referencedFragmentName,\n    );\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\nfunction collectConflictsBetweenFragments(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  fragmentName1,\n  fragmentName2,\n) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n  if (\n    comparedFragmentPairs.has(\n      fragmentName1,\n      fragmentName2,\n      areMutuallyExclusive,\n    )\n  ) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  const [fieldMap1, referencedFragmentNames1] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment1,\n    );\n  const [fieldMap2, referencedFragmentNames2] =\n    getReferencedFieldsAndFragmentNames(\n      context,\n      cachedFieldsAndFragmentNames,\n      fragment2,\n    ); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (const referencedFragmentName2 of referencedFragmentNames2) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fragmentName1,\n      referencedFragmentName2,\n    );\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n  for (const referencedFragmentName1 of referencedFragmentNames1) {\n    collectConflictsBetweenFragments(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      referencedFragmentName1,\n      fragmentName2,\n    );\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\nfunction findConflictsBetweenSubSelectionSets(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  areMutuallyExclusive,\n  parentType1,\n  selectionSet1,\n  parentType2,\n  selectionSet2,\n) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType1,\n    selectionSet1,\n  );\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    parentType2,\n    selectionSet2,\n  ); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(\n    context,\n    conflicts,\n    cachedFieldsAndFragmentNames,\n    comparedFragmentPairs,\n    areMutuallyExclusive,\n    fieldMap1,\n    fieldMap2,\n  ); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  for (const fragmentName2 of fragmentNames2) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap1,\n      fragmentName2,\n    );\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n  for (const fragmentName1 of fragmentNames1) {\n    collectConflictsBetweenFieldsAndFragment(\n      context,\n      conflicts,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      fieldMap2,\n      fragmentName1,\n    );\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n  for (const fragmentName1 of fragmentNames1) {\n    for (const fragmentName2 of fragmentNames2) {\n      collectConflictsBetweenFragments(\n        context,\n        conflicts,\n        cachedFieldsAndFragmentNames,\n        comparedFragmentPairs,\n        areMutuallyExclusive,\n        fragmentName1,\n        fragmentName2,\n      );\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\nfunction collectConflictsWithin(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  fieldMap,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of Object.entries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFragmentPairs,\n            false, // within one collection is never mutually exclusive\n            responseName,\n            fields[i],\n            fields[j],\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\nfunction collectConflictsBetween(\n  context,\n  conflicts,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  fieldMap1,\n  fieldMap2,\n) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const [responseName, fields1] of Object.entries(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      for (const field1 of fields1) {\n        for (const field2 of fields2) {\n          const conflict = findConflict(\n            context,\n            cachedFieldsAndFragmentNames,\n            comparedFragmentPairs,\n            parentFieldsAreMutuallyExclusive,\n            responseName,\n            field1,\n            field2,\n          );\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\nfunction findConflict(\n  context,\n  cachedFieldsAndFragmentNames,\n  comparedFragmentPairs,\n  parentFieldsAreMutuallyExclusive,\n  responseName,\n  field1,\n  field2,\n) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive =\n    parentFieldsAreMutuallyExclusive ||\n    (parentType1 !== parentType2 &&\n      isObjectType(parentType1) &&\n      isObjectType(parentType2));\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [\n        [responseName, `\"${name1}\" and \"${name2}\" are different fields`],\n        [node1],\n        [node2],\n      ];\n    } // Two field calls must have the same arguments.\n\n    if (stringifyArguments(node1) !== stringifyArguments(node2)) {\n      return [\n        [responseName, 'they have differing arguments'],\n        [node1],\n        [node2],\n      ];\n    }\n  } // The return type for each field.\n\n  const type1 = def1 === null || def1 === void 0 ? void 0 : def1.type;\n  const type2 = def2 === null || def2 === void 0 ? void 0 : def2.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [\n      [\n        responseName,\n        `they return conflicting types \"${inspect(type1)}\" and \"${inspect(\n          type2,\n        )}\"`,\n      ],\n      [node1],\n      [node2],\n    ];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(\n      context,\n      cachedFieldsAndFragmentNames,\n      comparedFragmentPairs,\n      areMutuallyExclusive,\n      getNamedType(type1),\n      selectionSet1,\n      getNamedType(type2),\n      selectionSet2,\n    );\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction stringifyArguments(fieldNode) {\n  var _fieldNode$arguments;\n\n  // FIXME https://github.com/graphql/graphql-js/issues/2203\n  const args =\n    /* c8 ignore next */\n    (_fieldNode$arguments = fieldNode.arguments) !== null &&\n    _fieldNode$arguments !== void 0\n      ? _fieldNode$arguments\n      : [];\n  const inputObjectWithArgs = {\n    kind: Kind.OBJECT,\n    fields: args.map((argNode) => ({\n      kind: Kind.OBJECT_FIELD,\n      name: argNode.name,\n      value: argNode.value,\n    })),\n  };\n  return print(sortValueNode(inputObjectWithArgs));\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2)\n      ? doTypesConflict(type1.ofType, type2.ofType)\n      : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\nfunction getFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  parentType,\n  selectionSet,\n) {\n  const cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const nodeAndDefs = Object.create(null);\n  const fragmentNames = Object.create(null);\n\n  _collectFieldsAndFragmentNames(\n    context,\n    parentType,\n    selectionSet,\n    nodeAndDefs,\n    fragmentNames,\n  );\n\n  const result = [nodeAndDefs, Object.keys(fragmentNames)];\n  cachedFieldsAndFragmentNames.set(selectionSet, result);\n  return result;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\nfunction getReferencedFieldsAndFragmentNames(\n  context,\n  cachedFieldsAndFragmentNames,\n  fragment,\n) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(\n    context,\n    cachedFieldsAndFragmentNames,\n    fragmentType,\n    fragment.selectionSet,\n  );\n}\n\nfunction _collectFieldsAndFragmentNames(\n  context,\n  parentType,\n  selectionSet,\n  nodeAndDefs,\n  fragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        const fieldName = selection.name.value;\n        let fieldDef;\n\n        if (isObjectType(parentType) || isInterfaceType(parentType)) {\n          fieldDef = parentType.getFields()[fieldName];\n        }\n\n        const responseName = selection.alias\n          ? selection.alias.value\n          : fieldName;\n\n        if (!nodeAndDefs[responseName]) {\n          nodeAndDefs[responseName] = [];\n        }\n\n        nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT: {\n        const typeCondition = selection.typeCondition;\n        const inlineFragmentType = typeCondition\n          ? typeFromAST(context.getSchema(), typeCondition)\n          : parentType;\n\n        _collectFieldsAndFragmentNames(\n          context,\n          inlineFragmentType,\n          selection.selectionSet,\n          nodeAndDefs,\n          fragmentNames,\n        );\n\n        break;\n      }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [\n      [responseName, conflicts.map(([reason]) => reason)],\n      [node1, ...conflicts.map(([, fields1]) => fields1).flat()],\n      [node2, ...conflicts.map(([, , fields2]) => fields2).flat()],\n    ];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does not matter.\n */\n\nclass PairSet {\n  constructor() {\n    this._data = new Map();\n  }\n\n  has(a, b, areMutuallyExclusive) {\n    var _this$_data$get;\n\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n    const result =\n      (_this$_data$get = this._data.get(key1)) === null ||\n      _this$_data$get === void 0\n        ? void 0\n        : _this$_data$get.get(key2);\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true, hence if\n    // we want to know if this PairSet \"has\" these two with no exclusivity,\n    // we have to ensure it was added as such.\n\n    return areMutuallyExclusive ? true : areMutuallyExclusive === result;\n  }\n\n  add(a, b, areMutuallyExclusive) {\n    const [key1, key2] = a < b ? [a, b] : [b, a];\n\n    const map = this._data.get(key1);\n\n    if (map === undefined) {\n      this._data.set(key1, new Map([[key2, areMutuallyExclusive]]));\n    } else {\n      map.set(key2, areMutuallyExclusive);\n    }\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { doTypesOverlap } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (\n        isCompositeType(fragType) &&\n        isCompositeType(parentType) &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (\n        fragType &&\n        parentType &&\n        !doTypesOverlap(context.getSchema(), fragType, parentType)\n      ) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { invariant } from '../../jsutils/invariant.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode } from '../../language/predicates.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../../type/definition.mjs';\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nexport function PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension,\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType =\n      schema === null || schema === void 0 ? void 0 : schema.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(\n          new GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, {\n            nodes: defNode ? [defNode, node] : node,\n          }),\n        );\n      }\n    } else {\n      const allTypeNames = Object.keys({\n        ...definedTypes,\n        ...(schema === null || schema === void 0\n          ? void 0\n          : schema.getTypeMap()),\n      });\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(\n        new GraphQLError(\n          `Cannot extend type \"${typeName}\" because it is not defined.` +\n            didYouMean(suggestedTypes),\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n    }\n  }\n}\nconst defKindToExtKind = {\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n};\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  }\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable. All possible types have been considered\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n    // Not reachable. All possible types have been considered\n\n    /* c8 ignore next */\n\n    default:\n      false || invariant(false, 'Unexpected kind: ' + inspect(kind));\n  }\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isRequiredArgument, isType } from '../../type/definition.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        var _fieldNode$arguments;\n\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        }\n\n        const providedArgs = new Set( // FIXME: https://github.com/graphql/graphql-js/issues/2203\n          /* c8 ignore next */\n          (_fieldNode$arguments = fieldNode.arguments) === null ||\n          _fieldNode$arguments === void 0\n            ? void 0\n            : _fieldNode$arguments.map((arg) => arg.name.value),\n        );\n\n        for (const argDef of fieldDef.args) {\n          if (!providedArgs.has(argDef.name) && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`,\n                {\n                  nodes: fieldNode,\n                },\n              ),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  var _schema$getDirectives;\n\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives =\n    (_schema$getDirectives =\n      schema === null || schema === void 0\n        ? void 0\n        : schema.getDirectives()) !== null && _schema$getDirectives !== void 0\n      ? _schema$getDirectives\n      : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(\n      directive.args.filter(isRequiredArgument),\n      (arg) => arg.name,\n    );\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      requiredArgsMap[def.name.value] = keyMap(\n        argNodes.filter(isRequiredArgumentNode),\n        (arg) => arg.name.value,\n      );\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          var _directiveNode$argume;\n\n          // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n          /* c8 ignore next */\n          const argNodes =\n            (_directiveNode$argume = directiveNode.arguments) !== null &&\n            _directiveNode$argume !== void 0\n              ? _directiveNode$argume\n              : [];\n          const argNodeMap = new Set(argNodes.map((arg) => arg.name.value));\n\n          for (const [argName, argDef] of Object.entries(requiredArgs)) {\n            if (!argNodeMap.has(argName)) {\n              const argType = isType(argDef.type)\n                ? inspect(argDef.type)\n                : print(argDef.type);\n              context.reportError(\n                new GraphQLError(\n                  `Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argType}\" is required, but it was not provided.`,\n                  {\n                    nodes: directiveNode,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                {\n                  nodes: selectionSet,\n                },\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "/**\n * Build a string describing the path.\n */\nexport function printPathArray(path) {\n  return path\n    .map((key) =>\n      typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key,\n    )\n    .join('');\n}\n", "/**\n * Given a Path and a key, return a new Path containing the new key.\n */\nexport function addPath(prev, key, typename) {\n  return {\n    prev,\n    key,\n    typename,\n  };\n}\n/**\n * Given a Path, return an Array of the path keys.\n */\n\nexport function pathToArray(path) {\n  const flattened = [];\n  let curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n", "import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      pathToArray(path),\n      inputValue,\n      new GraphQLError(\n        `Expected non-nullable type \"${inspect(type)}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\" to be an object.`),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(\n            pathToArray(path),\n            inputValue,\n            new GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        addPath(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              didYouMean(suggestions),\n          ),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(`Expected type \"${type.name}\". ` + error.message, {\n            originalError: error,\n          }),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n", "import { inspect } from '../jsutils/inspect.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isInputType, isNonNullType } from '../type/definition.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors =\n    options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(\n      schema,\n      varDefNodes,\n      inputs,\n      (error) => {\n        if (maxErrors != null && errors.length >= maxErrors) {\n          throw new GraphQLError(\n            'Too many errors processing variables, error limit reached. Execution aborted.',\n          );\n        }\n\n        errors.push(error);\n      },\n    );\n\n    if (errors.length === 0) {\n      return {\n        coerced,\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors,\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n          {\n            nodes: varDefNode.type,\n          },\n        ),\n      );\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(\n          new GraphQLError(\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\n            {\n              nodes: varDefNode,\n            },\n          ),\n        );\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\n          {\n            nodes: varDefNode,\n          },\n        ),\n      );\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(\n      value,\n      varType,\n      (path, invalidValue, error) => {\n        let prefix =\n          `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n        if (path.length > 0) {\n          prefix += ` at \"${varName}${printPathArray(path)}\"`;\n        }\n\n        onError(\n          new GraphQLError(prefix + '; ' + error.message, {\n            nodes: varDefNode,\n            originalError: error.originalError,\n          }),\n        );\n      },\n    );\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getArgumentValues(def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const argumentNodes =\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\n      ? _node$arguments\n      : [];\n  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n            'was not provided.',\n          {\n            nodes: node,\n          },\n        );\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (\n        variableValues == null ||\n        !hasOwnProperty(variableValues, variableName)\n      ) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            {\n              nodes: valueNode,\n            },\n          );\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` +\n          'must not be null.',\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\n        `Argument \"${name}\" has invalid value ${print(valueNode)}.`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  var _node$directives;\n\n  const directiveNode =\n    (_node$directives = node.directives) === null || _node$directives === void 0\n      ? void 0\n      : _node$directives.find(\n          (directive) => directive.name.value === directiveDef.name,\n        );\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "import { Kind } from '../language/kinds.mjs';\nimport { isAbstractType } from '../type/definition.mjs';\nimport {\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n} from '../type/directives.mjs';\nimport { typeFromAST } from '../utilities/typeFromAST.mjs';\nimport { getDirectiveValues } from './values.mjs';\n/**\n * Given a selectionSet, collects all of the fields and returns them.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field that\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectFields(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n) {\n  const fields = new Map();\n  collectFieldsImpl(\n    schema,\n    fragments,\n    variableValues,\n    runtimeType,\n    selectionSet,\n    fields,\n    new Set(),\n  );\n  return fields;\n}\n/**\n * Given an array of field nodes, collects all of the subfields of the passed\n * in fields, and returns them at the end.\n *\n * CollectSubFields requires the \"return type\" of an object. For a field that\n * returns an Interface or Union type, the \"return type\" will be the actual\n * object type returned by that field.\n *\n * @internal\n */\n\nexport function collectSubfields(\n  schema,\n  fragments,\n  variableValues,\n  returnType,\n  fieldNodes,\n) {\n  const subFieldNodes = new Map();\n  const visitedFragmentNames = new Set();\n\n  for (const node of fieldNodes) {\n    if (node.selectionSet) {\n      collectFieldsImpl(\n        schema,\n        fragments,\n        variableValues,\n        returnType,\n        node.selectionSet,\n        subFieldNodes,\n        visitedFragmentNames,\n      );\n    }\n  }\n\n  return subFieldNodes;\n}\n\nfunction collectFieldsImpl(\n  schema,\n  fragments,\n  variableValues,\n  runtimeType,\n  selectionSet,\n  fields,\n  visitedFragmentNames,\n) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD: {\n        if (!shouldIncludeNode(variableValues, selection)) {\n          continue;\n        }\n\n        const name = getFieldEntryKey(selection);\n        const fieldList = fields.get(name);\n\n        if (fieldList !== undefined) {\n          fieldList.push(selection);\n        } else {\n          fields.set(name, [selection]);\n        }\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT: {\n        if (\n          !shouldIncludeNode(variableValues, selection) ||\n          !doesFragmentConditionMatch(schema, selection, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          selection.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n\n      case Kind.FRAGMENT_SPREAD: {\n        const fragName = selection.name.value;\n\n        if (\n          visitedFragmentNames.has(fragName) ||\n          !shouldIncludeNode(variableValues, selection)\n        ) {\n          continue;\n        }\n\n        visitedFragmentNames.add(fragName);\n        const fragment = fragments[fragName];\n\n        if (\n          !fragment ||\n          !doesFragmentConditionMatch(schema, fragment, runtimeType)\n        ) {\n          continue;\n        }\n\n        collectFieldsImpl(\n          schema,\n          fragments,\n          variableValues,\n          runtimeType,\n          fragment.selectionSet,\n          fields,\n          visitedFragmentNames,\n        );\n        break;\n      }\n    }\n  }\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\n\nfunction shouldIncludeNode(variableValues, node) {\n  const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n\n  if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n    return false;\n  }\n\n  const include = getDirectiveValues(\n    GraphQLIncludeDirective,\n    node,\n    variableValues,\n  );\n\n  if (\n    (include === null || include === void 0 ? void 0 : include.if) === false\n  ) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n  const typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  const conditionalType = typeFromAST(schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return schema.isSubType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { collectFields } from '../../execution/collectFields.mjs';\n\n/**\n * Subscriptions must only include a non-introspection field.\n *\n * A GraphQL subscription is valid only if it contains a single root field and\n * that root field is not an introspection field.\n *\n * See https://spec.graphql.org/draft/#sec-Single-root-field\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        const schema = context.getSchema();\n        const subscriptionType = schema.getSubscriptionType();\n\n        if (subscriptionType) {\n          const operationName = node.name ? node.name.value : null;\n          const variableValues = Object.create(null);\n          const document = context.getDocument();\n          const fragments = Object.create(null);\n\n          for (const definition of document.definitions) {\n            if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n              fragments[definition.name.value] = definition;\n            }\n          }\n\n          const fields = collectFields(\n            schema,\n            fragments,\n            variableValues,\n            subscriptionType,\n            node.selectionSet,\n          );\n\n          if (fields.size > 1) {\n            const fieldSelectionLists = [...fields.values()];\n            const extraFieldSelectionLists = fieldSelectionLists.slice(1);\n            const extraFieldSelections = extraFieldSelectionLists.flat();\n            context.reportError(\n              new GraphQLError(\n                operationName != null\n                  ? `Subscription \"${operationName}\" must select only one top level field.`\n                  : 'Anonymous Subscription must select only one top level field.',\n                {\n                  nodes: extraFieldSelections,\n                },\n              ),\n            );\n          }\n\n          for (const fieldNodes of fields.values()) {\n            const field = fieldNodes[0];\n            const fieldName = field.name.value;\n\n            if (fieldName.startsWith('__')) {\n              context.reportError(\n                new GraphQLError(\n                  operationName != null\n                    ? `Subscription \"${operationName}\" must not select an introspection top level field.`\n                    : 'Anonymous Subscription must not select an introspection top level field.',\n                  {\n                    nodes: fieldNodes,\n                  },\n                ),\n              );\n            }\n          }\n        }\n      }\n    },\n  };\n}\n", "/**\n * Groups array items into a Map, given a function to produce grouping key.\n */\nexport function groupBy(list, keyFn) {\n  const result = new Map();\n\n  for (const item of list) {\n    const key = keyFn(item);\n    const group = result.get(key);\n\n    if (group === undefined) {\n      result.set(key, [item]);\n    } else {\n      group.push(item);\n    }\n  }\n\n  return result;\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n */\nexport function UniqueArgumentNamesRule(context) {\n  return {\n    Field: checkArgUniqueness,\n    Directive: checkArgUniqueness,\n  };\n\n  function checkArgUniqueness(parentNode) {\n    var _parentNode$arguments;\n\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const argumentNodes =\n      (_parentNode$arguments = parentNode.arguments) !== null &&\n      _parentNode$arguments !== void 0\n        ? _parentNode$arguments\n        : [];\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one argument named \"${argName}\".`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nexport function UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n\n      if (\n        schema !== null &&\n        schema !== void 0 &&\n        schema.getDirective(directiveName)\n      ) {\n        context.reportError(\n          new GraphQLError(\n            `Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`,\n            {\n              nodes: node.name,\n            },\n          ),\n        );\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one directive named \"@${directiveName}\".`,\n            {\n              nodes: [knownDirectiveNames[directiveName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === Kind.SCHEMA_DEFINITION ||\n        node.kind === Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                {\n                  nodes: [seenDirectives[directiveName], directive],\n                },\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isEnumType } from '../../type/definition.mjs';\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness,\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const valueNodes =\n      (_node$values = node.values) !== null && _node$values !== void 0\n        ? _node$values\n        : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: valueDef.name,\n            },\n          ),\n        );\n      } else if (valueNames[valueName]) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\n            {\n              nodes: [valueNames[valueName], valueDef.name],\n            },\n          ),\n        );\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n} from '../../type/definition.mjs';\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness,\n  };\n\n  function checkFieldUniqueness(node) {\n    var _node$fields;\n\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_node$fields = node.fields) !== null && _node$fields !== void 0\n        ? _node$fields\n        : [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: fieldDef.name,\n            },\n          ),\n        );\n      } else if (fieldNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `Field \"${typeName}.${fieldName}\" can only be defined once.`,\n            {\n              nodes: [fieldNames[fieldName], fieldDef.name],\n            },\n          ),\n        );\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Fragment-Name-Uniqueness\n */\nexport function UniqueFragmentNamesRule(context) {\n  const knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      const fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one fragment named \"${fragmentName}\".`,\n            {\n              nodes: [knownFragmentNames[fragmentName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    },\n  };\n}\n", "import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            {\n              nodes: [knownNames[fieldName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n *\n * See https://spec.graphql.org/draft/#sec-Operation-Name-Uniqueness\n */\nexport function UniqueOperationNamesRule(context) {\n  const knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition(node) {\n      const operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one operation named \"${operationName.value}\".`,\n              {\n                nodes: [\n                  knownOperationNames[operationName.value],\n                  operationName,\n                ],\n              },\n            ),\n          );\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n\n    FragmentDefinition: () => false,\n  };\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema\n    ? {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n      }\n    : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes,\n  };\n\n  function checkOperationTypes(node) {\n    var _node$operationTypes;\n\n    // See: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n    const operationTypesNodes =\n      (_node$operationTypes = node.operationTypes) !== null &&\n      _node$operationTypes !== void 0\n        ? _node$operationTypes\n        : [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(\n          new GraphQLError(\n            `Type for ${operation} already defined in the schema. It cannot be redefined.`,\n            {\n              nodes: operationType,\n            },\n          ),\n        );\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one ${operation} type in schema.`,\n            {\n              nodes: [alreadyDefinedOperationType, operationType],\n            },\n          ),\n        );\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName,\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema !== null && schema !== void 0 && schema.getType(typeName)) {\n      context.reportError(\n        new GraphQLError(\n          `Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`,\n          {\n            nodes: node.name,\n          },\n        ),\n      );\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(\n        new GraphQLError(`There can be only one type named \"${typeName}\".`, {\n          nodes: [knownTypeNames[typeName], node.name],\n        }),\n      );\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n", "import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  return {\n    OperationDefinition(operationNode) {\n      var _operationNode$variab;\n\n      // See: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const variableDefinitions =\n        (_operationNode$variab = operationNode.variableDefinitions) !== null &&\n        _operationNode$variab !== void 0\n          ? _operationNode$variab\n          : [];\n      const seenVariableDefinitions = groupBy(\n        variableDefinitions,\n        (node) => node.variable.name.value,\n      );\n\n      for (const [variableName, variableNodes] of seenVariableDefinitions) {\n        if (variableNodes.length > 1) {\n          context.reportError(\n            new GraphQLError(\n              `There can be only one variable named \"$${variableName}\".`,\n              {\n                nodes: variableNodes.map((node) => node.variable.name),\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n", "import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { inspect } from '../../jsutils/inspect.mjs';\nimport { keyMap } from '../../jsutils/keyMap.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isRequiredInputField,\n} from '../../type/definition.mjs';\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n *\n * See https://spec.graphql.org/draft/#sec-Values-of-Correct-Type\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n      const fieldNodeMap = keyMap(node.fields, (field) => field.name.value);\n\n      for (const fieldDef of Object.values(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(\n          node.name.value,\n          Object.keys(parentType.getFields()),\n        );\n        context.reportError(\n          new GraphQLError(\n            `Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(\n          new GraphQLError(\n            `Expected value of type \"${inspect(type)}\", found ${print(node)}.`,\n            {\n              nodes: node,\n            },\n          ),\n        );\n      }\n    },\n\n    EnumValue: (node) => isValidValueNode(context, node),\n    IntValue: (node) => isValidValueNode(context, node),\n    FloatValue: (node) => isValidValueNode(context, node),\n    StringValue: (node) => isValidValueNode(context, node),\n    BooleanValue: (node) => isValidValueNode(context, node),\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(\n      new GraphQLError(\n        `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n        {\n          nodes: node,\n        },\n      ),\n    );\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n  try {\n    const parseResult = type.parseLiteral(\n      node,\n      undefined,\n      /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}.`,\n          {\n            nodes: node,\n          },\n        ),\n      );\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(\n        new GraphQLError(\n          `Expected value of type \"${typeStr}\", found ${print(node)}; ` +\n            error.message,\n          {\n            nodes: node,\n            originalError: error,\n          },\n        ),\n      );\n    }\n  }\n}\n", "import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isInputType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n *\n * See https://spec.graphql.org/draft/#sec-Variables-Are-Input-Types\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type !== undefined && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(\n          new GraphQLError(\n            `Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`,\n            {\n              nodes: node.type,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n", "import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isNonNullType } from '../../type/definition.mjs';\nimport { isTypeSubTypeOf } from '../../utilities/typeComparators.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Variables in allowed position\n *\n * Variable usages must be compatible with the arguments they are passed to.\n *\n * See https://spec.graphql.org/draft/#sec-All-Variable-Usages-are-Allowed\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const { node, type, defaultValue } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (\n              varType &&\n              !allowedVariableUsage(\n                schema,\n                varType,\n                varDef.defaultValue,\n                type,\n                defaultValue,\n              )\n            ) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(\n                new GraphQLError(\n                  `Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`,\n                  {\n                    nodes: [varDef, node],\n                  },\n                ),\n              );\n            }\n          }\n        }\n      },\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    },\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(\n  schema,\n  varType,\n  varDefaultValue,\n  locationType,\n  locationDefaultValue,\n) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue =\n      varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n", "// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Argument Names\"\n\nimport {\n  KnownArgumentNamesOnDirectivesRule,\n  KnownArgumentNamesRule,\n} from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs';\nimport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nimport {\n  ProvidedRequiredArgumentsOnDirectivesRule,\n  ProvidedRequiredArgumentsRule,\n} from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs';\nimport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs';\nimport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs';\nimport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nimport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs';\nimport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nimport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs';\n\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\nexport const specifiedRules = Object.freeze([\n  ExecutableDefinitionsRule,\n  UniqueOperationNamesRule,\n  LoneAnonymousOperationRule,\n  SingleFieldSubscriptionsRule,\n  KnownTypeNamesRule,\n  FragmentsOnCompositeTypesRule,\n  VariablesAreInputTypesRule,\n  ScalarLeafsRule,\n  FieldsOnCorrectTypeRule,\n  UniqueFragmentNamesRule,\n  KnownFragmentNamesRule,\n  NoUnusedFragmentsRule,\n  PossibleFragmentSpreadsRule,\n  NoFragmentCyclesRule,\n  UniqueVariableNamesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedVariablesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  KnownArgumentNamesRule,\n  UniqueArgumentNamesRule,\n  ValuesOfCorrectTypeRule,\n  ProvidedRequiredArgumentsRule,\n  VariablesInAllowedPositionRule,\n  OverlappingFieldsCanBeMergedRule,\n  UniqueInputFieldNamesRule,\n]);\n/**\n * @internal\n */\n\nexport const specifiedSDLRules = Object.freeze([\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  KnownTypeNamesRule,\n  KnownDirectivesRule,\n  UniqueDirectivesPerLocationRule,\n  PossibleTypeExtensionsRule,\n  KnownArgumentNamesOnDirectivesRule,\n  UniqueArgumentNamesRule,\n  UniqueInputFieldNamesRule,\n  ProvidedRequiredArgumentsOnDirectivesRule,\n]);\n", "import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport class ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ASTValidationContext';\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments;\n\n    if (this._fragments) {\n      fragments = this._fragments;\n    } else {\n      fragments = Object.create(null);\n\n      for (const defNode of this.getDocument().definitions) {\n        if (defNode.kind === Kind.FRAGMENT_DEFINITION) {\n          fragments[defNode.name.value] = defNode;\n        }\n      }\n\n      this._fragments = fragments;\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n      let set;\n\n      while ((set = setsToVisit.pop())) {\n        for (const selection of set.selections) {\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n      let node;\n\n      while ((node = nodesToVisit.pop())) {\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n}\nexport class SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'SDLValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n}\nexport class ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'ValidationContext';\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new TypeInfo(this._schema);\n      visit(\n        node,\n        visitWithTypeInfo(typeInfo, {\n          VariableDefinition: () => false,\n\n          Variable(variable) {\n            newUsages.push({\n              node: variable,\n              type: typeInfo.getInputType(),\n              defaultValue: typeInfo.getDefaultValue(),\n            });\n          },\n        }),\n      );\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { visit, visitInParallel } from '../language/visitor.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport { TypeInfo, visitWithTypeInfo } from '../utilities/TypeInfo.mjs';\nimport { specifiedRules, specifiedSDLRules } from './specifiedRules.mjs';\nimport {\n  SDLValidationContext,\n  ValidationContext,\n} from './ValidationContext.mjs';\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Validate will stop validation after a `maxErrors` limit has been reached.\n * Attackers can send pathologically invalid queries to induce a DoS attack,\n * so by default `maxErrors` set to 100 errors.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(\n  schema,\n  documentAST,\n  rules = specifiedRules,\n  options,\n  /** @deprecated will be removed in 17.0.0 */\n  typeInfo = new TypeInfo(schema),\n) {\n  var _options$maxErrors;\n\n  const maxErrors =\n    (_options$maxErrors =\n      options === null || options === void 0 ? void 0 : options.maxErrors) !==\n      null && _options$maxErrors !== void 0\n      ? _options$maxErrors\n      : 100;\n  documentAST || devAssert(false, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new ValidationContext(\n    schema,\n    documentAST,\n    typeInfo,\n    (error) => {\n      if (errors.length >= maxErrors) {\n        errors.push(\n          new GraphQLError(\n            'Too many validation errors, error limit reached. Validation aborted.',\n          ),\n        ); // eslint-disable-next-line @typescript-eslint/no-throw-literal\n\n        throw abortObj;\n      }\n\n      errors.push(error);\n    },\n  ); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = visitInParallel(rules.map((rule) => rule(context))); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nexport function validateSDL(\n  documentAST,\n  schemaToExtend,\n  rules = specifiedSDLRules,\n) {\n  const errors = [];\n  const context = new SDLValidationContext(\n    documentAST,\n    schemaToExtend,\n    (error) => {\n      errors.push(error);\n    },\n  );\n  const visitors = rules.map((rule) => rule(context));\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n", "/**\n * Memoizes the provided three-argument function.\n */\nexport function memoize3(fn) {\n  let cache0;\n  return function memoized(a1, a2, a3) {\n    if (cache0 === undefined) {\n      cache0 = new WeakMap();\n    }\n\n    let cache1 = cache0.get(a1);\n\n    if (cache1 === undefined) {\n      cache1 = new WeakMap();\n      cache0.set(a1, cache1);\n    }\n\n    let cache2 = cache1.get(a2);\n\n    if (cache2 === undefined) {\n      cache2 = new WeakMap();\n      cache1.set(a2, cache2);\n    }\n\n    let fnResult = cache2.get(a3);\n\n    if (fnResult === undefined) {\n      fnResult = fn(a1, a2, a3);\n      cache2.set(a3, fnResult);\n    }\n\n    return fnResult;\n  };\n}\n", "/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nexport function promiseForObject(object) {\n  return Promise.all(Object.values(object)).then((resolvedValues) => {\n    const resolvedObject = Object.create(null);\n\n    for (const [i, key] of Object.keys(object).entries()) {\n      resolvedObject[key] = resolvedValues[i];\n    }\n\n    return resolvedObject;\n  });\n}\n", "import { isPromise } from './isPromise.mjs';\n\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\nexport function promiseReduce(values, callbackFn, initialValue) {\n  let accumulator = initialValue;\n\n  for (const value of values) {\n    accumulator = isPromise(accumulator)\n      ? accumulator.then((resolved) => callbackFn(resolved, value))\n      : callbackFn(accumulator, value);\n  }\n\n  return accumulator;\n}\n", "import { inspect } from './inspect.mjs';\n/**\n * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n */\n\nexport function toError(thrownValue) {\n  return thrownValue instanceof Error\n    ? thrownValue\n    : new NonErrorThrown(thrownValue);\n}\n\nclass NonErrorThrown extends Error {\n  constructor(thrownValue) {\n    super('Unexpected error value: ' + inspect(thrownValue));\n    this.name = 'NonErrorThrown';\n    this.thrownValue = thrownValue;\n  }\n}\n", "import { toError } from '../jsutils/toError.mjs';\nimport { GraphQLError } from './GraphQLError.mjs';\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  var _nodes;\n\n  const originalError = toError(rawOriginalError); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (isLocatedGraphQLError(originalError)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, {\n    nodes:\n      (_nodes = originalError.nodes) !== null && _nodes !== void 0\n        ? _nodes\n        : nodes,\n    source: originalError.source,\n    positions: originalError.positions,\n    path,\n    originalError,\n  });\n}\n\nfunction isLocatedGraphQLError(error) {\n  return Array.isArray(error.path);\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { isPromise } from '../jsutils/isPromise.mjs';\nimport { memoize3 } from '../jsutils/memoize3.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { promiseForObject } from '../jsutils/promiseForObject.mjs';\nimport { promiseReduce } from '../jsutils/promiseReduce.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isAbstractType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { assertValidSchema } from '../type/validate.mjs';\nimport {\n  collectFields,\n  collectSubfields as _collectSubfields,\n} from './collectFields.mjs';\nimport { getArgumentValues, getVariableValues } from './values.mjs';\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\nconst collectSubfields = memoize3((exeContext, returnType, fieldNodes) =>\n  _collectSubfields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    returnType,\n    fieldNodes,\n  ),\n);\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n *\n * Namely, schema of the type system that is currently executing,\n * and the fragments defined in the query document\n */\n\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification.\n *\n * Returns either a synchronous ExecutionResult (if all encountered resolvers\n * are synchronous), or a Promise of an ExecutionResult that will eventually be\n * resolved and never rejected.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nexport function execute(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const { schema, document, variableValues, rootValue } = args; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n  //\n  // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n\n  try {\n    const { operation } = exeContext;\n    const result = executeOperation(exeContext, operation, rootValue);\n\n    if (isPromise(result)) {\n      return result.then(\n        (data) => buildResponse(data, exeContext.errors),\n        (error) => {\n          exeContext.errors.push(error);\n          return buildResponse(null, exeContext.errors);\n        },\n      );\n    }\n\n    return buildResponse(result, exeContext.errors);\n  } catch (error) {\n    exeContext.errors.push(error);\n    return buildResponse(null, exeContext.errors);\n  }\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function executeSync(args) {\n  const result = execute(args); // Assert that the execution was synchronous.\n\n  if (isPromise(result)) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\nfunction buildResponse(data, errors) {\n  return errors.length === 0\n    ? {\n        data,\n      }\n    : {\n        errors,\n        data,\n      };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\n\nexport function assertValidExecutionArguments(\n  schema,\n  document,\n  rawVariableValues,\n) {\n  document || devAssert(false, 'Must provide document.'); // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  rawVariableValues == null ||\n    isObjectLike(rawVariableValues) ||\n    devAssert(\n      false,\n      'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.',\n    );\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * @internal\n */\n\nexport function buildExecutionContext(args) {\n  var _definition$name, _operation$variableDe;\n\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues: rawVariableValues,\n    operationName,\n    fieldResolver,\n    typeResolver,\n    subscribeFieldResolver,\n  } = args;\n  let operation;\n  const fragments = Object.create(null);\n\n  for (const definition of document.definitions) {\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (operationName == null) {\n          if (operation !== undefined) {\n            return [\n              new GraphQLError(\n                'Must provide operation name if query contains multiple operations.',\n              ),\n            ];\n          }\n\n          operation = definition;\n        } else if (\n          ((_definition$name = definition.name) === null ||\n          _definition$name === void 0\n            ? void 0\n            : _definition$name.value) === operationName\n        ) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  }\n\n  if (!operation) {\n    if (operationName != null) {\n      return [new GraphQLError(`Unknown operation named \"${operationName}\".`)];\n    }\n\n    return [new GraphQLError('Must provide an operation.')];\n  } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const variableDefinitions =\n    (_operation$variableDe = operation.variableDefinitions) !== null &&\n    _operation$variableDe !== void 0\n      ? _operation$variableDe\n      : [];\n  const coercedVariableValues = getVariableValues(\n    schema,\n    variableDefinitions,\n    rawVariableValues !== null && rawVariableValues !== void 0\n      ? rawVariableValues\n      : {},\n    {\n      maxErrors: 50,\n    },\n  );\n\n  if (coercedVariableValues.errors) {\n    return coercedVariableValues.errors;\n  }\n\n  return {\n    schema,\n    fragments,\n    rootValue,\n    contextValue,\n    operation,\n    variableValues: coercedVariableValues.coerced,\n    fieldResolver:\n      fieldResolver !== null && fieldResolver !== void 0\n        ? fieldResolver\n        : defaultFieldResolver,\n    typeResolver:\n      typeResolver !== null && typeResolver !== void 0\n        ? typeResolver\n        : defaultTypeResolver,\n    subscribeFieldResolver:\n      subscribeFieldResolver !== null && subscribeFieldResolver !== void 0\n        ? subscribeFieldResolver\n        : defaultFieldResolver,\n    errors: [],\n  };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  const rootType = exeContext.schema.getRootType(operation.operation);\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      `Schema is not configured to execute ${operation.operation} operation.`,\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = collectFields(\n    exeContext.schema,\n    exeContext.fragments,\n    exeContext.variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const path = undefined;\n\n  switch (operation.operation) {\n    case OperationTypeNode.QUERY:\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n\n    case OperationTypeNode.MUTATION:\n      return executeFieldsSerially(\n        exeContext,\n        rootType,\n        rootValue,\n        path,\n        rootFields,\n      );\n\n    case OperationTypeNode.SUBSCRIPTION:\n      // TODO: deprecate `subscribe` and move all logic here\n      // Temporary solution until we finish merging execute and subscribe together\n      return executeFields(exeContext, rootType, rootValue, path, rootFields);\n  }\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\n\nfunction executeFieldsSerially(\n  exeContext,\n  parentType,\n  sourceValue,\n  path,\n  fields,\n) {\n  return promiseReduce(\n    fields.entries(),\n    (results, [responseName, fieldNodes]) => {\n      const fieldPath = addPath(path, responseName, parentType.name);\n      const result = executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n      );\n\n      if (result === undefined) {\n        return results;\n      }\n\n      if (isPromise(result)) {\n        return result.then((resolvedResult) => {\n          results[responseName] = resolvedResult;\n          return results;\n        });\n      }\n\n      results[responseName] = result;\n      return results;\n    },\n    Object.create(null),\n  );\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  const results = Object.create(null);\n  let containsPromise = false;\n\n  for (const [responseName, fieldNodes] of fields.entries()) {\n    const fieldPath = addPath(path, responseName, parentType.name);\n    const result = executeField(\n      exeContext,\n      parentType,\n      sourceValue,\n      fieldNodes,\n      fieldPath,\n    );\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n  return promiseForObject(results);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\n\nfunction executeField(exeContext, parentType, source, fieldNodes, path) {\n  var _fieldDef$resolve;\n\n  const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  const returnType = fieldDef.type;\n  const resolveFn =\n    (_fieldDef$resolve = fieldDef.resolve) !== null &&\n    _fieldDef$resolve !== void 0\n      ? _fieldDef$resolve\n      : exeContext.fieldResolver;\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    parentType,\n    path,\n  ); // Get the resolve function, regardless of if its result is normal or abrupt (error).\n\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    const args = getArgumentValues(\n      fieldDef,\n      fieldNodes[0],\n      exeContext.variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue;\n    const result = resolveFn(source, args, contextValue, info);\n    let completed;\n\n    if (isPromise(result)) {\n      completed = result.then((resolved) =>\n        completeValue(exeContext, returnType, fieldNodes, info, path, resolved),\n      );\n    } else {\n      completed = completeValue(\n        exeContext,\n        returnType,\n        fieldNodes,\n        info,\n        path,\n        result,\n      );\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, (rawError) => {\n        const error = locatedError(rawError, fieldNodes, pathToArray(path));\n        return handleFieldError(error, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (rawError) {\n    const error = locatedError(rawError, fieldNodes, pathToArray(path));\n    return handleFieldError(error, returnType, exeContext);\n  }\n}\n/**\n * @internal\n */\n\nexport function buildResolveInfo(\n  exeContext,\n  fieldDef,\n  fieldNodes,\n  parentType,\n  path,\n) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes,\n    returnType: fieldDef.type,\n    parentType,\n    path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues,\n  };\n}\n\nfunction handleFieldError(error, returnType, exeContext) {\n  // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n  if (isNonNullType(returnType)) {\n    const completed = completeValue(\n      exeContext,\n      returnType.ofType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n\n    if (completed === null) {\n      throw new Error(\n        `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,\n      );\n    }\n\n    return completed;\n  } // If result value is null or undefined then return null.\n\n  if (result == null) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n  if (isListType(returnType)) {\n    return completeListValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  } // If field type is Object, execute and complete all sub-selections.\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      path,\n      result,\n    );\n  }\n  /* c8 ignore next 6 */\n  // Not reachable, all possible output types have been considered.\n\n  false ||\n    invariant(\n      false,\n      'Cannot complete value of unexpected output type: ' + inspect(returnType),\n    );\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\nfunction completeListValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  if (!isIterableObject(result)) {\n    throw new GraphQLError(\n      `Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`,\n    );\n  } // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  const itemType = returnType.ofType;\n  let containsPromise = false;\n  const completedResults = Array.from(result, (item, index) => {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    const itemPath = addPath(path, index, undefined);\n\n    try {\n      let completedItem;\n\n      if (isPromise(item)) {\n        completedItem = item.then((resolved) =>\n          completeValue(\n            exeContext,\n            itemType,\n            fieldNodes,\n            info,\n            itemPath,\n            resolved,\n          ),\n        );\n      } else {\n        completedItem = completeValue(\n          exeContext,\n          itemType,\n          fieldNodes,\n          info,\n          itemPath,\n          item,\n        );\n      }\n\n      if (isPromise(completedItem)) {\n        containsPromise = true; // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n\n        return completedItem.then(undefined, (rawError) => {\n          const error = locatedError(\n            rawError,\n            fieldNodes,\n            pathToArray(itemPath),\n          );\n          return handleFieldError(error, itemType, exeContext);\n        });\n      }\n\n      return completedItem;\n    } catch (rawError) {\n      const error = locatedError(rawError, fieldNodes, pathToArray(itemPath));\n      return handleFieldError(error, itemType, exeContext);\n    }\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\nfunction completeLeafValue(returnType, result) {\n  const serializedResult = returnType.serialize(result);\n\n  if (serializedResult == null) {\n    throw new Error(\n      `Expected \\`${inspect(returnType)}.serialize(${inspect(result)})\\` to ` +\n        `return non-nullable value, returned: ${inspect(serializedResult)}`,\n    );\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\nfunction completeAbstractValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  var _returnType$resolveTy;\n\n  const resolveTypeFn =\n    (_returnType$resolveTy = returnType.resolveType) !== null &&\n    _returnType$resolveTy !== void 0\n      ? _returnType$resolveTy\n      : exeContext.typeResolver;\n  const contextValue = exeContext.contextValue;\n  const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then((resolvedRuntimeType) =>\n      completeObjectValue(\n        exeContext,\n        ensureValidRuntimeType(\n          resolvedRuntimeType,\n          exeContext,\n          returnType,\n          fieldNodes,\n          info,\n          result,\n        ),\n        fieldNodes,\n        info,\n        path,\n        result,\n      ),\n    );\n  }\n\n  return completeObjectValue(\n    exeContext,\n    ensureValidRuntimeType(\n      runtimeType,\n      exeContext,\n      returnType,\n      fieldNodes,\n      info,\n      result,\n    ),\n    fieldNodes,\n    info,\n    path,\n    result,\n  );\n}\n\nfunction ensureValidRuntimeType(\n  runtimeTypeName,\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  result,\n) {\n  if (runtimeTypeName == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`,\n      fieldNodes,\n    );\n  } // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n  // TODO: remove in 17.0.0 release\n\n  if (isObjectType(runtimeTypeName)) {\n    throw new GraphQLError(\n      'Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.',\n    );\n  }\n\n  if (typeof runtimeTypeName !== 'string') {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n        `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`,\n    );\n  }\n\n  const runtimeType = exeContext.schema.getType(runtimeTypeName);\n\n  if (runtimeType == null) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\n      `Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n    throw new GraphQLError(\n      `Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\nfunction completeObjectValue(\n  exeContext,\n  returnType,\n  fieldNodes,\n  info,\n  path,\n  result,\n) {\n  // Collect sub-fields to execute to complete this value.\n  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes); // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n\n  if (returnType.isTypeOf) {\n    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then((resolvedIsTypeOf) => {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return executeFields(\n          exeContext,\n          returnType,\n          result,\n          path,\n          subFieldNodes,\n        );\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\n    `Expected value of type \"${returnType.name}\" but got: ${inspect(result)}.`,\n    {\n      nodes: fieldNodes,\n    },\n  );\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nexport const defaultTypeResolver = function (\n  value,\n  contextValue,\n  info,\n  abstractType,\n) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.schema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport const defaultFieldResolver = function (\n  source,\n  args,\n  contextValue,\n  info,\n) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\n\nexport function getFieldDef(schema, parentType, fieldNode) {\n  const fieldName = fieldNode.name.value;\n\n  if (\n    fieldName === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  } else if (\n    fieldName === TypeMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n", "export {\n  // Predicate\n  isSchema, // Assertion\n  assertSchema, // GraphQL Schema definition\n  GraphQLSchema,\n} from './schema.mjs';\nexport {\n  resolveObjMapThunk,\n  resolveReadonlyArrayThunk, // Predicates\n  isType,\n  isScalarType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isNonNullType,\n  isInputType,\n  isOutputType,\n  isLeafType,\n  isCompositeType,\n  isAbstractType,\n  isWrappingType,\n  isNullableType,\n  isNamedType,\n  isRequiredArgument,\n  isRequiredInputField, // Assertions\n  assertType,\n  assertScalarType,\n  assertObjectType,\n  assertInterfaceType,\n  assertUnionType,\n  assertEnumType,\n  assertInputObjectType,\n  assertListType,\n  assertNonNullType,\n  assertInputType,\n  assertOutputType,\n  assertLeafType,\n  assertCompositeType,\n  assertAbstractType,\n  assertWrappingType,\n  assertNullableType,\n  assertNamedType, // Un-modifiers\n  getNullableType,\n  getNamedType, // Definitions\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType, // Type Wrappers\n  GraphQLList,\n  GraphQLNonNull,\n} from './definition.mjs';\nexport {\n  // Predicate\n  isDirective, // Assertion\n  assertDirective, // Directives Definition\n  GraphQLDirective, // Built-in Directives defined by the Spec\n  isSpecifiedDirective,\n  specifiedDirectives,\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective, // Constant Deprecation Reason\n  DEFAULT_DEPRECATION_REASON,\n} from './directives.mjs';\n// Common built-in scalar instances.\nexport {\n  // Predicate\n  isSpecifiedScalarType, // Standard GraphQL Scalars\n  specifiedScalarTypes,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID, // Int boundaries constants\n  GRAPHQL_MAX_INT,\n  GRAPHQL_MIN_INT,\n} from './scalars.mjs';\nexport {\n  // Predicate\n  isIntrospectionType, // GraphQL Types for introspection.\n  introspectionTypes,\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind, // \"Enum\" of Type Kinds\n  TypeKind, // Meta-field definitions.\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from './introspection.mjs'; // Validate GraphQL schema.\n\nexport { validateSchema, assertValidSchema } from './validate.mjs'; // Upholds the spec rules about naming.\n\nexport { assertName, assertEnumValueName } from './assertName.mjs';\n", "export { Source } from './source.mjs';\nexport { getLocation } from './location.mjs';\nexport { printLocation, printSourceLocation } from './printLocation.mjs';\nexport { Kind } from './kinds.mjs';\nexport { TokenKind } from './tokenKind.mjs';\nexport { Lexer } from './lexer.mjs';\nexport { parse, parseValue, parseConstValue, parseType } from './parser.mjs';\nexport { print } from './printer.mjs';\nexport {\n  visit,\n  visitInParallel,\n  getVisitFn,\n  getEnterLeaveForKind,\n  BREAK,\n} from './visitor.mjs';\nexport { Location, Token, OperationTypeNode } from './ast.mjs';\nexport {\n  isDefinitionNode,\n  isExecutableDefinitionNode,\n  isSelectionNode,\n  isValueNode,\n  isConstValueNode,\n  isTypeNode,\n  isTypeSystemDefinitionNode,\n  isTypeDefinitionNode,\n  isTypeSystemExtensionNode,\n  isTypeExtensionNode,\n} from './predicates.mjs';\nexport { DirectiveLocation } from './directiveLocation.mjs';\n", "/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * implementing a `Symbol.asyncIterator` method.\n */\nexport function isAsyncIterable(maybeAsyncIterable) {\n  return (\n    typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0\n      ? void 0\n      : maybeAsyncIterable[Symbol.asyncIterator]) === 'function'\n  );\n}\n", "/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nexport function mapAsyncIterator(iterable, callback) {\n  const iterator = iterable[Symbol.asyncIterator]();\n\n  async function mapResult(result) {\n    if (result.done) {\n      return result;\n    }\n\n    try {\n      return {\n        value: await callback(result.value),\n        done: false,\n      };\n    } catch (error) {\n      /* c8 ignore start */\n      // FIXME: add test case\n      if (typeof iterator.return === 'function') {\n        try {\n          await iterator.return();\n        } catch (_e) {\n          /* ignore error */\n        }\n      }\n\n      throw error;\n      /* c8 ignore stop */\n    }\n  }\n\n  return {\n    async next() {\n      return mapResult(await iterator.next());\n    },\n\n    async return() {\n      // If iterator.return() does not exist, then type R must be undefined.\n      return typeof iterator.return === 'function'\n        ? mapResult(await iterator.return())\n        : {\n            value: undefined,\n            done: true,\n          };\n    },\n\n    async throw(error) {\n      if (typeof iterator.throw === 'function') {\n        return mapResult(await iterator.throw(error));\n      }\n\n      throw error;\n    },\n\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n  };\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport {\n  assertValidExecutionArguments,\n  buildExecutionContext,\n  buildResolveInfo,\n  execute,\n  getFieldDef,\n} from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport async function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    subscribeFieldResolver,\n  } = args;\n  const resultOrStream = await createSourceEventStream(\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  );\n\n  if (!isAsyncIterable(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = (payload) =>\n    execute({\n      schema,\n      document,\n      rootValue: payload,\n      contextValue,\n      variableValues,\n      operationName,\n      fieldResolver,\n    }); // Map every source value to a ExecutionResult value as described above.\n\n  return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport async function createSourceEventStream(\n  schema,\n  document,\n  rootValue,\n  contextValue,\n  variableValues,\n  operationName,\n  subscribeFieldResolver,\n) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  }); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${inspect(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof GraphQLError) {\n      return {\n        errors: [error],\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const { schema, fragments, operation, variableValues, rootValue } =\n    exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      'Schema is not configured to execute subscription operation.',\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = collectFields(\n    schema,\n    fragments,\n    variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new GraphQLError(\n      `The subscription field \"${fieldName}\" is not defined.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  const path = addPath(undefined, responseName, rootType.name);\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    rootType,\n    path,\n  );\n\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn =\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\n      _fieldDef$subscribe !== void 0\n        ? _fieldDef$subscribe\n        : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  }\n}\n", "export { pathToArray as responsePathAsArray } from '../jsutils/Path.mjs';\nexport {\n  execute,\n  executeSync,\n  defaultFieldResolver,\n  defaultTypeResolver,\n} from './execute.mjs';\nexport { subscribe, createSourceEventStream } from './subscribe.mjs';\nexport {\n  getArgumentValues,\n  getVariableValues,\n  getDirectiveValues,\n} from './values.mjs';\n", "export { validate } from './validate.mjs';\nexport { ValidationContext } from './ValidationContext.mjs';\n// All validation rules in the GraphQL Specification.\nexport { specifiedRules } from './specifiedRules.mjs'; // Spec Section: \"Executable Definitions\"\n\nexport { ExecutableDefinitionsRule } from './rules/ExecutableDefinitionsRule.mjs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nexport { FieldsOnCorrectTypeRule } from './rules/FieldsOnCorrectTypeRule.mjs'; // Spec Section: \"Fragments on Composite Types\"\n\nexport { FragmentsOnCompositeTypesRule } from './rules/FragmentsOnCompositeTypesRule.mjs'; // Spec Section: \"Argument Names\"\n\nexport { KnownArgumentNamesRule } from './rules/KnownArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Defined\"\n\nexport { KnownDirectivesRule } from './rules/KnownDirectivesRule.mjs'; // Spec Section: \"Fragment spread target defined\"\n\nexport { KnownFragmentNamesRule } from './rules/KnownFragmentNamesRule.mjs'; // Spec Section: \"Fragment Spread Type Existence\"\n\nexport { KnownTypeNamesRule } from './rules/KnownTypeNamesRule.mjs'; // Spec Section: \"Lone Anonymous Operation\"\n\nexport { LoneAnonymousOperationRule } from './rules/LoneAnonymousOperationRule.mjs'; // Spec Section: \"Fragments must not form cycles\"\n\nexport { NoFragmentCyclesRule } from './rules/NoFragmentCyclesRule.mjs'; // Spec Section: \"All Variable Used Defined\"\n\nexport { NoUndefinedVariablesRule } from './rules/NoUndefinedVariablesRule.mjs'; // Spec Section: \"Fragments must be used\"\n\nexport { NoUnusedFragmentsRule } from './rules/NoUnusedFragmentsRule.mjs'; // Spec Section: \"All Variables Used\"\n\nexport { NoUnusedVariablesRule } from './rules/NoUnusedVariablesRule.mjs'; // Spec Section: \"Field Selection Merging\"\n\nexport { OverlappingFieldsCanBeMergedRule } from './rules/OverlappingFieldsCanBeMergedRule.mjs'; // Spec Section: \"Fragment spread is possible\"\n\nexport { PossibleFragmentSpreadsRule } from './rules/PossibleFragmentSpreadsRule.mjs'; // Spec Section: \"Argument Optionality\"\n\nexport { ProvidedRequiredArgumentsRule } from './rules/ProvidedRequiredArgumentsRule.mjs'; // Spec Section: \"Leaf Field Selections\"\n\nexport { ScalarLeafsRule } from './rules/ScalarLeafsRule.mjs'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nexport { SingleFieldSubscriptionsRule } from './rules/SingleFieldSubscriptionsRule.mjs'; // Spec Section: \"Argument Uniqueness\"\n\nexport { UniqueArgumentNamesRule } from './rules/UniqueArgumentNamesRule.mjs'; // Spec Section: \"Directives Are Unique Per Location\"\n\nexport { UniqueDirectivesPerLocationRule } from './rules/UniqueDirectivesPerLocationRule.mjs'; // Spec Section: \"Fragment Name Uniqueness\"\n\nexport { UniqueFragmentNamesRule } from './rules/UniqueFragmentNamesRule.mjs'; // Spec Section: \"Input Object Field Uniqueness\"\n\nexport { UniqueInputFieldNamesRule } from './rules/UniqueInputFieldNamesRule.mjs'; // Spec Section: \"Operation Name Uniqueness\"\n\nexport { UniqueOperationNamesRule } from './rules/UniqueOperationNamesRule.mjs'; // Spec Section: \"Variable Uniqueness\"\n\nexport { UniqueVariableNamesRule } from './rules/UniqueVariableNamesRule.mjs'; // Spec Section: \"Values Type Correctness\"\n\nexport { ValuesOfCorrectTypeRule } from './rules/ValuesOfCorrectTypeRule.mjs'; // Spec Section: \"Variables are Input Types\"\n\nexport { VariablesAreInputTypesRule } from './rules/VariablesAreInputTypesRule.mjs'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nexport { VariablesInAllowedPositionRule } from './rules/VariablesInAllowedPositionRule.mjs'; // SDL-specific validation rules\n\nexport { LoneSchemaDefinitionRule } from './rules/LoneSchemaDefinitionRule.mjs';\nexport { UniqueOperationTypesRule } from './rules/UniqueOperationTypesRule.mjs';\nexport { UniqueTypeNamesRule } from './rules/UniqueTypeNamesRule.mjs';\nexport { UniqueEnumValueNamesRule } from './rules/UniqueEnumValueNamesRule.mjs';\nexport { UniqueFieldDefinitionNamesRule } from './rules/UniqueFieldDefinitionNamesRule.mjs';\nexport { UniqueArgumentDefinitionNamesRule } from './rules/UniqueArgumentDefinitionNamesRule.mjs';\nexport { UniqueDirectiveNamesRule } from './rules/UniqueDirectiveNamesRule.mjs';\nexport { PossibleTypeExtensionsRule } from './rules/PossibleTypeExtensionsRule.mjs'; // Optional rules not defined by the GraphQL Specification\n\nexport { NoDeprecatedCustomRule } from './rules/custom/NoDeprecatedCustomRule.mjs';\nexport { NoSchemaIntrospectionCustomRule } from './rules/custom/NoSchemaIntrospectionCustomRule.mjs';\n", "export { GraphQLError, printError, formatError } from './GraphQLError.mjs';\nexport { syntaxError } from './syntaxError.mjs';\nexport { locatedError } from './locatedError.mjs';\n", "/**\n * Produce the GraphQL query recommended for a full schema introspection.\n * Accepts optional IntrospectionOptions.\n */\nexport function getIntrospectionQuery(options) {\n  const optionsWithDefault = {\n    descriptions: true,\n    specifiedByUrl: false,\n    directiveIsRepeatable: false,\n    schemaDescription: false,\n    inputValueDeprecation: false,\n    ...options,\n  };\n  const descriptions = optionsWithDefault.descriptions ? 'description' : '';\n  const specifiedByUrl = optionsWithDefault.specifiedByUrl\n    ? 'specifiedByURL'\n    : '';\n  const directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable\n    ? 'isRepeatable'\n    : '';\n  const schemaDescription = optionsWithDefault.schemaDescription\n    ? descriptions\n    : '';\n\n  function inputDeprecation(str) {\n    return optionsWithDefault.inputValueDeprecation ? str : '';\n  }\n\n  return `\n    query IntrospectionQuery {\n      __schema {\n        ${schemaDescription}\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ${descriptions}\n          ${directiveIsRepeatable}\n          locations\n          args${inputDeprecation('(includeDeprecated: true)')} {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ${descriptions}\n      ${specifiedByUrl}\n      fields(includeDeprecated: true) {\n        name\n        ${descriptions}\n        args${inputDeprecation('(includeDeprecated: true)')} {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields${inputDeprecation('(includeDeprecated: true)')} {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ${descriptions}\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ${descriptions}\n      type { ...TypeRef }\n      defaultValue\n      ${inputDeprecation('isDeprecated')}\n      ${inputDeprecation('deprecationReason')}\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n}\n", "import { Kind } from '../language/kinds.mjs';\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\n\nexport function getOperationAST(documentAST, operationName) {\n  let operation = null;\n\n  for (const definition of documentAST.definitions) {\n    if (definition.kind === Kind.OPERATION_DEFINITION) {\n      var _definition$name;\n\n      if (operationName == null) {\n        // If no operation name was provided, only return an Operation if there\n        // is one defined in the document. Upon encountering the second, return\n        // null.\n        if (operation) {\n          return null;\n        }\n\n        operation = definition;\n      } else if (\n        ((_definition$name = definition.name) === null ||\n        _definition$name === void 0\n          ? void 0\n          : _definition$name.value) === operationName\n      ) {\n        return definition;\n      }\n    }\n  }\n\n  return operation;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { parseValue } from '../language/parser.mjs';\nimport {\n  assertInterfaceType,\n  assertNullableType,\n  assertObjectType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  isInputType,\n  isOutputType,\n} from '../type/definition.mjs';\nimport { GraphQLDirective } from '../type/directives.mjs';\nimport { introspectionTypes, TypeKind } from '../type/introspection.mjs';\nimport { specifiedScalarTypes } from '../type/scalars.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\n\nexport function buildClientSchema(introspection, options) {\n  (isObjectLike(introspection) && isObjectLike(introspection.__schema)) ||\n    devAssert(\n      false,\n      `Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ${inspect(\n        introspection,\n      )}.`,\n    ); // Get the schema from the introspection result.\n\n  const schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.\n\n  const typeMap = keyValMap(\n    schemaIntrospection.types,\n    (typeIntrospection) => typeIntrospection.name,\n    (typeIntrospection) => buildType(typeIntrospection),\n  ); // Include standard types only if they are used.\n\n  for (const stdType of [...specifiedScalarTypes, ...introspectionTypes]) {\n    if (typeMap[stdType.name]) {\n      typeMap[stdType.name] = stdType;\n    }\n  } // Get the root Query, Mutation, and Subscription types.\n\n  const queryType = schemaIntrospection.queryType\n    ? getObjectType(schemaIntrospection.queryType)\n    : null;\n  const mutationType = schemaIntrospection.mutationType\n    ? getObjectType(schemaIntrospection.mutationType)\n    : null;\n  const subscriptionType = schemaIntrospection.subscriptionType\n    ? getObjectType(schemaIntrospection.subscriptionType)\n    : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  const directives = schemaIntrospection.directives\n    ? schemaIntrospection.directives.map(buildDirective)\n    : []; // Then produce and return a Schema with these types.\n\n  return new GraphQLSchema({\n    description: schemaIntrospection.description,\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: Object.values(typeMap),\n    directives,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === TypeKind.LIST) {\n      const itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return new GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === TypeKind.NON_NULL) {\n      const nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      const nullableType = getType(nullableRef);\n      return new GraphQLNonNull(assertNullableType(nullableType));\n    }\n\n    return getNamedType(typeRef);\n  }\n\n  function getNamedType(typeRef) {\n    const typeName = typeRef.name;\n\n    if (!typeName) {\n      throw new Error(`Unknown type reference: ${inspect(typeRef)}.`);\n    }\n\n    const type = typeMap[typeName];\n\n    if (!type) {\n      throw new Error(\n        `Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`,\n      );\n    }\n\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    return assertObjectType(getNamedType(typeRef));\n  }\n\n  function getInterfaceType(typeRef) {\n    return assertInterfaceType(getNamedType(typeRef));\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n  function buildType(type) {\n    // eslint-disable-next-line @typescript-eslint/prefer-optional-chain\n    if (type != null && type.name != null && type.kind != null) {\n      // FIXME: Properly type IntrospectionType, it's a breaking change so fix in v17\n      // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n      switch (type.kind) {\n        case TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    const typeStr = inspect(type);\n    throw new Error(\n      `Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${typeStr}.`,\n    );\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      specifiedByURL: scalarIntrospection.specifiedByURL,\n    });\n  }\n\n  function buildImplementationsList(implementingIntrospection) {\n    // TODO: Temporary workaround until GraphQL ecosystem will fully support\n    // 'interfaces' on interface types.\n    if (\n      implementingIntrospection.interfaces === null &&\n      implementingIntrospection.kind === TypeKind.INTERFACE\n    ) {\n      return [];\n    }\n\n    if (!implementingIntrospection.interfaces) {\n      const implementingIntrospectionStr = inspect(implementingIntrospection);\n      throw new Error(\n        `Introspection result missing interfaces: ${implementingIntrospectionStr}.`,\n      );\n    }\n\n    return implementingIntrospection.interfaces.map(getInterfaceType);\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    return new GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: () => buildImplementationsList(objectIntrospection),\n      fields: () => buildFieldDefMap(objectIntrospection),\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      interfaces: () => buildImplementationsList(interfaceIntrospection),\n      fields: () => buildFieldDefMap(interfaceIntrospection),\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      const unionIntrospectionStr = inspect(unionIntrospection);\n      throw new Error(\n        `Introspection result missing possibleTypes: ${unionIntrospectionStr}.`,\n      );\n    }\n\n    return new GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: () => unionIntrospection.possibleTypes.map(getObjectType),\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      const enumIntrospectionStr = inspect(enumIntrospection);\n      throw new Error(\n        `Introspection result missing enumValues: ${enumIntrospectionStr}.`,\n      );\n    }\n\n    return new GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: keyValMap(\n        enumIntrospection.enumValues,\n        (valueIntrospection) => valueIntrospection.name,\n        (valueIntrospection) => ({\n          description: valueIntrospection.description,\n          deprecationReason: valueIntrospection.deprecationReason,\n        }),\n      ),\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      const inputObjectIntrospectionStr = inspect(inputObjectIntrospection);\n      throw new Error(\n        `Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`,\n      );\n    }\n\n    return new GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields),\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error(\n        `Introspection result missing fields: ${inspect(typeIntrospection)}.`,\n      );\n    }\n\n    return keyValMap(\n      typeIntrospection.fields,\n      (fieldIntrospection) => fieldIntrospection.name,\n      buildField,\n    );\n  }\n\n  function buildField(fieldIntrospection) {\n    const type = getType(fieldIntrospection.type);\n\n    if (!isOutputType(type)) {\n      const typeStr = inspect(type);\n      throw new Error(\n        `Introspection must provide output type for fields, but received: ${typeStr}.`,\n      );\n    }\n\n    if (!fieldIntrospection.args) {\n      const fieldIntrospectionStr = inspect(fieldIntrospection);\n      throw new Error(\n        `Introspection result missing field args: ${fieldIntrospectionStr}.`,\n      );\n    }\n\n    return {\n      description: fieldIntrospection.description,\n      deprecationReason: fieldIntrospection.deprecationReason,\n      type,\n      args: buildInputValueDefMap(fieldIntrospection.args),\n    };\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return keyValMap(\n      inputValueIntrospections,\n      (inputValue) => inputValue.name,\n      buildInputValue,\n    );\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    const type = getType(inputValueIntrospection.type);\n\n    if (!isInputType(type)) {\n      const typeStr = inspect(type);\n      throw new Error(\n        `Introspection must provide input type for arguments, but received: ${typeStr}.`,\n      );\n    }\n\n    const defaultValue =\n      inputValueIntrospection.defaultValue != null\n        ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type)\n        : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type,\n      defaultValue,\n      deprecationReason: inputValueIntrospection.deprecationReason,\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      const directiveIntrospectionStr = inspect(directiveIntrospection);\n      throw new Error(\n        `Introspection result missing directive args: ${directiveIntrospectionStr}.`,\n      );\n    }\n\n    if (!directiveIntrospection.locations) {\n      const directiveIntrospectionStr = inspect(directiveIntrospection);\n      throw new Error(\n        `Introspection result missing directive locations: ${directiveIntrospectionStr}.`,\n      );\n    }\n\n    return new GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      isRepeatable: directiveIntrospection.isRepeatable,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args),\n    });\n  }\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../language/predicates.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport {\n  GraphQLDeprecatedDirective,\n  GraphQLDirective,\n  GraphQLSpecifiedByDirective,\n} from '../type/directives.mjs';\nimport {\n  introspectionTypes,\n  isIntrospectionType,\n} from '../type/introspection.mjs';\nimport {\n  isSpecifiedScalarType,\n  specifiedScalarTypes,\n} from '../type/scalars.mjs';\nimport { assertSchema, GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDLExtension } from '../validation/validate.mjs';\nimport { getDirectiveValues } from '../execution/values.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig\n    ? schema\n    : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions\n        ? existingTypeExtensions.concat([def])\n        : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n  if (\n    Object.keys(typeExtensionsMap).length === 0 &&\n    typeDefs.length === 0 &&\n    directiveDefs.length === 0 &&\n    schemaExtensions.length === 0 &&\n    schemaDef == null\n  ) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    var _stdTypeMap$name;\n\n    const name = typeNode.name.value;\n    typeMap[name] =\n      (_stdTypeMap$name = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name !== void 0\n        ? _stdTypeMap$name\n        : buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription:\n      schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions),\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description:\n      (_schemaDef = schemaDef) === null || _schemaDef === void 0\n        ? void 0\n        : (_schemaDef$descriptio = _schemaDef.description) === null ||\n          _schemaDef$descriptio === void 0\n        ? void 0\n        : _schemaDef$descriptio.value,\n    ...operationTypes,\n    types: Object.values(typeMap),\n    directives: [\n      ...schemaConfig.directives.map(replaceDirective),\n      ...directiveDefs.map(buildDirective),\n    ],\n    extensions: Object.create(null),\n    astNode:\n      (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0\n        ? _schemaDef2\n        : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid:\n      (_options$assumeValid =\n        options === null || options === void 0\n          ? void 0\n          : options.assumeValid) !== null && _options$assumeValid !== void 0\n        ? _options$assumeValid\n        : false,\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      args: mapValue(config.args, extendArg),\n    });\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    }\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co !== void 0\n        ? _typeExtensionsMap$co\n        : [];\n    return new GraphQLInputObjectType({\n      ...config,\n      fields: () => ({\n        ...mapValue(config.fields, (field) => ({\n          ...field,\n          type: replaceType(field.type),\n        })),\n        ...buildInputFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&\n      _typeExtensionsMap$ty !== void 0\n        ? _typeExtensionsMap$ty\n        : [];\n    return new GraphQLEnumType({\n      ...config,\n      values: { ...config.values, ...buildEnumValueMap(extensions) },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co2 !== void 0\n        ? _typeExtensionsMap$co2\n        : [];\n    let specifiedByURL = config.specifiedByURL;\n\n    for (const extensionNode of extensions) {\n      var _getSpecifiedByURL;\n\n      specifiedByURL =\n        (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null &&\n        _getSpecifiedByURL !== void 0\n          ? _getSpecifiedByURL\n          : specifiedByURL;\n    }\n\n    return new GraphQLScalarType({\n      ...config,\n      specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co3 !== void 0\n        ? _typeExtensionsMap$co3\n        : [];\n    return new GraphQLObjectType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co4 !== void 0\n        ? _typeExtensionsMap$co4\n        : [];\n    return new GraphQLInterfaceType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co5 !== void 0\n        ? _typeExtensionsMap$co5\n        : [];\n    return new GraphQLUnionType({\n      ...config,\n      types: () => [\n        ...type.getTypes().map(replaceNamedType),\n        ...buildUnionTypes(extensions),\n      ],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendField(field) {\n    return {\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && mapValue(field.args, extendArg),\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg, type: replaceType(arg.type) };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      var _node$operationTypes;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const operationTypesNodes =\n        /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null &&\n        _node$operationTypes !== void 0\n          ? _node$operationTypes\n          : [];\n\n      for (const operationType of operationTypesNodes) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        // @ts-expect-error\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    const name = node.name.value;\n    const type =\n      (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name2 !== void 0\n        ? _stdTypeMap$name2\n        : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new GraphQLDirective({\n      name: node.name.value,\n      description:\n        (_node$description = node.description) === null ||\n        _node$description === void 0\n          ? void 0\n          : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(({ value }) => value),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node,\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const nodeFields =\n        /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0\n          ? _node$fields\n          : [];\n\n      for (const field of nodeFields) {\n        var _field$description;\n\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description:\n            (_field$description = field.description) === null ||\n            _field$description === void 0\n              ? void 0\n              : _field$description.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    const argsNodes =\n      /* c8 ignore next */\n      args !== null && args !== void 0 ? args : [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      var _arg$description;\n\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description:\n          (_arg$description = arg.description) === null ||\n          _arg$description === void 0\n            ? void 0\n            : _arg$description.value,\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg,\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields2;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const fieldsNodes =\n        /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0\n          ? _node$fields2\n          : [];\n\n      for (const field of fieldsNodes) {\n        var _field$description2;\n\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description:\n            (_field$description2 = field.description) === null ||\n            _field$description2 === void 0\n              ? void 0\n              : _field$description2.value,\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$values;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const valuesNodes =\n        /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0\n          ? _node$values\n          : [];\n\n      for (const value of valuesNodes) {\n        var _value$description;\n\n        enumValueMap[value.name.value] = {\n          description:\n            (_value$description = value.description) === null ||\n            _value$description === void 0\n              ? void 0\n              : _value$description.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value,\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$interfaces$map, _node$interfaces;\n\n        return (\n          /* c8 ignore next */\n          (_node$interfaces$map =\n            (_node$interfaces = node.interfaces) === null ||\n            _node$interfaces === void 0\n              ? void 0\n              : _node$interfaces.map(getNamedType)) !== null &&\n            _node$interfaces$map !== void 0\n            ? _node$interfaces$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$types$map, _node$types;\n\n        return (\n          /* c8 ignore next */\n          (_node$types$map =\n            (_node$types = node.types) === null || _node$types === void 0\n              ? void 0\n              : _node$types.map(getNamedType)) !== null &&\n            _node$types$map !== void 0\n            ? _node$types$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    const name = astNode.name.value;\n    const extensionASTNodes =\n      (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&\n      _typeExtensionsMap$na !== void 0\n        ? _typeExtensionsMap$na\n        : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION: {\n        var _astNode$description;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLObjectType({\n          name,\n          description:\n            (_astNode$description = astNode.description) === null ||\n            _astNode$description === void 0\n              ? void 0\n              : _astNode$description.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INTERFACE_TYPE_DEFINITION: {\n        var _astNode$description2;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInterfaceType({\n          name,\n          description:\n            (_astNode$description2 = astNode.description) === null ||\n            _astNode$description2 === void 0\n              ? void 0\n              : _astNode$description2.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.ENUM_TYPE_DEFINITION: {\n        var _astNode$description3;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLEnumType({\n          name,\n          description:\n            (_astNode$description3 = astNode.description) === null ||\n            _astNode$description3 === void 0\n              ? void 0\n              : _astNode$description3.value,\n          values: buildEnumValueMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.UNION_TYPE_DEFINITION: {\n        var _astNode$description4;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLUnionType({\n          name,\n          description:\n            (_astNode$description4 = astNode.description) === null ||\n            _astNode$description4 === void 0\n              ? void 0\n              : _astNode$description4.value,\n          types: () => buildUnionTypes(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.SCALAR_TYPE_DEFINITION: {\n        var _astNode$description5;\n\n        return new GraphQLScalarType({\n          name,\n          description:\n            (_astNode$description5 = astNode.description) === null ||\n            _astNode$description5 === void 0\n              ? void 0\n              : _astNode$description5.value,\n          specifiedByURL: getSpecifiedByURL(astNode),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION: {\n        var _astNode$description6;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInputObjectType({\n          name,\n          description:\n            (_astNode$description6 = astNode.description) === null ||\n            _astNode$description6 === void 0\n              ? void 0\n              : _astNode$description6.value,\n          fields: () => buildInputFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n    }\n  }\n}\nconst stdTypeMap = keyMap(\n  [...specifiedScalarTypes, ...introspectionTypes],\n  (type) => type.name,\n);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0\n    ? void 0\n    : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\nfunction getSpecifiedByURL(node) {\n  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0\n    ? void 0\n    : specifiedBy.url;\n}\n", "import { devAssert } from '../jsutils/devAssert.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { parse } from '../language/parser.mjs';\nimport { specifiedDirectives } from '../type/directives.mjs';\nimport { GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDL } from '../validation/validate.mjs';\nimport { extendSchemaImpl } from './extendSchema.mjs';\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query,\n * Mutation and Subscription.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nexport function buildASTSchema(documentAST, options) {\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDL(documentAST);\n  }\n\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: Object.create(null),\n    extensionASTNodes: [],\n    assumeValid: false,\n  };\n  const config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          // @ts-expect-error validated in `validateSchema`\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          // @ts-expect-error validated in `validateSchema`\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          // @ts-expect-error validated in `validateSchema`\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  const directives = [\n    ...config.directives, // If specified directives were not explicitly declared, add them.\n    ...specifiedDirectives.filter((stdDirective) =>\n      config.directives.every(\n        (directive) => directive.name !== stdDirective.name,\n      ),\n    ),\n  ];\n  return new GraphQLSchema({ ...config, directives });\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nexport function buildSchema(source, options) {\n  const document = parse(source, {\n    noLocation:\n      options === null || options === void 0 ? void 0 : options.noLocation,\n    allowLegacyFragmentVariables:\n      options === null || options === void 0\n        ? void 0\n        : options.allowLegacyFragmentVariables,\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL:\n      options === null || options === void 0 ? void 0 : options.assumeValidSDL,\n    assumeValid:\n      options === null || options === void 0 ? void 0 : options.assumeValid,\n  });\n}\n", "// Produce the GraphQL query recommended for a full schema introspection.\nexport { getIntrospectionQuery } from './getIntrospectionQuery.mjs';\n// Gets the target Operation from a Document.\nexport { getOperationAST } from './getOperationAST.mjs'; // Gets the Type for the target Operation AST.\n\nexport { getOperationRootType } from './getOperationRootType.mjs'; // Convert a GraphQLSchema to an IntrospectionQuery.\n\nexport { introspectionFromSchema } from './introspectionFromSchema.mjs'; // Build a GraphQLSchema from an introspection result.\n\nexport { buildClientSchema } from './buildClientSchema.mjs'; // Build a GraphQLSchema from GraphQL Schema language.\n\nexport { buildASTSchema, buildSchema } from './buildASTSchema.mjs';\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema } from './extendSchema.mjs'; // Sort a GraphQLSchema.\n\nexport { lexicographicSortSchema } from './lexicographicSortSchema.mjs'; // Print a GraphQLSchema to GraphQL Schema language.\n\nexport {\n  printSchema,\n  printType,\n  printIntrospectionSchema,\n} from './printSchema.mjs'; // Create a GraphQLType from a GraphQL language AST.\n\nexport { typeFromAST } from './typeFromAST.mjs'; // Create a JavaScript value from a GraphQL language AST with a type.\n\nexport { valueFromAST } from './valueFromAST.mjs'; // Create a JavaScript value from a GraphQL language AST without a type.\n\nexport { valueFromASTUntyped } from './valueFromASTUntyped.mjs'; // Create a GraphQL language AST from a JavaScript value.\n\nexport { astFromValue } from './astFromValue.mjs'; // A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\n\nexport { TypeInfo, visitWithTypeInfo } from './TypeInfo.mjs'; // Coerces a JavaScript value to a GraphQL type, or produces errors.\n\nexport { coerceInputValue } from './coerceInputValue.mjs'; // Concatenates multiple AST together.\n\nexport { concatAST } from './concatAST.mjs'; // Separates an AST into an AST per Operation.\n\nexport { separateOperations } from './separateOperations.mjs'; // Strips characters that are not significant to the validity or execution of a GraphQL document.\n\nexport { stripIgnoredCharacters } from './stripIgnoredCharacters.mjs'; // Comparators for types\n\nexport {\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap,\n} from './typeComparators.mjs'; // Asserts that a string is a valid GraphQL name\n\nexport { assertValidName, isValidNameError } from './assertValidName.mjs'; // Compares two GraphQLSchemas and detects breaking changes.\n\nexport {\n  BreakingChangeType,\n  DangerousChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n} from './findBreakingChanges.mjs';\n", "/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n * ```ts\n * import { parse } from 'graphql';\n * import { parse } from 'graphql/language';\n * ```\n *\n * @packageDocumentation\n */\n// The GraphQL.js version info.\nexport { version, versionInfo } from './version.mjs'; // The primary entry point into fulfilling a GraphQL request.\n\nexport { graphql, graphqlSync } from './graphql.mjs'; // Create and operate on GraphQL type definitions and schema.\n\nexport {\n  resolveObjMapThunk,\n  resolveReadonlyArrayThunk, // Definitions\n  GraphQLSchema,\n  GraphQLDirective,\n  GraphQLScalarType,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLList,\n  GraphQLNonNull, // Standard GraphQL Scalars\n  specifiedScalarTypes,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLString,\n  GraphQLBoolean,\n  GraphQLID, // Int boundaries constants\n  GRAPHQL_MAX_INT,\n  GRAPHQL_MIN_INT, // Built-in Directives defined by the Spec\n  specifiedDirectives,\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective, // \"Enum\" of Type Kinds\n  TypeKind, // Constant Deprecation Reason\n  DEFAULT_DEPRECATION_REASON, // GraphQL Types for introspection.\n  introspectionTypes,\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind, // Meta-field definitions.\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef, // Predicates\n  isSchema,\n  isDirective,\n  isType,\n  isScalarType,\n  isObjectType,\n  isInterfaceType,\n  isUnionType,\n  isEnumType,\n  isInputObjectType,\n  isListType,\n  isNonNullType,\n  isInputType,\n  isOutputType,\n  isLeafType,\n  isCompositeType,\n  isAbstractType,\n  isWrappingType,\n  isNullableType,\n  isNamedType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  isSpecifiedDirective, // Assertions\n  assertSchema,\n  assertDirective,\n  assertType,\n  assertScalarType,\n  assertObjectType,\n  assertInterfaceType,\n  assertUnionType,\n  assertEnumType,\n  assertInputObjectType,\n  assertListType,\n  assertNonNullType,\n  assertInputType,\n  assertOutputType,\n  assertLeafType,\n  assertCompositeType,\n  assertAbstractType,\n  assertWrappingType,\n  assertNullableType,\n  assertNamedType, // Un-modifiers\n  getNullableType,\n  getNamedType, // Validate GraphQL schema.\n  validateSchema,\n  assertValidSchema, // Upholds the spec rules about naming.\n  assertName,\n  assertEnumValueName,\n} from './type/index.mjs';\n// Parse and operate on GraphQL language source files.\nexport {\n  Token,\n  Source,\n  Location,\n  OperationTypeNode,\n  getLocation, // Print source location.\n  printLocation,\n  printSourceLocation, // Lex\n  Lexer,\n  TokenKind, // Parse\n  parse,\n  parseValue,\n  parseConstValue,\n  parseType, // Print\n  print, // Visit\n  visit,\n  visitInParallel,\n  getVisitFn,\n  getEnterLeaveForKind,\n  BREAK,\n  Kind,\n  DirectiveLocation, // Predicates\n  isDefinitionNode,\n  isExecutableDefinitionNode,\n  isSelectionNode,\n  isValueNode,\n  isConstValueNode,\n  isTypeNode,\n  isTypeSystemDefinitionNode,\n  isTypeDefinitionNode,\n  isTypeSystemExtensionNode,\n  isTypeExtensionNode,\n} from './language/index.mjs';\n// Execute GraphQL queries.\nexport {\n  execute,\n  executeSync,\n  defaultFieldResolver,\n  defaultTypeResolver,\n  responsePathAsArray,\n  getArgumentValues,\n  getVariableValues,\n  getDirectiveValues,\n  subscribe,\n  createSourceEventStream,\n} from './execution/index.mjs';\n// Validate GraphQL documents.\nexport {\n  validate,\n  ValidationContext, // All validation rules in the GraphQL Specification.\n  specifiedRules, // Individual validation rules.\n  ExecutableDefinitionsRule,\n  FieldsOnCorrectTypeRule,\n  FragmentsOnCompositeTypesRule,\n  KnownArgumentNamesRule,\n  KnownDirectivesRule,\n  KnownFragmentNamesRule,\n  KnownTypeNamesRule,\n  LoneAnonymousOperationRule,\n  NoFragmentCyclesRule,\n  NoUndefinedVariablesRule,\n  NoUnusedFragmentsRule,\n  NoUnusedVariablesRule,\n  OverlappingFieldsCanBeMergedRule,\n  PossibleFragmentSpreadsRule,\n  ProvidedRequiredArgumentsRule,\n  ScalarLeafsRule,\n  SingleFieldSubscriptionsRule,\n  UniqueArgumentNamesRule,\n  UniqueDirectivesPerLocationRule,\n  UniqueFragmentNamesRule,\n  UniqueInputFieldNamesRule,\n  UniqueOperationNamesRule,\n  UniqueVariableNamesRule,\n  ValuesOfCorrectTypeRule,\n  VariablesAreInputTypesRule,\n  VariablesInAllowedPositionRule, // SDL-specific validation rules\n  LoneSchemaDefinitionRule,\n  UniqueOperationTypesRule,\n  UniqueTypeNamesRule,\n  UniqueEnumValueNamesRule,\n  UniqueFieldDefinitionNamesRule,\n  UniqueArgumentDefinitionNamesRule,\n  UniqueDirectiveNamesRule,\n  PossibleTypeExtensionsRule, // Custom validation rules\n  NoDeprecatedCustomRule,\n  NoSchemaIntrospectionCustomRule,\n} from './validation/index.mjs';\n// Create, format, and print GraphQL errors.\nexport {\n  GraphQLError,\n  syntaxError,\n  locatedError,\n  printError,\n  formatError,\n} from './error/index.mjs';\n// Utilities for operating on GraphQL type schema and parsed sources.\nexport {\n  // Produce the GraphQL query recommended for a full schema introspection.\n  // Accepts optional IntrospectionOptions.\n  getIntrospectionQuery, // Gets the target Operation from a Document.\n  getOperationAST, // Gets the Type for the target Operation AST.\n  getOperationRootType, // Convert a GraphQLSchema to an IntrospectionQuery.\n  introspectionFromSchema, // Build a GraphQLSchema from an introspection result.\n  buildClientSchema, // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\n  buildASTSchema, // Build a GraphQLSchema from a GraphQL schema language document.\n  buildSchema, // Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\n  extendSchema, // Sort a GraphQLSchema.\n  lexicographicSortSchema, // Print a GraphQLSchema to GraphQL Schema language.\n  printSchema, // Print a GraphQLType to GraphQL Schema language.\n  printType, // Prints the built-in introspection schema in the Schema Language format.\n  printIntrospectionSchema, // Create a GraphQLType from a GraphQL language AST.\n  typeFromAST, // Create a JavaScript value from a GraphQL language AST with a Type.\n  valueFromAST, // Create a JavaScript value from a GraphQL language AST without a Type.\n  valueFromASTUntyped, // Create a GraphQL language AST from a JavaScript value.\n  astFromValue, // A helper to use within recursive-descent visitors which need to be aware of the GraphQL type system.\n  TypeInfo,\n  visitWithTypeInfo, // Coerces a JavaScript value to a GraphQL type, or produces errors.\n  coerceInputValue, // Concatenates multiple AST together.\n  concatAST, // Separates an AST into an AST per Operation.\n  separateOperations, // Strips characters that are not significant to the validity or execution of a GraphQL document.\n  stripIgnoredCharacters, // Comparators for types\n  isEqualType,\n  isTypeSubTypeOf,\n  doTypesOverlap, // Asserts a string is a valid GraphQL name.\n  assertValidName, // Determine if a string is a valid GraphQL name.\n  isValidNameError, // Compares two GraphQLSchemas and detects breaking changes.\n  BreakingChangeType,\n  DangerousChangeType,\n  findBreakingChanges,\n  findDangerousChanges,\n} from './utilities/index.mjs';\n", "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=t||self)[\"tiny-lru\"]=e()}(this,(function(){\"use strict\";class t{constructor(t=0,e=0){this.first=null,this.items=Object.create(null),this.last=null,this.max=t,this.size=0,this.ttl=e}has(t){return t in this.items}clear(){return this.first=null,this.items=Object.create(null),this.last=null,this.size=0,this}delete(t){if(this.has(t)){const e=this.items[t];delete this.items[t],this.size--,null!==e.prev&&(e.prev.next=e.next),null!==e.next&&(e.next.prev=e.prev),this.first===e&&(this.first=e.next),this.last===e&&(this.last=e.prev)}return this}evict(){const t=this.first;return delete this.items[t.key],this.first=t.next,this.first.prev=null,this.size--,this}get(t){let e;if(this.has(t)){const s=this.items[t];this.ttl>0&&s.expiry<=(new Date).getTime()?this.delete(t):(e=s.value,this.set(t,e,!0))}return e}keys(){return Object.keys(this.items)}set(t,e,s=!1){let i;if(s||this.has(t)){if(i=this.items[t],i.value=e,!1===s&&(i.expiry=this.ttl>0?(new Date).getTime()+this.ttl:this.ttl),this.last!==i){const t=this.last,e=i.next,s=i.prev;this.first===i&&(this.first=i.next),i.next=null,i.prev=this.last,t.next=i,null!==s&&(s.next=e),null!==e&&(e.prev=s)}}else this.max>0&&this.size===this.max&&this.evict(),i=this.items[t]={expiry:this.ttl>0?(new Date).getTime()+this.ttl:this.ttl,key:t,prev:this.last,next:null,value:e},1==++this.size?this.first=i:this.last.next=i;return this.last=i,this}}return function(e=1e3,s=0){if(isNaN(e)||e<0)throw new TypeError(\"Invalid max value\");if(isNaN(s)||s<0)throw new TypeError(\"Invalid ttl value\");return new t(e,s)}}));", "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=t||self)[\"tiny-lru\"]=e()}(this,(function(){\"use strict\";class t{constructor(t=0,e=0){this.first=null,this.items=Object.create(null),this.last=null,this.max=t,this.size=0,this.ttl=e}has(t){return t in this.items}clear(){return this.first=null,this.items=Object.create(null),this.last=null,this.size=0,this}delete(t){if(this.has(t)){const e=this.items[t];delete this.items[t],this.size--,null!==e.prev&&(e.prev.next=e.next),null!==e.next&&(e.next.prev=e.prev),this.first===e&&(this.first=e.next),this.last===e&&(this.last=e.prev)}return this}evict(){const t=this.first;return delete this.items[t.key],this.first=t.next,this.first.prev=null,this.size--,this}get(t){let e;if(this.has(t)){const s=this.items[t];this.ttl>0&&s.expiry<=(new Date).getTime()?this.delete(t):(e=s.value,this.set(t,e,!0))}return e}keys(){return Object.keys(this.items)}set(t,e,s=!1){let i;if(s||this.has(t)){if(i=this.items[t],i.value=e,!1===s&&(i.expiry=this.ttl>0?(new Date).getTime()+this.ttl:this.ttl),this.last!==i){const t=this.last,e=i.next,s=i.prev;this.first===i&&(this.first=i.next),i.next=null,i.prev=this.last,t.next=i,null!==s&&(s.next=e),null!==e&&(e.prev=s)}}else this.max>0&&this.size===this.max&&this.evict(),i=this.items[t]={expiry:this.ttl>0?(new Date).getTime()+this.ttl:this.ttl,key:t,prev:this.last,next:null,value:e},1==++this.size?this.first=i:this.last.next=i;return this.last=i,this}}return function(e=1e3,s=0){if(isNaN(e)||e<0)throw new TypeError(\"Invalid max value\");if(isNaN(s)||s<0)throw new TypeError(\"Invalid ttl value\");return new t(e,s)}}));", "module.exports.fetch = globalThis.fetch; // To enable: import {fetch} from 'cross-fetch'\nmodule.exports.Headers = globalThis.Headers;\nmodule.exports.Request = globalThis.Request;\nmodule.exports.Response = globalThis.Response;\nmodule.exports.FormData = globalThis.FormData;\nmodule.exports.AbortController = globalThis.AbortController;\nmodule.exports.ReadableStream = globalThis.ReadableStream;\nmodule.exports.WritableStream = globalThis.WritableStream;\nmodule.exports.TransformStream = globalThis.TransformStream;\nmodule.exports.Blob = globalThis.Blob;\nmodule.exports.File = globalThis.File;\nmodule.exports.crypto = globalThis.crypto;\nmodule.exports.create = () => globalThis;\n", "'use strict';\n// rfc7231 6.1\nconst statusCodeCacheableByDefault = new Set([\n    200,\n    203,\n    204,\n    206,\n    300,\n    301,\n    404,\n    405,\n    410,\n    414,\n    501,\n]);\n\n// This implementation does not understand partial responses (206)\nconst understoodStatuses = new Set([\n    200,\n    203,\n    204,\n    300,\n    301,\n    302,\n    303,\n    307,\n    308,\n    404,\n    405,\n    410,\n    414,\n    501,\n]);\n\nconst errorStatusCodes = new Set([\n    500,\n    502,\n    503, \n    504,\n]);\n\nconst hopByHopHeaders = {\n    date: true, // included, because we add Age update Date\n    connection: true,\n    'keep-alive': true,\n    'proxy-authenticate': true,\n    'proxy-authorization': true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n};\n\nconst excludedFromRevalidationUpdate = {\n    // Since the old body is reused, it doesn't make sense to change properties of the body\n    'content-length': true,\n    'content-encoding': true,\n    'transfer-encoding': true,\n    'content-range': true,\n};\n\nfunction toNumberOrZero(s) {\n    const n = parseInt(s, 10);\n    return isFinite(n) ? n : 0;\n}\n\n// RFC 5861\nfunction isErrorResponse(response) {\n    // consider undefined response as faulty\n    if(!response) {\n        return true\n    }\n    return errorStatusCodes.has(response.status);\n}\n\nfunction parseCacheControl(header) {\n    const cc = {};\n    if (!header) return cc;\n\n    // TODO: When there is more than one value present for a given directive (e.g., two Expires header fields, multiple Cache-Control: max-age directives),\n    // the directive's value is considered invalid. Caches are encouraged to consider responses that have invalid freshness information to be stale\n    const parts = header.trim().split(/\\s*,\\s*/); // TODO: lame parsing\n    for (const part of parts) {\n        const [k, v] = part.split(/\\s*=\\s*/, 2);\n        cc[k] = v === undefined ? true : v.replace(/^\"|\"$/g, ''); // TODO: lame unquoting\n    }\n\n    return cc;\n}\n\nfunction formatCacheControl(cc) {\n    let parts = [];\n    for (const k in cc) {\n        const v = cc[k];\n        parts.push(v === true ? k : k + '=' + v);\n    }\n    if (!parts.length) {\n        return undefined;\n    }\n    return parts.join(', ');\n}\n\nmodule.exports = class CachePolicy {\n    constructor(\n        req,\n        res,\n        {\n            shared,\n            cacheHeuristic,\n            immutableMinTimeToLive,\n            ignoreCargoCult,\n            _fromObject,\n        } = {}\n    ) {\n        if (_fromObject) {\n            this._fromObject(_fromObject);\n            return;\n        }\n\n        if (!res || !res.headers) {\n            throw Error('Response headers missing');\n        }\n        this._assertRequestHasHeaders(req);\n\n        this._responseTime = this.now();\n        this._isShared = shared !== false;\n        this._cacheHeuristic =\n            undefined !== cacheHeuristic ? cacheHeuristic : 0.1; // 10% matches IE\n        this._immutableMinTtl =\n            undefined !== immutableMinTimeToLive\n                ? immutableMinTimeToLive\n                : 24 * 3600 * 1000;\n\n        this._status = 'status' in res ? res.status : 200;\n        this._resHeaders = res.headers;\n        this._rescc = parseCacheControl(res.headers['cache-control']);\n        this._method = 'method' in req ? req.method : 'GET';\n        this._url = req.url;\n        this._host = req.headers.host;\n        this._noAuthorization = !req.headers.authorization;\n        this._reqHeaders = res.headers.vary ? req.headers : null; // Don't keep all request headers if they won't be used\n        this._reqcc = parseCacheControl(req.headers['cache-control']);\n\n        // Assume that if someone uses legacy, non-standard uncecessary options they don't understand caching,\n        // so there's no point stricly adhering to the blindly copy&pasted directives.\n        if (\n            ignoreCargoCult &&\n            'pre-check' in this._rescc &&\n            'post-check' in this._rescc\n        ) {\n            delete this._rescc['pre-check'];\n            delete this._rescc['post-check'];\n            delete this._rescc['no-cache'];\n            delete this._rescc['no-store'];\n            delete this._rescc['must-revalidate'];\n            this._resHeaders = Object.assign({}, this._resHeaders, {\n                'cache-control': formatCacheControl(this._rescc),\n            });\n            delete this._resHeaders.expires;\n            delete this._resHeaders.pragma;\n        }\n\n        // When the Cache-Control header field is not present in a request, caches MUST consider the no-cache request pragma-directive\n        // as having the same effect as if \"Cache-Control: no-cache\" were present (see Section 5.2.1).\n        if (\n            res.headers['cache-control'] == null &&\n            /no-cache/.test(res.headers.pragma)\n        ) {\n            this._rescc['no-cache'] = true;\n        }\n    }\n\n    now() {\n        return Date.now();\n    }\n\n    storable() {\n        // The \"no-store\" request directive indicates that a cache MUST NOT store any part of either this request or any response to it.\n        return !!(\n            !this._reqcc['no-store'] &&\n            // A cache MUST NOT store a response to any request, unless:\n            // The request method is understood by the cache and defined as being cacheable, and\n            ('GET' === this._method ||\n                'HEAD' === this._method ||\n                ('POST' === this._method && this._hasExplicitExpiration())) &&\n            // the response status code is understood by the cache, and\n            understoodStatuses.has(this._status) &&\n            // the \"no-store\" cache directive does not appear in request or response header fields, and\n            !this._rescc['no-store'] &&\n            // the \"private\" response directive does not appear in the response, if the cache is shared, and\n            (!this._isShared || !this._rescc.private) &&\n            // the Authorization header field does not appear in the request, if the cache is shared,\n            (!this._isShared ||\n                this._noAuthorization ||\n                this._allowsStoringAuthenticated()) &&\n            // the response either:\n            // contains an Expires header field, or\n            (this._resHeaders.expires ||\n                // contains a max-age response directive, or\n                // contains a s-maxage response directive and the cache is shared, or\n                // contains a public response directive.\n                this._rescc['max-age'] ||\n                (this._isShared && this._rescc['s-maxage']) ||\n                this._rescc.public ||\n                // has a status code that is defined as cacheable by default\n                statusCodeCacheableByDefault.has(this._status))\n        );\n    }\n\n    _hasExplicitExpiration() {\n        // 4.2.1 Calculating Freshness Lifetime\n        return (\n            (this._isShared && this._rescc['s-maxage']) ||\n            this._rescc['max-age'] ||\n            this._resHeaders.expires\n        );\n    }\n\n    _assertRequestHasHeaders(req) {\n        if (!req || !req.headers) {\n            throw Error('Request headers missing');\n        }\n    }\n\n    satisfiesWithoutRevalidation(req) {\n        this._assertRequestHasHeaders(req);\n\n        // When presented with a request, a cache MUST NOT reuse a stored response, unless:\n        // the presented request does not contain the no-cache pragma (Section 5.4), nor the no-cache cache directive,\n        // unless the stored response is successfully validated (Section 4.3), and\n        const requestCC = parseCacheControl(req.headers['cache-control']);\n        if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {\n            return false;\n        }\n\n        if (requestCC['max-age'] && this.age() > requestCC['max-age']) {\n            return false;\n        }\n\n        if (\n            requestCC['min-fresh'] &&\n            this.timeToLive() < 1000 * requestCC['min-fresh']\n        ) {\n            return false;\n        }\n\n        // the stored response is either:\n        // fresh, or allowed to be served stale\n        if (this.stale()) {\n            const allowsStale =\n                requestCC['max-stale'] &&\n                !this._rescc['must-revalidate'] &&\n                (true === requestCC['max-stale'] ||\n                    requestCC['max-stale'] > this.age() - this.maxAge());\n            if (!allowsStale) {\n                return false;\n            }\n        }\n\n        return this._requestMatches(req, false);\n    }\n\n    _requestMatches(req, allowHeadMethod) {\n        // The presented effective request URI and that of the stored response match, and\n        return (\n            (!this._url || this._url === req.url) &&\n            this._host === req.headers.host &&\n            // the request method associated with the stored response allows it to be used for the presented request, and\n            (!req.method ||\n                this._method === req.method ||\n                (allowHeadMethod && 'HEAD' === req.method)) &&\n            // selecting header fields nominated by the stored response (if any) match those presented, and\n            this._varyMatches(req)\n        );\n    }\n\n    _allowsStoringAuthenticated() {\n        //  following Cache-Control response directives (Section 5.2.2) have such an effect: must-revalidate, public, and s-maxage.\n        return (\n            this._rescc['must-revalidate'] ||\n            this._rescc.public ||\n            this._rescc['s-maxage']\n        );\n    }\n\n    _varyMatches(req) {\n        if (!this._resHeaders.vary) {\n            return true;\n        }\n\n        // A Vary header field-value of \"*\" always fails to match\n        if (this._resHeaders.vary === '*') {\n            return false;\n        }\n\n        const fields = this._resHeaders.vary\n            .trim()\n            .toLowerCase()\n            .split(/\\s*,\\s*/);\n        for (const name of fields) {\n            if (req.headers[name] !== this._reqHeaders[name]) return false;\n        }\n        return true;\n    }\n\n    _copyWithoutHopByHopHeaders(inHeaders) {\n        const headers = {};\n        for (const name in inHeaders) {\n            if (hopByHopHeaders[name]) continue;\n            headers[name] = inHeaders[name];\n        }\n        // 9.1.  Connection\n        if (inHeaders.connection) {\n            const tokens = inHeaders.connection.trim().split(/\\s*,\\s*/);\n            for (const name of tokens) {\n                delete headers[name];\n            }\n        }\n        if (headers.warning) {\n            const warnings = headers.warning.split(/,/).filter(warning => {\n                return !/^\\s*1[0-9][0-9]/.test(warning);\n            });\n            if (!warnings.length) {\n                delete headers.warning;\n            } else {\n                headers.warning = warnings.join(',').trim();\n            }\n        }\n        return headers;\n    }\n\n    responseHeaders() {\n        const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);\n        const age = this.age();\n\n        // A cache SHOULD generate 113 warning if it heuristically chose a freshness\n        // lifetime greater than 24 hours and the response's age is greater than 24 hours.\n        if (\n            age > 3600 * 24 &&\n            !this._hasExplicitExpiration() &&\n            this.maxAge() > 3600 * 24\n        ) {\n            headers.warning =\n                (headers.warning ? `${headers.warning}, ` : '') +\n                '113 - \"rfc7234 5.5.4\"';\n        }\n        headers.age = `${Math.round(age)}`;\n        headers.date = new Date(this.now()).toUTCString();\n        return headers;\n    }\n\n    /**\n     * Value of the Date response header or current time if Date was invalid\n     * @return timestamp\n     */\n    date() {\n        const serverDate = Date.parse(this._resHeaders.date);\n        if (isFinite(serverDate)) {\n            return serverDate;\n        }\n        return this._responseTime;\n    }\n\n    /**\n     * Value of the Age header, in seconds, updated for the current time.\n     * May be fractional.\n     *\n     * @return Number\n     */\n    age() {\n        let age = this._ageValue();\n\n        const residentTime = (this.now() - this._responseTime) / 1000;\n        return age + residentTime;\n    }\n\n    _ageValue() {\n        return toNumberOrZero(this._resHeaders.age);\n    }\n\n    /**\n     * Value of applicable max-age (or heuristic equivalent) in seconds. This counts since response's `Date`.\n     *\n     * For an up-to-date value, see `timeToLive()`.\n     *\n     * @return Number\n     */\n    maxAge() {\n        if (!this.storable() || this._rescc['no-cache']) {\n            return 0;\n        }\n\n        // Shared responses with cookies are cacheable according to the RFC, but IMHO it'd be unwise to do so by default\n        // so this implementation requires explicit opt-in via public header\n        if (\n            this._isShared &&\n            (this._resHeaders['set-cookie'] &&\n                !this._rescc.public &&\n                !this._rescc.immutable)\n        ) {\n            return 0;\n        }\n\n        if (this._resHeaders.vary === '*') {\n            return 0;\n        }\n\n        if (this._isShared) {\n            if (this._rescc['proxy-revalidate']) {\n                return 0;\n            }\n            // if a response includes the s-maxage directive, a shared cache recipient MUST ignore the Expires field.\n            if (this._rescc['s-maxage']) {\n                return toNumberOrZero(this._rescc['s-maxage']);\n            }\n        }\n\n        // If a response includes a Cache-Control field with the max-age directive, a recipient MUST ignore the Expires field.\n        if (this._rescc['max-age']) {\n            return toNumberOrZero(this._rescc['max-age']);\n        }\n\n        const defaultMinTtl = this._rescc.immutable ? this._immutableMinTtl : 0;\n\n        const serverDate = this.date();\n        if (this._resHeaders.expires) {\n            const expires = Date.parse(this._resHeaders.expires);\n            // A cache recipient MUST interpret invalid date formats, especially the value \"0\", as representing a time in the past (i.e., \"already expired\").\n            if (Number.isNaN(expires) || expires < serverDate) {\n                return 0;\n            }\n            return Math.max(defaultMinTtl, (expires - serverDate) / 1000);\n        }\n\n        if (this._resHeaders['last-modified']) {\n            const lastModified = Date.parse(this._resHeaders['last-modified']);\n            if (isFinite(lastModified) && serverDate > lastModified) {\n                return Math.max(\n                    defaultMinTtl,\n                    ((serverDate - lastModified) / 1000) * this._cacheHeuristic\n                );\n            }\n        }\n\n        return defaultMinTtl;\n    }\n\n    timeToLive() {\n        const age = this.maxAge() - this.age();\n        const staleIfErrorAge = age + toNumberOrZero(this._rescc['stale-if-error']);\n        const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc['stale-while-revalidate']);\n        return Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000;\n    }\n\n    stale() {\n        return this.maxAge() <= this.age();\n    }\n\n    _useStaleIfError() {\n        return this.maxAge() + toNumberOrZero(this._rescc['stale-if-error']) > this.age();\n    }\n\n    useStaleWhileRevalidate() {\n        return this.maxAge() + toNumberOrZero(this._rescc['stale-while-revalidate']) > this.age();\n    }\n\n    static fromObject(obj) {\n        return new this(undefined, undefined, { _fromObject: obj });\n    }\n\n    _fromObject(obj) {\n        if (this._responseTime) throw Error('Reinitialized');\n        if (!obj || obj.v !== 1) throw Error('Invalid serialization');\n\n        this._responseTime = obj.t;\n        this._isShared = obj.sh;\n        this._cacheHeuristic = obj.ch;\n        this._immutableMinTtl =\n            obj.imm !== undefined ? obj.imm : 24 * 3600 * 1000;\n        this._status = obj.st;\n        this._resHeaders = obj.resh;\n        this._rescc = obj.rescc;\n        this._method = obj.m;\n        this._url = obj.u;\n        this._host = obj.h;\n        this._noAuthorization = obj.a;\n        this._reqHeaders = obj.reqh;\n        this._reqcc = obj.reqcc;\n    }\n\n    toObject() {\n        return {\n            v: 1,\n            t: this._responseTime,\n            sh: this._isShared,\n            ch: this._cacheHeuristic,\n            imm: this._immutableMinTtl,\n            st: this._status,\n            resh: this._resHeaders,\n            rescc: this._rescc,\n            m: this._method,\n            u: this._url,\n            h: this._host,\n            a: this._noAuthorization,\n            reqh: this._reqHeaders,\n            reqcc: this._reqcc,\n        };\n    }\n\n    /**\n     * Headers for sending to the origin server to revalidate stale response.\n     * Allows server to return 304 to allow reuse of the previous response.\n     *\n     * Hop by hop headers are always stripped.\n     * Revalidation headers may be added or removed, depending on request.\n     */\n    revalidationHeaders(incomingReq) {\n        this._assertRequestHasHeaders(incomingReq);\n        const headers = this._copyWithoutHopByHopHeaders(incomingReq.headers);\n\n        // This implementation does not understand range requests\n        delete headers['if-range'];\n\n        if (!this._requestMatches(incomingReq, true) || !this.storable()) {\n            // revalidation allowed via HEAD\n            // not for the same resource, or wasn't allowed to be cached anyway\n            delete headers['if-none-match'];\n            delete headers['if-modified-since'];\n            return headers;\n        }\n\n        /* MUST send that entity-tag in any cache validation request (using If-Match or If-None-Match) if an entity-tag has been provided by the origin server. */\n        if (this._resHeaders.etag) {\n            headers['if-none-match'] = headers['if-none-match']\n                ? `${headers['if-none-match']}, ${this._resHeaders.etag}`\n                : this._resHeaders.etag;\n        }\n\n        // Clients MAY issue simple (non-subrange) GET requests with either weak validators or strong validators. Clients MUST NOT use weak validators in other forms of request.\n        const forbidsWeakValidators =\n            headers['accept-ranges'] ||\n            headers['if-match'] ||\n            headers['if-unmodified-since'] ||\n            (this._method && this._method != 'GET');\n\n        /* SHOULD send the Last-Modified value in non-subrange cache validation requests (using If-Modified-Since) if only a Last-Modified value has been provided by the origin server.\n        Note: This implementation does not understand partial responses (206) */\n        if (forbidsWeakValidators) {\n            delete headers['if-modified-since'];\n\n            if (headers['if-none-match']) {\n                const etags = headers['if-none-match']\n                    .split(/,/)\n                    .filter(etag => {\n                        return !/^\\s*W\\//.test(etag);\n                    });\n                if (!etags.length) {\n                    delete headers['if-none-match'];\n                } else {\n                    headers['if-none-match'] = etags.join(',').trim();\n                }\n            }\n        } else if (\n            this._resHeaders['last-modified'] &&\n            !headers['if-modified-since']\n        ) {\n            headers['if-modified-since'] = this._resHeaders['last-modified'];\n        }\n\n        return headers;\n    }\n\n    /**\n     * Creates new CachePolicy with information combined from the previews response,\n     * and the new revalidation response.\n     *\n     * Returns {policy, modified} where modified is a boolean indicating\n     * whether the response body has been modified, and old cached body can't be used.\n     *\n     * @return {Object} {policy: CachePolicy, modified: Boolean}\n     */\n    revalidatedPolicy(request, response) {\n        this._assertRequestHasHeaders(request);\n        if(this._useStaleIfError() && isErrorResponse(response)) {  // I consider the revalidation request unsuccessful\n          return {\n            modified: false,\n            matches: false,\n            policy: this,\n          };\n        }\n        if (!response || !response.headers) {\n            throw Error('Response headers missing');\n        }\n\n        // These aren't going to be supported exactly, since one CachePolicy object\n        // doesn't know about all the other cached objects.\n        let matches = false;\n        if (response.status !== undefined && response.status != 304) {\n            matches = false;\n        } else if (\n            response.headers.etag &&\n            !/^\\s*W\\//.test(response.headers.etag)\n        ) {\n            // \"All of the stored responses with the same strong validator are selected.\n            // If none of the stored responses contain the same strong validator,\n            // then the cache MUST NOT use the new response to update any stored responses.\"\n            matches =\n                this._resHeaders.etag &&\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                    response.headers.etag;\n        } else if (this._resHeaders.etag && response.headers.etag) {\n            // \"If the new response contains a weak validator and that validator corresponds\n            // to one of the cache's stored responses,\n            // then the most recent of those matching stored responses is selected for update.\"\n            matches =\n                this._resHeaders.etag.replace(/^\\s*W\\//, '') ===\n                response.headers.etag.replace(/^\\s*W\\//, '');\n        } else if (this._resHeaders['last-modified']) {\n            matches =\n                this._resHeaders['last-modified'] ===\n                response.headers['last-modified'];\n        } else {\n            // If the new response does not include any form of validator (such as in the case where\n            // a client generates an If-Modified-Since request from a source other than the Last-Modified\n            // response header field), and there is only one stored response, and that stored response also\n            // lacks a validator, then that stored response is selected for update.\n            if (\n                !this._resHeaders.etag &&\n                !this._resHeaders['last-modified'] &&\n                !response.headers.etag &&\n                !response.headers['last-modified']\n            ) {\n                matches = true;\n            }\n        }\n\n        if (!matches) {\n            return {\n                policy: new this.constructor(request, response),\n                // Client receiving 304 without body, even if it's invalid/mismatched has no option\n                // but to reuse a cached body. We don't have a good way to tell clients to do\n                // error recovery in such case.\n                modified: response.status != 304,\n                matches: false,\n            };\n        }\n\n        // use other header fields provided in the 304 (Not Modified) response to replace all instances\n        // of the corresponding header fields in the stored response.\n        const headers = {};\n        for (const k in this._resHeaders) {\n            headers[k] =\n                k in response.headers && !excludedFromRevalidationUpdate[k]\n                    ? response.headers[k]\n                    : this._resHeaders[k];\n        }\n\n        const newResponse = Object.assign({}, response, {\n            status: this._status,\n            method: this._method,\n            headers,\n        });\n        return {\n            policy: new this.constructor(request, newResponse, {\n                shared: this._isShared,\n                cacheHeuristic: this._cacheHeuristic,\n                immutableMinTimeToLive: this._immutableMinTtl,\n            }),\n            modified: false,\n            matches: true,\n        };\n    }\n};\n", "\n/**\n * Expose `isUrl`.\n */\n\nmodule.exports = isUrl;\n\n/**\n * RegExps.\n * A URL must match #1 and then at least one of #2/#3.\n * Use two levels of REs to avoid REDOS.\n */\n\nvar protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\n\nvar localhostDomainRE = /^localhost[\\:?\\d]*(?:[^\\:?\\d]\\S*)?$/\nvar nonLocalhostDomainRE = /^[^\\s\\.]+\\.\\S{2,}$/;\n\n/**\n * Loosely validate a URL `string`.\n *\n * @param {String} string\n * @return {Boolean}\n */\n\nfunction isUrl(string){\n  if (typeof string !== 'string') {\n    return false;\n  }\n\n  var match = string.match(protocolAndDomainRE);\n  if (!match) {\n    return false;\n  }\n\n  var everythingAfterProtocol = match[1];\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n\n  if (localhostDomainRE.test(everythingAfterProtocol) ||\n      nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n    return true;\n  }\n\n  return false;\n}\n", "// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n", "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self)[\"tiny-lru\"]=e()}(this,(function(){\"use strict\";class t{constructor(t=0,e=0){this.first=null,this.items=Object.create(null),this.last=null,this.max=t,this.size=0,this.ttl=e}has(t){return t in this.items}clear(){return this.first=null,this.items=Object.create(null),this.last=null,this.size=0,this}delete(t){if(this.has(t)){const e=this.items[t];delete this.items[t],this.size--,null!==e.prev&&(e.prev.next=e.next),null!==e.next&&(e.next.prev=e.prev),this.first===e&&(this.first=e.next),this.last===e&&(this.last=e.prev)}return this}evict(t=!1){if(t||this.size>0){const t=this.first;delete this.items[t.key],this.size--,0===this.size?(this.first=null,this.last=null):(this.first=t.next,this.first.prev=null)}return this}get(t){let e;if(this.has(t)){const s=this.items[t];this.ttl>0&&s.expiry<=(new Date).getTime()?this.delete(t):(e=s.value,this.set(t,e,!0))}return e}keys(){return Object.keys(this.items)}set(t,e,s=!1){let i;if(s||this.has(t)){if(i=this.items[t],i.value=e,this.last!==i){const t=this.last,e=i.next,s=i.prev;this.first===i&&(this.first=i.next),i.next=null,i.prev=this.last,t.next=i,null!==s&&(s.next=e),null!==e&&(e.prev=s)}}else this.max>0&&this.size===this.max&&this.evict(!0),i=this.items[t]={expiry:this.ttl>0?(new Date).getTime()+this.ttl:this.ttl,key:t,prev:this.last,next:null,value:e},1==++this.size?this.first=i:this.last.next=i;return this.last=i,this}}return function(e=1e3,s=0){if(isNaN(e)||e<0)throw new TypeError(\"Invalid max value\");if(isNaN(s)||s<0)throw new TypeError(\"Invalid ttl value\");return new t(e,s)}}));", "'use strict';\n\nexports.isIterable = isIterable;\nexports.isArrayLike = isArrayLike;\nexports.isCollection = isCollection;\nexports.getIterator = getIterator;\nexports.getIteratorMethod = getIteratorMethod;\nexports.createIterator = createIterator;\nexports.forEach = forEach;\nexports.isAsyncIterable = isAsyncIterable;\nexports.getAsyncIterator = getAsyncIterator;\nexports.getAsyncIteratorMethod = getAsyncIteratorMethod;\nexports.createAsyncIterator = createAsyncIterator;\nexports.forAwaitEach = forAwaitEach;\n\nvar SYMBOL = typeof Symbol === 'function' ? Symbol : void 0;\n\nvar SYMBOL_ITERATOR = SYMBOL && SYMBOL.iterator;\n\nvar $$iterator = exports.$$iterator = SYMBOL_ITERATOR || '@@iterator';\n\nfunction isIterable(obj) {\n  return !!getIteratorMethod(obj);\n}\n\nfunction isArrayLike(obj) {\n  var length = obj != null && obj.length;\n  return typeof length === 'number' && length >= 0 && length % 1 === 0;\n}\n\nfunction isCollection(obj) {\n  return Object(obj) === obj && (isArrayLike(obj) || isIterable(obj));\n}\n\nfunction getIterator(iterable) {\n  var method = getIteratorMethod(iterable);\n  if (method) {\n    return method.call(iterable);\n  }\n}\n\nfunction getIteratorMethod(iterable) {\n  if (iterable != null) {\n    var method = SYMBOL_ITERATOR && iterable[SYMBOL_ITERATOR] || iterable['@@iterator'];\n    if (typeof method === 'function') {\n      return method;\n    }\n  }\n}\n\nfunction createIterator(collection) {\n  if (collection != null) {\n    var iterator = getIterator(collection);\n    if (iterator) {\n      return iterator;\n    }\n    if (isArrayLike(collection)) {\n      return new ArrayLikeIterator(collection);\n    }\n  }\n}\n\nfunction ArrayLikeIterator(obj) {\n  this._o = obj;\n  this._i = 0;\n}\n\nArrayLikeIterator.prototype[$$iterator] = function () {\n  return this;\n};\n\nArrayLikeIterator.prototype.next = function () {\n  if (this._o === void 0 || this._i >= this._o.length) {\n    this._o = void 0;\n    return { value: void 0, done: true };\n  }\n  return { value: this._o[this._i++], done: false };\n};\n\nfunction forEach(collection, callback, thisArg) {\n  if (collection != null) {\n    if (typeof collection.forEach === 'function') {\n      return collection.forEach(callback, thisArg);\n    }\n    var i = 0;\n    var iterator = getIterator(collection);\n    if (iterator) {\n      var step;\n      while (!(step = iterator.next()).done) {\n        callback.call(thisArg, step.value, i++, collection);\n\n        if (i > 9999999) {\n          throw new TypeError('Near-infinite iteration.');\n        }\n      }\n    } else if (isArrayLike(collection)) {\n      for (; i < collection.length; i++) {\n        if (collection.hasOwnProperty(i)) {\n          callback.call(thisArg, collection[i], i, collection);\n        }\n      }\n    }\n  }\n}\n\nvar SYMBOL_ASYNC_ITERATOR = SYMBOL && SYMBOL.asyncIterator;\n\nvar $$asyncIterator = exports.$$asyncIterator = SYMBOL_ASYNC_ITERATOR || '@@asyncIterator';\n\nfunction isAsyncIterable(obj) {\n  return !!getAsyncIteratorMethod(obj);\n}\n\nfunction getAsyncIterator(asyncIterable) {\n  var method = getAsyncIteratorMethod(asyncIterable);\n  if (method) {\n    return method.call(asyncIterable);\n  }\n}\n\nfunction getAsyncIteratorMethod(asyncIterable) {\n  if (asyncIterable != null) {\n    var method = SYMBOL_ASYNC_ITERATOR && asyncIterable[SYMBOL_ASYNC_ITERATOR] || asyncIterable['@@asyncIterator'];\n    if (typeof method === 'function') {\n      return method;\n    }\n  }\n}\n\nfunction createAsyncIterator(source) {\n  if (source != null) {\n    var asyncIterator = getAsyncIterator(source);\n    if (asyncIterator) {\n      return asyncIterator;\n    }\n    var iterator = createIterator(source);\n    if (iterator) {\n      return new AsyncFromSyncIterator(iterator);\n    }\n  }\n}\n\nfunction AsyncFromSyncIterator(iterator) {\n  this._i = iterator;\n}\n\nAsyncFromSyncIterator.prototype[$$asyncIterator] = function () {\n  return this;\n};\n\nAsyncFromSyncIterator.prototype.next = function (value) {\n  return unwrapAsyncFromSync(this._i, 'next', value);\n};\n\nAsyncFromSyncIterator.prototype.return = function (value) {\n  return this._i.return ? unwrapAsyncFromSync(this._i, 'return', value) : Promise.resolve({ value: value, done: true });\n};\n\nAsyncFromSyncIterator.prototype.throw = function (value) {\n  return this._i.throw ? unwrapAsyncFromSync(this._i, 'throw', value) : Promise.reject(value);\n};\n\nfunction unwrapAsyncFromSync(iterator, fn, value) {\n  var step;\n  return new Promise(function (resolve) {\n    step = iterator[fn](value);\n    resolve(step.value);\n  }).then(function (value) {\n    return { value: value, done: step.done };\n  });\n}\n\nfunction forAwaitEach(source, callback, thisArg) {\n  var asyncIterator = createAsyncIterator(source);\n  if (asyncIterator) {\n    var i = 0;\n    return new Promise(function (resolve, reject) {\n      function next() {\n        asyncIterator.next().then(function (step) {\n          if (!step.done) {\n            Promise.resolve(callback.call(thisArg, step.value, i++, source)).then(next).catch(reject);\n          } else {\n            resolve();\n          }\n\n          return null;\n        }).catch(reject);\n\n        return null;\n      }\n      next();\n    });\n  }\n}\n\n", null, null, "'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n", "\nconst polyfill = require('events')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", null, null, null, "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n", "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nmodule.exports = set;\n", "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Converts `value` to a property path array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Util\n * @param {*} value The value to convert.\n * @returns {Array} Returns the new property path array.\n * @example\n *\n * _.toPath('a.b.c');\n * // => ['a', 'b', 'c']\n *\n * _.toPath('a[0].b.c');\n * // => ['a', '0', 'b', 'c']\n */\nfunction toPath(value) {\n  if (isArray(value)) {\n    return arrayMap(value, toKey);\n  }\n  return isSymbol(value) ? [value] : copyArray(stringToPath(value));\n}\n\nmodule.exports = toPath;\n", "\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toString = Object.prototype.toString;\n\nmodule.exports = function forEach (obj, fn, ctx) {\n    if (toString.call(fn) !== '[object Function]') {\n        throw new TypeError('iterator must be a function');\n    }\n    var l = obj.length;\n    if (l === +l) {\n        for (var i = 0; i < l; i++) {\n            fn.call(ctx, obj[i], i, obj);\n        }\n    } else {\n        for (var k in obj) {\n            if (hasOwn.call(obj, k)) {\n                fn.call(ctx, obj[k], k, obj);\n            }\n        }\n    }\n};\n\n", "'use strict';\n\nvar each = require('foreach');\nmodule.exports = api;\n\n\n/**\n * Convenience wrapper around the api.\n * Calls `.get` when called with an `object` and a `pointer`.\n * Calls `.set` when also called with `value`.\n * If only supplied `object`, returns a partially applied function, mapped to the object.\n *\n * @param {Object} obj\n * @param {String|Array} pointer\n * @param value\n * @returns {*}\n */\n\nfunction api (obj, pointer, value) {\n    // .set()\n    if (arguments.length === 3) {\n        return api.set(obj, pointer, value);\n    }\n    // .get()\n    if (arguments.length === 2) {\n        return api.get(obj, pointer);\n    }\n    // Return a partially applied function on `obj`.\n    var wrapped = api.bind(api, obj);\n\n    // Support for oo style\n    for (var name in api) {\n        if (api.hasOwnProperty(name)) {\n            wrapped[name] = api[name].bind(wrapped, obj);\n        }\n    }\n    return wrapped;\n}\n\n\n/**\n * Lookup a json pointer in an object\n *\n * @param {Object} obj\n * @param {String|Array} pointer\n * @returns {*}\n */\napi.get = function get (obj, pointer) {\n    var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer);\n\n    for (var i = 0; i < refTokens.length; ++i) {\n        var tok = refTokens[i];\n        if (!(typeof obj == 'object' && tok in obj)) {\n            throw new Error('Invalid reference token: ' + tok);\n        }\n        obj = obj[tok];\n    }\n    return obj;\n};\n\n/**\n * Sets a value on an object\n *\n * @param {Object} obj\n * @param {String|Array} pointer\n * @param value\n */\napi.set = function set (obj, pointer, value) {\n    var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer),\n      nextTok = refTokens[0];\n\n    if (refTokens.length === 0) {\n      throw Error('Can not set the root object');\n    }\n\n    for (var i = 0; i < refTokens.length - 1; ++i) {\n        var tok = refTokens[i];\n        if (typeof tok !== 'string' && typeof tok !== 'number') {\n          tok = String(tok)\n        }\n        if (tok === \"__proto__\" || tok === \"constructor\" || tok === \"prototype\") {\n            continue\n        }\n        if (tok === '-' && Array.isArray(obj)) {\n          tok = obj.length;\n        }\n        nextTok = refTokens[i + 1];\n\n        if (!(tok in obj)) {\n            if (nextTok.match(/^(\\d+|-)$/)) {\n                obj[tok] = [];\n            } else {\n                obj[tok] = {};\n            }\n        }\n        obj = obj[tok];\n    }\n    if (nextTok === '-' && Array.isArray(obj)) {\n      nextTok = obj.length;\n    }\n    obj[nextTok] = value;\n    return this;\n};\n\n/**\n * Removes an attribute\n *\n * @param {Object} obj\n * @param {String|Array} pointer\n */\napi.remove = function (obj, pointer) {\n    var refTokens = Array.isArray(pointer) ? pointer : api.parse(pointer);\n    var finalToken = refTokens[refTokens.length -1];\n    if (finalToken === undefined) {\n        throw new Error('Invalid JSON pointer for remove: \"' + pointer + '\"');\n    }\n\n    var parent = api.get(obj, refTokens.slice(0, -1));\n    if (Array.isArray(parent)) {\n      var index = +finalToken;\n      if (finalToken === '' && isNaN(index)) {\n        throw new Error('Invalid array index: \"' + finalToken + '\"');\n      }\n\n      Array.prototype.splice.call(parent, index, 1);\n    } else {\n      delete parent[finalToken];\n    }\n};\n\n/**\n * Returns a (pointer -> value) dictionary for an object\n *\n * @param obj\n * @param {function} descend\n * @returns {}\n */\napi.dict = function dict (obj, descend) {\n    var results = {};\n    api.walk(obj, function (value, pointer) {\n        results[pointer] = value;\n    }, descend);\n    return results;\n};\n\n/**\n * Iterates over an object\n * Iterator: function (value, pointer) {}\n *\n * @param obj\n * @param {function} iterator\n * @param {function} descend\n */\napi.walk = function walk (obj, iterator, descend) {\n    var refTokens = [];\n\n    descend = descend || function (value) {\n        var type = Object.prototype.toString.call(value);\n        return type === '[object Object]' || type === '[object Array]';\n    };\n\n    (function next (cur) {\n        each(cur, function (value, key) {\n            refTokens.push(String(key));\n            if (descend(value)) {\n                next(value);\n            } else {\n                iterator(value, api.compile(refTokens));\n            }\n            refTokens.pop();\n        });\n    }(obj));\n};\n\n/**\n * Tests if an object has a value for a json pointer\n *\n * @param obj\n * @param pointer\n * @returns {boolean}\n */\napi.has = function has (obj, pointer) {\n    try {\n        api.get(obj, pointer);\n    } catch (e) {\n        return false;\n    }\n    return true;\n};\n\n/**\n * Escapes a reference token\n *\n * @param str\n * @returns {string}\n */\napi.escape = function escape (str) {\n    return str.toString().replace(/~/g, '~0').replace(/\\//g, '~1');\n};\n\n/**\n * Unescapes a reference token\n *\n * @param str\n * @returns {string}\n */\napi.unescape = function unescape (str) {\n    return str.replace(/~1/g, '/').replace(/~0/g, '~');\n};\n\n/**\n * Converts a json pointer into a array of reference tokens\n *\n * @param pointer\n * @returns {Array}\n */\napi.parse = function parse (pointer) {\n    if (pointer === '') { return []; }\n    if (pointer.charAt(0) !== '/') { throw new Error('Invalid JSON pointer: ' + pointer); }\n    return pointer.substring(1).split(/\\//).map(api.unescape);\n};\n\n/**\n * Builds a json pointer from a array of reference tokens\n *\n * @param refTokens\n * @returns {string}\n */\napi.compile = function compile (refTokens) {\n    if (refTokens.length === 0) { return ''; }\n    return '/' + refTokens.map(api.escape).join('/');\n};\n", "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",f=\"month\",h=\"quarter\",c=\"year\",d=\"date\",$=\"Invalid Date\",l=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\")},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},g={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},v=\"en\",D={};D[v]=M;var p=function(t){return t instanceof _},S=function t(e,n,r){var i;if(!e)return v;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(v=i),i||!r&&v},w=function(t,e){if(p(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=g;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match(l);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===$)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),$=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},l=function(t,e){return O.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,g=\"set\"+(this.$u?\"UTC\":\"\");switch(h){case c:return r?$(1,0):$(31,11);case f:return r?$(1,M):$(0,M+1);case o:var v=this.$locale().weekStart||0,D=(y<v?y+7:y)-v;return $(r?m-D:m+(6-D),M);case a:case d:return l(g+\"Hours\",0);case u:return l(g+\"Minutes\",1);case s:return l(g+\"Seconds\",2);case i:return l(g+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h=\"set\"+(this.$u?\"UTC\":\"\"),$=(n={},n[a]=h+\"Date\",n[d]=h+\"Date\",n[f]=h+\"Month\",n[c]=h+\"FullYear\",n[u]=h+\"Hours\",n[s]=h+\"Minutes\",n[i]=h+\"Seconds\",n[r]=h+\"Milliseconds\",n)[o],l=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[$](l),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else $&&this.$d[$](l);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,$=this;r=Number(r);var l=O.p(h),y=function(t){var e=w($);return O.w(e.date(e.date()+Math.round(t*r)),$)};if(l===f)return this.set(f,this.$M+r);if(l===c)return this.set(c,this.$y+r);if(l===a)return y(1);if(l===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[l]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||$;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},c=function(t){return O.s(s%12||12,t,\"0\")},d=n.meridiem||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,\"0\"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,\"0\"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,\"0\"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,\"0\"),s:String(this.$s),ss:O.s(this.$s,2,\"0\"),SSS:O.s(this.$ms,3,\"0\"),Z:i};return r.replace(y,(function(t,e){return e||l[t]||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,$){var l,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,g=this-M,v=O.m(this,M);return v=(l={},l[c]=v/12,l[f]=v,l[h]=v/3,l[o]=(g-m)/6048e5,l[a]=(g-m)/864e5,l[u]=g/n,l[s]=g/e,l[i]=g/t,l)[y]||g,$?v:O.a(v)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),T=_.prototype;return w.prototype=T,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",f],[\"$y\",c],[\"$D\",d]].forEach((function(t){T[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[v],w.Ls=D,w.p={},w}));", "'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n", "/* MIT license */\n/* eslint-disable no-mixed-operators */\nconst cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nconst reverseKeywords = {};\nfor (const key of Object.keys(cssKeywords)) {\n\treverseKeywords[cssKeywords[key]] = key;\n}\n\nconst convert = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\nmodule.exports = convert;\n\n// Hide .channels and .labels properties\nfor (const model of Object.keys(convert)) {\n\tif (!('channels' in convert[model])) {\n\t\tthrow new Error('missing channels property: ' + model);\n\t}\n\n\tif (!('labels' in convert[model])) {\n\t\tthrow new Error('missing channel labels property: ' + model);\n\t}\n\n\tif (convert[model].labels.length !== convert[model].channels) {\n\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t}\n\n\tconst {channels, labels} = convert[model];\n\tdelete convert[model].channels;\n\tdelete convert[model].labels;\n\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\tObject.defineProperty(convert[model], 'labels', {value: labels});\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst min = Math.min(r, g, b);\n\tconst max = Math.max(r, g, b);\n\tconst delta = max - min;\n\tlet h;\n\tlet s;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst l = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tlet rdif;\n\tlet gdif;\n\tlet bdif;\n\tlet h;\n\tlet s;\n\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst v = Math.max(r, g, b);\n\tconst diff = v - Math.min(r, g, b);\n\tconst diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = 0;\n\t\ts = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tconst r = rgb[0];\n\tconst g = rgb[1];\n\tlet b = rgb[2];\n\tconst h = convert.rgb.hsl(rgb)[0];\n\tconst w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\n\tconst k = Math.min(1 - r, 1 - g, 1 - b);\n\tconst c = (1 - r - k) / (1 - k) || 0;\n\tconst m = (1 - g - k) / (1 - k) || 0;\n\tconst y = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\nfunction comparativeDistance(x, y) {\n\t/*\n\t\tSee https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n\t*/\n\treturn (\n\t\t((x[0] - y[0]) ** 2) +\n\t\t((x[1] - y[1]) ** 2) +\n\t\t((x[2] - y[2]) ** 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tconst reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tlet currentClosestDistance = Infinity;\n\tlet currentClosestKeyword;\n\n\tfor (const keyword of Object.keys(cssKeywords)) {\n\t\tconst value = cssKeywords[keyword];\n\n\t\t// Compute comparative distance\n\t\tconst distance = comparativeDistance(rgb, value);\n\n\t\t// Check if its less, if so set as closest\n\t\tif (distance < currentClosestDistance) {\n\t\t\tcurrentClosestDistance = distance;\n\t\t\tcurrentClosestKeyword = keyword;\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tlet r = rgb[0] / 255;\n\tlet g = rgb[1] / 255;\n\tlet b = rgb[2] / 255;\n\n\t// Assume sRGB\n\tr = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);\n\n\tconst x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tconst y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tconst z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tconst xyz = convert.rgb.xyz(rgb);\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tconst h = hsl[0] / 360;\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\tlet t2;\n\tlet t3;\n\tlet val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tconst t1 = 2 * l - t2;\n\n\tconst rgb = [0, 0, 0];\n\tfor (let i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tconst h = hsl[0];\n\tlet s = hsl[1] / 100;\n\tlet l = hsl[2] / 100;\n\tlet smin = s;\n\tconst lmin = Math.max(l, 0.01);\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tconst v = (l + s) / 2;\n\tconst sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tconst h = hsv[0] / 60;\n\tconst s = hsv[1] / 100;\n\tlet v = hsv[2] / 100;\n\tconst hi = Math.floor(h) % 6;\n\n\tconst f = h - Math.floor(h);\n\tconst p = 255 * v * (1 - s);\n\tconst q = 255 * v * (1 - (s * f));\n\tconst t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tconst h = hsv[0];\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\tconst vmin = Math.max(v, 0.01);\n\tlet sl;\n\tlet l;\n\n\tl = (2 - s) * v;\n\tconst lmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tconst h = hwb[0] / 360;\n\tlet wh = hwb[1] / 100;\n\tlet bl = hwb[2] / 100;\n\tconst ratio = wh + bl;\n\tlet f;\n\n\t// Wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\tconst i = Math.floor(6 * h);\n\tconst v = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tconst n = wh + f * (v - wh); // Linear interpolation\n\n\tlet r;\n\tlet g;\n\tlet b;\n\t/* eslint-disable max-statements-per-line,no-multi-spaces */\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v;  g = n;  b = wh; break;\n\t\tcase 1: r = n;  g = v;  b = wh; break;\n\t\tcase 2: r = wh; g = v;  b = n; break;\n\t\tcase 3: r = wh; g = n;  b = v; break;\n\t\tcase 4: r = n;  g = wh; b = v; break;\n\t\tcase 5: r = v;  g = wh; b = n; break;\n\t}\n\t/* eslint-enable max-statements-per-line,no-multi-spaces */\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tconst c = cmyk[0] / 100;\n\tconst m = cmyk[1] / 100;\n\tconst y = cmyk[2] / 100;\n\tconst k = cmyk[3] / 100;\n\n\tconst r = 1 - Math.min(1, c * (1 - k) + k);\n\tconst g = 1 - Math.min(1, m * (1 - k) + k);\n\tconst b = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tconst x = xyz[0] / 100;\n\tconst y = xyz[1] / 100;\n\tconst z = xyz[2] / 100;\n\tlet r;\n\tlet g;\n\tlet b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// Assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet x;\n\tlet y;\n\tlet z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tconst y2 = y ** 3;\n\tconst x2 = x ** 3;\n\tconst z2 = z ** 3;\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet h;\n\n\tconst hr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst c = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tconst l = lch[0];\n\tconst c = lch[1];\n\tconst h = lch[2];\n\n\tconst hr = h / 360 * 2 * Math.PI;\n\tconst a = c * Math.cos(hr);\n\tconst b = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args, saturation = null) {\n\tconst [r, g, b] = args;\n\tlet value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tlet ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// Optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tconst r = args[0];\n\tconst g = args[1];\n\tconst b = args[2];\n\n\t// We use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tconst ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tlet color = args % 10;\n\n\t// Handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tconst mult = (~~(args > 50) + 1) * 0.5;\n\tconst r = ((color & 1) * mult) * 255;\n\tconst g = (((color >> 1) & 1) * mult) * 255;\n\tconst b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// Handle greyscale\n\tif (args >= 232) {\n\t\tconst c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tlet rem;\n\tconst r = Math.floor(args / 36) / 5 * 255;\n\tconst g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tconst b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tconst integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tconst match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tlet colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(char => {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tconst integer = parseInt(colorString, 16);\n\tconst r = (integer >> 16) & 0xFF;\n\tconst g = (integer >> 8) & 0xFF;\n\tconst b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst max = Math.max(Math.max(r, g), b);\n\tconst min = Math.min(Math.min(r, g), b);\n\tconst chroma = (max - min);\n\tlet grayscale;\n\tlet hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\n\tconst c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));\n\n\tlet f = 0;\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\n\tconst c = s * v;\n\tlet f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tconst h = hcg[0] / 360;\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tconst pure = [0, 0, 0];\n\tconst hi = (h % 1) * 6;\n\tconst v = hi % 1;\n\tconst w = 1 - v;\n\tlet mg = 0;\n\n\t/* eslint-disable max-statements-per-line */\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\t/* eslint-enable max-statements-per-line */\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst v = c + g * (1.0 - c);\n\tlet f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst l = g * (1.0 - c) + 0.5 * c;\n\tlet s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\tconst v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tconst w = hwb[1] / 100;\n\tconst b = hwb[2] / 100;\n\tconst v = 1 - b;\n\tconst c = v - w;\n\tlet g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hsv = convert.gray.hsl;\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tconst val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tconst integer = (val << 16) + (val << 8) + val;\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tconst val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n", "const conversions = require('./conversions');\n\n/*\n\tThis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tconst graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tconst models = Object.keys(conversions);\n\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tconst graph = buildGraph();\n\tconst queue = [fromModel]; // Unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tconst current = queue.pop();\n\t\tconst adjacents = Object.keys(conversions[current]);\n\n\t\tfor (let len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tconst adjacent = adjacents[i];\n\t\t\tconst node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tconst path = [graph[toModel].parent, toModel];\n\tlet fn = conversions[graph[toModel].parent][toModel];\n\n\tlet cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tconst graph = deriveBFS(fromModel);\n\tconst conversion = {};\n\n\tconst models = Object.keys(graph);\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tconst toModel = models[i];\n\t\tconst node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// No possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n", "const conversions = require('./conversions');\nconst route = require('./route');\n\nconst convert = {};\n\nconst models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\tconst result = fn(args);\n\n\t\t// We're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (let len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(fromModel => {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tconst routes = route(fromModel);\n\tconst routeModels = Object.keys(routes);\n\n\trouteModels.forEach(toModel => {\n\t\tconst fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n", "'use strict';\n\nconst wrapAnsi16 = (fn, offset) => (...args) => {\n\tconst code = fn(...args);\n\treturn `\\u001B[${code + offset}m`;\n};\n\nconst wrapAnsi256 = (fn, offset) => (...args) => {\n\tconst code = fn(...args);\n\treturn `\\u001B[${38 + offset};5;${code}m`;\n};\n\nconst wrapAnsi16m = (fn, offset) => (...args) => {\n\tconst rgb = fn(...args);\n\treturn `\\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;\n};\n\nconst ansi2ansi = n => n;\nconst rgb2rgb = (r, g, b) => [r, g, b];\n\nconst setLazyProperty = (object, property, get) => {\n\tObject.defineProperty(object, property, {\n\t\tget: () => {\n\t\t\tconst value = get();\n\n\t\t\tObject.defineProperty(object, property, {\n\t\t\t\tvalue,\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true\n\t\t\t});\n\n\t\t\treturn value;\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t});\n};\n\n/** @type {typeof import('color-convert')} */\nlet colorConvert;\nconst makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {\n\tif (colorConvert === undefined) {\n\t\tcolorConvert = require('color-convert');\n\t}\n\n\tconst offset = isBackground ? 10 : 0;\n\tconst styles = {};\n\n\tfor (const [sourceSpace, suite] of Object.entries(colorConvert)) {\n\t\tconst name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;\n\t\tif (sourceSpace === targetSpace) {\n\t\t\tstyles[name] = wrap(identity, offset);\n\t\t} else if (typeof suite === 'object') {\n\t\t\tstyles[name] = wrap(suite[targetSpace], offset);\n\t\t}\n\t}\n\n\treturn styles;\n};\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\tconst styles = {\n\t\tmodifier: {\n\t\t\treset: [0, 0],\n\t\t\t// 21 isn't widely supported and 22 does the same thing\n\t\t\tbold: [1, 22],\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29]\n\t\t},\n\t\tcolor: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\n\t\t\t// Bright color\n\t\t\tblackBright: [90, 39],\n\t\t\tredBright: [91, 39],\n\t\t\tgreenBright: [92, 39],\n\t\t\tyellowBright: [93, 39],\n\t\t\tblueBright: [94, 39],\n\t\t\tmagentaBright: [95, 39],\n\t\t\tcyanBright: [96, 39],\n\t\t\twhiteBright: [97, 39]\n\t\t},\n\t\tbgColor: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49],\n\n\t\t\t// Bright color\n\t\t\tbgBlackBright: [100, 49],\n\t\t\tbgRedBright: [101, 49],\n\t\t\tbgGreenBright: [102, 49],\n\t\t\tbgYellowBright: [103, 49],\n\t\t\tbgBlueBright: [104, 49],\n\t\t\tbgMagentaBright: [105, 49],\n\t\t\tbgCyanBright: [106, 49],\n\t\t\tbgWhiteBright: [107, 49]\n\t\t}\n\t};\n\n\t// Alias bright black as gray (and grey)\n\tstyles.color.gray = styles.color.blackBright;\n\tstyles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n\tstyles.color.grey = styles.color.blackBright;\n\tstyles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n\n\tfor (const [groupName, group] of Object.entries(styles)) {\n\t\tfor (const [styleName, style] of Object.entries(group)) {\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false\n\t\t});\n\t}\n\n\tObject.defineProperty(styles, 'codes', {\n\t\tvalue: codes,\n\t\tenumerable: false\n\t});\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tsetLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));\n\tsetLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));\n\tsetLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));\n\tsetLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));\n\tsetLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));\n\tsetLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));\n\n\treturn styles;\n}\n\n// Make the export immutable\nObject.defineProperty(module, 'exports', {\n\tenumerable: true,\n\tget: assembleStyles\n});\n", "'use strict';\nmodule.exports = {\n\tstdout: false,\n\tstderr: false\n};\n", "'use strict';\n\nconst stringReplaceAll = (string, substring, replacer) => {\n\tlet index = string.indexOf(substring);\n\tif (index === -1) {\n\t\treturn string;\n\t}\n\n\tconst substringLength = substring.length;\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\treturnValue += string.substr(endIndex, index - endIndex) + substring + replacer;\n\t\tendIndex = index + substringLength;\n\t\tindex = string.indexOf(substring, endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.substr(endIndex);\n\treturn returnValue;\n};\n\nconst stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\tconst gotCR = string[index - 1] === '\\r';\n\t\treturnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\\r\\n' : '\\n') + postfix;\n\t\tendIndex = index + 1;\n\t\tindex = string.indexOf('\\n', endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.substr(endIndex);\n\treturn returnValue;\n};\n\nmodule.exports = {\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex\n};\n", "'use strict';\nconst TEMPLATE_REGEX = /(?:\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u(?:[a-f\\d]{4}|{[a-f\\d]{1,6}})|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tconst u = c[0] === 'u';\n\tconst bracket = c[1] === '{';\n\n\tif ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\tif (u && bracket) {\n\t\treturn String.fromCodePoint(parseInt(c.slice(2, -1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, arguments_) {\n\tconst results = [];\n\tconst chunks = arguments_.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tconst number = Number(chunk);\n\t\tif (!Number.isNaN(number)) {\n\t\t\tresults.push(number);\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const [styleName, styles] of Object.entries(enabled)) {\n\t\tif (!Array.isArray(styles)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!(styleName in current)) {\n\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t}\n\n\t\tcurrent = styles.length > 0 ? current[styleName](...styles) : current[styleName];\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, temporary) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttemporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {\n\t\tif (escapeCharacter) {\n\t\t\tchunk.push(unescape(escapeCharacter));\n\t\t} else if (style) {\n\t\t\tconst string = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(character);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMessage);\n\t}\n\n\treturn chunks.join('');\n};\n", "'use strict';\nconst ansiStyles = require('ansi-styles');\nconst {stdout: stdoutColor, stderr: stderrColor} = require('supports-color');\nconst {\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex\n} = require('./util');\n\nconst {isArray} = Array;\n\n// `supportsColor.level` \u2192 `ansiStyles.color[name]` mapping\nconst levelMapping = [\n\t'ansi',\n\t'ansi',\n\t'ansi256',\n\t'ansi16m'\n];\n\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n\tif (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {\n\t\tthrow new Error('The `level` option should be an integer from 0 to 3');\n\t}\n\n\t// Detect level if not set manually\n\tconst colorLevel = stdoutColor ? stdoutColor.level : 0;\n\tobject.level = options.level === undefined ? colorLevel : options.level;\n};\n\nclass ChalkClass {\n\tconstructor(options) {\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn chalkFactory(options);\n\t}\n}\n\nconst chalkFactory = options => {\n\tconst chalk = {};\n\tapplyOptions(chalk, options);\n\n\tchalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);\n\n\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\tObject.setPrototypeOf(chalk.template, chalk);\n\n\tchalk.template.constructor = () => {\n\t\tthrow new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');\n\t};\n\n\tchalk.template.Instance = ChalkClass;\n\n\treturn chalk.template;\n};\n\nfunction Chalk(options) {\n\treturn chalkFactory(options);\n}\n\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n\tstyles[styleName] = {\n\t\tget() {\n\t\t\tconst builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);\n\t\t\tObject.defineProperty(this, styleName, {value: builder});\n\t\t\treturn builder;\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\tconst builder = createBuilder(this, this._styler, true);\n\t\tObject.defineProperty(this, 'visible', {value: builder});\n\t\treturn builder;\n\t}\n};\n\nconst usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];\n\nfor (const model of usedModels) {\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nfor (const model of usedModels) {\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, {\n\t...styles,\n\tlevel: {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this._generator.level;\n\t\t},\n\t\tset(level) {\n\t\t\tthis._generator.level = level;\n\t\t}\n\t}\n});\n\nconst createStyler = (open, close, parent) => {\n\tlet openAll;\n\tlet closeAll;\n\tif (parent === undefined) {\n\t\topenAll = open;\n\t\tcloseAll = close;\n\t} else {\n\t\topenAll = parent.openAll + open;\n\t\tcloseAll = close + parent.closeAll;\n\t}\n\n\treturn {\n\t\topen,\n\t\tclose,\n\t\topenAll,\n\t\tcloseAll,\n\t\tparent\n\t};\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n\tconst builder = (...arguments_) => {\n\t\tif (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {\n\t\t\t// Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`\n\t\t\treturn applyStyle(builder, chalkTag(builder, ...arguments_));\n\t\t}\n\n\t\t// Single argument is hot path, implicit coercion is faster than anything\n\t\t// eslint-disable-next-line no-implicit-coercion\n\t\treturn applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));\n\t};\n\n\t// We alter the prototype because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tObject.setPrototypeOf(builder, proto);\n\n\tbuilder._generator = self;\n\tbuilder._styler = _styler;\n\tbuilder._isEmpty = _isEmpty;\n\n\treturn builder;\n};\n\nconst applyStyle = (self, string) => {\n\tif (self.level <= 0 || !string) {\n\t\treturn self._isEmpty ? '' : string;\n\t}\n\n\tlet styler = self._styler;\n\n\tif (styler === undefined) {\n\t\treturn string;\n\t}\n\n\tconst {openAll, closeAll} = styler;\n\tif (string.indexOf('\\u001B') !== -1) {\n\t\twhile (styler !== undefined) {\n\t\t\t// Replace any instances already present with a re-opening code\n\t\t\t// otherwise only the part of the string until said closing code\n\t\t\t// will be colored, and the rest will simply be 'plain'.\n\t\t\tstring = stringReplaceAll(string, styler.close, styler.open);\n\n\t\t\tstyler = styler.parent;\n\t\t}\n\t}\n\n\t// We can move both next actions out of loop, because remaining actions in loop won't have\n\t// any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n\t// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\tconst lfIndex = string.indexOf('\\n');\n\tif (lfIndex !== -1) {\n\t\tstring = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n\t}\n\n\treturn openAll + string + closeAll;\n};\n\nlet template;\nconst chalkTag = (chalk, ...strings) => {\n\tconst [firstString] = strings;\n\n\tif (!isArray(firstString) || !isArray(firstString.raw)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn strings.join(' ');\n\t}\n\n\tconst arguments_ = strings.slice(1);\n\tconst parts = [firstString.raw[0]];\n\n\tfor (let i = 1; i < firstString.length; i++) {\n\t\tparts.push(\n\t\t\tString(arguments_[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'),\n\t\t\tString(firstString.raw[i])\n\t\t);\n\t}\n\n\tif (template === undefined) {\n\t\ttemplate = require('./templates');\n\t}\n\n\treturn template(chalk, parts.join(''));\n};\n\nObject.defineProperties(Chalk.prototype, styles);\n\nconst chalk = Chalk(); // eslint-disable-line new-cap\nchalk.supportsColor = stdoutColor;\nchalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap\nchalk.stderr.supportsColor = stderrColor;\n\nmodule.exports = chalk;\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexport function resolve() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : '/';\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexport function normalize(path) {\n  var isPathAbsolute = isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n\n  if (!path && !isPathAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\nexport function join() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n}\n\n\n// path.relative(from, to)\n// posix version\nexport function relative(from, to) {\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\nexport var sep = '/';\nexport var delimiter = ':';\n\nexport function dirname(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\nexport function basename(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n\n\nexport function extname(path) {\n  return splitPath(path)[3];\n}\nexport default {\n  extname: extname,\n  basename: basename,\n  dirname: dirname,\n  sep: sep,\n  delimiter: delimiter,\n  relative: relative,\n  join: join,\n  isAbsolute: isAbsolute,\n  normalize: normalize,\n  resolve: resolve\n};\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b' ?\n    function (str, start, len) { return str.substr(start, len) } :\n    function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n", "\nconst polyfill = require('path')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", null, "\"use strict\";\n\n/**\n * Copyright (c) 2019-present, GraphQL Foundation\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n// A Function, which when given an Array of keys, returns a Promise of an Array\n// of values or Errors.\n// Optionally turn off batching or caching or provide a cache key function or a\n// custom cache instance.\n// If a custom cache is provided, it must be of this type (a subset of ES6 Map).\n\n/**\n * A `DataLoader` creates a public API for loading data from a particular\n * data back-end with unique keys such as the `id` column of a SQL table or\n * document name in a MongoDB database, given a batch loading function.\n *\n * Each `DataLoader` instance contains a unique memoized cache. Use caution when\n * used in long-lived applications or those which serve many users with\n * different access permissions and consider creating a new instance per\n * web request.\n */\nvar DataLoader =\n/*#__PURE__*/\nfunction () {\n  function DataLoader(batchLoadFn, options) {\n    if (typeof batchLoadFn !== 'function') {\n      throw new TypeError('DataLoader must be constructed with a function which accepts ' + (\"Array<key> and returns Promise<Array<value>>, but got: \" + batchLoadFn + \".\"));\n    }\n\n    this._batchLoadFn = batchLoadFn;\n    this._maxBatchSize = getValidMaxBatchSize(options);\n    this._batchScheduleFn = getValidBatchScheduleFn(options);\n    this._cacheKeyFn = getValidCacheKeyFn(options);\n    this._cacheMap = getValidCacheMap(options);\n    this._batch = null;\n  } // Private\n\n\n  var _proto = DataLoader.prototype;\n\n  /**\n   * Loads a key, returning a `Promise` for the value represented by that key.\n   */\n  _proto.load = function load(key) {\n    if (key === null || key === undefined) {\n      throw new TypeError('The loader.load() function must be called with a value, ' + (\"but got: \" + String(key) + \".\"));\n    }\n\n    var batch = getCurrentBatch(this);\n    var cacheMap = this._cacheMap;\n\n    var cacheKey = this._cacheKeyFn(key); // If caching and there is a cache-hit, return cached Promise.\n\n\n    if (cacheMap) {\n      var cachedPromise = cacheMap.get(cacheKey);\n\n      if (cachedPromise) {\n        var cacheHits = batch.cacheHits || (batch.cacheHits = []);\n        return new Promise(function (resolve) {\n          cacheHits.push(function () {\n            resolve(cachedPromise);\n          });\n        });\n      }\n    } // Otherwise, produce a new Promise for this key, and enqueue it to be\n    // dispatched along with the current batch.\n\n\n    batch.keys.push(key);\n    var promise = new Promise(function (resolve, reject) {\n      batch.callbacks.push({\n        resolve: resolve,\n        reject: reject\n      });\n    }); // If caching, cache this promise.\n\n    if (cacheMap) {\n      cacheMap.set(cacheKey, promise);\n    }\n\n    return promise;\n  }\n  /**\n   * Loads multiple keys, promising an array of values:\n   *\n   *     var [ a, b ] = await myLoader.loadMany([ 'a', 'b' ]);\n   *\n   * This is similar to the more verbose:\n   *\n   *     var [ a, b ] = await Promise.all([\n   *       myLoader.load('a'),\n   *       myLoader.load('b')\n   *     ]);\n   *\n   * However it is different in the case where any load fails. Where\n   * Promise.all() would reject, loadMany() always resolves, however each result\n   * is either a value or an Error instance.\n   *\n   *     var [ a, b, c ] = await myLoader.loadMany([ 'a', 'b', 'badkey' ]);\n   *     // c instanceof Error\n   *\n   */\n  ;\n\n  _proto.loadMany = function loadMany(keys) {\n    if (!isArrayLike(keys)) {\n      throw new TypeError('The loader.loadMany() function must be called with Array<key> ' + (\"but got: \" + keys + \".\"));\n    } // Support ArrayLike by using only minimal property access\n\n\n    var loadPromises = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      loadPromises.push(this.load(keys[i])[\"catch\"](function (error) {\n        return error;\n      }));\n    }\n\n    return Promise.all(loadPromises);\n  }\n  /**\n   * Clears the value at `key` from the cache, if it exists. Returns itself for\n   * method chaining.\n   */\n  ;\n\n  _proto.clear = function clear(key) {\n    var cacheMap = this._cacheMap;\n\n    if (cacheMap) {\n      var cacheKey = this._cacheKeyFn(key);\n\n      cacheMap[\"delete\"](cacheKey);\n    }\n\n    return this;\n  }\n  /**\n   * Clears the entire cache. To be used when some event results in unknown\n   * invalidations across this particular `DataLoader`. Returns itself for\n   * method chaining.\n   */\n  ;\n\n  _proto.clearAll = function clearAll() {\n    var cacheMap = this._cacheMap;\n\n    if (cacheMap) {\n      cacheMap.clear();\n    }\n\n    return this;\n  }\n  /**\n   * Adds the provided key and value to the cache. If the key already\n   * exists, no change is made. Returns itself for method chaining.\n   *\n   * To prime the cache with an error at a key, provide an Error instance.\n   */\n  ;\n\n  _proto.prime = function prime(key, value) {\n    var cacheMap = this._cacheMap;\n\n    if (cacheMap) {\n      var cacheKey = this._cacheKeyFn(key); // Only add the key if it does not already exist.\n\n\n      if (cacheMap.get(cacheKey) === undefined) {\n        // Cache a rejected promise if the value is an Error, in order to match\n        // the behavior of load(key).\n        var promise;\n\n        if (value instanceof Error) {\n          promise = Promise.reject(value); // Since this is a case where an Error is intentionally being primed\n          // for a given key, we want to disable unhandled promise rejection.\n\n          promise[\"catch\"](function () {});\n        } else {\n          promise = Promise.resolve(value);\n        }\n\n        cacheMap.set(cacheKey, promise);\n      }\n    }\n\n    return this;\n  };\n\n  return DataLoader;\n}(); // Private: Enqueue a Job to be executed after all \"PromiseJobs\" Jobs.\n//\n// ES6 JavaScript uses the concepts Job and JobQueue to schedule work to occur\n// after the current execution context has completed:\n// http://www.ecma-international.org/ecma-262/6.0/#sec-jobs-and-job-queues\n//\n// Node.js uses the `process.nextTick` mechanism to implement the concept of a\n// Job, maintaining a global FIFO JobQueue for all Jobs, which is flushed after\n// the current call stack ends.\n//\n// When calling `then` on a Promise, it enqueues a Job on a specific\n// \"PromiseJobs\" JobQueue which is flushed in Node as a single Job on the\n// global JobQueue.\n//\n// DataLoader batches all loads which occur in a single frame of execution, but\n// should include in the batch all loads which occur during the flushing of the\n// \"PromiseJobs\" JobQueue after that same execution frame.\n//\n// In order to avoid the DataLoader dispatch Job occuring before \"PromiseJobs\",\n// A Promise Job is created with the sole purpose of enqueuing a global Job,\n// ensuring that it always occurs after \"PromiseJobs\" ends.\n//\n// Node.js's job queue is unique. Browsers do not have an equivalent mechanism\n// for enqueuing a job to be performed after promise microtasks and before the\n// next macrotask. For browser environments, a macrotask is used (via\n// setImmediate or setTimeout) at a potential performance penalty.\n\n\nvar enqueuePostPromiseJob = typeof process === 'object' && typeof process.nextTick === 'function' ? function (fn) {\n  if (!resolvedPromise) {\n    resolvedPromise = Promise.resolve();\n  }\n\n  resolvedPromise.then(function () {\n    process.nextTick(fn);\n  });\n} : typeof setImmediate === 'function' ? function (fn) {\n  setImmediate(fn);\n} : function (fn) {\n  setTimeout(fn);\n}; // Private: cached resolved Promise instance\n\nvar resolvedPromise; // Private: Describes a batch of requests\n\n// Private: Either returns the current batch, or creates and schedules a\n// dispatch of a new batch for the given loader.\nfunction getCurrentBatch(loader) {\n  // If there is an existing batch which has not yet dispatched and is within\n  // the limit of the batch size, then return it.\n  var existingBatch = loader._batch;\n\n  if (existingBatch !== null && !existingBatch.hasDispatched && existingBatch.keys.length < loader._maxBatchSize && (!existingBatch.cacheHits || existingBatch.cacheHits.length < loader._maxBatchSize)) {\n    return existingBatch;\n  } // Otherwise, create a new batch for this loader.\n\n\n  var newBatch = {\n    hasDispatched: false,\n    keys: [],\n    callbacks: []\n  }; // Store it on the loader so it may be reused.\n\n  loader._batch = newBatch; // Then schedule a task to dispatch this batch of requests.\n\n  loader._batchScheduleFn(function () {\n    dispatchBatch(loader, newBatch);\n  });\n\n  return newBatch;\n}\n\nfunction dispatchBatch(loader, batch) {\n  // Mark this batch as having been dispatched.\n  batch.hasDispatched = true; // If there's nothing to load, resolve any cache hits and return early.\n\n  if (batch.keys.length === 0) {\n    resolveCacheHits(batch);\n    return;\n  } // Call the provided batchLoadFn for this loader with the batch's keys and\n  // with the loader as the `this` context.\n\n\n  var batchPromise = loader._batchLoadFn(batch.keys); // Assert the expected response from batchLoadFn\n\n\n  if (!batchPromise || typeof batchPromise.then !== 'function') {\n    return failedDispatch(loader, batch, new TypeError('DataLoader must be constructed with a function which accepts ' + 'Array<key> and returns Promise<Array<value>>, but the function did ' + (\"not return a Promise: \" + String(batchPromise) + \".\")));\n  } // Await the resolution of the call to batchLoadFn.\n\n\n  batchPromise.then(function (values) {\n    // Assert the expected resolution from batchLoadFn.\n    if (!isArrayLike(values)) {\n      throw new TypeError('DataLoader must be constructed with a function which accepts ' + 'Array<key> and returns Promise<Array<value>>, but the function did ' + (\"not return a Promise of an Array: \" + String(values) + \".\"));\n    }\n\n    if (values.length !== batch.keys.length) {\n      throw new TypeError('DataLoader must be constructed with a function which accepts ' + 'Array<key> and returns Promise<Array<value>>, but the function did ' + 'not return a Promise of an Array of the same length as the Array ' + 'of keys.' + (\"\\n\\nKeys:\\n\" + String(batch.keys)) + (\"\\n\\nValues:\\n\" + String(values)));\n    } // Resolve all cache hits in the same micro-task as freshly loaded values.\n\n\n    resolveCacheHits(batch); // Step through values, resolving or rejecting each Promise in the batch.\n\n    for (var i = 0; i < batch.callbacks.length; i++) {\n      var value = values[i];\n\n      if (value instanceof Error) {\n        batch.callbacks[i].reject(value);\n      } else {\n        batch.callbacks[i].resolve(value);\n      }\n    }\n  })[\"catch\"](function (error) {\n    failedDispatch(loader, batch, error);\n  });\n} // Private: do not cache individual loads if the entire batch dispatch fails,\n// but still reject each request so they do not hang.\n\n\nfunction failedDispatch(loader, batch, error) {\n  // Cache hits are resolved, even though the batch failed.\n  resolveCacheHits(batch);\n\n  for (var i = 0; i < batch.keys.length; i++) {\n    loader.clear(batch.keys[i]);\n    batch.callbacks[i].reject(error);\n  }\n} // Private: Resolves the Promises for any cache hits in this batch.\n\n\nfunction resolveCacheHits(batch) {\n  if (batch.cacheHits) {\n    for (var i = 0; i < batch.cacheHits.length; i++) {\n      batch.cacheHits[i]();\n    }\n  }\n} // Private: given the DataLoader's options, produce a valid max batch size.\n\n\nfunction getValidMaxBatchSize(options) {\n  var shouldBatch = !options || options.batch !== false;\n\n  if (!shouldBatch) {\n    return 1;\n  }\n\n  var maxBatchSize = options && options.maxBatchSize;\n\n  if (maxBatchSize === undefined) {\n    return Infinity;\n  }\n\n  if (typeof maxBatchSize !== 'number' || maxBatchSize < 1) {\n    throw new TypeError(\"maxBatchSize must be a positive number: \" + maxBatchSize);\n  }\n\n  return maxBatchSize;\n} // Private\n\n\nfunction getValidBatchScheduleFn(options) {\n  var batchScheduleFn = options && options.batchScheduleFn;\n\n  if (batchScheduleFn === undefined) {\n    return enqueuePostPromiseJob;\n  }\n\n  if (typeof batchScheduleFn !== 'function') {\n    throw new TypeError(\"batchScheduleFn must be a function: \" + batchScheduleFn);\n  }\n\n  return batchScheduleFn;\n} // Private: given the DataLoader's options, produce a cache key function.\n\n\nfunction getValidCacheKeyFn(options) {\n  var cacheKeyFn = options && options.cacheKeyFn;\n\n  if (cacheKeyFn === undefined) {\n    return function (key) {\n      return key;\n    };\n  }\n\n  if (typeof cacheKeyFn !== 'function') {\n    throw new TypeError(\"cacheKeyFn must be a function: \" + cacheKeyFn);\n  }\n\n  return cacheKeyFn;\n} // Private: given the DataLoader's options, produce a CacheMap to be used.\n\n\nfunction getValidCacheMap(options) {\n  var shouldCache = !options || options.cache !== false;\n\n  if (!shouldCache) {\n    return null;\n  }\n\n  var cacheMap = options && options.cacheMap;\n\n  if (cacheMap === undefined) {\n    return new Map();\n  }\n\n  if (cacheMap !== null) {\n    var cacheFunctions = ['get', 'set', 'delete', 'clear'];\n    var missingFunctions = cacheFunctions.filter(function (fnName) {\n      return cacheMap && typeof cacheMap[fnName] !== 'function';\n    });\n\n    if (missingFunctions.length !== 0) {\n      throw new TypeError('Custom cacheMap missing methods: ' + missingFunctions.join(', '));\n    }\n  }\n\n  return cacheMap;\n} // Private\n\n\nfunction isArrayLike(x) {\n  return typeof x === 'object' && x !== null && typeof x.length === 'number' && (x.length === 0 || x.length > 0 && Object.prototype.hasOwnProperty.call(x, x.length - 1));\n}\n\nmodule.exports = DataLoader;", "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __spreadArray;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __classPrivateFieldIn;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function(m, o) {\r\n        for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n    };\r\n\r\n    __createBinding = Object.create ? (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        var desc = Object.getOwnPropertyDescriptor(m, k);\r\n        if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n            desc = { enumerable: true, get: function() { return m[k]; } };\r\n        }\r\n        Object.defineProperty(o, k2, desc);\r\n    }) : (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    });\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __spreadArray = function (to, from, pack) {\r\n        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n            if (ar || !(i in from)) {\r\n                if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n                ar[i] = from[i];\r\n            }\r\n        }\r\n        return to.concat(ar || Array.prototype.slice.call(from));\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    var __setModuleDefault = Object.create ? (function(o, v) {\r\n        Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n    }) : function(o, v) {\r\n        o[\"default\"] = v;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, state, kind, f) {\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n        return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, state, value, kind, f) {\r\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n        return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n    };\r\n\r\n    __classPrivateFieldIn = function (state, receiver) {\r\n        if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n        return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__spreadArray\", __spreadArray);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n    exporter(\"__classPrivateFieldIn\", __classPrivateFieldIn);\r\n});\r\n", "", "var hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar match = String.prototype.match;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (\n    [].__proto__ === Array.prototype // eslint-disable-line no-proto\n        ? function (O) {\n            return O.__proto__; // eslint-disable-line no-proto\n        }\n        : null\n);\n\nvar inspectCustom = require('./util.inspect').custom;\nvar inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;\nvar toStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag !== 'undefined' ? Symbol.toStringTag : null;\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n    var opts = options || {};\n\n    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {\n        throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n    }\n    if (\n        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'\n            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity\n            : opts.maxStringLength !== null\n        )\n    ) {\n        throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n    }\n    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n    if (typeof customInspect !== 'boolean') {\n        throw new TypeError('option \"customInspect\", if provided, must be `true` or `false`');\n    }\n\n    if (\n        has(opts, 'indent')\n        && opts.indent !== null\n        && opts.indent !== '\\t'\n        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)\n    ) {\n        throw new TypeError('options \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n    }\n\n    if (typeof obj === 'undefined') {\n        return 'undefined';\n    }\n    if (obj === null) {\n        return 'null';\n    }\n    if (typeof obj === 'boolean') {\n        return obj ? 'true' : 'false';\n    }\n\n    if (typeof obj === 'string') {\n        return inspectString(obj, opts);\n    }\n    if (typeof obj === 'number') {\n        if (obj === 0) {\n            return Infinity / obj > 0 ? '0' : '-0';\n        }\n        return String(obj);\n    }\n    if (typeof obj === 'bigint') {\n        return String(obj) + 'n';\n    }\n\n    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n    if (typeof depth === 'undefined') { depth = 0; }\n    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n        return isArray(obj) ? '[Array]' : '[Object]';\n    }\n\n    var indent = getIndent(opts, depth);\n\n    if (typeof seen === 'undefined') {\n        seen = [];\n    } else if (indexOf(seen, obj) >= 0) {\n        return '[Circular]';\n    }\n\n    function inspect(value, from, noIndent) {\n        if (from) {\n            seen = seen.slice();\n            seen.push(from);\n        }\n        if (noIndent) {\n            var newOpts = {\n                depth: opts.depth\n            };\n            if (has(opts, 'quoteStyle')) {\n                newOpts.quoteStyle = opts.quoteStyle;\n            }\n            return inspect_(value, newOpts, depth + 1, seen);\n        }\n        return inspect_(value, opts, depth + 1, seen);\n    }\n\n    if (typeof obj === 'function') {\n        var name = nameOf(obj);\n        var keys = arrObjKeys(obj, inspect);\n        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');\n    }\n    if (isSymbol(obj)) {\n        var symString = hasShammedSymbols ? String(obj).replace(/^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n    }\n    if (isElement(obj)) {\n        var s = '<' + String(obj.nodeName).toLowerCase();\n        var attrs = obj.attributes || [];\n        for (var i = 0; i < attrs.length; i++) {\n            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n        }\n        s += '>';\n        if (obj.childNodes && obj.childNodes.length) { s += '...'; }\n        s += '</' + String(obj.nodeName).toLowerCase() + '>';\n        return s;\n    }\n    if (isArray(obj)) {\n        if (obj.length === 0) { return '[]'; }\n        var xs = arrObjKeys(obj, inspect);\n        if (indent && !singleLineValues(xs)) {\n            return '[' + indentedJoin(xs, indent) + ']';\n        }\n        return '[ ' + xs.join(', ') + ' ]';\n    }\n    if (isError(obj)) {\n        var parts = arrObjKeys(obj, inspect);\n        if (parts.length === 0) { return '[' + String(obj) + ']'; }\n        return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';\n    }\n    if (typeof obj === 'object' && customInspect) {\n        if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {\n            return obj[inspectSymbol]();\n        } else if (typeof obj.inspect === 'function') {\n            return obj.inspect();\n        }\n    }\n    if (isMap(obj)) {\n        var mapParts = [];\n        mapForEach.call(obj, function (value, key) {\n            mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n        });\n        return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n    }\n    if (isSet(obj)) {\n        var setParts = [];\n        setForEach.call(obj, function (value) {\n            setParts.push(inspect(value, obj));\n        });\n        return collectionOf('Set', setSize.call(obj), setParts, indent);\n    }\n    if (isWeakMap(obj)) {\n        return weakCollectionOf('WeakMap');\n    }\n    if (isWeakSet(obj)) {\n        return weakCollectionOf('WeakSet');\n    }\n    if (isWeakRef(obj)) {\n        return weakCollectionOf('WeakRef');\n    }\n    if (isNumber(obj)) {\n        return markBoxed(inspect(Number(obj)));\n    }\n    if (isBigInt(obj)) {\n        return markBoxed(inspect(bigIntValueOf.call(obj)));\n    }\n    if (isBoolean(obj)) {\n        return markBoxed(booleanValueOf.call(obj));\n    }\n    if (isString(obj)) {\n        return markBoxed(inspect(String(obj)));\n    }\n    if (!isDate(obj) && !isRegExp(obj)) {\n        var ys = arrObjKeys(obj, inspect);\n        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n        var protoTag = obj instanceof Object ? '' : 'null prototype';\n        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? toStr(obj).slice(8, -1) : protoTag ? 'Object' : '';\n        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n        var tag = constructorTag + (stringTag || protoTag ? '[' + [].concat(stringTag || [], protoTag || []).join(': ') + '] ' : '');\n        if (ys.length === 0) { return tag + '{}'; }\n        if (indent) {\n            return tag + '{' + indentedJoin(ys, indent) + '}';\n        }\n        return tag + '{ ' + ys.join(', ') + ' }';\n    }\n    return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '\"' : \"'\";\n    return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n    return String(s).replace(/\"/g, '&quot;');\n}\n\nfunction isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\n// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\nfunction isSymbol(obj) {\n    if (hasShammedSymbols) {\n        return obj && typeof obj === 'object' && obj instanceof Symbol;\n    }\n    if (typeof obj === 'symbol') {\n        return true;\n    }\n    if (!obj || typeof obj !== 'object' || !symToString) {\n        return false;\n    }\n    try {\n        symToString.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isBigInt(obj) {\n    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n        return false;\n    }\n    try {\n        bigIntValueOf.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };\nfunction has(obj, key) {\n    return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n    return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n    if (f.name) { return f.name; }\n    var m = match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n    if (m) { return m[1]; }\n    return null;\n}\n\nfunction indexOf(xs, x) {\n    if (xs.indexOf) { return xs.indexOf(x); }\n    for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x) { return i; }\n    }\n    return -1;\n}\n\nfunction isMap(x) {\n    if (!mapSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        mapSize.call(x);\n        try {\n            setSize.call(x);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof Map; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakMap(x) {\n    if (!weakMapHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakMapHas.call(x, weakMapHas);\n        try {\n            weakSetHas.call(x, weakSetHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakRef(x) {\n    if (!weakRefDeref || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakRefDeref.call(x);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isSet(x) {\n    if (!setSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        setSize.call(x);\n        try {\n            mapSize.call(x);\n        } catch (m) {\n            return true;\n        }\n        return x instanceof Set; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakSet(x) {\n    if (!weakSetHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakSetHas.call(x, weakSetHas);\n        try {\n            weakMapHas.call(x, weakMapHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isElement(x) {\n    if (!x || typeof x !== 'object') { return false; }\n    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n        return true;\n    }\n    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n    if (str.length > opts.maxStringLength) {\n        var remaining = str.length - opts.maxStringLength;\n        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n        return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;\n    }\n    // eslint-disable-next-line no-control-regex\n    var s = str.replace(/(['\\\\])/g, '\\\\$1').replace(/[\\x00-\\x1f]/g, lowbyte);\n    return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n    var n = c.charCodeAt(0);\n    var x = {\n        8: 'b',\n        9: 't',\n        10: 'n',\n        12: 'f',\n        13: 'r'\n    }[n];\n    if (x) { return '\\\\' + x; }\n    return '\\\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();\n}\n\nfunction markBoxed(str) {\n    return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n    return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n    var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');\n    return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n    for (var i = 0; i < xs.length; i++) {\n        if (indexOf(xs[i], '\\n') >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction getIndent(opts, depth) {\n    var baseIndent;\n    if (opts.indent === '\\t') {\n        baseIndent = '\\t';\n    } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n        baseIndent = Array(opts.indent + 1).join(' ');\n    } else {\n        return null;\n    }\n    return {\n        base: baseIndent,\n        prev: Array(depth + 1).join(baseIndent)\n    };\n}\n\nfunction indentedJoin(xs, indent) {\n    if (xs.length === 0) { return ''; }\n    var lineJoiner = '\\n' + indent.prev + indent.base;\n    return lineJoiner + xs.join(',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n    var isArr = isArray(obj);\n    var xs = [];\n    if (isArr) {\n        xs.length = obj.length;\n        for (var i = 0; i < obj.length; i++) {\n            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n        }\n    }\n    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n    var symMap;\n    if (hasShammedSymbols) {\n        symMap = {};\n        for (var k = 0; k < syms.length; k++) {\n            symMap['$' + syms[k]] = syms[k];\n        }\n    }\n\n    for (var key in obj) { // eslint-disable-line no-restricted-syntax\n        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        } else if ((/[^\\w$]/).test(key)) {\n            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n        } else {\n            xs.push(key + ': ' + inspect(obj[key], obj));\n        }\n    }\n    if (typeof gOPS === 'function') {\n        for (var j = 0; j < syms.length; j++) {\n            if (isEnumerable.call(obj, syms[j])) {\n                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n            }\n        }\n    }\n    return xs;\n}\n", "/**\n * A simple dependency graph\n */\n\n/**\n * Helper for creating a Topological Sort using Depth-First-Search on a set of edges.\n *\n * Detects cycles and throws an Error if one is detected (unless the \"circular\"\n * parameter is \"true\" in which case it ignores them).\n *\n * @param edges The set of edges to DFS through\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\n * @param result An array in which the results will be populated\n * @param circular A boolean to allow circular dependencies\n */\nfunction createDFS(edges, leavesOnly, result, circular) {\n  var visited = {};\n  return function (start) {\n    if (visited[start]) {\n      return;\n    }\n    var inCurrentPath = {};\n    var currentPath = [];\n    var todo = []; // used as a stack\n    todo.push({ node: start, processed: false });\n    while (todo.length > 0) {\n      var current = todo[todo.length - 1]; // peek at the todo stack\n      var processed = current.processed;\n      var node = current.node;\n      if (!processed) {\n        // Haven't visited edges yet (visiting phase)\n        if (visited[node]) {\n          todo.pop();\n          continue;\n        } else if (inCurrentPath[node]) {\n          // It's not a DAG\n          if (circular) {\n            todo.pop();\n            // If we're tolerating cycles, don't revisit the node\n            continue;\n          }\n          currentPath.push(node);\n          throw new DepGraphCycleError(currentPath);\n        }\n\n        inCurrentPath[node] = true;\n        currentPath.push(node);\n        var nodeEdges = edges[node];\n        // (push edges onto the todo stack in reverse order to be order-compatible with the old DFS implementation)\n        for (var i = nodeEdges.length - 1; i >= 0; i--) {\n          todo.push({ node: nodeEdges[i], processed: false });\n        }\n        current.processed = true;\n      } else {\n        // Have visited edges (stack unrolling phase)\n        todo.pop();\n        currentPath.pop();\n        inCurrentPath[node] = false;\n        visited[node] = true;\n        if (!leavesOnly || edges[node].length === 0) {\n          result.push(node);\n        }\n      }\n    }\n  };\n}\n\n/**\n * Simple Dependency Graph\n */\nvar DepGraph = (exports.DepGraph = function DepGraph(opts) {\n  this.nodes = {}; // Node -> Node/Data (treated like a Set)\n  this.outgoingEdges = {}; // Node -> [Dependency Node]\n  this.incomingEdges = {}; // Node -> [Dependant Node]\n  this.circular = opts && !!opts.circular; // Allows circular deps\n});\nDepGraph.prototype = {\n  /**\n   * The number of nodes in the graph.\n   */\n  size: function () {\n    return Object.keys(this.nodes).length;\n  },\n  /**\n   * Add a node to the dependency graph. If a node already exists, this method will do nothing.\n   */\n  addNode: function (node, data) {\n    if (!this.hasNode(node)) {\n      // Checking the arguments length allows the user to add a node with undefined data\n      if (arguments.length === 2) {\n        this.nodes[node] = data;\n      } else {\n        this.nodes[node] = node;\n      }\n      this.outgoingEdges[node] = [];\n      this.incomingEdges[node] = [];\n    }\n  },\n  /**\n   * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\n   */\n  removeNode: function (node) {\n    if (this.hasNode(node)) {\n      delete this.nodes[node];\n      delete this.outgoingEdges[node];\n      delete this.incomingEdges[node];\n      [this.incomingEdges, this.outgoingEdges].forEach(function (edgeList) {\n        Object.keys(edgeList).forEach(function (key) {\n          var idx = edgeList[key].indexOf(node);\n          if (idx >= 0) {\n            edgeList[key].splice(idx, 1);\n          }\n        }, this);\n      });\n    }\n  },\n  /**\n   * Check if a node exists in the graph\n   */\n  hasNode: function (node) {\n    return this.nodes.hasOwnProperty(node);\n  },\n  /**\n   * Get the data associated with a node name\n   */\n  getNodeData: function (node) {\n    if (this.hasNode(node)) {\n      return this.nodes[node];\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * Set the associated data for a given node name. If the node does not exist, this method will throw an error\n   */\n  setNodeData: function (node, data) {\n    if (this.hasNode(node)) {\n      this.nodes[node] = data;\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * Add a dependency between two nodes. If either of the nodes does not exist,\n   * an Error will be thrown.\n   */\n  addDependency: function (from, to) {\n    if (!this.hasNode(from)) {\n      throw new Error(\"Node does not exist: \" + from);\n    }\n    if (!this.hasNode(to)) {\n      throw new Error(\"Node does not exist: \" + to);\n    }\n    if (this.outgoingEdges[from].indexOf(to) === -1) {\n      this.outgoingEdges[from].push(to);\n    }\n    if (this.incomingEdges[to].indexOf(from) === -1) {\n      this.incomingEdges[to].push(from);\n    }\n    return true;\n  },\n  /**\n   * Remove a dependency between two nodes.\n   */\n  removeDependency: function (from, to) {\n    var idx;\n    if (this.hasNode(from)) {\n      idx = this.outgoingEdges[from].indexOf(to);\n      if (idx >= 0) {\n        this.outgoingEdges[from].splice(idx, 1);\n      }\n    }\n\n    if (this.hasNode(to)) {\n      idx = this.incomingEdges[to].indexOf(from);\n      if (idx >= 0) {\n        this.incomingEdges[to].splice(idx, 1);\n      }\n    }\n  },\n  /**\n   * Return a clone of the dependency graph. If any custom data is attached\n   * to the nodes, it will only be shallow copied.\n   */\n  clone: function () {\n    var source = this;\n    var result = new DepGraph();\n    var keys = Object.keys(source.nodes);\n    keys.forEach(function (n) {\n      result.nodes[n] = source.nodes[n];\n      result.outgoingEdges[n] = source.outgoingEdges[n].slice(0);\n      result.incomingEdges[n] = source.incomingEdges[n].slice(0);\n    });\n    return result;\n  },\n  /**\n   * Get an array containing the direct dependencies of the specified node.\n   *\n   * Throws an Error if the specified node does not exist.\n   */\n  directDependenciesOf: function (node) {\n    if (this.hasNode(node)) {\n      return this.outgoingEdges[node].slice(0);\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * Get an array containing the nodes that directly depend on the specified node.\n   *\n   * Throws an Error if the specified node does not exist.\n   */\n  directDependantsOf: function (node) {\n    if (this.hasNode(node)) {\n      return this.incomingEdges[node].slice(0);\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * Get an array containing the nodes that the specified node depends on (transitively).\n   *\n   * Throws an Error if the graph has a cycle, or the specified node does not exist.\n   *\n   * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\n   * in the array.\n   */\n  dependenciesOf: function (node, leavesOnly) {\n    if (this.hasNode(node)) {\n      var result = [];\n      var DFS = createDFS(\n        this.outgoingEdges,\n        leavesOnly,\n        result,\n        this.circular\n      );\n      DFS(node);\n      var idx = result.indexOf(node);\n      if (idx >= 0) {\n        result.splice(idx, 1);\n      }\n      return result;\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * get an array containing the nodes that depend on the specified node (transitively).\n   *\n   * Throws an Error if the graph has a cycle, or the specified node does not exist.\n   *\n   * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\n   */\n  dependantsOf: function (node, leavesOnly) {\n    if (this.hasNode(node)) {\n      var result = [];\n      var DFS = createDFS(\n        this.incomingEdges,\n        leavesOnly,\n        result,\n        this.circular\n      );\n      DFS(node);\n      var idx = result.indexOf(node);\n      if (idx >= 0) {\n        result.splice(idx, 1);\n      }\n      return result;\n    } else {\n      throw new Error(\"Node does not exist: \" + node);\n    }\n  },\n  /**\n   * Construct the overall processing order for the dependency graph.\n   *\n   * Throws an Error if the graph has a cycle.\n   *\n   * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\n   */\n  overallOrder: function (leavesOnly) {\n    var self = this;\n    var result = [];\n    var keys = Object.keys(this.nodes);\n    if (keys.length === 0) {\n      return result; // Empty graph\n    } else {\n      if (!this.circular) {\n        // Look for cycles - we run the DFS starting at all the nodes in case there\n        // are several disconnected subgraphs inside this dependency graph.\n        var CycleDFS = createDFS(this.outgoingEdges, false, [], this.circular);\n        keys.forEach(function (n) {\n          CycleDFS(n);\n        });\n      }\n\n      var DFS = createDFS(\n        this.outgoingEdges,\n        leavesOnly,\n        result,\n        this.circular\n      );\n      // Find all potential starting points (nodes with nothing depending on them) an\n      // run a DFS starting at these points to get the order\n      keys\n        .filter(function (node) {\n          return self.incomingEdges[node].length === 0;\n        })\n        .forEach(function (n) {\n          DFS(n);\n        });\n\n      // If we're allowing cycles - we need to run the DFS against any remaining\n      // nodes that did not end up in the initial result (as they are part of a\n      // subgraph that does not have a clear starting point)\n      if (this.circular) {\n        keys\n          .filter(function (node) {\n            return result.indexOf(node) === -1;\n          })\n          .forEach(function (n) {\n            DFS(n);\n          });\n      }\n\n      return result;\n    }\n  },\n  /**\n   * Get an array of nodes that have no dependants (i.e. nothing depends on them).\n   */\n  entryNodes: function () {\n    var self = this;\n    return Object.keys(this.nodes).filter(function (node) {\n      return self.incomingEdges[node].length === 0;\n    });\n  }\n};\n\n// Create some aliases\nDepGraph.prototype.directDependentsOf = DepGraph.prototype.directDependantsOf;\nDepGraph.prototype.dependentsOf = DepGraph.prototype.dependantsOf;\n\n/**\n * Cycle error, including the path of the cycle.\n */\nvar DepGraphCycleError = (exports.DepGraphCycleError = function (cyclePath) {\n  var message = \"Dependency Cycle Found: \" + cyclePath.join(\" -> \");\n  var instance = new Error(message);\n  instance.cyclePath = cyclePath;\n  Object.setPrototypeOf(instance, Object.getPrototypeOf(this));\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(instance, DepGraphCycleError);\n  }\n  return instance;\n});\nDepGraphCycleError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: Error,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\nObject.setPrototypeOf(DepGraphCycleError, Error);\n", "/*!\n    localForage -- Offline Storage, Improved\n    Version 1.10.0\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb || !idb.open) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support\n        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n        // Safari 10.1 shipped with fetch, we can use that to detect it.\n        // Note: this creates issues with `window.fetch` polyfills and\n        // overrides; see:\n        // https://github.com/localForage/localForage/issues/856\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            var db = openreq.result;\n            db.onversionchange = function (e) {\n                // Triggered when the database is modified (e.g. adding an objectStore) or\n                // deleted (even when initiated by other sessions in different tabs).\n                // Closing the connection here prevents those operations from being blocked.\n                // If the database is accessed again later by this instance, the connection\n                // will be reopened or the database recreated as needed.\n                e.target.close();\n            };\n            resolve(db);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback returns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openKeyCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openKeyCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(req.error);\n                    };\n\n                    req.onblocked = function () {\n                        // Closing all open connections in onversionchange handler should prevent this situation, but if\n                        // we do get here, it just means the request remains pending - eventually it will succeed or error\n                        console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n", "// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nmodule.exports = ws\n", "'use strict';\n\n/**\n * Used to mark a\n * [React Native `File` substitute]{@link ReactNativeFileSubstitute}\n * in an object tree for [`extractFiles`]{@link extractFiles}. It\u2019s too risky to\n * assume all objects with `uri`, `type` and `name` properties are files to\n * extract.\n * @kind class\n * @name ReactNativeFile\n * @param {ReactNativeFileSubstitute} file A [React Native](https://reactnative.dev) [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) substitute.\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { ReactNativeFile } from 'extract-files';\n * ```\n *\n * ```js\n * import ReactNativeFile from 'extract-files/public/ReactNativeFile.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { ReactNativeFile } = require('extract-files');\n * ```\n *\n * ```js\n * const ReactNativeFile = require('extract-files/public/ReactNativeFile.js');\n * ```\n * @example <caption>An extractable file in [React Native](https://reactnative.dev).</caption>\n * ```js\n * const file = new ReactNativeFile({\n *   uri: uriFromCameraRoll,\n *   name: 'a.jpg',\n *   type: 'image/jpeg',\n * });\n * ```\n */\nmodule.exports = class ReactNativeFile {\n  constructor({ uri, name, type }) {\n    this.uri = uri;\n    this.name = name;\n    this.type = type;\n  }\n};\n", "'use strict';\n\nconst ReactNativeFile = require('./ReactNativeFile.js');\n\n/**\n * Checks if a value is an [extractable file]{@link ExtractableFile}.\n * @kind function\n * @name isExtractableFile\n * @type {ExtractableFileMatcher}\n * @param {*} value Value to check.\n * @returns {boolean} Is the value an [extractable file]{@link ExtractableFile}.\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { isExtractableFile } from 'extract-files';\n * ```\n *\n * ```js\n * import isExtractableFile from 'extract-files/public/isExtractableFile.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { isExtractableFile } = require('extract-files');\n * ```\n *\n * ```js\n * const isExtractableFile = require('extract-files/public/isExtractableFile.js');\n * ```\n */\nmodule.exports = function isExtractableFile(value) {\n  return (\n    (typeof File !== 'undefined' && value instanceof File) ||\n    (typeof Blob !== 'undefined' && value instanceof Blob) ||\n    value instanceof ReactNativeFile\n  );\n};\n", "'use strict';\n\nconst defaultIsExtractableFile = require('./isExtractableFile.js');\n\n/**\n * Clones a value, recursively extracting\n * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File),\n * [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) and\n * [`ReactNativeFile`]{@link ReactNativeFile} instances with their\n * [object paths]{@link ObjectPath}, replacing them with `null`.\n * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/Filelist) instances\n * are treated as [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File)\n * instance arrays.\n * @kind function\n * @name extractFiles\n * @param {*} value Value (typically an object tree) to extract files from.\n * @param {ObjectPath} [path=''] Prefix for object paths for extracted files.\n * @param {ExtractableFileMatcher} [isExtractableFile=isExtractableFile] The function used to identify extractable files.\n * @returns {ExtractFilesResult} Result.\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { extractFiles } from 'extract-files';\n * ```\n *\n * ```js\n * import extractFiles from 'extract-files/public/extractFiles.js';\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { extractFiles } = require('extract-files');\n * ```\n *\n * ```js\n * const extractFiles = require('extract-files/public/extractFiles.js');\n * ```\n * @example <caption>Extract files from an object.</caption>\n * For the following:\n *\n * ```js\n * const file1 = new File(['1'], '1.txt', { type: 'text/plain' });\n * const file2 = new File(['2'], '2.txt', { type: 'text/plain' });\n * const value = {\n *   a: file1,\n *   b: [file1, file2],\n * };\n *\n * const { clone, files } = extractFiles(value, 'prefix');\n * ```\n *\n * `value` remains the same.\n *\n * `clone` is:\n *\n * ```json\n * {\n *   \"a\": null,\n *   \"b\": [null, null]\n * }\n * ```\n *\n * `files` is a [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance containing:\n *\n * | Key     | Value                        |\n * | :------ | :--------------------------- |\n * | `file1` | `['prefix.a', 'prefix.b.0']` |\n * | `file2` | `['prefix.b.1']`             |\n */\nmodule.exports = function extractFiles(\n  value,\n  path = '',\n  isExtractableFile = defaultIsExtractableFile\n) {\n  // Map of extracted files and their object paths within the input value.\n  const files = new Map();\n\n  // Map of arrays and objects recursed within the input value and their clones,\n  // for reusing clones of values that are referenced multiple times within the\n  // input value.\n  const clones = new Map();\n\n  /**\n   * Recursively clones the value, extracting files.\n   * @kind function\n   * @name extractFiles~recurse\n   * @param {*} value Value to extract files from.\n   * @param {ObjectPath} path Prefix for object paths for extracted files.\n   * @param {Set} recursed Recursed arrays and objects for avoiding infinite recursion of circular references within the input value.\n   * @returns {*} Clone of the value with files replaced with `null`.\n   * @ignore\n   */\n  function recurse(value, path, recursed) {\n    let clone = value;\n\n    if (isExtractableFile(value)) {\n      clone = null;\n\n      const filePaths = files.get(value);\n\n      filePaths ? filePaths.push(path) : files.set(value, [path]);\n    } else {\n      const isList =\n        Array.isArray(value) ||\n        (typeof FileList !== 'undefined' && value instanceof FileList);\n      const isObject = value && value.constructor === Object;\n\n      if (isList || isObject) {\n        const hasClone = clones.has(value);\n\n        if (hasClone) clone = clones.get(value);\n        else {\n          clone = isList ? [] : {};\n\n          clones.set(value, clone);\n        }\n\n        if (!recursed.has(value)) {\n          const pathPrefix = path ? `${path}.` : '';\n          const recursedDeeper = new Set(recursed).add(value);\n\n          if (isList) {\n            let index = 0;\n\n            for (const item of value) {\n              const itemClone = recurse(\n                item,\n                pathPrefix + index++,\n                recursedDeeper\n              );\n\n              if (!hasClone) clone.push(itemClone);\n            }\n          } else\n            for (const key in value) {\n              const propertyClone = recurse(\n                value[key],\n                pathPrefix + key,\n                recursedDeeper\n              );\n\n              if (!hasClone) clone[key] = propertyClone;\n            }\n        }\n      }\n    }\n\n    return clone;\n  }\n\n  return {\n    clone: recurse(value, path, new Set()),\n    files,\n  };\n};\n", "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n", "/* eslint-env browser */\n\nconst { Buffer } = require('buffer/')\n\nfunction syncFetch (...args) {\n  const request = new syncFetch.Request(...args)\n\n  const xhr = new XMLHttpRequest()\n  xhr.withCredentials = request.credentials === 'include'\n  xhr.timeout = request[INTERNALS].timeout\n\n  // Request\n  xhr.open(request.method, request.url, false)\n\n  try {\n    xhr.responseType = 'arraybuffer'\n  } catch (e) {\n    // not in Worker scope\n    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType#Synchronous_XHR_restrictions\n  }\n\n  for (const header of request.headers) {\n    xhr.setRequestHeader(...header)\n  }\n\n  xhr.send(request.body || null)\n\n  // Response\n  let headers = xhr.getAllResponseHeaders()\n  headers = headers && headers.split('\\r\\n').filter(Boolean).map(header => header.split(': ', 2))\n\n  const response = new syncFetch.Response(xhr.response, {\n    headers,\n    status: xhr.status,\n    statusText: xhr.statusText\n  })\n\n  response[INTERNALS].url = xhr.responseURL\n  response[INTERNALS].redirected = xhr.responseURL !== request.url\n\n  return response\n}\n\nconst INTERNALS = Symbol('SyncFetch Internals')\nconst REQ_UNSUPPORTED = ['mode', 'cache', 'redirect', 'referrer', 'integrity']\nconst HTTP_STATUS = {\n  100: 'Continue',\n  101: 'Switching Protocols',\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-Authoritative Information',\n  204: 'No Content',\n  205: 'Reset Content',\n  206: 'Partial Content',\n  300: 'Multiple Choices',\n  301: 'Moved Permanently',\n  302: 'Found',\n  303: 'See Other',\n  304: 'Not Modified',\n  305: 'Use Proxy',\n  307: 'Temporary Redirect',\n  400: 'Bad Request',\n  401: 'Unauthorized',\n  402: 'Payment Required',\n  403: 'Forbidden',\n  404: 'Not Found',\n  405: 'Method Not Allowed',\n  406: 'Not Acceptable',\n  407: 'Proxy Authentication Required',\n  408: 'Request Timeout',\n  409: 'Conflict',\n  410: 'Gone',\n  411: 'Length Required',\n  412: 'Precondition Failed',\n  413: 'Payload Too Large',\n  414: 'URI Too Long',\n  415: 'Unsupported Media Type',\n  416: 'Range Not Satisfiable',\n  417: 'Expectation Failed',\n  426: 'Upgrade Required',\n  500: 'Internal Server Error',\n  501: 'Not Implemented',\n  502: 'Bad Gateway',\n  503: 'Service Unavailable',\n  504: 'Gateway Timeout',\n  505: 'HTTP Version Not Supported'\n}\n\nclass SyncRequest {\n  constructor (resource, init = {}) {\n    for (const option of REQ_UNSUPPORTED) {\n      if (option in init) {\n        throw new TypeError(`option ${option} not supported`)\n      }\n    }\n\n    if (init.credentials === 'same-origin') {\n      throw new TypeError('option credentials with value \\'same-origin\\' not supported')\n    }\n\n    this[INTERNALS] = {\n      method: init.method || 'GET',\n      headers: new syncFetch.Headers(init.headers),\n      body: init.body ? Buffer.from(init.body) : null,\n      credentials: init.credentials || 'omit',\n\n      // Non-spec\n      timeout: init.timeout || 0\n    }\n\n    if (typeof resource === 'string') {\n      this[INTERNALS].url = resource\n    } else if (resource instanceof SyncRequest) {\n      this[INTERNALS].url = resource.url\n      if (!init.method) {\n        this[INTERNALS].method = resource.method\n      }\n      if (!init.headers) {\n        this[INTERNALS].headers = resource.headers\n      }\n      if (!init.body) {\n        this[INTERNALS].body = resource[INTERNALS].body\n      }\n      if (!init.credentials) {\n        this[INTERNALS].credentials = resource.credentials\n      }\n    } else {\n      throw new TypeError('Request input should be a URL string or a Request object')\n    }\n  }\n\n  get cache () {\n    return 'default'\n  }\n\n  get credentials () {\n    return this[INTERNALS].credentials\n  }\n\n  get destination () {\n    return ''\n  }\n\n  get headers () {\n    return this[INTERNALS].headers\n  }\n\n  get integrity () {\n    return ''\n  }\n\n  get method () {\n    return this[INTERNALS].method\n  }\n\n  get mode () {\n    return 'cors'\n  }\n\n  get priority () {\n    return 'auto'\n  }\n\n  get redirect () {\n    return 'follow'\n  }\n\n  get referrer () {\n    return 'about:client'\n  }\n\n  get referrerPolicy () {\n    return ''\n  }\n\n  get url () {\n    return this[INTERNALS].url\n  }\n\n  clone () {\n    checkBody(this)\n    return new SyncRequest(this.url, this[INTERNALS])\n  }\n}\n\nclass SyncResponse {\n  constructor (body, init = {}) {\n    this[INTERNALS] = {\n      body: body ? Buffer.from(body) : null,\n      bodyUsed: false,\n\n      headers: new syncFetch.Headers(init.headers),\n      status: init.status,\n      statusText: init.statusText\n    }\n  }\n\n  get headers () {\n    return this[INTERNALS].headers\n  }\n\n  get ok () {\n    const status = this[INTERNALS].status\n    return status >= 200 && status < 300\n  }\n\n  get redirected () {\n    return this[INTERNALS].redirected\n  }\n\n  get status () {\n    return this[INTERNALS].status\n  }\n\n  get statusText () {\n    return this[INTERNALS].statusText\n  }\n\n  get url () {\n    return this[INTERNALS].url\n  }\n\n  clone () {\n    return this.redirect(this[INTERNALS].url, this[INTERNALS].status)\n  }\n\n  redirect (url, status) {\n    checkBody(this)\n\n    const response = new SyncResponse(this[INTERNALS].body, {\n      headers: this[INTERNALS].headers,\n      status: status || this[INTERNALS].status,\n      statusText: HTTP_STATUS[status] || this[INTERNALS].statusText\n    })\n\n    response[INTERNALS].url = url || this[INTERNALS].url\n    response[INTERNALS].redirected = this[INTERNALS].redirected\n\n    return response\n  }\n}\n\nclass Body {\n  constructor (body) {\n    this[INTERNALS] = {\n      body: Buffer.from(body),\n      bodyUsed: false\n    }\n  }\n\n  get bodyUsed () {\n    return this[INTERNALS].bodyUsed\n  }\n\n  static mixin (prototype) {\n    for (const name of Object.getOwnPropertyNames(Body.prototype)) {\n      if (name === 'constructor') { continue }\n      const desc = Object.getOwnPropertyDescriptor(Body.prototype, name)\n      Object.defineProperty(prototype, name, { ...desc, enumerable: true })\n    }\n  }\n\n  arrayBuffer () {\n    const buffer = consumeBody(this)\n    return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength)\n  }\n\n  blob () {\n    const type = this.headers && this.headers.get('content-type')\n    return new Blob([consumeBody(this)], type && { type })\n  }\n\n  text () {\n    return consumeBody(this).toString()\n  }\n\n  json () {\n    try {\n      return JSON.parse(consumeBody(this).toString())\n    } catch (err) {\n      throw new TypeError(`invalid json response body at ${this.url} reason: ${err.message}`, 'invalid-json')\n    }\n  }\n\n  buffer () {\n    return consumeBody(this).clone()\n  }\n}\n\nfunction checkBody (body) {\n  if (body.bodyUsed) {\n    throw new TypeError(`body used already for: ${body.url}`)\n  }\n}\n\nfunction consumeBody (body) {\n  checkBody(body)\n  body[INTERNALS].bodyUsed = true\n  return body[INTERNALS].body || Buffer.alloc(0)\n}\n\nBody.mixin(SyncRequest.prototype)\nBody.mixin(SyncResponse.prototype)\n\nclass Headers {\n  constructor (headers) {\n    if (headers instanceof syncFetch.Headers) {\n      this[INTERNALS] = { ...headers[INTERNALS] }\n    } else {\n      this[INTERNALS] = {}\n\n      if (Array.isArray(headers)) {\n        for (const [name, value] of headers) {\n          this.append(name, value)\n        }\n      } else if (typeof headers === 'object') {\n        for (const name in headers) {\n          this.set(name, headers[name])\n        }\n      }\n    }\n  }\n\n  // modification\n  append (name, value) {\n    name = name.toLowerCase()\n    if (!this[INTERNALS][name]) {\n      this[INTERNALS][name] = []\n    }\n    this[INTERNALS][name].push(value)\n  }\n\n  delete (name) {\n    delete this[INTERNALS][name.toLowerCase()]\n  }\n\n  set (name, value) {\n    this[INTERNALS][name.toLowerCase()] = [value]\n  }\n\n  // access\n  entries () {\n    const pairs = []\n    for (const name in this[INTERNALS]) {\n      for (const value of this[INTERNALS][name]) {\n        pairs.push([name, value])\n      }\n    }\n    return pairs\n  }\n\n  get (name) {\n    name = name.toLowerCase()\n    return name in this[INTERNALS] ? this[INTERNALS][name].join(', ') : null\n  }\n\n  keys () {\n    return Object.keys(this[INTERNALS])\n  }\n\n  has (name) {\n    return name.toLowerCase() in this[INTERNALS]\n  }\n\n  values () {\n    const values = []\n    for (const name in this[INTERNALS]) {\n      for (const value of this[INTERNALS][name]) {\n        values.push(value)\n      }\n    }\n    return values\n  }\n\n  * [Symbol.iterator] () {\n    for (const name in this[INTERNALS]) {\n      for (const value of this[INTERNALS][name]) {\n        yield [name, value]\n      }\n    }\n  }\n}\n\nsyncFetch.Headers = Headers\nsyncFetch.Request = SyncRequest\nsyncFetch.Response = SyncResponse\nmodule.exports = syncFetch\n", "// @ts-nocheck\nimport { buildASTSchema } from 'graphql';\n\nconst schemaAST = {\n  \"kind\": \"Document\",\n  \"definitions\": [\n    {\n      \"kind\": \"SchemaDefinition\",\n      \"operationTypes\": [\n        {\n          \"kind\": \"OperationTypeDefinition\",\n          \"operation\": \"query\",\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Query\"\n            }\n          }\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"DirectiveDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"key\"\n      },\n      \"arguments\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"fields\"\n          },\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"repeatable\": false,\n      \"locations\": [\n        {\n          \"kind\": \"Name\",\n          \"value\": \"OBJECT\"\n        },\n        {\n          \"kind\": \"Name\",\n          \"value\": \"INTERFACE\"\n        }\n      ]\n    },\n    {\n      \"kind\": \"DirectiveDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"extends\"\n      },\n      \"arguments\": [],\n      \"repeatable\": false,\n      \"locations\": [\n        {\n          \"kind\": \"Name\",\n          \"value\": \"OBJECT\"\n        },\n        {\n          \"kind\": \"Name\",\n          \"value\": \"INTERFACE\"\n        }\n      ]\n    },\n    {\n      \"kind\": \"DirectiveDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"external\"\n      },\n      \"arguments\": [],\n      \"repeatable\": false,\n      \"locations\": [\n        {\n          \"kind\": \"Name\",\n          \"value\": \"OBJECT\"\n        },\n        {\n          \"kind\": \"Name\",\n          \"value\": \"FIELD_DEFINITION\"\n        }\n      ]\n    },\n    {\n      \"kind\": \"DirectiveDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"requires\"\n      },\n      \"arguments\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"fields\"\n          },\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"repeatable\": false,\n      \"locations\": [\n        {\n          \"kind\": \"Name\",\n          \"value\": \"FIELD_DEFINITION\"\n        }\n      ]\n    },\n    {\n      \"kind\": \"DirectiveDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"provides\"\n      },\n      \"arguments\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"fields\"\n          },\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"repeatable\": false,\n      \"locations\": [\n        {\n          \"kind\": \"Name\",\n          \"value\": \"FIELD_DEFINITION\"\n        }\n      ]\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Country\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"native\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"phone\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"continent\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Continent\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"capital\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"currency\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"languages\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Language\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"emoji\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"emojiU\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"states\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"State\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Continent\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"countries\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Country\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Language\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"native\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"rtl\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Boolean\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"State\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"country\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Country\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"InputObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"StringQueryOperatorInput\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"eq\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"ne\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"in\"\n          },\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"nin\"\n          },\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"regex\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"glob\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"InputObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"CountryFilterInput\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StringQueryOperatorInput\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"currency\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StringQueryOperatorInput\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"continent\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StringQueryOperatorInput\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"InputObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"ContinentFilterInput\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StringQueryOperatorInput\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"InputObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"LanguageFilterInput\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StringQueryOperatorInput\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Query\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"_entities\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"representations\"\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"ListType\",\n                  \"type\": {\n                    \"kind\": \"NonNullType\",\n                    \"type\": {\n                      \"kind\": \"NamedType\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"_Any\"\n                      }\n                    }\n                  }\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"_Entity\"\n                }\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"_service\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"_Service\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"countries\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"filter\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"CountryFilterInput\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Country\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"country\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"code\"\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"ID\"\n                  }\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Country\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"continents\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"filter\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ContinentFilterInput\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Continent\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"continent\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"code\"\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"ID\"\n                  }\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Continent\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"languages\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"filter\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"LanguageFilterInput\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Language\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"language\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"code\"\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"ID\"\n                  }\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Language\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"UnionTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"_Entity\"\n      },\n      \"directives\": [],\n      \"types\": [\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Country\"\n          }\n        },\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Continent\"\n          }\n        },\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Language\"\n          }\n        }\n      ]\n    },\n    {\n      \"kind\": \"ScalarTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"_Any\"\n      },\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"_Service\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"sdl\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    }\n  ]\n};\n\nexport default buildASTSchema(schemaAST, {\n  assumeValid: true,\n  assumeValidSDL: true\n});", "// @ts-nocheck\nimport { buildASTSchema } from 'graphql';\n\nconst schemaAST = {\n  \"kind\": \"Document\",\n  \"definitions\": [\n    {\n      \"kind\": \"SchemaDefinition\",\n      \"operationTypes\": [\n        {\n          \"kind\": \"OperationTypeDefinition\",\n          \"operation\": \"query\",\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Root\"\n            }\n          }\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Root\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"allFilms\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"FilmsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"film\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"id\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"filmID\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Film\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"allPeople\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"PeopleConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"person\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"id\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"personID\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Person\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"allPlanets\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"PlanetsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"planet\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"id\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"planetID\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Planet\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"allSpecies\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"SpeciesConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"species\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"id\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"speciesID\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Species\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"allStarships\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StarshipsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"starship\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"id\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"starshipID\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Starship\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"allVehicles\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"VehiclesConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"vehicle\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"id\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"vehicleID\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ID\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Vehicle\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Fetches an object given its ID\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"description\": {\n                \"kind\": \"StringValue\",\n                \"value\": \"The ID of an object\",\n                \"block\": true\n              },\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"id\"\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"ID\"\n                  }\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Node\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"FilmsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"films\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Film\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"Information about pagination in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PageInfo\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"When paginating forwards, are there more items?\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"hasNextPage\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Boolean\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"When paginating backwards, are there more items?\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"hasPreviousPage\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Boolean\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"When paginating backwards, the cursor to continue.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"startCursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"When paginating forwards, the cursor to continue.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"endCursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Film\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A single film.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Film\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The title of this film.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"title\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The episode number of this film.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"episodeID\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The opening paragraphs at the beginning of this film.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"openingCrawl\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The name of the director of this film.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"director\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The name(s) of the producer(s) of this film.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"producers\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of film release at original creator country.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"releaseDate\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"speciesConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"FilmSpeciesConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"starshipConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"FilmStarshipsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"vehicleConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"FilmVehiclesConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"characterConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"FilmCharactersConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"planetConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"FilmPlanetsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was created.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"created\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was edited.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edited\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ID of an object\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"id\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Node\"\n          }\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"InterfaceTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An object with an ID\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Node\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The id of the object.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"id\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"directives\": [],\n      \"interfaces\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmSpeciesConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"FilmSpeciesEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"species\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Species\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmSpeciesEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Species\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A type of person or character within the Star Wars Universe.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Species\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The name of this species.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The classification of this species, such as \\\"mammal\\\" or \\\"reptile\\\".\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"classification\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The designation of this species, such as \\\"sentient\\\".\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"designation\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The average height of this species in centimeters.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"averageHeight\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Float\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The average lifespan of this species in years, null if unknown.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"averageLifespan\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Common eye colors for this species, null if this species does not typically\\nhave eyes.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"eyeColors\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Common hair colors for this species, null if this species does not typically\\nhave hair.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"hairColors\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Common skin colors for this species, null if this species does not typically\\nhave skin.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"skinColors\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The language commonly spoken by this species.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"language\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A planet that this species originates from.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"homeworld\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Planet\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"personConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"SpeciesPeopleConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"filmConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"SpeciesFilmsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was created.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"created\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was edited.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edited\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ID of an object\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"id\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Node\"\n          }\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A large mass, planet or planetoid in the Star Wars Universe, at the time of\\n0 ABY.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Planet\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The name of this planet.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The diameter of this planet in kilometers.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"diameter\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The number of standard hours it takes for this planet to complete a single\\nrotation on its axis.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"rotationPeriod\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The number of standard days it takes for this planet to complete a single orbit\\nof its local star.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"orbitalPeriod\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A number denoting the gravity of this planet, where \\\"1\\\" is normal or 1 standard\\nG. \\\"2\\\" is twice or 2 standard Gs. \\\"0.5\\\" is half or 0.5 standard Gs.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"gravity\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The average population of sentient beings inhabiting this planet.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"population\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Float\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The climates of this planet.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"climates\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The terrains of this planet.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"terrains\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The percentage of the planet surface that is naturally occurring water or bodies\\nof water.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"surfaceWater\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Float\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"residentConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"PlanetResidentsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"filmConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"PlanetFilmsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was created.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"created\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was edited.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edited\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ID of an object\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"id\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Node\"\n          }\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PlanetResidentsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PlanetResidentsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"residents\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Person\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PlanetResidentsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Person\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An individual person or character within the Star Wars universe.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Person\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The name of this person.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The birth year of the person, using the in-universe standard of BBY or ABY -\\nBefore the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is\\na battle that occurs at the end of Star Wars episode IV: A New Hope.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"birthYear\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The eye color of this person. Will be \\\"unknown\\\" if not known or \\\"n/a\\\" if the\\nperson does not have an eye.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"eyeColor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The gender of this person. Either \\\"Male\\\", \\\"Female\\\" or \\\"unknown\\\",\\n\\\"n/a\\\" if the person does not have a gender.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"gender\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The hair color of this person. Will be \\\"unknown\\\" if not known or \\\"n/a\\\" if the\\nperson does not have hair.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"hairColor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The height of the person in centimeters.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"height\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The mass of the person in kilograms.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"mass\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Float\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The skin color of this person.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"skinColor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A planet that this person was born on or inhabits.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"homeworld\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Planet\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"filmConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"PersonFilmsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The species that this person belongs to, or null if unknown.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"species\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Species\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"starshipConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"PersonStarshipsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"vehicleConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"PersonVehiclesConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was created.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"created\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was edited.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edited\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ID of an object\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"id\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Node\"\n          }\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PersonFilmsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PersonFilmsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"films\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Film\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PersonFilmsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Film\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PersonStarshipsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PersonStarshipsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"starships\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Starship\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PersonStarshipsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Starship\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A single transport craft that has hyperdrive capability.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Starship\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The name of this starship. The common name, such as \\\"Death Star\\\".\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The model or official name of this starship. Such as \\\"T-65 X-wing\\\" or \\\"DS-1\\nOrbital Battle Station\\\".\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"model\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The class of this starship, such as \\\"Starfighter\\\" or \\\"Deep Space Mobile\\nBattlestation\\\"\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"starshipClass\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The manufacturers of this starship.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"manufacturers\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The cost of this starship new, in galactic credits.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"costInCredits\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Float\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The length of this starship in meters.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"length\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Float\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The number of personnel needed to run or pilot this starship.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"crew\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The number of non-essential people this starship can transport.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"passengers\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The maximum speed of this starship in atmosphere. null if this starship is\\nincapable of atmosphering flight.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"maxAtmospheringSpeed\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The class of this starships hyperdrive.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"hyperdriveRating\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Float\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The Maximum number of Megalights this starship can travel in a standard hour.\\nA \\\"Megalight\\\" is a standard unit of distance and has never been defined before\\nwithin the Star Wars universe. This figure is only really useful for measuring\\nthe difference in speed of starships. We can assume it is similar to AU, the\\ndistance between our Sun (Sol) and Earth.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"MGLT\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The maximum number of kilograms that this starship can transport.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cargoCapacity\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Float\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The maximum length of time that this starship can provide consumables for its\\nentire crew without having to resupply.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"consumables\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pilotConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StarshipPilotsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"filmConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StarshipFilmsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was created.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"created\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was edited.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edited\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ID of an object\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"id\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Node\"\n          }\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"StarshipPilotsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"StarshipPilotsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pilots\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Person\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"StarshipPilotsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Person\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"StarshipFilmsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"StarshipFilmsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"films\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Film\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"StarshipFilmsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Film\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PersonVehiclesConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PersonVehiclesEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"vehicles\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Vehicle\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PersonVehiclesEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Vehicle\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A single transport craft that does not have hyperdrive capability\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Vehicle\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The name of this vehicle. The common name, such as \\\"Sand Crawler\\\" or \\\"Speeder\\nbike\\\".\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The model or official name of this vehicle. Such as \\\"All-Terrain Attack\\nTransport\\\".\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"model\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The class of this vehicle, such as \\\"Wheeled\\\" or \\\"Repulsorcraft\\\".\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"vehicleClass\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The manufacturers of this vehicle.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"manufacturers\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The cost of this vehicle new, in Galactic Credits.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"costInCredits\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Float\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The length of this vehicle in meters.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"length\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Float\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The number of personnel needed to run or pilot this vehicle.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"crew\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The number of non-essential people this vehicle can transport.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"passengers\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The maximum speed of this vehicle in atmosphere.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"maxAtmospheringSpeed\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The maximum number of kilograms that this vehicle can transport.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cargoCapacity\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Float\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The maximum length of time that this vehicle can provide consumables for its\\nentire crew without having to resupply.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"consumables\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pilotConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"VehiclePilotsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"filmConnection\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"after\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"first\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"before\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              },\n              \"directives\": []\n            },\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"last\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"Int\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"VehicleFilmsConnection\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was created.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"created\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ISO 8601 date format of the time that this resource was edited.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edited\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The ID of an object\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"id\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Node\"\n          }\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"VehiclePilotsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"VehiclePilotsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pilots\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Person\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"VehiclePilotsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Person\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"VehicleFilmsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"VehicleFilmsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"films\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Film\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"VehicleFilmsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Film\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PlanetFilmsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PlanetFilmsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"films\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Film\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PlanetFilmsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Film\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"SpeciesPeopleConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"SpeciesPeopleEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"people\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Person\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"SpeciesPeopleEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Person\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"SpeciesFilmsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"SpeciesFilmsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"films\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Film\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"SpeciesFilmsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Film\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmStarshipsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"FilmStarshipsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"starships\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Starship\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmStarshipsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Starship\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmVehiclesConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"FilmVehiclesEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"vehicles\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Vehicle\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmVehiclesEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Vehicle\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmCharactersConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"FilmCharactersEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"characters\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Person\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmCharactersEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Person\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmPlanetsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"FilmPlanetsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"planets\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Planet\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"FilmPlanetsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Planet\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PeopleConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PeopleEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"people\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Person\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PeopleEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Person\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PlanetsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PlanetsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"planets\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Planet\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"PlanetsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Planet\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"SpeciesConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"SpeciesEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"species\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Species\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"SpeciesEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Species\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"StarshipsConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"StarshipsEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"starships\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Starship\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"StarshipsEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Starship\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"A connection to a list of items.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"VehiclesConnection\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"Information to aid in pagination.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"pageInfo\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"PageInfo\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of edges.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"edges\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"VehiclesEdge\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A count of the total number of objects in this connection, ignoring pagination.\\nThis allows a client to fetch the first five objects by passing \\\"5\\\" as the\\nargument to \\\"first\\\", then fetch the total count so it could display \\\"5 of 83\\\",\\nfor example.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"totalCount\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Int\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A list of all of the objects returned in the connection. This is a convenience\\nfield provided for quickly exploring the API; rather than querying for\\n\\\"{ edges { node } }\\\" when no edge data is needed, this field can be be used\\ninstead. Note that when clients like Relay need to fetch the \\\"cursor\\\" field on\\nthe edge to enable efficient pagination, this shortcut cannot be used, and the\\nfull \\\"{ edges { node } }\\\" version should be used instead.\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"vehicles\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Vehicle\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"description\": {\n        \"kind\": \"StringValue\",\n        \"value\": \"An edge in a connection.\",\n        \"block\": true\n      },\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"VehiclesEdge\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"The item at the end of the edge\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"node\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Vehicle\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"description\": {\n            \"kind\": \"StringValue\",\n            \"value\": \"A cursor for use in pagination\",\n            \"block\": true\n          },\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"cursor\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    }\n  ]\n};\n\nexport default buildASTSchema(schemaAST, {\n  assumeValid: true,\n  assumeValidSDL: true\n});", "// @ts-nocheck\nimport { buildASTSchema } from 'graphql';\n\nconst schemaAST = {\n  \"kind\": \"Document\",\n  \"definitions\": [\n    {\n      \"kind\": \"SchemaDefinition\",\n      \"operationTypes\": [\n        {\n          \"kind\": \"OperationTypeDefinition\",\n          \"operation\": \"query\",\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Query\"\n            }\n          }\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"DirectiveDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"key\"\n      },\n      \"arguments\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"selectionSet\"\n          },\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"repeatable\": false,\n      \"locations\": [\n        {\n          \"kind\": \"Name\",\n          \"value\": \"OBJECT\"\n        }\n      ]\n    },\n    {\n      \"kind\": \"DirectiveDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"computed\"\n      },\n      \"arguments\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"selectionSet\"\n          },\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"repeatable\": false,\n      \"locations\": [\n        {\n          \"kind\": \"Name\",\n          \"value\": \"FIELD_DEFINITION\"\n        }\n      ]\n    },\n    {\n      \"kind\": \"DirectiveDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"merge\"\n      },\n      \"arguments\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"argsExpr\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"keyArg\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"keyField\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"key\"\n          },\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NonNullType\",\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"String\"\n                }\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"additionalArgs\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"repeatable\": false,\n      \"locations\": [\n        {\n          \"kind\": \"Name\",\n          \"value\": \"FIELD_DEFINITION\"\n        }\n      ]\n    },\n    {\n      \"kind\": \"DirectiveDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"canonical\"\n      },\n      \"arguments\": [],\n      \"repeatable\": false,\n      \"locations\": [\n        {\n          \"kind\": \"Name\",\n          \"value\": \"OBJECT\"\n        },\n        {\n          \"kind\": \"Name\",\n          \"value\": \"INTERFACE\"\n        },\n        {\n          \"kind\": \"Name\",\n          \"value\": \"INPUT_OBJECT\"\n        },\n        {\n          \"kind\": \"Name\",\n          \"value\": \"UNION\"\n        },\n        {\n          \"kind\": \"Name\",\n          \"value\": \"ENUM\"\n        },\n        {\n          \"kind\": \"Name\",\n          \"value\": \"SCALAR\"\n        },\n        {\n          \"kind\": \"Name\",\n          \"value\": \"FIELD_DEFINITION\"\n        },\n        {\n          \"kind\": \"Name\",\n          \"value\": \"INPUT_FIELD_DEFINITION\"\n        }\n      ]\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Country\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"native\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"phone\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"continent\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Continent\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"capital\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"currency\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"languages\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Language\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"emoji\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"emojiU\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"states\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"State\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": [\n        {\n          \"kind\": \"Directive\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"key\",\n            \"loc\": {\n              \"start\": 380,\n              \"end\": 383\n            }\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"Argument\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"selectionSet\",\n                \"loc\": {\n                  \"start\": 384,\n                  \"end\": 396\n                }\n              },\n              \"value\": {\n                \"kind\": \"StringValue\",\n                \"value\": \"{ code }\",\n                \"block\": false,\n                \"loc\": {\n                  \"start\": 398,\n                  \"end\": 408\n                }\n              },\n              \"loc\": {\n                \"start\": 384,\n                \"end\": 408\n              }\n            }\n          ],\n          \"loc\": {\n            \"start\": 379,\n            \"end\": 409\n          }\n        }\n      ]\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Continent\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"countries\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Country\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": [\n        {\n          \"kind\": \"Directive\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"key\",\n            \"loc\": {\n              \"start\": 636,\n              \"end\": 639\n            }\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"Argument\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"selectionSet\",\n                \"loc\": {\n                  \"start\": 640,\n                  \"end\": 652\n                }\n              },\n              \"value\": {\n                \"kind\": \"StringValue\",\n                \"value\": \"{ code }\",\n                \"block\": false,\n                \"loc\": {\n                  \"start\": 654,\n                  \"end\": 664\n                }\n              },\n              \"loc\": {\n                \"start\": 640,\n                \"end\": 664\n              }\n            }\n          ],\n          \"loc\": {\n            \"start\": 635,\n            \"end\": 665\n          }\n        }\n      ]\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Language\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"ID\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"native\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"rtl\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Boolean\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": [\n        {\n          \"kind\": \"Directive\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"key\",\n            \"loc\": {\n              \"start\": 739,\n              \"end\": 742\n            }\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"Argument\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"selectionSet\",\n                \"loc\": {\n                  \"start\": 743,\n                  \"end\": 755\n                }\n              },\n              \"value\": {\n                \"kind\": \"StringValue\",\n                \"value\": \"{ code }\",\n                \"block\": false,\n                \"loc\": {\n                  \"start\": 757,\n                  \"end\": 767\n                }\n              },\n              \"loc\": {\n                \"start\": 743,\n                \"end\": 767\n              }\n            }\n          ],\n          \"loc\": {\n            \"start\": 738,\n            \"end\": 768\n          }\n        }\n      ]\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"State\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"name\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"country\"\n          },\n          \"arguments\": [],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"Country\"\n              }\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"InputObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"StringQueryOperatorInput\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"eq\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"ne\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"in\"\n          },\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"nin\"\n          },\n          \"type\": {\n            \"kind\": \"ListType\",\n            \"type\": {\n              \"kind\": \"NamedType\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"String\"\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"regex\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"glob\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"String\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"InputObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"CountryFilterInput\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StringQueryOperatorInput\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"currency\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StringQueryOperatorInput\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"continent\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StringQueryOperatorInput\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"InputObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"ContinentFilterInput\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StringQueryOperatorInput\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"InputObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"LanguageFilterInput\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"InputValueDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"code\"\n          },\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"StringQueryOperatorInput\"\n            }\n          },\n          \"directives\": []\n        }\n      ],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ObjectTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"Query\"\n      },\n      \"fields\": [\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"countries\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"filter\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"CountryFilterInput\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Country\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"country\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"code\"\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"ID\"\n                  }\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Country\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"continents\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"filter\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"ContinentFilterInput\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Continent\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"continent\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"code\"\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"ID\"\n                  }\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Continent\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"languages\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"filter\"\n              },\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"LanguageFilterInput\"\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"Language\"\n                  }\n                }\n              }\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"language\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"code\"\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"NamedType\",\n                  \"name\": {\n                    \"kind\": \"Name\",\n                    \"value\": \"ID\"\n                  }\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NamedType\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"Language\"\n            }\n          },\n          \"directives\": []\n        },\n        {\n          \"kind\": \"FieldDefinition\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"_entities\"\n          },\n          \"arguments\": [\n            {\n              \"kind\": \"InputValueDefinition\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"representations\"\n              },\n              \"type\": {\n                \"kind\": \"NonNullType\",\n                \"type\": {\n                  \"kind\": \"ListType\",\n                  \"type\": {\n                    \"kind\": \"NonNullType\",\n                    \"type\": {\n                      \"kind\": \"NamedType\",\n                      \"name\": {\n                        \"kind\": \"Name\",\n                        \"value\": \"_Any\"\n                      }\n                    }\n                  }\n                }\n              },\n              \"directives\": []\n            }\n          ],\n          \"type\": {\n            \"kind\": \"NonNullType\",\n            \"type\": {\n              \"kind\": \"ListType\",\n              \"type\": {\n                \"kind\": \"NamedType\",\n                \"name\": {\n                  \"kind\": \"Name\",\n                  \"value\": \"_Entity\"\n                }\n              }\n            }\n          },\n          \"directives\": [\n            {\n              \"kind\": \"Directive\",\n              \"name\": {\n                \"kind\": \"Name\",\n                \"value\": \"merge\",\n                \"loc\": {\n                  \"start\": 1619,\n                  \"end\": 1624\n                }\n              },\n              \"arguments\": [],\n              \"loc\": {\n                \"start\": 1618,\n                \"end\": 1624\n              }\n            }\n          ]\n        }\n      ],\n      \"interfaces\": [],\n      \"directives\": []\n    },\n    {\n      \"kind\": \"ScalarTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"_Any\"\n      },\n      \"directives\": []\n    },\n    {\n      \"kind\": \"UnionTypeDefinition\",\n      \"name\": {\n        \"kind\": \"Name\",\n        \"value\": \"_Entity\"\n      },\n      \"directives\": [],\n      \"types\": [\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Country\"\n          }\n        },\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Continent\"\n          }\n        },\n        {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"Language\"\n          }\n        }\n      ]\n    }\n  ]\n};\n\nexport default buildASTSchema(schemaAST, {\n  assumeValid: true,\n  assumeValidSDL: true\n});", "import { createServer } from '@graphql-yoga/common';\n\nimport { getBuiltMesh } from '../.mesh';\n\nconst worker = {\n  async fetch(req: Request) {\n    // retrieve the mesh instance (with configured Envelop plugins)\n    console.log(\"getting mesh\")\n    const mesh = await getBuiltMesh();\n    console.log(\"retrieved mesh\");\n    // pass the Mesh instance to Yoga and configure GraphiQL\n    const yoga = createServer({\n      logging: {\n        debug: console.log,\n        error: console.log,\n        info: console.log,\n        warn: console.log,\n      },\n      plugins: mesh.plugins, \n      graphiql: {\n        endpoint: '/graphql',\n        title: 'Mesh Gateway',\n      },\n    });\n    console.log(\"executing fetch\")\n    const result = await yoga.fetch(req);\n    console.log(\"fetch result\", JSON.stringify(result))\n    return result\n  },\n};\n\nexport default worker;\n", "import { EnvelopError, isAsyncIterable as isAsyncIterable$1, enableIf, useSchema, useLogger, useExtendContext, useMaskedErrors, envelop } from '@envelop/core';\nexport * from '@envelop/core';\nexport { EnvelopError as GraphQLYogaError } from '@envelop/core';\nimport { inspect, isAsyncIterable } from '@graphql-tools/utils';\nimport { GraphQLError, getOperationAST, isSchema, print } from 'graphql';\nimport { useValidationCache } from '@envelop/validation-cache';\nimport { useParserCache } from '@envelop/parser-cache';\nimport { makeExecutableSchema } from '@graphql-tools/schema';\nimport { Request, Response, fetch, ReadableStream } from 'cross-undici-fetch';\nimport { dset } from 'dset';\nexport * from '@graphql-yoga/subscription';\n\nconst ANSI_CODES = {\n    black: '\\x1b[30m',\n    red: '\\x1b[31m',\n    green: '\\x1b[32m',\n    yellow: '\\x1b[33m',\n    blue: '\\x1b[34m',\n    magenta: '\\x1b[35m',\n    cyan: '\\x1b[36m',\n    white: '\\x1b[37m',\n    reset: '\\x1b[0m',\n    bold: '\\x1b[1m',\n    orange: '\\x1b[48:5:166m',\n};\nconst warnColor = (msg) => ANSI_CODES.orange + msg + ANSI_CODES.reset;\nconst infoColor = (msg) => ANSI_CODES.cyan + msg + ANSI_CODES.reset;\nconst errorColor = (msg) => ANSI_CODES.red + msg + ANSI_CODES.reset;\nconst debugColor = (msg) => ANSI_CODES.magenta + msg + ANSI_CODES.reset;\nconst titleBold = (msg) => ANSI_CODES.bold + msg + ANSI_CODES.reset;\nconst isDebug = () => typeof process === 'object'\n    ? process.env.DEBUG\n    : // @ts-expect-error\n        typeof DEBUG !== 'undefined'\n            ? true\n            : false;\nfunction getPrefix() {\n    return titleBold(`\uD83E\uDDD8 Yoga -`);\n}\nfunction getLoggerMessage(...args) {\n    return args\n        .map((arg) => (typeof arg === 'string' ? arg : inspect(arg)))\n        .join(` `);\n}\nconst defaultYogaLogger = {\n    debug(...args) {\n        if (isDebug()) {\n            const message = getLoggerMessage(...args);\n            const fullMessage = `\uD83D\uDC1B ${getPrefix()} ${debugColor(message)}`;\n            // Some environments don't have other console methods\n            if (console.debug) {\n                console.debug(fullMessage);\n            }\n            else {\n                console.log(fullMessage);\n            }\n        }\n    },\n    info(...args) {\n        const message = getLoggerMessage(...args);\n        const fullMessage = `\uD83D\uDCA1 ${getPrefix()} ${infoColor(message)}`;\n        if (console.info) {\n            console.info(fullMessage);\n        }\n        else {\n            console.log(fullMessage);\n        }\n    },\n    warn(...args) {\n        const message = getLoggerMessage(...args);\n        const fullMessage = `\u26A0\uFE0F ${getPrefix()} ${warnColor(message)}`;\n        if (console.warn) {\n            console.warn(fullMessage);\n        }\n        else {\n            console.log(fullMessage);\n        }\n    },\n    error(...args) {\n        const message = getLoggerMessage(...args);\n        const fullMessage = `\u274C ${getPrefix()} ${errorColor(message)}`;\n        if (console.error) {\n            console.error(fullMessage);\n        }\n        else {\n            console.log(fullMessage);\n        }\n    },\n};\n\nlet encodeString;\nif (globalThis.Buffer) {\n    encodeString = function encodeStringWithBuffer(str) {\n        return globalThis.Buffer.from(str, 'utf8');\n    };\n}\nelse {\n    const textEncoder = new TextEncoder();\n    encodeString = function encodeStringWithTextEncoder(str) {\n        return textEncoder.encode(str);\n    };\n}\n\nfunction getErrorResponse({ status = 500, headers = {}, errors, fetchAPI, }) {\n    const payload = {\n        data: null,\n        errors: errors.map((error) => error instanceof GraphQLError ? error : new GraphQLError(error.message)),\n    };\n    const decodedString = encodeString(JSON.stringify(payload));\n    return new fetchAPI.Response(decodedString, {\n        status,\n        headers: {\n            ...headers,\n            'Content-Type': 'application/json',\n            'Content-Length': decodedString.byteLength.toString(),\n        },\n    });\n}\nasync function processRequest({ request, params, enveloped, fetchAPI, onResultProcessHooks, }) {\n    var _a;\n    let document;\n    if (request.method !== 'GET' && request.method !== 'POST') {\n        return getErrorResponse({\n            status: 405,\n            headers: {\n                Allow: 'GET, POST',\n            },\n            errors: [\n                new EnvelopError('GraphQL only supports GET and POST requests.'),\n            ],\n            fetchAPI,\n        });\n    }\n    if (params.query == null) {\n        return getErrorResponse({\n            status: 400,\n            errors: [new EnvelopError('Must provide query string.')],\n            fetchAPI,\n        });\n    }\n    try {\n        document = enveloped.parse(params.query);\n    }\n    catch (e) {\n        return getErrorResponse({\n            status: 400,\n            errors: [e],\n            fetchAPI,\n        });\n    }\n    const validationErrors = enveloped.validate(enveloped.schema, document);\n    if (validationErrors.length > 0) {\n        return getErrorResponse({\n            status: 400,\n            errors: validationErrors,\n            fetchAPI,\n        });\n    }\n    const operation = (_a = getOperationAST(document, params.operationName)) !== null && _a !== void 0 ? _a : undefined;\n    if (!operation) {\n        return getErrorResponse({\n            status: 400,\n            errors: [\n                new EnvelopError('Could not determine what operation to execute.'),\n            ],\n            fetchAPI,\n        });\n    }\n    if (operation.operation === 'mutation' && request.method === 'GET') {\n        return getErrorResponse({\n            status: 405,\n            headers: {\n                Allow: 'POST',\n            },\n            errors: [\n                new EnvelopError('Can only perform a mutation operation from a POST request.'),\n            ],\n            fetchAPI,\n        });\n    }\n    let contextValue;\n    try {\n        contextValue = (await enveloped.contextFactory());\n    }\n    catch (error) {\n        if (error instanceof GraphQLError) {\n            return getErrorResponse({\n                status: 200,\n                errors: [error],\n                fetchAPI,\n            });\n        }\n        throw error;\n    }\n    const executionArgs = {\n        schema: enveloped.schema,\n        document,\n        contextValue,\n        variableValues: params.variables,\n        operationName: params.operationName,\n    };\n    const executeFn = operation.operation === 'subscription'\n        ? enveloped.subscribe\n        : enveloped.execute;\n    const result = await executeFn(executionArgs);\n    let resultProcessor = (_, fetchAPI) => new fetchAPI.Response(null, {\n        status: 406,\n        statusText: 'Not Acceptable',\n    });\n    for (const onResultProcessHook of onResultProcessHooks) {\n        await onResultProcessHook({\n            request,\n            context: contextValue,\n            result,\n            resultProcessor,\n            setResultProcessor(newResultProcessor) {\n                resultProcessor = newResultProcessor;\n            },\n        });\n    }\n    return resultProcessor(result, fetchAPI);\n}\n\nfunction getCORSHeadersByRequestAndOptions(request, corsOptions) {\n    var _a, _b;\n    const headers = {};\n    if (corsOptions === false) {\n        return headers;\n    }\n    // If defined origins have '*' or undefined by any means, we should allow all origins\n    if (corsOptions.origin == null ||\n        corsOptions.origin.length === 0 ||\n        corsOptions.origin.includes('*')) {\n        const currentOrigin = request.headers.get('origin');\n        // If origin is available in the headers, use it\n        if (currentOrigin != null) {\n            headers['Access-Control-Allow-Origin'] = currentOrigin;\n            // Vary by origin because there are multiple origins\n            headers['Vary'] = 'Origin';\n        }\n        else {\n            headers['Access-Control-Allow-Origin'] = '*';\n        }\n    }\n    else if (typeof corsOptions.origin === 'string') {\n        // If there is one specific origin is specified, use it directly\n        headers['Access-Control-Allow-Origin'] = corsOptions.origin;\n    }\n    else if (Array.isArray(corsOptions.origin)) {\n        // If there is only one origin defined in the array, consider it as a single one\n        if (corsOptions.origin.length === 1) {\n            headers['Access-Control-Allow-Origin'] = corsOptions.origin[0];\n        }\n        else {\n            const currentOrigin = request.headers.get('origin');\n            if (currentOrigin != null && corsOptions.origin.includes(currentOrigin)) {\n                // If origin is available in the headers, use it\n                headers['Access-Control-Allow-Origin'] = currentOrigin;\n                // Vary by origin because there are multiple origins\n                headers['Vary'] = 'Origin';\n            }\n            else {\n                // There is no origin found in the headers, so we should return null\n                headers['Access-Control-Allow-Origin'] = 'null';\n            }\n        }\n    }\n    if ((_a = corsOptions.methods) === null || _a === void 0 ? void 0 : _a.length) {\n        headers['Access-Control-Allow-Methods'] = corsOptions.methods.join(', ');\n    }\n    else {\n        const requestMethod = request.headers.get('access-control-request-method');\n        if (requestMethod) {\n            headers['Access-Control-Allow-Methods'] = requestMethod;\n        }\n    }\n    if ((_b = corsOptions.allowedHeaders) === null || _b === void 0 ? void 0 : _b.length) {\n        headers['Access-Control-Allow-Headers'] =\n            corsOptions.allowedHeaders.join(', ');\n    }\n    else {\n        const requestHeaders = request.headers.get('access-control-request-headers');\n        if (requestHeaders) {\n            headers['Access-Control-Allow-Headers'] = requestHeaders;\n            if (headers['Vary']) {\n                headers['Vary'] += ', Access-Control-Request-Headers';\n            }\n            headers['Vary'] = 'Access-Control-Request-Headers';\n        }\n    }\n    if (corsOptions.credentials != null) {\n        if (corsOptions.credentials === true) {\n            headers['Access-Control-Allow-Credentials'] = 'true';\n        }\n    }\n    else if (headers['Access-Control-Allow-Origin'] !== '*') {\n        headers['Access-Control-Allow-Credentials'] = 'true';\n    }\n    if (corsOptions.exposedHeaders) {\n        headers['Access-Control-Expose-Headers'] =\n            corsOptions.exposedHeaders.join(', ');\n    }\n    if (corsOptions.maxAge) {\n        headers['Access-Control-Max-Age'] = corsOptions.maxAge.toString();\n    }\n    return headers;\n}\nasync function getCORSResponseHeaders(request, serverContext, corsOptionsFactory) {\n    const corsOptions = await corsOptionsFactory(request, serverContext);\n    return getCORSHeadersByRequestAndOptions(request, corsOptions);\n}\nfunction useCORS(options) {\n    let corsOptionsFactory = () => ({});\n    if (options != null) {\n        if (typeof options === 'function') {\n            corsOptionsFactory = options;\n        }\n        else if (typeof options === 'object') {\n            const corsOptions = {\n                ...options,\n            };\n            corsOptionsFactory = () => corsOptions;\n        }\n        else if (options === false) {\n            corsOptionsFactory = () => false;\n        }\n    }\n    return {\n        async onRequest({ request, serverContext, fetchAPI, endResponse }) {\n            if (request.method.toUpperCase() === 'OPTIONS') {\n                const headers = await getCORSResponseHeaders(request, serverContext, corsOptionsFactory);\n                const response = new fetchAPI.Response(null, {\n                    status: 204,\n                    headers,\n                });\n                endResponse(response);\n                return;\n            }\n        },\n        async onResponse({ request, serverContext, response }) {\n            const headers = await getCORSResponseHeaders(request, serverContext, corsOptionsFactory);\n            for (const headerName in headers) {\n                response.headers.set(headerName, headers[headerName]);\n            }\n        },\n    };\n}\n\nfunction useHealthCheck(options) {\n    const id = (options === null || options === void 0 ? void 0 : options.id) || Date.now().toString();\n    const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;\n    return {\n        async onRequest({ request, endResponse, fetchAPI }) {\n            const requestPath = request.url.split('?')[0];\n            if (requestPath.endsWith('/health')) {\n                logger.debug(`Responding Health Check`);\n                const response = new fetchAPI.Response(JSON.stringify({\n                    message: 'alive',\n                }), {\n                    status: 200,\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'x-yoga-id': id,\n                    },\n                });\n                endResponse(response);\n            }\n            else if (requestPath.endsWith('/readiness')) {\n                logger.debug(`Responding Readiness Check`);\n                const readinessResponse = await fetchAPI.fetch(request.url.replace('/readiness', '/health'));\n                const { message } = await readinessResponse.json();\n                if (readinessResponse.status === 200 &&\n                    readinessResponse.headers.get('x-yoga-id') === id &&\n                    message === 'alive') {\n                    const response = new fetchAPI.Response(JSON.stringify({\n                        message: 'ready',\n                    }), {\n                        status: 200,\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                    });\n                    endResponse(response);\n                }\n                else {\n                    throw new EnvelopError(`Readiness check failed with status ${readinessResponse.status}`);\n                }\n            }\n        },\n    };\n}\n\nconst graphiqlHTML = \"<!doctype html><html lang=en><meta charset=utf-8><title>__TITLE__</title><link href=https://www.graphql-yoga.com/favicon.ico rel=icon><link href=https://unpkg.com/@graphql-yoga/graphiql@2.4.0/dist/style.css rel=stylesheet><body class=no-focus-outline id=body><noscript>You need to enable JavaScript to run this app.</noscript><div id=root></div><script type=module>import{renderYogaGraphiQL as r}from\\\"https://unpkg.com/@graphql-yoga/graphiql@2.4.0\\\";r(root,__OPTS__);</script>\";\n\nfunction shouldRenderGraphiQL({ headers, method }) {\n    var _a;\n    return method === 'GET' && !!((_a = headers === null || headers === void 0 ? void 0 : headers.get('accept')) === null || _a === void 0 ? void 0 : _a.includes('text/html'));\n}\nconst renderGraphiQL = (opts) => graphiqlHTML\n    .replace('__TITLE__', (opts === null || opts === void 0 ? void 0 : opts.title) || 'Yoga GraphiQL')\n    .replace('__OPTS__', JSON.stringify(opts !== null && opts !== void 0 ? opts : {}));\nfunction useGraphiQL(config) {\n    var _a, _b;\n    const logger = (_a = config === null || config === void 0 ? void 0 : config.logger) !== null && _a !== void 0 ? _a : console;\n    let graphiqlOptionsFactory;\n    if (typeof (config === null || config === void 0 ? void 0 : config.options) === 'function') {\n        graphiqlOptionsFactory = config === null || config === void 0 ? void 0 : config.options;\n    }\n    else if (typeof (config === null || config === void 0 ? void 0 : config.options) === 'object') {\n        graphiqlOptionsFactory = () => config === null || config === void 0 ? void 0 : config.options;\n    }\n    else if ((config === null || config === void 0 ? void 0 : config.options) === false) {\n        graphiqlOptionsFactory = () => false;\n    }\n    else {\n        graphiqlOptionsFactory = () => ({});\n    }\n    const renderer = (_b = config === null || config === void 0 ? void 0 : config.render) !== null && _b !== void 0 ? _b : renderGraphiQL;\n    return {\n        async onRequest({ request, serverContext, fetchAPI, endResponse }) {\n            const requestPath = request.url.split('?')[0];\n            if ((config === null || config === void 0 ? void 0 : config.endpoint) != null && !requestPath.endsWith(config === null || config === void 0 ? void 0 : config.endpoint)) {\n                logger.debug(`Responding 404 Not Found`);\n                const response = new fetchAPI.Response(`Unable to ${request.method} ${requestPath}`, {\n                    status: 404,\n                    statusText: `Not Found`,\n                });\n                endResponse(response);\n            }\n            else if (shouldRenderGraphiQL(request)) {\n                logger.debug(`Rendering GraphiQL`);\n                const graphiqlOptions = graphiqlOptionsFactory(request, serverContext);\n                if (graphiqlOptions) {\n                    const graphiQLBody = await renderer({\n                        endpoint: config === null || config === void 0 ? void 0 : config.endpoint,\n                        ...(graphiqlOptions === true ? {} : graphiqlOptions),\n                    });\n                    const response = new fetchAPI.Response(graphiQLBody, {\n                        headers: {\n                            'Content-Type': 'text/html',\n                        },\n                        status: 200,\n                    });\n                    endResponse(response);\n                }\n            }\n        },\n    };\n}\n\nconst DEFAULT_MATCHER = () => true;\nfunction useRequestParser(options) {\n    const matchFn = options.match || DEFAULT_MATCHER;\n    return {\n        onRequestParse({ request, setRequestParser }) {\n            if (matchFn(request)) {\n                setRequestParser(function useRequestParserFn(request) {\n                    return options.parse(request);\n                });\n            }\n        },\n    };\n}\n\nfunction parseURLSearchParams(requestBody) {\n    const searchParams = new URLSearchParams(requestBody);\n    const operationName = searchParams.get('operationName') || undefined;\n    const query = searchParams.get('query') || undefined;\n    const variablesStr = searchParams.get('variables') || undefined;\n    const extensionsStr = searchParams.get('extensions') || undefined;\n    return {\n        operationName,\n        query,\n        variables: variablesStr ? JSON.parse(variablesStr) : undefined,\n        extensions: extensionsStr ? JSON.parse(extensionsStr) : undefined,\n    };\n}\nfunction isContentTypeMatch(request, expectedContentType) {\n    const contentType = request.headers.get('content-type');\n    return (contentType === expectedContentType ||\n        !!(contentType === null || contentType === void 0 ? void 0 : contentType.startsWith(`${expectedContentType};`)));\n}\n\nfunction isGETRequest(request) {\n    return request.method === 'GET';\n}\nfunction parseGETRequest(request) {\n    const [, searchParamsStr] = request.url.split('?');\n    return parseURLSearchParams(searchParamsStr);\n}\n\nfunction isPOSTJsonRequest(request) {\n    return (request.method === 'POST' &&\n        (isContentTypeMatch(request, 'application/json') ||\n            isContentTypeMatch(request, 'application/graphql+json')));\n}\nasync function parsePOSTJsonRequest(request) {\n    const requestBody = await request.json();\n    return {\n        operationName: requestBody.operationName,\n        query: requestBody.query,\n        variables: requestBody.variables,\n        extensions: requestBody.extensions,\n    };\n}\n\nfunction isPOSTMultipartRequest(request) {\n    return (request.method === 'POST' &&\n        isContentTypeMatch(request, 'multipart/form-data'));\n}\nasync function parsePOSTMultipartRequest(request) {\n    var _a, _b;\n    const requestBody = await request.formData();\n    const operationsStr = ((_a = requestBody.get('operations')) === null || _a === void 0 ? void 0 : _a.toString()) || '{}';\n    const operations = JSON.parse(operationsStr);\n    const mapStr = ((_b = requestBody.get('map')) === null || _b === void 0 ? void 0 : _b.toString()) || '{}';\n    const map = JSON.parse(mapStr);\n    for (const fileIndex in map) {\n        const file = requestBody.get(fileIndex);\n        const keys = map[fileIndex];\n        for (const key of keys) {\n            dset(operations, key, file);\n        }\n    }\n    return {\n        operationName: operations.operationName,\n        query: operations.query,\n        variables: operations.variables,\n        extensions: operations.extensions,\n    };\n}\n\nfunction isPOSTGraphQLStringRequest(request) {\n    return (request.method === 'POST' &&\n        isContentTypeMatch(request, 'application/graphql'));\n}\nasync function parsePOSTGraphQLStringRequest(request) {\n    const requestBody = await request.text();\n    return {\n        query: requestBody,\n    };\n}\n\nfunction useResultProcessor(options) {\n    const isMatch = options.match || (() => true);\n    return {\n        onResultProcess({ request, result, setResultProcessor }) {\n            if (isMatch(request, result)) {\n                setResultProcessor(options.processResult);\n            }\n        },\n    };\n}\n\nfunction isRegularResult(request, result) {\n    return !isAsyncIterable(result);\n}\nfunction processRegularResult(executionResult, fetchAPI) {\n    const responseBody = JSON.stringify(executionResult);\n    const decodedString = encodeString(responseBody);\n    const headersInit = {\n        'Content-Type': 'application/json',\n        'Content-Length': decodedString.byteLength.toString(),\n    };\n    const responseInit = {\n        headers: headersInit,\n        status: 200,\n    };\n    return new fetchAPI.Response(decodedString, responseInit);\n}\n\nfunction isPushResult(request, result) {\n    var _a;\n    return (isAsyncIterable$1(result) &&\n        !!((_a = request.headers.get('accept')) === null || _a === void 0 ? void 0 : _a.includes('text/event-stream')));\n}\nfunction processPushResult(result, fetchAPI) {\n    const headersInit = {\n        'Content-Type': 'text/event-stream',\n        Connection: 'keep-alive',\n        'Cache-Control': 'no-cache',\n        'Content-Encoding': 'none',\n    };\n    const responseInit = {\n        headers: headersInit,\n        status: 200,\n    };\n    let iterator;\n    const readableStream = new fetchAPI.ReadableStream({\n        start() {\n            iterator = result[Symbol.asyncIterator]();\n        },\n        async pull(controller) {\n            const { done, value } = await iterator.next();\n            if (value != null) {\n                const chunk = JSON.stringify(value);\n                controller.enqueue(encodeString(`data: ${chunk}\\n\\n`));\n            }\n            if (done) {\n                controller.close();\n            }\n        },\n        async cancel(e) {\n            var _a;\n            await ((_a = iterator.return) === null || _a === void 0 ? void 0 : _a.call(iterator, e));\n        },\n    });\n    return new fetchAPI.Response(readableStream, responseInit);\n}\n\nfunction isMultipartResult(request, result) {\n    var _a;\n    return (isAsyncIterable$1(result) &&\n        !!((_a = request.headers.get('accept')) === null || _a === void 0 ? void 0 : _a.includes('multipart/mixed')));\n}\nfunction processMultipartResult(executionPatchResultIterable, fetchAPI) {\n    const headersInit = {\n        Connection: 'keep-alive',\n        'Content-Type': 'multipart/mixed; boundary=\"-\"',\n        'Transfer-Encoding': 'chunked',\n    };\n    const responseInit = {\n        headers: headersInit,\n        status: 200,\n    };\n    let iterator;\n    const readableStream = new fetchAPI.ReadableStream({\n        start(controller) {\n            iterator = executionPatchResultIterable[Symbol.asyncIterator]();\n            controller.enqueue(encodeString(`---`));\n        },\n        async pull(controller) {\n            const { done, value } = await iterator.next();\n            if (value != null) {\n                controller.enqueue(encodeString('\\r\\n'));\n                controller.enqueue(encodeString('Content-Type: application/json; charset=utf-8'));\n                controller.enqueue(encodeString('\\r\\n'));\n                const chunk = JSON.stringify(value);\n                const encodedChunk = encodeString(chunk);\n                controller.enqueue(encodeString('Content-Length: ' + encodedChunk.byteLength));\n                controller.enqueue(encodeString('\\r\\n'));\n                controller.enqueue(encodeString('\\r\\n'));\n                controller.enqueue(encodedChunk);\n                controller.enqueue(encodeString('\\r\\n'));\n                controller.enqueue(encodeString('---'));\n            }\n            if (done) {\n                controller.enqueue(encodeString('\\r\\n-----\\r\\n'));\n                controller.close();\n            }\n        },\n        async cancel(e) {\n            var _a;\n            await ((_a = iterator.return) === null || _a === void 0 ? void 0 : _a.call(iterator, e));\n        },\n    });\n    return new fetchAPI.Response(readableStream, responseInit);\n}\n\nfunction isPOSTFormUrlEncodedRequest(request) {\n    return (request.method === 'POST' &&\n        isContentTypeMatch(request, 'application/x-www-form-urlencoded'));\n}\nasync function parsePOSTFormUrlEncodedRequest(request) {\n    const requestBody = await request.text();\n    return parseURLSearchParams(requestBody);\n}\n\nfunction getDefaultSchema() {\n    return makeExecutableSchema({\n        typeDefs: /* GraphQL */ `\n      \"\"\"\n      Greetings from GraphQL Yoga!\n      \"\"\"\n      type Query {\n        greetings: String\n      }\n      type Subscription {\n        \"\"\"\n        Current Time\n        \"\"\"\n        time: String\n      }\n    `,\n        resolvers: {\n            Query: {\n                greetings: () => 'This is the `greetings` field of the root `Query` type',\n            },\n            Subscription: {\n                time: {\n                    async *subscribe() {\n                        while (true) {\n                            yield { time: new Date().toISOString() };\n                            await new Promise((resolve) => setTimeout(resolve, 1000));\n                        }\n                    },\n                },\n            },\n        },\n    });\n}\n/**\n * Base class that can be extended to create a GraphQL server with any HTTP server framework.\n * @internal\n */\nclass YogaServer {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        this.handleRequest = async (request, ...args) => {\n            const response = await this.getResponse(request, ...args);\n            for (const onResponseHook of this.onResponseHooks) {\n                await onResponseHook({\n                    request,\n                    response,\n                    serverContext: args[0],\n                });\n            }\n            return response;\n        };\n        this.fetch = (input, init) => {\n            let request;\n            if (typeof input === 'string') {\n                request = new this.fetchAPI.Request(input, init);\n            }\n            else {\n                request = input;\n            }\n            return this.handleRequest(request, init);\n        };\n        // FetchEvent is not available in all envs\n        this.fetchEventListener = (event) => event.respondWith(this.handleRequest(event.request, event));\n        this.id = (_a = options === null || options === void 0 ? void 0 : options.id) !== null && _a !== void 0 ? _a : 'yoga';\n        this.fetchAPI = {\n            Request: (_c = (_b = options === null || options === void 0 ? void 0 : options.fetchAPI) === null || _b === void 0 ? void 0 : _b.Request) !== null && _c !== void 0 ? _c : Request,\n            Response: (_e = (_d = options === null || options === void 0 ? void 0 : options.fetchAPI) === null || _d === void 0 ? void 0 : _d.Response) !== null && _e !== void 0 ? _e : Response,\n            fetch: (_g = (_f = options === null || options === void 0 ? void 0 : options.fetchAPI) === null || _f === void 0 ? void 0 : _f.fetch) !== null && _g !== void 0 ? _g : fetch,\n            ReadableStream: (_j = (_h = options === null || options === void 0 ? void 0 : options.fetchAPI) === null || _h === void 0 ? void 0 : _h.ReadableStream) !== null && _j !== void 0 ? _j : ReadableStream,\n        };\n        const schema = (options === null || options === void 0 ? void 0 : options.schema)\n            ? isSchema(options.schema)\n                ? options.schema\n                : makeExecutableSchema({\n                    typeDefs: options.schema.typeDefs,\n                    resolvers: options.schema.resolvers,\n                })\n            : getDefaultSchema();\n        const logger = (options === null || options === void 0 ? void 0 : options.logging) != null ? options.logging : true;\n        this.logger =\n            typeof logger === 'boolean'\n                ? logger === true\n                    ? defaultYogaLogger\n                    : {\n                        debug: () => { },\n                        error: () => { },\n                        warn: () => { },\n                        info: () => { },\n                    }\n                : logger;\n        const maskedErrors = (_k = options === null || options === void 0 ? void 0 : options.maskedErrors) !== null && _k !== void 0 ? _k : true;\n        const server = this;\n        this.endpoint = options === null || options === void 0 ? void 0 : options.endpoint;\n        this.plugins = [\n            // Use the schema provided by the user\n            enableIf(schema != null, useSchema(schema)),\n            // Performance things\n            enableIf((options === null || options === void 0 ? void 0 : options.parserCache) !== false, () => useParserCache(typeof (options === null || options === void 0 ? void 0 : options.parserCache) === 'object'\n                ? options === null || options === void 0 ? void 0 : options.parserCache\n                : undefined)),\n            enableIf((options === null || options === void 0 ? void 0 : options.validationCache) !== false, () => useValidationCache({\n                cache: typeof (options === null || options === void 0 ? void 0 : options.validationCache) === 'object'\n                    ? options === null || options === void 0 ? void 0 : options.validationCache\n                    : undefined,\n            })),\n            // Log events - useful for debugging purposes\n            enableIf(logger !== false, useLogger({\n                skipIntrospection: true,\n                logFn: (eventName, events) => {\n                    switch (eventName) {\n                        case 'execute-start':\n                        case 'subscribe-start':\n                            this.logger.debug(titleBold('Execution start'));\n                            const { query, operationName, variables, extensions, } = events.args.contextValue;\n                            if (query) {\n                                this.logger.debug('\\n' + titleBold('Received GraphQL operation:') + '\\n', query);\n                            }\n                            if (operationName) {\n                                this.logger.debug('\\t operationName:', operationName);\n                            }\n                            if (variables) {\n                                this.logger.debug('\\t variables:', variables);\n                            }\n                            if (extensions) {\n                                this.logger.debug('\\t extensions:', extensions);\n                            }\n                            break;\n                        case 'execute-end':\n                        case 'subscribe-end':\n                            this.logger.debug(titleBold('Execution end'));\n                            this.logger.debug('\\t result:', events.result);\n                            break;\n                    }\n                },\n            })),\n            enableIf((options === null || options === void 0 ? void 0 : options.context) != null, useExtendContext(async (initialContext) => {\n                if (options === null || options === void 0 ? void 0 : options.context) {\n                    if (typeof options.context === 'function') {\n                        return options.context(initialContext);\n                    }\n                    return options.context;\n                }\n            })),\n            // Middlewares before processing the incoming HTTP request\n            useHealthCheck({\n                id: this.id,\n                logger: this.logger,\n            }),\n            enableIf((options === null || options === void 0 ? void 0 : options.graphiql) !== false, () => useGraphiQL({\n                get endpoint() {\n                    return server.endpoint;\n                },\n                options: options === null || options === void 0 ? void 0 : options.graphiql,\n                render: options === null || options === void 0 ? void 0 : options.renderGraphiQL,\n                logger: this.logger,\n            })),\n            enableIf((options === null || options === void 0 ? void 0 : options.cors) !== false, () => useCORS(options === null || options === void 0 ? void 0 : options.cors)),\n            // Middlewares before the GraphQL execution\n            useRequestParser({\n                match: isGETRequest,\n                parse: parseGETRequest,\n            }),\n            useRequestParser({\n                match: isPOSTJsonRequest,\n                parse: parsePOSTJsonRequest,\n            }),\n            enableIf((options === null || options === void 0 ? void 0 : options.multipart) !== false, () => useRequestParser({\n                match: isPOSTMultipartRequest,\n                parse: parsePOSTMultipartRequest,\n            })),\n            useRequestParser({\n                match: isPOSTGraphQLStringRequest,\n                parse: parsePOSTGraphQLStringRequest,\n            }),\n            useRequestParser({\n                match: isPOSTFormUrlEncodedRequest,\n                parse: parsePOSTFormUrlEncodedRequest,\n            }),\n            // Middlewares after the GraphQL execution\n            useResultProcessor({\n                match: isRegularResult,\n                processResult: processRegularResult,\n            }),\n            useResultProcessor({\n                match: isPushResult,\n                processResult: processPushResult,\n            }),\n            useResultProcessor({\n                match: isMultipartResult,\n                processResult: processMultipartResult,\n            }),\n            ...((_l = options === null || options === void 0 ? void 0 : options.plugins) !== null && _l !== void 0 ? _l : []),\n            enableIf(!!maskedErrors, useMaskedErrors(typeof maskedErrors === 'object' ? maskedErrors : undefined)),\n        ];\n        this.getEnveloped = envelop({\n            plugins: this.plugins,\n        });\n        this.onRequestHooks = [];\n        this.onRequestParseHooks = [];\n        this.onResultProcessHooks = [];\n        this.onResponseHooks = [];\n        for (const plugin of this.plugins) {\n            if (plugin) {\n                if (plugin.onRequestParse) {\n                    this.onRequestParseHooks.push(plugin.onRequestParse);\n                }\n                if (plugin.onRequest) {\n                    this.onRequestHooks.push(plugin.onRequest);\n                }\n                if (plugin.onResultProcess) {\n                    this.onResultProcessHooks.push(plugin.onResultProcess);\n                }\n                if (plugin.onResponse) {\n                    this.onResponseHooks.push(plugin.onResponse);\n                }\n            }\n        }\n    }\n    async getResponse(request, ...args) {\n        var _a;\n        const serverContext = args[0];\n        try {\n            for (const onRequestHook of this.onRequestHooks) {\n                let response;\n                await onRequestHook({\n                    request,\n                    serverContext,\n                    fetchAPI: this.fetchAPI,\n                    endResponse(newResponse) {\n                        response = newResponse;\n                    },\n                });\n                if (response) {\n                    return response;\n                }\n            }\n            let requestParser;\n            const onRequestParseDoneList = [];\n            for (const onRequestParse of this.onRequestParseHooks) {\n                const onRequestParseResult = await onRequestParse({\n                    serverContext,\n                    request,\n                    requestParser,\n                    setRequestParser(parser) {\n                        requestParser = parser;\n                    },\n                });\n                if ((onRequestParseResult === null || onRequestParseResult === void 0 ? void 0 : onRequestParseResult.onRequestParseDone) != null) {\n                    onRequestParseDoneList.push(onRequestParseResult.onRequestParseDone);\n                }\n            }\n            this.logger.debug(`Parsing request to extract GraphQL parameters`);\n            if (!requestParser) {\n                return new this.fetchAPI.Response('Request is not valid', {\n                    status: 400,\n                    statusText: 'Bad Request',\n                });\n            }\n            let params;\n            try {\n                params = await requestParser(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    return getErrorResponse({\n                        status: 400,\n                        errors: [err],\n                        fetchAPI: this.fetchAPI,\n                    });\n                }\n                throw err;\n            }\n            for (const onRequestParseDone of onRequestParseDoneList) {\n                await onRequestParseDone({\n                    params,\n                    setParams(newParams) {\n                        params = newParams;\n                    },\n                });\n            }\n            const initialContext = {\n                request,\n                ...params,\n                ...serverContext,\n            };\n            const enveloped = this.getEnveloped(initialContext);\n            this.logger.debug(`Processing GraphQL Parameters`);\n            const result = await processRequest({\n                request,\n                params,\n                enveloped,\n                fetchAPI: this.fetchAPI,\n                onResultProcessHooks: this.onResultProcessHooks,\n            });\n            return result;\n        }\n        catch (error) {\n            return getErrorResponse({\n                status: 500,\n                errors: [new Error((_a = error === null || error === void 0 ? void 0 : error.message) !== null && _a !== void 0 ? _a : 'Unexpected Error.')],\n                fetchAPI: this.fetchAPI,\n            });\n        }\n    }\n    /**\n     * Testing utility to mock http request for GraphQL endpoint\n     *\n     *\n     * Example - Test a simple query\n     * ```ts\n     * const { response, executionResult } = await yoga.inject({\n     *  document: \"query { ping }\",\n     * })\n     * expect(response.status).toBe(200)\n     * expect(executionResult.data.ping).toBe('pong')\n     * ```\n     **/\n    async inject({ document, variables, operationName, headers, serverContext, }) {\n        const request = new this.fetchAPI.Request('http://localhost/graphql', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                ...headers,\n            },\n            body: JSON.stringify({\n                query: document &&\n                    (typeof document === 'string' ? document : print(document)),\n                variables,\n                operationName,\n            }),\n        });\n        const response = await this.handleRequest(request, serverContext);\n        let executionResult = null;\n        if (response.headers.get('content-type') === 'application/json') {\n            executionResult = await response.json();\n        }\n        return {\n            response,\n            executionResult,\n        };\n    }\n    start() {\n        self.addEventListener('fetch', this.fetchEventListener);\n    }\n    stop() {\n        self.removeEventListener('fetch', this.fetchEventListener);\n    }\n}\nfunction createServer(options) {\n    const server = new YogaServer(options);\n    // TODO: Will be removed once we get rid of classes\n    const fnHandler = (input) => {\n        if (input.request) {\n            return server.handleRequest(input.request, input);\n        }\n        return server.handleRequest(input, undefined);\n    };\n    return new Proxy(fnHandler, {\n        get: (_, prop) => {\n            if (server[prop]) {\n                if (server[prop].bind) {\n                    return server[prop].bind(server);\n                }\n                return server[prop];\n            }\n            if (fnHandler[prop]) {\n                if (fnHandler[prop].bind) {\n                    return fnHandler[prop].bind(fnHandler);\n                }\n                return fnHandler[prop];\n            }\n        },\n        apply(_, __, [input]) {\n            return fnHandler(input);\n        },\n    });\n}\n\nexport { YogaServer, createServer, debugColor, defaultYogaLogger, errorColor, getDefaultSchema, infoColor, renderGraphiQL, shouldRenderGraphiQL, titleBold, warnColor };\n", "export * from '@envelop/types';\nimport { isIntrospectionType, isObjectType, defaultFieldResolver, Kind, visit, BREAK, parse, specifiedRules, validate, subscribe, execute, GraphQLSchema, getOperationAST, GraphQLError } from 'graphql';\n\n/**\n * This enum is used only internally in order to create nominal type for the disabled plugin\n */\nvar EnableIfBranded;\n(function (EnableIfBranded) {\n    EnableIfBranded[EnableIfBranded[\"DisabledPlugin\"] = 0] = \"DisabledPlugin\";\n})(EnableIfBranded || (EnableIfBranded = {}));\nfunction isPluginEnabled(t) {\n    return t !== EnableIfBranded.DisabledPlugin && t !== null;\n}\n/**\n * Utility function to enable a plugin.\n */\nfunction enableIf(condition, plugin) {\n    if (condition) {\n        return typeof plugin === 'function' ? plugin() : plugin;\n    }\n    return EnableIfBranded.DisabledPlugin;\n}\n\nconst trackedSchemaSymbol = Symbol('TRACKED_SCHEMA');\nconst resolversHooksSymbol = Symbol('RESOLVERS_HOOKS');\nfunction prepareTracedSchema(schema) {\n    if (!schema || schema[trackedSchemaSymbol]) {\n        return;\n    }\n    schema[trackedSchemaSymbol] = true;\n    const entries = Object.values(schema.getTypeMap());\n    for (const type of entries) {\n        if (!isIntrospectionType(type) && isObjectType(type)) {\n            const fields = Object.values(type.getFields());\n            for (const field of fields) {\n                let resolverFn = (field.resolve || defaultFieldResolver);\n                field.resolve = async (root, args, context, info) => {\n                    if (context && context[resolversHooksSymbol]) {\n                        const hooks = context[resolversHooksSymbol];\n                        const afterCalls = [];\n                        for (const hook of hooks) {\n                            const afterFn = await hook({\n                                root,\n                                args,\n                                context,\n                                info,\n                                resolverFn,\n                                replaceResolverFn: newFn => {\n                                    resolverFn = newFn;\n                                },\n                            });\n                            afterFn && afterCalls.push(afterFn);\n                        }\n                        try {\n                            let result = await resolverFn(root, args, context, info);\n                            for (const afterFn of afterCalls) {\n                                afterFn({\n                                    result,\n                                    setResult: newResult => {\n                                        result = newResult;\n                                    },\n                                });\n                            }\n                            return result;\n                        }\n                        catch (e) {\n                            let resultErr = e;\n                            for (const afterFn of afterCalls) {\n                                afterFn({\n                                    result: resultErr,\n                                    setResult: newResult => {\n                                        resultErr = newResult;\n                                    },\n                                });\n                            }\n                            throw resultErr;\n                        }\n                    }\n                    else {\n                        return resolverFn(root, args, context, info);\n                    }\n                };\n            }\n        }\n    }\n}\n\nconst envelopIsIntrospectionSymbol = Symbol('ENVELOP_IS_INTROSPECTION');\nfunction isOperationDefinition(def) {\n    return def.kind === Kind.OPERATION_DEFINITION;\n}\nfunction isIntrospectionOperation(operation) {\n    if (operation.kind === 'OperationDefinition') {\n        let hasIntrospectionField = false;\n        visit(operation, {\n            Field: node => {\n                if (node.name.value === '__schema') {\n                    hasIntrospectionField = true;\n                    return BREAK;\n                }\n            },\n        });\n        return hasIntrospectionField;\n    }\n    return false;\n}\nfunction isIntrospectionDocument(document) {\n    const operations = document.definitions.filter(isOperationDefinition);\n    return operations.some(op => isIntrospectionOperation(op));\n}\nfunction isIntrospectionOperationString(operation) {\n    return (typeof operation === 'string' ? operation : operation.body).indexOf('__schema') !== -1;\n}\nfunction getSubscribeArgs(args) {\n    return args.length === 1\n        ? args[0]\n        : {\n            schema: args[0],\n            document: args[1],\n            rootValue: args[2],\n            contextValue: args[3],\n            variableValues: args[4],\n            operationName: args[5],\n            fieldResolver: args[6],\n            subscribeFieldResolver: args[7],\n        };\n}\n/**\n * Utility function for making a subscribe function that handles polymorphic arguments.\n */\nconst makeSubscribe = (subscribeFn) => ((...polyArgs) => subscribeFn(getSubscribeArgs(polyArgs)));\nfunction mapAsyncIterator(source, mapper) {\n    const iterator = source[Symbol.asyncIterator]();\n    async function mapResult(result) {\n        var _a;\n        if (result.done) {\n            return result;\n        }\n        try {\n            return { value: await mapper(result.value), done: false };\n        }\n        catch (error) {\n            try {\n                await ((_a = iterator.return) === null || _a === void 0 ? void 0 : _a.call(iterator));\n            }\n            catch (_error) {\n                /* ignore error */\n            }\n            throw error;\n        }\n    }\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            return await mapResult(await iterator.next());\n        },\n        async return() {\n            var _a;\n            const promise = (_a = iterator.return) === null || _a === void 0 ? void 0 : _a.call(iterator);\n            return promise ? await mapResult(await promise) : { value: undefined, done: true };\n        },\n        async throw(error) {\n            var _a;\n            const promise = (_a = iterator.throw) === null || _a === void 0 ? void 0 : _a.call(iterator);\n            if (promise) {\n                return await mapResult(await promise);\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\nfunction getExecuteArgs(args) {\n    return args.length === 1\n        ? args[0]\n        : {\n            schema: args[0],\n            document: args[1],\n            rootValue: args[2],\n            contextValue: args[3],\n            variableValues: args[4],\n            operationName: args[5],\n            fieldResolver: args[6],\n            typeResolver: args[7],\n        };\n}\n/**\n * Utility function for making a execute function that handles polymorphic arguments.\n */\nconst makeExecute = (executeFn) => ((...polyArgs) => executeFn(getExecuteArgs(polyArgs)));\n/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * implementing a `Symbol.asyncIterator` method.\n *\n * Source: https://github.com/graphql/graphql-js/blob/main/src/jsutils/isAsyncIterable.ts\n */\nfunction isAsyncIterable(maybeAsyncIterable) {\n    return (typeof maybeAsyncIterable === 'object' &&\n        maybeAsyncIterable != null &&\n        typeof maybeAsyncIterable[Symbol.asyncIterator] === 'function');\n}\n/**\n * A utility function for handling `onExecuteDone` hook result, for simplifying the handling of AsyncIterable returned from `execute`.\n *\n * @param payload The payload send to `onExecuteDone` hook function\n * @param fn The handler to be executed on each result\n * @returns a subscription for streamed results, or undefined in case of an non-async\n */\nfunction handleStreamOrSingleExecutionResult(payload, fn) {\n    if (isAsyncIterable(payload.result)) {\n        return { onNext: fn };\n    }\n    fn({\n        args: payload.args,\n        result: payload.result,\n        setResult: payload.setResult,\n    });\n    return undefined;\n}\nfunction finalAsyncIterator(source, onFinal) {\n    const iterator = source[Symbol.asyncIterator]();\n    let isDone = false;\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            const result = await iterator.next();\n            if (result.done && isDone === false) {\n                isDone = true;\n                onFinal();\n            }\n            return result;\n        },\n        async return() {\n            var _a;\n            const promise = (_a = iterator.return) === null || _a === void 0 ? void 0 : _a.call(iterator);\n            if (isDone === false) {\n                isDone = true;\n                onFinal();\n            }\n            return promise ? await promise : { done: true, value: undefined };\n        },\n        async throw(error) {\n            var _a;\n            const promise = (_a = iterator.throw) === null || _a === void 0 ? void 0 : _a.call(iterator);\n            if (promise) {\n                return await promise;\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\nfunction errorAsyncIterator(source, onError) {\n    const iterator = source[Symbol.asyncIterator]();\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            try {\n                return await iterator.next();\n            }\n            catch (error) {\n                onError(error);\n                return { done: true, value: undefined };\n            }\n        },\n        async return() {\n            var _a;\n            const promise = (_a = iterator.return) === null || _a === void 0 ? void 0 : _a.call(iterator);\n            return promise ? await promise : { done: true, value: undefined };\n        },\n        async throw(error) {\n            var _a;\n            const promise = (_a = iterator.throw) === null || _a === void 0 ? void 0 : _a.call(iterator);\n            if (promise) {\n                return await promise;\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\n\nfunction createEnvelopOrchestrator(plugins) {\n    let schema = null;\n    let initDone = false;\n    const onResolversHandlers = [];\n    for (const plugin of plugins) {\n        if (plugin.onResolverCalled) {\n            onResolversHandlers.push(plugin.onResolverCalled);\n        }\n    }\n    // Define the initial method for replacing the GraphQL schema, this is needed in order\n    // to allow setting the schema from the onPluginInit callback. We also need to make sure\n    // here not to call the same plugin that initiated the schema switch.\n    const replaceSchema = (newSchema, ignorePluginIndex = -1) => {\n        if (onResolversHandlers.length) {\n            prepareTracedSchema(newSchema);\n        }\n        schema = newSchema;\n        if (initDone) {\n            for (const [i, plugin] of plugins.entries()) {\n                if (i !== ignorePluginIndex) {\n                    plugin.onSchemaChange &&\n                        plugin.onSchemaChange({\n                            schema,\n                            replaceSchema: schemaToSet => {\n                                replaceSchema(schemaToSet, i);\n                            },\n                        });\n                }\n            }\n        }\n    };\n    const contextErrorHandlers = [];\n    // Iterate all plugins and trigger onPluginInit\n    for (const [i, plugin] of plugins.entries()) {\n        plugin.onPluginInit &&\n            plugin.onPluginInit({\n                plugins,\n                addPlugin: newPlugin => {\n                    plugins.push(newPlugin);\n                },\n                setSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n                registerContextErrorHandler: handler => contextErrorHandlers.push(handler),\n            });\n    }\n    // A set of before callbacks defined here in order to allow it to be used later\n    const beforeCallbacks = {\n        init: [],\n        parse: [],\n        validate: [],\n        subscribe: [],\n        execute: [],\n        context: [],\n    };\n    for (const { onContextBuilding, onExecute, onParse, onSubscribe, onValidate, onEnveloped } of plugins) {\n        onEnveloped && beforeCallbacks.init.push(onEnveloped);\n        onContextBuilding && beforeCallbacks.context.push(onContextBuilding);\n        onExecute && beforeCallbacks.execute.push(onExecute);\n        onParse && beforeCallbacks.parse.push(onParse);\n        onSubscribe && beforeCallbacks.subscribe.push(onSubscribe);\n        onValidate && beforeCallbacks.validate.push(onValidate);\n    }\n    const init = initialContext => {\n        for (const [i, onEnveloped] of beforeCallbacks.init.entries()) {\n            onEnveloped({\n                context: initialContext,\n                extendContext: extension => {\n                    if (!initialContext) {\n                        return;\n                    }\n                    Object.assign(initialContext, extension);\n                },\n                setSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n            });\n        }\n    };\n    const customParse = beforeCallbacks.parse.length\n        ? initialContext => (source, parseOptions) => {\n            let result = null;\n            let parseFn = parse;\n            const context = initialContext;\n            const afterCalls = [];\n            for (const onParse of beforeCallbacks.parse) {\n                const afterFn = onParse({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    params: { source, options: parseOptions },\n                    parseFn,\n                    setParseFn: newFn => {\n                        parseFn = newFn;\n                    },\n                    setParsedDocument: newDoc => {\n                        result = newDoc;\n                    },\n                });\n                afterFn && afterCalls.push(afterFn);\n            }\n            if (result === null) {\n                try {\n                    result = parseFn(source, parseOptions);\n                }\n                catch (e) {\n                    result = e;\n                }\n            }\n            for (const afterCb of afterCalls) {\n                afterCb({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    replaceParseResult: newResult => {\n                        result = newResult;\n                    },\n                    result,\n                });\n            }\n            if (result === null) {\n                throw new Error(`Failed to parse document.`);\n            }\n            if (result instanceof Error) {\n                throw result;\n            }\n            return result;\n        }\n        : () => parse;\n    const customValidate = beforeCallbacks.validate.length\n        ? initialContext => (schema, documentAST, rules, typeInfo, validationOptions) => {\n            let actualRules = rules ? [...rules] : undefined;\n            let validateFn = validate;\n            let result = null;\n            const context = initialContext;\n            const afterCalls = [];\n            for (const onValidate of beforeCallbacks.validate) {\n                const afterFn = onValidate({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    params: {\n                        schema,\n                        documentAST,\n                        rules: actualRules,\n                        typeInfo,\n                        options: validationOptions,\n                    },\n                    validateFn,\n                    addValidationRule: rule => {\n                        if (!actualRules) {\n                            actualRules = [...specifiedRules];\n                        }\n                        actualRules.push(rule);\n                    },\n                    setValidationFn: newFn => {\n                        validateFn = newFn;\n                    },\n                    setResult: newResults => {\n                        result = newResults;\n                    },\n                });\n                afterFn && afterCalls.push(afterFn);\n            }\n            if (!result) {\n                result = validateFn(schema, documentAST, actualRules, typeInfo, validationOptions);\n            }\n            const valid = result.length === 0;\n            for (const afterCb of afterCalls) {\n                afterCb({\n                    valid,\n                    result,\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n            }\n            return result;\n        }\n        : () => validate;\n    const customContextFactory = beforeCallbacks.context.length\n        ? initialContext => async (orchestratorCtx) => {\n            const afterCalls = [];\n            // In order to have access to the \"last working\" context object we keep this outside of the try block:\n            let context = orchestratorCtx ? { ...initialContext, ...orchestratorCtx } : initialContext;\n            try {\n                let isBreakingContextBuilding = false;\n                for (const onContext of beforeCallbacks.context) {\n                    const afterHookResult = await onContext({\n                        context,\n                        extendContext: extension => {\n                            context = { ...context, ...extension };\n                        },\n                        breakContextBuilding: () => {\n                            isBreakingContextBuilding = true;\n                        },\n                    });\n                    if (typeof afterHookResult === 'function') {\n                        afterCalls.push(afterHookResult);\n                    }\n                    if (isBreakingContextBuilding === true) {\n                        break;\n                    }\n                }\n                for (const afterCb of afterCalls) {\n                    afterCb({\n                        context,\n                        extendContext: extension => {\n                            context = { ...context, ...extension };\n                        },\n                    });\n                }\n                return context;\n            }\n            catch (err) {\n                let error = err;\n                for (const errorCb of contextErrorHandlers) {\n                    errorCb({\n                        context,\n                        error,\n                        setError: err => {\n                            error = err;\n                        },\n                    });\n                }\n                throw error;\n            }\n        }\n        : initialContext => orchestratorCtx => orchestratorCtx ? { ...initialContext, ...orchestratorCtx } : initialContext;\n    const useCustomSubscribe = beforeCallbacks.subscribe.length || onResolversHandlers.length;\n    const customSubscribe = useCustomSubscribe\n        ? makeSubscribe(async (args) => {\n            let subscribeFn = subscribe;\n            const afterCalls = [];\n            const subscribeErrorHandlers = [];\n            let context = args.contextValue || {};\n            let result;\n            for (const onSubscribe of beforeCallbacks.subscribe) {\n                const after = await onSubscribe({\n                    subscribeFn,\n                    setSubscribeFn: newSubscribeFn => {\n                        subscribeFn = newSubscribeFn;\n                    },\n                    extendContext: extension => {\n                        context = { ...context, ...extension };\n                    },\n                    args: args,\n                    setResultAndStopExecution: stopResult => {\n                        result = stopResult;\n                    },\n                });\n                if (after) {\n                    if (after.onSubscribeResult) {\n                        afterCalls.push(after.onSubscribeResult);\n                    }\n                    if (after.onSubscribeError) {\n                        subscribeErrorHandlers.push(after.onSubscribeError);\n                    }\n                }\n                if (result !== undefined) {\n                    break;\n                }\n            }\n            if (onResolversHandlers.length) {\n                context[resolversHooksSymbol] = onResolversHandlers;\n            }\n            if (result === undefined) {\n                result = await subscribeFn({\n                    ...args,\n                    contextValue: context,\n                    // Casted for GraphQL.js 15 compatibility\n                    // Can be removed once we drop support for GraphQL.js 15\n                });\n            }\n            const onNextHandler = [];\n            const onEndHandler = [];\n            for (const afterCb of afterCalls) {\n                const hookResult = afterCb({\n                    args: args,\n                    result,\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n                if (hookResult) {\n                    if (hookResult.onNext) {\n                        onNextHandler.push(hookResult.onNext);\n                    }\n                    if (hookResult.onEnd) {\n                        onEndHandler.push(hookResult.onEnd);\n                    }\n                }\n            }\n            if (onNextHandler.length && isAsyncIterable(result)) {\n                result = mapAsyncIterator(result, async (result) => {\n                    for (const onNext of onNextHandler) {\n                        await onNext({\n                            args: args,\n                            result,\n                            setResult: newResult => (result = newResult),\n                        });\n                    }\n                    return result;\n                });\n            }\n            if (onEndHandler.length && isAsyncIterable(result)) {\n                result = finalAsyncIterator(result, () => {\n                    for (const onEnd of onEndHandler) {\n                        onEnd();\n                    }\n                });\n            }\n            if (subscribeErrorHandlers.length && isAsyncIterable(result)) {\n                result = errorAsyncIterator(result, err => {\n                    let error = err;\n                    for (const handler of subscribeErrorHandlers) {\n                        handler({\n                            error,\n                            setError: err => {\n                                error = err;\n                            },\n                        });\n                    }\n                    throw error;\n                });\n            }\n            return result;\n        })\n        : makeSubscribe(subscribe);\n    const useCustomExecute = beforeCallbacks.execute.length || onResolversHandlers.length;\n    const customExecute = useCustomExecute\n        ? makeExecute(async (args) => {\n            let executeFn = execute;\n            let result;\n            const afterCalls = [];\n            let context = args.contextValue || {};\n            for (const onExecute of beforeCallbacks.execute) {\n                const after = await onExecute({\n                    executeFn,\n                    setExecuteFn: newExecuteFn => {\n                        executeFn = newExecuteFn;\n                    },\n                    setResultAndStopExecution: stopResult => {\n                        result = stopResult;\n                    },\n                    extendContext: extension => {\n                        if (typeof extension === 'object') {\n                            context = {\n                                ...(context || {}),\n                                ...extension,\n                            };\n                        }\n                        else {\n                            throw new Error(`Invalid context extension provided! Expected \"object\", got: \"${JSON.stringify(extension)}\" (${typeof extension})`);\n                        }\n                    },\n                    args: args,\n                });\n                if (after === null || after === void 0 ? void 0 : after.onExecuteDone) {\n                    afterCalls.push(after.onExecuteDone);\n                }\n                if (result !== undefined) {\n                    break;\n                }\n            }\n            if (onResolversHandlers.length) {\n                context[resolversHooksSymbol] = onResolversHandlers;\n            }\n            if (result === undefined) {\n                result = (await executeFn({\n                    ...args,\n                    contextValue: context,\n                }));\n            }\n            const onNextHandler = [];\n            const onEndHandler = [];\n            for (const afterCb of afterCalls) {\n                const hookResult = await afterCb({\n                    args: args,\n                    result,\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n                if (hookResult) {\n                    if (hookResult.onNext) {\n                        onNextHandler.push(hookResult.onNext);\n                    }\n                    if (hookResult.onEnd) {\n                        onEndHandler.push(hookResult.onEnd);\n                    }\n                }\n            }\n            if (onNextHandler.length && isAsyncIterable(result)) {\n                result = mapAsyncIterator(result, async (result) => {\n                    for (const onNext of onNextHandler) {\n                        await onNext({\n                            args: args,\n                            result,\n                            setResult: newResult => {\n                                result = newResult;\n                            },\n                        });\n                    }\n                    return result;\n                });\n            }\n            if (onEndHandler.length && isAsyncIterable(result)) {\n                result = finalAsyncIterator(result, () => {\n                    for (const onEnd of onEndHandler) {\n                        onEnd();\n                    }\n                });\n            }\n            return result;\n        })\n        : makeExecute(execute);\n    initDone = true;\n    // This is done in order to trigger the first schema available, to allow plugins that needs the schema\n    // eagerly to have it.\n    if (schema) {\n        for (const [i, plugin] of plugins.entries()) {\n            plugin.onSchemaChange &&\n                plugin.onSchemaChange({\n                    schema,\n                    replaceSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n                });\n        }\n    }\n    return {\n        getCurrentSchema() {\n            return schema;\n        },\n        init,\n        parse: customParse,\n        validate: customValidate,\n        execute: customExecute,\n        subscribe: customSubscribe,\n        contextFactory: customContextFactory,\n    };\n}\n\nvar _a;\nconst getTimestamp = typeof globalThis !== 'undefined' && ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.performance) === null || _a === void 0 ? void 0 : _a.now) ? () => performance.now() : () => Date.now();\nconst measure = () => {\n    const start = getTimestamp();\n    return () => {\n        const end = getTimestamp();\n        return end - start;\n    };\n};\nconst tracingSymbol = Symbol('envelopTracing');\nfunction traceOrchestrator(orchestrator) {\n    const createTracer = (name, ctx) => {\n        const end = measure();\n        return () => {\n            ctx[tracingSymbol][name] = end();\n        };\n    };\n    return {\n        ...orchestrator,\n        init: (ctx = {}) => {\n            ctx[tracingSymbol] = ctx[tracingSymbol] || {};\n            const done = createTracer('init', ctx || {});\n            try {\n                return orchestrator.init(ctx);\n            }\n            finally {\n                done();\n            }\n        },\n        parse: (ctx = {}) => {\n            ctx[tracingSymbol] = ctx[tracingSymbol] || {};\n            const actualFn = orchestrator.parse(ctx);\n            return (...args) => {\n                const done = createTracer('parse', ctx);\n                try {\n                    return actualFn(...args);\n                }\n                finally {\n                    done();\n                }\n            };\n        },\n        validate: (ctx = {}) => {\n            ctx[tracingSymbol] = ctx[tracingSymbol] || {};\n            const actualFn = orchestrator.validate(ctx);\n            return (...args) => {\n                const done = createTracer('validate', ctx);\n                try {\n                    return actualFn(...args);\n                }\n                finally {\n                    done();\n                }\n            };\n        },\n        execute: async (argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) => {\n            const args = argsOrSchema instanceof GraphQLSchema\n                ? {\n                    schema: argsOrSchema,\n                    document: document,\n                    rootValue,\n                    contextValue,\n                    variableValues,\n                    operationName,\n                    fieldResolver,\n                    typeResolver,\n                }\n                : argsOrSchema;\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore GraphQL.js types contextValue as unknown\n            const done = createTracer('execute', args.contextValue || {});\n            try {\n                const result = await orchestrator.execute(args);\n                done();\n                if (!isAsyncIterable(result)) {\n                    result.extensions = result.extensions || {};\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore GraphQL.js types contextValue as unknown\n                    result.extensions.envelopTracing = args.contextValue[tracingSymbol];\n                }\n                else {\n                    // eslint-disable-next-line no-console\n                    console.warn(`\"traceOrchestrator\" encountered a AsyncIterator which is not supported yet, so tracing data is not available for the operation.`);\n                }\n                return result;\n            }\n            catch (e) {\n                done();\n                throw e;\n            }\n        },\n        subscribe: async (argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) => {\n            const args = argsOrSchema instanceof GraphQLSchema\n                ? {\n                    schema: argsOrSchema,\n                    document: document,\n                    rootValue,\n                    contextValue,\n                    variableValues,\n                    operationName,\n                    fieldResolver,\n                    subscribeFieldResolver,\n                }\n                : argsOrSchema;\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore GraphQL.js types contextValue as unknown\n            const done = createTracer('subscribe', args.contextValue || {});\n            try {\n                return await orchestrator.subscribe(args);\n            }\n            finally {\n                done();\n            }\n        },\n        contextFactory: (ctx = {}) => {\n            const actualFn = orchestrator.contextFactory(ctx);\n            return async (childCtx) => {\n                const done = createTracer('contextFactory', ctx);\n                try {\n                    return await actualFn(childCtx);\n                }\n                finally {\n                    done();\n                }\n            };\n        },\n    };\n}\n\nfunction envelop(options) {\n    const plugins = options.plugins.filter(isPluginEnabled);\n    let orchestrator = createEnvelopOrchestrator(plugins);\n    if (options.enableInternalTracing) {\n        orchestrator = traceOrchestrator(orchestrator);\n    }\n    const getEnveloped = (initialContext = {}) => {\n        const typedOrchestrator = orchestrator;\n        typedOrchestrator.init(initialContext);\n        return {\n            parse: typedOrchestrator.parse(initialContext),\n            validate: typedOrchestrator.validate(initialContext),\n            contextFactory: typedOrchestrator.contextFactory(initialContext),\n            execute: typedOrchestrator.execute,\n            subscribe: typedOrchestrator.subscribe,\n            schema: typedOrchestrator.getCurrentSchema(),\n        };\n    };\n    getEnveloped._plugins = plugins;\n    return getEnveloped;\n}\n\nconst useEnvelop = (envelop) => {\n    return {\n        onPluginInit({ addPlugin }) {\n            for (const plugin of envelop._plugins) {\n                addPlugin(plugin);\n            }\n        },\n    };\n};\n\nconst DEFAULT_OPTIONS = {\n    logFn: console.log,\n};\nconst useLogger = (rawOptions = DEFAULT_OPTIONS) => {\n    const options = {\n        DEFAULT_OPTIONS,\n        ...rawOptions,\n    };\n    return {\n        onParse({ extendContext, params }) {\n            if (options.skipIntrospection && isIntrospectionOperationString(params.source)) {\n                extendContext({\n                    [envelopIsIntrospectionSymbol]: true,\n                });\n            }\n        },\n        onExecute({ args }) {\n            if (args.contextValue[envelopIsIntrospectionSymbol]) {\n                return;\n            }\n            options.logFn('execute-start', { args });\n            return {\n                onExecuteDone: ({ result }) => {\n                    options.logFn('execute-end', { args, result });\n                },\n            };\n        },\n        onSubscribe({ args }) {\n            if (args.contextValue[envelopIsIntrospectionSymbol]) {\n                return;\n            }\n            options.logFn('subscribe-start', { args });\n            return {\n                onSubscribeResult: ({ result }) => {\n                    options.logFn('subscribe-end', { args, result });\n                },\n            };\n        },\n    };\n};\n\nconst HR_TO_NS = 1e9;\nconst NS_TO_MS = 1e6;\nconst DEFAULT_OPTIONS$1 = {\n    onExecutionMeasurement: (args, timing) => console.log(`Operation execution \"${args.operationName}\" done in ${timing.ms}ms`),\n    onSubscriptionMeasurement: (args, timing) => console.log(`Operation subscription \"${args.operationName}\" done in ${timing.ms}ms`),\n    onParsingMeasurement: (source, timing) => console.log(`Parsing \"${source}\" done in ${timing.ms}ms`),\n    onValidationMeasurement: (document, timing) => { var _a, _b; return console.log(`Validation \"${((_b = (_a = getOperationAST(document)) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.value) || '-'}\" done in ${timing.ms}ms`); },\n    onResolverMeasurement: (info, timing) => console.log(`\\tResolver of \"${info.parentType.toString()}.${info.fieldName}\" done in ${timing.ms}ms`),\n    onContextBuildingMeasurement: (timing) => console.log(`Context building done in ${timing.ms}ms`),\n};\nconst deltaFrom = (hrtime) => {\n    const delta = process.hrtime(hrtime);\n    const ns = delta[0] * HR_TO_NS + delta[1];\n    return {\n        ns,\n        get ms() {\n            return ns / NS_TO_MS;\n        },\n    };\n};\nconst useTiming = (rawOptions) => {\n    const options = {\n        ...DEFAULT_OPTIONS$1,\n        ...(rawOptions || {}),\n    };\n    const result = {};\n    if (options.onContextBuildingMeasurement) {\n        result.onContextBuilding = ({ context }) => {\n            if (context[envelopIsIntrospectionSymbol]) {\n                return;\n            }\n            const contextStartTime = process.hrtime();\n            return () => {\n                options.onContextBuildingMeasurement(deltaFrom(contextStartTime));\n            };\n        };\n    }\n    if (options.onParsingMeasurement) {\n        result.onParse = ({ params, extendContext }) => {\n            if (options.skipIntrospection && isIntrospectionOperationString(params.source)) {\n                extendContext({\n                    [envelopIsIntrospectionSymbol]: true,\n                });\n                return;\n            }\n            const parseStartTime = process.hrtime();\n            return () => {\n                options.onParsingMeasurement(params.source, deltaFrom(parseStartTime));\n            };\n        };\n    }\n    if (options.onValidationMeasurement) {\n        result.onValidate = ({ params, context }) => {\n            if (context[envelopIsIntrospectionSymbol]) {\n                return;\n            }\n            const validateStartTime = process.hrtime();\n            return () => {\n                options.onValidationMeasurement(params.documentAST, deltaFrom(validateStartTime));\n            };\n        };\n    }\n    if (options.onExecutionMeasurement) {\n        if (options.onResolverMeasurement) {\n            result.onExecute = ({ args }) => {\n                if (args.contextValue[envelopIsIntrospectionSymbol]) {\n                    return;\n                }\n                const executeStartTime = process.hrtime();\n                return {\n                    onExecuteDone: () => {\n                        options.onExecutionMeasurement(args, deltaFrom(executeStartTime));\n                    },\n                };\n            };\n            result.onResolverCalled = ({ info }) => {\n                const resolverStartTime = process.hrtime();\n                return () => {\n                    options.onResolverMeasurement(info, deltaFrom(resolverStartTime));\n                };\n            };\n        }\n        else {\n            result.onExecute = ({ args }) => {\n                if (args.contextValue[envelopIsIntrospectionSymbol]) {\n                    return;\n                }\n                const executeStartTime = process.hrtime();\n                return {\n                    onExecuteDone: () => {\n                        options.onExecutionMeasurement(args, deltaFrom(executeStartTime));\n                    },\n                };\n            };\n        }\n    }\n    if (options.onSubscriptionMeasurement) {\n        if (options.onResolverMeasurement) {\n            result.onSubscribe = ({ args }) => {\n                if (args.contextValue[envelopIsIntrospectionSymbol]) {\n                    return;\n                }\n                const subscribeStartTime = process.hrtime();\n                return {\n                    onSubscribeResult: () => {\n                        options.onSubscriptionMeasurement && options.onSubscriptionMeasurement(args, deltaFrom(subscribeStartTime));\n                    },\n                };\n            };\n            result.onResolverCalled = ({ info }) => {\n                const resolverStartTime = process.hrtime();\n                return () => {\n                    options.onResolverMeasurement && options.onResolverMeasurement(info, deltaFrom(resolverStartTime));\n                };\n            };\n        }\n        else {\n            result.onSubscribe = ({ args }) => {\n                if (args.contextValue[envelopIsIntrospectionSymbol]) {\n                    return;\n                }\n                const subscribeStartTime = process.hrtime();\n                return {\n                    onSubscribeResult: () => {\n                        options.onSubscriptionMeasurement && options.onSubscriptionMeasurement(args, deltaFrom(subscribeStartTime));\n                    },\n                };\n            };\n        }\n    }\n    return result;\n};\n\nconst useSchema = (schema) => {\n    return {\n        onPluginInit({ setSchema }) {\n            setSchema(schema);\n        },\n    };\n};\nconst useLazyLoadedSchema = (schemaLoader) => {\n    return {\n        onEnveloped({ setSchema, context }) {\n            setSchema(schemaLoader(context));\n        },\n    };\n};\nconst useAsyncSchema = (schemaPromise) => {\n    return {\n        onPluginInit({ setSchema }) {\n            schemaPromise.then(schemaObj => {\n                setSchema(schemaObj);\n            });\n        },\n    };\n};\n\nconst makeHandleResult = (errorHandler) => ({ result, args }) => {\n    var _a;\n    if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {\n        errorHandler(result.errors, args);\n    }\n};\nconst useErrorHandler = (errorHandler) => ({\n    onExecute() {\n        const handleResult = makeHandleResult(errorHandler);\n        return {\n            onExecuteDone(payload) {\n                return handleStreamOrSingleExecutionResult(payload, handleResult);\n            },\n        };\n    },\n});\n\nconst useExtendContext = (contextFactory) => ({\n    async onContextBuilding({ context, extendContext }) {\n        extendContext((await contextFactory(context)));\n    },\n});\n\nconst makeHandleResult$1 = (formatter) => ({ args, result, setResult, }) => {\n    const modified = formatter(result, args);\n    if (modified !== false) {\n        setResult(modified);\n    }\n};\nconst usePayloadFormatter = (formatter) => ({\n    onExecute() {\n        const handleResult = makeHandleResult$1(formatter);\n        return {\n            onExecuteDone(payload) {\n                return handleStreamOrSingleExecutionResult(payload, handleResult);\n            },\n        };\n    },\n});\n\nconst DEFAULT_ERROR_MESSAGE = 'Unexpected error.';\nclass EnvelopError extends GraphQLError {\n    constructor(message, extensions) {\n        super(message, undefined, undefined, undefined, undefined, undefined, extensions);\n    }\n}\nconst formatError = (err, message, isDev) => {\n    var _a, _b, _c, _d;\n    if (err instanceof GraphQLError) {\n        if (\n        /** execution error */\n        (err.originalError && err.originalError instanceof EnvelopError === false) ||\n            /** validate and parse errors */\n            (err.originalError === undefined && err instanceof EnvelopError === false)) {\n            return new GraphQLError(message, err.nodes, err.source, err.positions, err.path, undefined, isDev\n                ? {\n                    originalError: {\n                        message: (_b = (_a = err.originalError) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : err.message,\n                        stack: (_d = (_c = err.originalError) === null || _c === void 0 ? void 0 : _c.stack) !== null && _d !== void 0 ? _d : err.stack,\n                    },\n                }\n                : undefined);\n        }\n        return err;\n    }\n    return new GraphQLError(message);\n};\nconst makeHandleResult$2 = (format, message, isDev) => ({ result, setResult }) => {\n    if (result.errors != null) {\n        setResult({ ...result, errors: result.errors.map(error => format(error, message, isDev)) });\n    }\n};\nconst useMaskedErrors = (opts) => {\n    var _a, _b;\n    const format = (_a = opts === null || opts === void 0 ? void 0 : opts.formatError) !== null && _a !== void 0 ? _a : formatError;\n    const message = (opts === null || opts === void 0 ? void 0 : opts.errorMessage) || DEFAULT_ERROR_MESSAGE;\n    // eslint-disable-next-line dot-notation\n    const isDev = (_b = opts === null || opts === void 0 ? void 0 : opts.isDev) !== null && _b !== void 0 ? _b : (typeof process !== 'undefined' ? process.env['NODE_ENV'] === 'development' : false);\n    const handleResult = makeHandleResult$2(format, message, isDev);\n    return {\n        onParse: (opts === null || opts === void 0 ? void 0 : opts.handleParseErrors) === true\n            ? function onParse() {\n                return function onParseEnd({ result, replaceParseResult }) {\n                    if (result instanceof Error) {\n                        replaceParseResult(format(result, message, isDev));\n                    }\n                };\n            }\n            : undefined,\n        onValidate: (opts === null || opts === void 0 ? void 0 : opts.handleValidationErrors) === true\n            ? function onValidate() {\n                return function onValidateEnd({ valid, result, setResult }) {\n                    if (valid === false) {\n                        setResult(result.map(error => format(error, message, isDev)));\n                    }\n                };\n            }\n            : undefined,\n        onPluginInit(context) {\n            context.registerContextErrorHandler(({ error, setError }) => {\n                setError(formatError(error, message, isDev));\n            });\n        },\n        onExecute() {\n            return {\n                onExecuteDone(payload) {\n                    return handleStreamOrSingleExecutionResult(payload, handleResult);\n                },\n            };\n        },\n        onSubscribe() {\n            return {\n                onSubscribeResult(payload) {\n                    return handleStreamOrSingleExecutionResult(payload, handleResult);\n                },\n                onSubscribeError({ error, setError }) {\n                    setError(formatError(error, message, isDev));\n                },\n            };\n        },\n    };\n};\n\nconst OnNonIntrospectionFieldReachedValidationRule = (onNonIntrospectionField) => ctx => {\n    const rootQueryType = ctx.getSchema().getQueryType();\n    const rootMutationType = ctx.getSchema().getMutationType();\n    const rootSubscriptionType = ctx.getSchema().getSubscriptionType();\n    return {\n        Field(field) {\n            const parentType = ctx.getParentType();\n            const isQuery = parentType === rootQueryType;\n            const isMutation = parentType === rootMutationType;\n            const isSubscription = parentType === rootSubscriptionType;\n            if ((isQuery && !field.name.value.startsWith('__')) || isMutation || isSubscription) {\n                onNonIntrospectionField();\n                return BREAK;\n            }\n            return undefined;\n        },\n    };\n};\nconst fastIntroSpectionSymbol = Symbol('fastIntrospection');\n/**\n * In case a GraphQL operation only contains introspection fields the context building can be skipped completely.\n * With this plugin any further context extensions will be skipped.\n */\nconst useImmediateIntrospection = () => {\n    return {\n        onValidate({ addValidationRule }) {\n            let isIntrospectionOnly = true;\n            addValidationRule(OnNonIntrospectionFieldReachedValidationRule(() => {\n                isIntrospectionOnly = false;\n            }));\n            return function afterValidate({ extendContext }) {\n                if (isIntrospectionOnly) {\n                    extendContext({ [fastIntroSpectionSymbol]: true });\n                }\n            };\n        },\n        onContextBuilding({ context, breakContextBuilding }) {\n            if (context[fastIntroSpectionSymbol]) {\n                // hijack and skip all other context related stuff.\n                // We dont need a context!\n                breakContextBuilding();\n            }\n        },\n    };\n};\n\nexport { DEFAULT_ERROR_MESSAGE, EnvelopError, enableIf, envelop, envelopIsIntrospectionSymbol, errorAsyncIterator, finalAsyncIterator, formatError, handleStreamOrSingleExecutionResult, isAsyncIterable, isIntrospectionDocument, isIntrospectionOperation, isIntrospectionOperationString, isOperationDefinition, isPluginEnabled, makeExecute, makeSubscribe, mapAsyncIterator, useAsyncSchema, useEnvelop, useErrorHandler, useExtendContext, useImmediateIntrospection, useLazyLoadedSchema, useLogger, useMaskedErrors, usePayloadFormatter, useSchema, useTiming };\n", "import { parse, versionInfo, GraphQLError, isNonNullType, Kind, valueFromAST, print, isObjectType, isListType, isSpecifiedDirective, astFromValue, isSpecifiedScalarType, isIntrospectionType, isInterfaceType, isUnionType, isInputObjectType, isEnumType, isScalarType, GraphQLDeprecatedDirective, specifiedRules, concatAST, validate, buildClientSchema, visit, TokenKind, Source, isTypeSystemDefinitionNode, getNamedType, GraphQLString, GraphQLNonNull, GraphQLList, GraphQLID, GraphQLBoolean, GraphQLFloat, GraphQLInt, GraphQLObjectType, GraphQLInterfaceType, GraphQLInputObjectType, GraphQLDirective, GraphQLUnionType, GraphQLEnumType, GraphQLScalarType, isNamedType, getNullableType, isLeafType, GraphQLSchema, isDirective, isCompositeType, doTypesOverlap, getOperationAST, getDirectiveValues, GraphQLSkipDirective, GraphQLIncludeDirective, typeFromAST, isAbstractType, TypeNameMetaFieldDef, buildASTSchema } from 'graphql';\n\nconst asArray = (fns) => (Array.isArray(fns) ? fns : fns ? [fns] : []);\nconst invalidDocRegex = /\\.[a-z0-9]+$/i;\nfunction isDocumentString(str) {\n    if (typeof str !== 'string') {\n        return false;\n    }\n    // XXX: is-valid-path or is-glob treat SDL as a valid path\n    // (`scalar Date` for example)\n    // this why checking the extension is fast enough\n    // and prevent from parsing the string in order to find out\n    // if the string is a SDL\n    if (invalidDocRegex.test(str)) {\n        return false;\n    }\n    try {\n        parse(str);\n        return true;\n    }\n    catch (e) { }\n    return false;\n}\nconst invalidPathRegex = /[\u2018\u201C!%&^<=>`]/;\nfunction isValidPath(str) {\n    return typeof str === 'string' && !invalidPathRegex.test(str);\n}\nfunction compareStrings(a, b) {\n    if (String(a) < String(b)) {\n        return -1;\n    }\n    if (String(a) > String(b)) {\n        return 1;\n    }\n    return 0;\n}\nfunction nodeToString(a) {\n    var _a, _b;\n    let name;\n    if ('alias' in a) {\n        name = (_a = a.alias) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    if (name == null && 'name' in a) {\n        name = (_b = a.name) === null || _b === void 0 ? void 0 : _b.value;\n    }\n    if (name == null) {\n        name = a.kind;\n    }\n    return name;\n}\nfunction compareNodes(a, b, customFn) {\n    const aStr = nodeToString(a);\n    const bStr = nodeToString(b);\n    if (typeof customFn === 'function') {\n        return customFn(aStr, bStr);\n    }\n    return compareStrings(aStr, bStr);\n}\nfunction isSome(input) {\n    return input != null;\n}\nfunction assertSome(input, message = 'Value should be something') {\n    if (input == null) {\n        throw new Error(message);\n    }\n}\n\nfunction createGraphQLError(message, options) {\n    if (versionInfo.major >= 17) {\n        return new GraphQLError(message, options);\n    }\n    return new GraphQLError(message, options === null || options === void 0 ? void 0 : options.nodes, options === null || options === void 0 ? void 0 : options.source, options === null || options === void 0 ? void 0 : options.positions, options === null || options === void 0 ? void 0 : options.path, options === null || options === void 0 ? void 0 : options.originalError, options === null || options === void 0 ? void 0 : options.extensions);\n}\nfunction relocatedError(originalError, path) {\n    return createGraphQLError(originalError.message, {\n        nodes: originalError.nodes,\n        source: originalError.source,\n        positions: originalError.positions,\n        path: path == null ? originalError.path : path,\n        originalError,\n        extensions: originalError.extensions,\n    });\n}\n\nlet AggregateErrorImpl;\nif (typeof AggregateError === 'undefined') {\n    class AggregateErrorClass extends Error {\n        constructor(errors, message = '') {\n            super(message);\n            this.errors = errors;\n            this.name = 'AggregateError';\n            Error.captureStackTrace(this, AggregateErrorClass);\n        }\n    }\n    AggregateErrorImpl = function (errors, message) {\n        return new AggregateErrorClass(errors, message);\n    };\n}\nelse {\n    AggregateErrorImpl = AggregateError;\n}\nfunction isAggregateError(error) {\n    return 'errors' in error && Array.isArray(error['errors']);\n}\n\n// Taken from graphql-js\nconst MAX_RECURSIVE_DEPTH = 3;\n/**\n * Used to print values in error messages.\n */\nfunction inspect(value) {\n    return formatValue(value, []);\n}\nfunction formatValue(value, seenValues) {\n    switch (typeof value) {\n        case 'string':\n            return JSON.stringify(value);\n        case 'function':\n            return value.name ? `[function ${value.name}]` : '[function]';\n        case 'object':\n            return formatObjectValue(value, seenValues);\n        default:\n            return String(value);\n    }\n}\nfunction formatError(value) {\n    if (value instanceof GraphQLError) {\n        return value.toString();\n    }\n    return `${value.name}: ${value.message};\\n ${value.stack}`;\n}\nfunction formatObjectValue(value, previouslySeenValues) {\n    if (value === null) {\n        return 'null';\n    }\n    if (value instanceof Error) {\n        if (isAggregateError(value)) {\n            return formatError(value) + '\\n' + formatArray(value.errors, previouslySeenValues);\n        }\n        return formatError(value);\n    }\n    if (previouslySeenValues.includes(value)) {\n        return '[Circular]';\n    }\n    const seenValues = [...previouslySeenValues, value];\n    if (isJSONable(value)) {\n        const jsonValue = value.toJSON();\n        // check for infinite recursion\n        if (jsonValue !== value) {\n            return typeof jsonValue === 'string' ? jsonValue : formatValue(jsonValue, seenValues);\n        }\n    }\n    else if (Array.isArray(value)) {\n        return formatArray(value, seenValues);\n    }\n    return formatObject(value, seenValues);\n}\nfunction isJSONable(value) {\n    return typeof value.toJSON === 'function';\n}\nfunction formatObject(object, seenValues) {\n    const entries = Object.entries(object);\n    if (entries.length === 0) {\n        return '{}';\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return '[' + getObjectTag(object) + ']';\n    }\n    const properties = entries.map(([key, value]) => key + ': ' + formatValue(value, seenValues));\n    return '{ ' + properties.join(', ') + ' }';\n}\nfunction formatArray(array, seenValues) {\n    if (array.length === 0) {\n        return '[]';\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return '[Array]';\n    }\n    const len = array.length;\n    const remaining = array.length;\n    const items = [];\n    for (let i = 0; i < len; ++i) {\n        items.push(formatValue(array[i], seenValues));\n    }\n    if (remaining === 1) {\n        items.push('... 1 more item');\n    }\n    else if (remaining > 1) {\n        items.push(`... ${remaining} more items`);\n    }\n    return '[' + items.join(', ') + ']';\n}\nfunction getObjectTag(object) {\n    const tag = Object.prototype.toString\n        .call(object)\n        .replace(/^\\[object /, '')\n        .replace(/]$/, '');\n    if (tag === 'Object' && typeof object.constructor === 'function') {\n        const name = object.constructor.name;\n        if (typeof name === 'string' && name !== '') {\n            return name;\n        }\n    }\n    return tag;\n}\n\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getArgumentValues(def, node, variableValues = {}) {\n    var _a;\n    const variableMap = Object.entries(variableValues).reduce((prev, [key, value]) => ({\n        ...prev,\n        [key]: value,\n    }), {});\n    const coercedValues = {};\n    const argumentNodes = (_a = node.arguments) !== null && _a !== void 0 ? _a : [];\n    const argNodeMap = argumentNodes.reduce((prev, arg) => ({\n        ...prev,\n        [arg.name.value]: arg,\n    }), {});\n    for (const { name, type: argType, defaultValue } of def.args) {\n        const argumentNode = argNodeMap[name];\n        if (!argumentNode) {\n            if (defaultValue !== undefined) {\n                coercedValues[name] = defaultValue;\n            }\n            else if (isNonNullType(argType)) {\n                throw createGraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` + 'was not provided.', {\n                    nodes: [node],\n                });\n            }\n            continue;\n        }\n        const valueNode = argumentNode.value;\n        let isNull = valueNode.kind === Kind.NULL;\n        if (valueNode.kind === Kind.VARIABLE) {\n            const variableName = valueNode.name.value;\n            if (variableValues == null || variableMap[variableName] == null) {\n                if (defaultValue !== undefined) {\n                    coercedValues[name] = defaultValue;\n                }\n                else if (isNonNullType(argType)) {\n                    throw createGraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n                        `was provided the variable \"$${variableName}\" which was not provided a runtime value.`, {\n                        nodes: [valueNode],\n                    });\n                }\n                continue;\n            }\n            isNull = variableValues[variableName] == null;\n        }\n        if (isNull && isNonNullType(argType)) {\n            throw createGraphQLError(`Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` + 'must not be null.', {\n                nodes: [valueNode],\n            });\n        }\n        const coercedValue = valueFromAST(valueNode, argType, variableValues);\n        if (coercedValue === undefined) {\n            // Note: ValuesOfCorrectTypeRule validation should catch this before\n            // execution. This is a runtime check to ensure execution does not\n            // continue with an invalid argument value.\n            throw createGraphQLError(`Argument \"${name}\" has invalid value ${print(valueNode)}.`, {\n                nodes: [valueNode],\n            });\n        }\n        coercedValues[name] = coercedValue;\n    }\n    return coercedValues;\n}\n\nfunction getDirectivesInExtensions(node, pathToDirectivesInExtensions = ['directives']) {\n    return pathToDirectivesInExtensions.reduce((acc, pathSegment) => (acc == null ? acc : acc[pathSegment]), node === null || node === void 0 ? void 0 : node.extensions);\n}\nfunction _getDirectiveInExtensions(directivesInExtensions, directiveName) {\n    const directiveInExtensions = directivesInExtensions.filter(directiveAnnotation => directiveAnnotation.name === directiveName);\n    if (!directiveInExtensions.length) {\n        return undefined;\n    }\n    return directiveInExtensions.map(directive => { var _a; return (_a = directive.args) !== null && _a !== void 0 ? _a : {}; });\n}\nfunction getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions = ['directives']) {\n    const directivesInExtensions = pathToDirectivesInExtensions.reduce((acc, pathSegment) => (acc == null ? acc : acc[pathSegment]), node === null || node === void 0 ? void 0 : node.extensions);\n    if (directivesInExtensions === undefined) {\n        return undefined;\n    }\n    if (Array.isArray(directivesInExtensions)) {\n        return _getDirectiveInExtensions(directivesInExtensions, directiveName);\n    }\n    // Support condensed format by converting to longer format\n    // The condensed format does not preserve ordering of directives when  repeatable directives are used.\n    // See https://github.com/ardatan/graphql-tools/issues/2534\n    const reformattedDirectivesInExtensions = [];\n    for (const [name, argsOrArrayOfArgs] of Object.entries(directivesInExtensions)) {\n        if (Array.isArray(argsOrArrayOfArgs)) {\n            for (const args of argsOrArrayOfArgs) {\n                reformattedDirectivesInExtensions.push({ name, args });\n            }\n        }\n        else {\n            reformattedDirectivesInExtensions.push({ name, args: argsOrArrayOfArgs });\n        }\n    }\n    return _getDirectiveInExtensions(reformattedDirectivesInExtensions, directiveName);\n}\nfunction getDirectives(schema, node, pathToDirectivesInExtensions = ['directives']) {\n    const directivesInExtensions = getDirectivesInExtensions(node, pathToDirectivesInExtensions);\n    if (directivesInExtensions != null && directivesInExtensions.length > 0) {\n        return directivesInExtensions;\n    }\n    const schemaDirectives = schema && schema.getDirectives ? schema.getDirectives() : [];\n    const schemaDirectiveMap = schemaDirectives.reduce((schemaDirectiveMap, schemaDirective) => {\n        schemaDirectiveMap[schemaDirective.name] = schemaDirective;\n        return schemaDirectiveMap;\n    }, {});\n    let astNodes = [];\n    if (node.astNode) {\n        astNodes.push(node.astNode);\n    }\n    if ('extensionASTNodes' in node && node.extensionASTNodes) {\n        astNodes = [...astNodes, ...node.extensionASTNodes];\n    }\n    const result = [];\n    for (const astNode of astNodes) {\n        if (astNode.directives) {\n            for (const directiveNode of astNode.directives) {\n                const schemaDirective = schemaDirectiveMap[directiveNode.name.value];\n                if (schemaDirective) {\n                    result.push({ name: directiveNode.name.value, args: getArgumentValues(schemaDirective, directiveNode) });\n                }\n            }\n        }\n    }\n    return result;\n}\nfunction getDirective(schema, node, directiveName, pathToDirectivesInExtensions = ['directives']) {\n    const directiveInExtensions = getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions);\n    if (directiveInExtensions != null) {\n        return directiveInExtensions;\n    }\n    const schemaDirective = schema && schema.getDirective ? schema.getDirective(directiveName) : undefined;\n    if (schemaDirective == null) {\n        return undefined;\n    }\n    let astNodes = [];\n    if (node.astNode) {\n        astNodes.push(node.astNode);\n    }\n    if ('extensionASTNodes' in node && node.extensionASTNodes) {\n        astNodes = [...astNodes, ...node.extensionASTNodes];\n    }\n    const result = [];\n    for (const astNode of astNodes) {\n        if (astNode.directives) {\n            for (const directiveNode of astNode.directives) {\n                if (directiveNode.name.value === directiveName) {\n                    result.push(getArgumentValues(schemaDirective, directiveNode));\n                }\n            }\n        }\n    }\n    if (!result.length) {\n        return undefined;\n    }\n    return result;\n}\n\nfunction parseDirectiveValue(value) {\n    switch (value.kind) {\n        case Kind.INT:\n            return parseInt(value.value);\n        case Kind.FLOAT:\n            return parseFloat(value.value);\n        case Kind.BOOLEAN:\n            return Boolean(value.value);\n        case Kind.STRING:\n        case Kind.ENUM:\n            return value.value;\n        case Kind.LIST:\n            return value.values.map(v => parseDirectiveValue(v));\n        case Kind.OBJECT:\n            return value.fields.reduce((prev, v) => ({ ...prev, [v.name.value]: parseDirectiveValue(v.value) }), {});\n        case Kind.NULL:\n            return null;\n        default:\n            return null;\n    }\n}\nfunction getFieldsWithDirectives(documentNode, options = {}) {\n    const result = {};\n    let selected = ['ObjectTypeDefinition', 'ObjectTypeExtension'];\n    if (options.includeInputTypes) {\n        selected = [...selected, 'InputObjectTypeDefinition', 'InputObjectTypeExtension'];\n    }\n    const allTypes = documentNode.definitions.filter(obj => selected.includes(obj.kind));\n    for (const type of allTypes) {\n        const typeName = type.name.value;\n        if (type.fields == null) {\n            continue;\n        }\n        for (const field of type.fields) {\n            if (field.directives && field.directives.length > 0) {\n                const fieldName = field.name.value;\n                const key = `${typeName}.${fieldName}`;\n                const directives = field.directives.map(d => ({\n                    name: d.name.value,\n                    args: (d.arguments || []).reduce((prev, arg) => ({ ...prev, [arg.name.value]: parseDirectiveValue(arg.value) }), {}),\n                }));\n                result[key] = directives;\n            }\n        }\n    }\n    return result;\n}\n\nfunction getImplementingTypes(interfaceName, schema) {\n    const allTypesMap = schema.getTypeMap();\n    const result = [];\n    for (const graphqlTypeName in allTypesMap) {\n        const graphqlType = allTypesMap[graphqlTypeName];\n        if (isObjectType(graphqlType)) {\n            const allInterfaces = graphqlType.getInterfaces();\n            if (allInterfaces.find(int => int.name === interfaceName)) {\n                result.push(graphqlType.name);\n            }\n        }\n    }\n    return result;\n}\n\nfunction astFromType(type) {\n    if (isNonNullType(type)) {\n        const innerType = astFromType(type.ofType);\n        if (innerType.kind === Kind.NON_NULL_TYPE) {\n            throw new Error(`Invalid type node ${inspect(type)}. Inner type of non-null type cannot be a non-null type.`);\n        }\n        return {\n            kind: Kind.NON_NULL_TYPE,\n            type: innerType,\n        };\n    }\n    else if (isListType(type)) {\n        return {\n            kind: Kind.LIST_TYPE,\n            type: astFromType(type.ofType),\n        };\n    }\n    return {\n        kind: Kind.NAMED_TYPE,\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n    };\n}\n\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using the following mapping.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String               |\n * | Number        | Int / Float          |\n * | null          | NullValue            |\n *\n */\nfunction astFromValueUntyped(value) {\n    // only explicit null, not undefined, NaN\n    if (value === null) {\n        return { kind: Kind.NULL };\n    }\n    // undefined\n    if (value === undefined) {\n        return null;\n    }\n    // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n    // the value is not an array, convert the value using the list's item type.\n    if (Array.isArray(value)) {\n        const valuesNodes = [];\n        for (const item of value) {\n            const itemNode = astFromValueUntyped(item);\n            if (itemNode != null) {\n                valuesNodes.push(itemNode);\n            }\n        }\n        return { kind: Kind.LIST, values: valuesNodes };\n    }\n    if (typeof value === 'object') {\n        const fieldNodes = [];\n        for (const fieldName in value) {\n            const fieldValue = value[fieldName];\n            const ast = astFromValueUntyped(fieldValue);\n            if (ast) {\n                fieldNodes.push({\n                    kind: Kind.OBJECT_FIELD,\n                    name: { kind: Kind.NAME, value: fieldName },\n                    value: ast,\n                });\n            }\n        }\n        return { kind: Kind.OBJECT, fields: fieldNodes };\n    }\n    // Others serialize based on their corresponding JavaScript scalar types.\n    if (typeof value === 'boolean') {\n        return { kind: Kind.BOOLEAN, value };\n    }\n    // JavaScript numbers can be Int or Float values.\n    if (typeof value === 'number' && isFinite(value)) {\n        const stringNum = String(value);\n        return integerStringRegExp.test(stringNum)\n            ? { kind: Kind.INT, value: stringNum }\n            : { kind: Kind.FLOAT, value: stringNum };\n    }\n    if (typeof value === 'string') {\n        return { kind: Kind.STRING, value };\n    }\n    throw new TypeError(`Cannot convert value to AST: ${value}.`);\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n\nfunction memoize1(fn) {\n    const memoize1cache = new WeakMap();\n    return function memoized(a1) {\n        const cachedValue = memoize1cache.get(a1);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1);\n            memoize1cache.set(a1, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nfunction memoize2(fn) {\n    const memoize2cache = new WeakMap();\n    return function memoized(a1, a2) {\n        let cache2 = memoize2cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2cache.set(a1, cache2);\n            const newValue = fn(a1, a2);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nfunction memoize3(fn) {\n    const memoize3Cache = new WeakMap();\n    return function memoized(a1, a2, a3) {\n        let cache2 = memoize3Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize3Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        const cachedValue = cache3.get(a3);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nfunction memoize4(fn) {\n    const memoize4Cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4) {\n        let cache2 = memoize4Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize4Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        const cache4 = cache3.get(a3);\n        if (!cache4) {\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        const cachedValue = cache4.get(a4);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nfunction memoize5(fn) {\n    const memoize5Cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4, a5) {\n        let cache2 = memoize5Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize5Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache4 = cache3.get(a3);\n        if (!cache4) {\n            cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache5 = cache4.get(a4);\n        if (!cache5) {\n            cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        const cachedValue = cache5.get(a5);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nconst memoize2of4cache = new WeakMap();\nfunction memoize2of4(fn) {\n    return function memoized(a1, a2, a3, a4) {\n        let cache2 = memoize2of4cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2of4cache.set(a1, cache2);\n            const newValue = fn(a1, a2, a3, a4);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\n\nfunction getDefinedRootType(schema, operation) {\n    const rootTypeMap = getRootTypeMap(schema);\n    const rootType = rootTypeMap.get(operation);\n    if (rootType == null) {\n        throw new Error(`Root type for operation \"${operation}\" not defined by the given schema.`);\n    }\n    return rootType;\n}\nconst getRootTypeNames = memoize1(function getRootTypeNames(schema) {\n    const rootTypes = getRootTypes(schema);\n    return new Set([...rootTypes].map(type => type.name));\n});\nconst getRootTypes = memoize1(function getRootTypes(schema) {\n    const rootTypeMap = getRootTypeMap(schema);\n    return new Set(rootTypeMap.values());\n});\nconst getRootTypeMap = memoize1(function getRootTypeMap(schema) {\n    const rootTypeMap = new Map();\n    const queryType = schema.getQueryType();\n    if (queryType) {\n        rootTypeMap.set('query', queryType);\n    }\n    const mutationType = schema.getMutationType();\n    if (mutationType) {\n        rootTypeMap.set('mutation', mutationType);\n    }\n    const subscriptionType = schema.getSubscriptionType();\n    if (subscriptionType) {\n        rootTypeMap.set('subscription', subscriptionType);\n    }\n    return rootTypeMap;\n});\n\nfunction getDocumentNodeFromSchema(schema, options = {}) {\n    const pathToDirectivesInExtensions = options.pathToDirectivesInExtensions;\n    const typesMap = schema.getTypeMap();\n    const schemaNode = astFromSchema(schema, pathToDirectivesInExtensions);\n    const definitions = schemaNode != null ? [schemaNode] : [];\n    const directives = schema.getDirectives();\n    for (const directive of directives) {\n        if (isSpecifiedDirective(directive)) {\n            continue;\n        }\n        definitions.push(astFromDirective(directive, schema, pathToDirectivesInExtensions));\n    }\n    for (const typeName in typesMap) {\n        const type = typesMap[typeName];\n        const isPredefinedScalar = isSpecifiedScalarType(type);\n        const isIntrospection = isIntrospectionType(type);\n        if (isPredefinedScalar || isIntrospection) {\n            continue;\n        }\n        if (isObjectType(type)) {\n            definitions.push(astFromObjectType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isInterfaceType(type)) {\n            definitions.push(astFromInterfaceType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isUnionType(type)) {\n            definitions.push(astFromUnionType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isInputObjectType(type)) {\n            definitions.push(astFromInputObjectType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isEnumType(type)) {\n            definitions.push(astFromEnumType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isScalarType(type)) {\n            definitions.push(astFromScalarType(type, schema, pathToDirectivesInExtensions));\n        }\n        else {\n            throw new Error(`Unknown type ${type}.`);\n        }\n    }\n    return {\n        kind: Kind.DOCUMENT,\n        definitions,\n    };\n}\n// this approach uses the default schema printer rather than a custom solution, so may be more backwards compatible\n// currently does not allow customization of printSchema options having to do with comments.\nfunction printSchemaWithDirectives(schema, options = {}) {\n    const documentNode = getDocumentNodeFromSchema(schema, options);\n    return print(documentNode);\n}\nfunction astFromSchema(schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    const operationTypeMap = new Map([\n        ['query', undefined],\n        ['mutation', undefined],\n        ['subscription', undefined],\n    ]);\n    const nodes = [];\n    if (schema.astNode != null) {\n        nodes.push(schema.astNode);\n    }\n    if (schema.extensionASTNodes != null) {\n        for (const extensionASTNode of schema.extensionASTNodes) {\n            nodes.push(extensionASTNode);\n        }\n    }\n    for (const node of nodes) {\n        if (node.operationTypes) {\n            for (const operationTypeDefinitionNode of node.operationTypes) {\n                operationTypeMap.set(operationTypeDefinitionNode.operation, operationTypeDefinitionNode);\n            }\n        }\n    }\n    const rootTypeMap = getRootTypeMap(schema);\n    for (const [operationTypeNode, operationTypeDefinitionNode] of operationTypeMap) {\n        const rootType = rootTypeMap.get(operationTypeNode);\n        if (rootType != null) {\n            const rootTypeAST = astFromType(rootType);\n            if (operationTypeDefinitionNode != null) {\n                operationTypeDefinitionNode.type = rootTypeAST;\n            }\n            else {\n                operationTypeMap.set(operationTypeNode, {\n                    kind: Kind.OPERATION_TYPE_DEFINITION,\n                    operation: operationTypeNode,\n                    type: rootTypeAST,\n                });\n            }\n        }\n    }\n    const operationTypes = [...operationTypeMap.values()].filter(isSome);\n    const directives = getDirectiveNodes(schema, schema, pathToDirectivesInExtensions);\n    if (!operationTypes.length && !directives.length) {\n        return null;\n    }\n    const schemaNode = {\n        kind: operationTypes != null ? Kind.SCHEMA_DEFINITION : Kind.SCHEMA_EXTENSION,\n        operationTypes,\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: directives,\n    };\n    // This code is so weird because it needs to support GraphQL.js 14\n    // In GraphQL.js 14 there is no `description` value on schemaNode\n    schemaNode.description =\n        ((_b = (_a = schema.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : schema.description != null)\n            ? {\n                kind: Kind.STRING,\n                value: schema.description,\n                block: true,\n            }\n            : undefined;\n    return schemaNode;\n}\nfunction astFromDirective(directive, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c, _d;\n    return {\n        kind: Kind.DIRECTIVE_DEFINITION,\n        description: (_b = (_a = directive.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (directive.description\n            ? {\n                kind: Kind.STRING,\n                value: directive.description,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: directive.name,\n        },\n        arguments: (_c = directive.args) === null || _c === void 0 ? void 0 : _c.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions)),\n        repeatable: directive.isRepeatable,\n        locations: ((_d = directive.locations) === null || _d === void 0 ? void 0 : _d.map(location => ({\n            kind: Kind.NAME,\n            value: location,\n        }))) || [],\n    };\n}\nfunction getDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {\n    const directivesInExtensions = getDirectivesInExtensions(entity, pathToDirectivesInExtensions);\n    let nodes = [];\n    if (entity.astNode != null) {\n        nodes.push(entity.astNode);\n    }\n    if ('extensionASTNodes' in entity && entity.extensionASTNodes != null) {\n        nodes = nodes.concat(entity.extensionASTNodes);\n    }\n    let directives;\n    if (directivesInExtensions != null) {\n        directives = makeDirectiveNodes(schema, directivesInExtensions);\n    }\n    else {\n        directives = [];\n        for (const node of nodes) {\n            if (node.directives) {\n                directives.push(...node.directives);\n            }\n        }\n    }\n    return directives;\n}\nfunction getDeprecatableDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    let directiveNodesBesidesDeprecated = [];\n    let deprecatedDirectiveNode = null;\n    const directivesInExtensions = getDirectivesInExtensions(entity, pathToDirectivesInExtensions);\n    let directives;\n    if (directivesInExtensions != null) {\n        directives = makeDirectiveNodes(schema, directivesInExtensions);\n    }\n    else {\n        directives = (_a = entity.astNode) === null || _a === void 0 ? void 0 : _a.directives;\n    }\n    if (directives != null) {\n        directiveNodesBesidesDeprecated = directives.filter(directive => directive.name.value !== 'deprecated');\n        if (entity.deprecationReason != null) {\n            deprecatedDirectiveNode = (_b = directives.filter(directive => directive.name.value === 'deprecated')) === null || _b === void 0 ? void 0 : _b[0];\n        }\n    }\n    if (entity.deprecationReason != null &&\n        deprecatedDirectiveNode == null) {\n        deprecatedDirectiveNode = makeDeprecatedDirective(entity.deprecationReason);\n    }\n    return deprecatedDirectiveNode == null\n        ? directiveNodesBesidesDeprecated\n        : [deprecatedDirectiveNode].concat(directiveNodesBesidesDeprecated);\n}\nfunction astFromArg(arg, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c;\n    return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        description: (_b = (_a = arg.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (arg.description\n            ? {\n                kind: Kind.STRING,\n                value: arg.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: arg.name,\n        },\n        type: astFromType(arg.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        defaultValue: arg.defaultValue !== undefined ? (_c = astFromValue(arg.defaultValue, arg.type)) !== null && _c !== void 0 ? _c : undefined : undefined,\n        directives: getDeprecatableDirectiveNodes(arg, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction astFromObjectType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.OBJECT_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n        interfaces: Object.values(type.getInterfaces()).map(iFace => astFromType(iFace)),\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction astFromInterfaceType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    const node = {\n        kind: Kind.INTERFACE_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n    if ('getInterfaces' in type) {\n        node.interfaces = Object.values(type.getInterfaces()).map(iFace => astFromType(iFace));\n    }\n    return node;\n}\nfunction astFromUnionType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.UNION_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n        types: type.getTypes().map(type => astFromType(type)),\n    };\n}\nfunction astFromInputObjectType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromInputField(field, schema, pathToDirectivesInExtensions)),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction astFromEnumType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.ENUM_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        values: Object.values(type.getValues()).map(value => astFromEnumValue(value, schema, pathToDirectivesInExtensions)),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction astFromScalarType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c;\n    const directivesInExtensions = getDirectivesInExtensions(type, pathToDirectivesInExtensions);\n    const directives = directivesInExtensions\n        ? makeDirectiveNodes(schema, directivesInExtensions)\n        : ((_a = type.astNode) === null || _a === void 0 ? void 0 : _a.directives) || [];\n    const specifiedByValue = (type['specifiedByUrl'] || type['specifiedByURL']);\n    if (specifiedByValue && !directives.some(directiveNode => directiveNode.name.value === 'specifiedBy')) {\n        const specifiedByArgs = {\n            url: specifiedByValue,\n        };\n        directives.push(makeDirectiveNode('specifiedBy', specifiedByArgs));\n    }\n    return {\n        kind: Kind.SCALAR_TYPE_DEFINITION,\n        description: (_c = (_b = type.astNode) === null || _b === void 0 ? void 0 : _b.description) !== null && _c !== void 0 ? _c : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: directives,\n    };\n}\nfunction astFromField(field, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.FIELD_DEFINITION,\n        description: (_b = (_a = field.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (field.description\n            ? {\n                kind: Kind.STRING,\n                value: field.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: field.name,\n        },\n        arguments: field.args.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions)),\n        type: astFromType(field.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction astFromInputField(field, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c;\n    return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        description: (_b = (_a = field.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (field.description\n            ? {\n                kind: Kind.STRING,\n                value: field.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: field.name,\n        },\n        type: astFromType(field.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions),\n        defaultValue: (_c = astFromValue(field.defaultValue, field.type)) !== null && _c !== void 0 ? _c : undefined,\n    };\n}\nfunction astFromEnumValue(value, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.ENUM_VALUE_DEFINITION,\n        description: (_b = (_a = value.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (value.description\n            ? {\n                kind: Kind.STRING,\n                value: value.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: value.name,\n        },\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDeprecatableDirectiveNodes(value, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction makeDeprecatedDirective(deprecationReason) {\n    return makeDirectiveNode('deprecated', { reason: deprecationReason }, GraphQLDeprecatedDirective);\n}\nfunction makeDirectiveNode(name, args, directive) {\n    const directiveArguments = [];\n    if (directive != null) {\n        for (const arg of directive.args) {\n            const argName = arg.name;\n            const argValue = args[argName];\n            if (argValue !== undefined) {\n                const value = astFromValue(argValue, arg.type);\n                if (value) {\n                    directiveArguments.push({\n                        kind: Kind.ARGUMENT,\n                        name: {\n                            kind: Kind.NAME,\n                            value: argName,\n                        },\n                        value,\n                    });\n                }\n            }\n        }\n    }\n    else {\n        for (const argName in args) {\n            const argValue = args[argName];\n            const value = astFromValueUntyped(argValue);\n            if (value) {\n                directiveArguments.push({\n                    kind: Kind.ARGUMENT,\n                    name: {\n                        kind: Kind.NAME,\n                        value: argName,\n                    },\n                    value,\n                });\n            }\n        }\n    }\n    return {\n        kind: Kind.DIRECTIVE,\n        name: {\n            kind: Kind.NAME,\n            value: name,\n        },\n        arguments: directiveArguments,\n    };\n}\nfunction makeDirectiveNodes(schema, directiveValues) {\n    const directiveNodes = [];\n    for (const directiveName in directiveValues) {\n        const arrayOrSingleValue = directiveValues[directiveName];\n        const directive = schema === null || schema === void 0 ? void 0 : schema.getDirective(directiveName);\n        if (Array.isArray(arrayOrSingleValue)) {\n            for (const value of arrayOrSingleValue) {\n                directiveNodes.push(makeDirectiveNode(directiveName, value, directive));\n            }\n        }\n        else {\n            directiveNodes.push(makeDirectiveNode(directiveName, arrayOrSingleValue, directive));\n        }\n    }\n    return directiveNodes;\n}\n\nasync function validateGraphQlDocuments(schema, documentFiles, effectiveRules = createDefaultRules()) {\n    const allFragmentMap = new Map();\n    const documentFileObjectsToValidate = [];\n    for (const documentFile of documentFiles) {\n        if (documentFile.document) {\n            const definitionsToValidate = [];\n            for (const definitionNode of documentFile.document.definitions) {\n                if (definitionNode.kind === Kind.FRAGMENT_DEFINITION) {\n                    allFragmentMap.set(definitionNode.name.value, definitionNode);\n                }\n                else {\n                    definitionsToValidate.push(definitionNode);\n                }\n            }\n            documentFileObjectsToValidate.push({\n                location: documentFile.location,\n                document: {\n                    kind: Kind.DOCUMENT,\n                    definitions: definitionsToValidate,\n                },\n            });\n        }\n    }\n    const allErrors = [];\n    const allFragmentsDocument = {\n        kind: Kind.DOCUMENT,\n        definitions: [...allFragmentMap.values()],\n    };\n    await Promise.all(documentFileObjectsToValidate.map(async (documentFile) => {\n        const documentToValidate = concatAST([allFragmentsDocument, documentFile.document]);\n        const errors = validate(schema, documentToValidate, effectiveRules);\n        if (errors.length > 0) {\n            allErrors.push({\n                filePath: documentFile.location,\n                errors,\n            });\n        }\n    }));\n    return allErrors;\n}\nfunction checkValidationErrors(loadDocumentErrors) {\n    if (loadDocumentErrors.length > 0) {\n        const errors = [];\n        for (const loadDocumentError of loadDocumentErrors) {\n            for (const graphQLError of loadDocumentError.errors) {\n                const error = new Error();\n                error.name = 'GraphQLDocumentError';\n                error.message = `${error.name}: ${graphQLError.message}`;\n                error.stack = error.message;\n                if (graphQLError.locations) {\n                    for (const location of graphQLError.locations) {\n                        error.stack += `\\n    at ${loadDocumentError.filePath}:${location.line}:${location.column}`;\n                    }\n                }\n                errors.push(error);\n            }\n        }\n        throw new AggregateErrorImpl(errors, `GraphQL Document Validation failed with ${errors.length} errors;\n  ${errors.map((error, index) => `Error ${index}: ${error.stack}`).join('\\n\\n')}`);\n    }\n}\nfunction createDefaultRules() {\n    let ignored = ['NoUnusedFragmentsRule', 'NoUnusedVariablesRule', 'KnownDirectivesRule'];\n    if (versionInfo.major < 15) {\n        ignored = ignored.map(rule => rule.replace(/Rule$/, ''));\n    }\n    return specifiedRules.filter((f) => !ignored.includes(f.name));\n}\n\nfunction stripBOM(content) {\n    content = content.toString();\n    // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n    // because the buffer-to-string conversion in `fs.readFileSync()`\n    // translates it to FEFF, the UTF-16 BOM.\n    if (content.charCodeAt(0) === 0xfeff) {\n        content = content.slice(1);\n    }\n    return content;\n}\nfunction parseBOM(content) {\n    return JSON.parse(stripBOM(content));\n}\nfunction parseGraphQLJSON(location, jsonContent, options) {\n    let parsedJson = parseBOM(jsonContent);\n    if (parsedJson.data) {\n        parsedJson = parsedJson.data;\n    }\n    if (parsedJson.kind === 'Document') {\n        return {\n            location,\n            document: parsedJson,\n        };\n    }\n    else if (parsedJson.__schema) {\n        const schema = buildClientSchema(parsedJson, options);\n        return {\n            location,\n            schema,\n        };\n    }\n    else if (typeof parsedJson === 'string') {\n        return {\n            location,\n            rawSDL: parsedJson,\n        };\n    }\n    throw new Error(`Not valid JSON content`);\n}\n\nconst MAX_LINE_LENGTH = 80;\nlet commentsRegistry = {};\nfunction resetComments() {\n    commentsRegistry = {};\n}\nfunction collectComment(node) {\n    var _a;\n    const entityName = (_a = node.name) === null || _a === void 0 ? void 0 : _a.value;\n    if (entityName == null) {\n        return;\n    }\n    pushComment(node, entityName);\n    switch (node.kind) {\n        case 'EnumTypeDefinition':\n            if (node.values) {\n                for (const value of node.values) {\n                    pushComment(value, entityName, value.name.value);\n                }\n            }\n            break;\n        case 'ObjectTypeDefinition':\n        case 'InputObjectTypeDefinition':\n        case 'InterfaceTypeDefinition':\n            if (node.fields) {\n                for (const field of node.fields) {\n                    pushComment(field, entityName, field.name.value);\n                    if (isFieldDefinitionNode(field) && field.arguments) {\n                        for (const arg of field.arguments) {\n                            pushComment(arg, entityName, field.name.value, arg.name.value);\n                        }\n                    }\n                }\n            }\n            break;\n    }\n}\nfunction pushComment(node, entity, field, argument) {\n    const comment = getComment(node);\n    if (typeof comment !== 'string' || comment.length === 0) {\n        return;\n    }\n    const keys = [entity];\n    if (field) {\n        keys.push(field);\n        if (argument) {\n            keys.push(argument);\n        }\n    }\n    const path = keys.join('.');\n    if (!commentsRegistry[path]) {\n        commentsRegistry[path] = [];\n    }\n    commentsRegistry[path].push(comment);\n}\nfunction printComment(comment) {\n    return '\\n# ' + comment.replace(/\\n/g, '\\n# ');\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * NOTE: ==> This file has been modified just to add comments to the printed AST\n * This is a temp measure, we will move to using the original non modified printer.js ASAP.\n */\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\nfunction join(maybeArray, separator) {\n    return maybeArray ? maybeArray.filter(x => x).join(separator || '') : '';\n}\nfunction hasMultilineItems(maybeArray) {\n    var _a;\n    return (_a = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some(str => str.includes('\\n'))) !== null && _a !== void 0 ? _a : false;\n}\nfunction addDescription(cb) {\n    return (node, _key, _parent, path, ancestors) => {\n        var _a;\n        const keys = [];\n        const parent = path.reduce((prev, key) => {\n            if (['fields', 'arguments', 'values'].includes(key) && prev.name) {\n                keys.push(prev.name.value);\n            }\n            return prev[key];\n        }, ancestors[0]);\n        const key = [...keys, (_a = parent === null || parent === void 0 ? void 0 : parent.name) === null || _a === void 0 ? void 0 : _a.value].filter(Boolean).join('.');\n        const items = [];\n        if (node.kind.includes('Definition') && commentsRegistry[key]) {\n            items.push(...commentsRegistry[key]);\n        }\n        return join([...items.map(printComment), node.description, cb(node, _key, _parent, path, ancestors)], '\\n');\n    };\n}\nfunction indent(maybeString) {\n    return maybeString && `  ${maybeString.replace(/\\n/g, '\\n  ')}`;\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\nfunction block(array) {\n    return array && array.length !== 0 ? `{\\n${indent(join(array, '\\n'))}\\n}` : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\nfunction wrap(start, maybeString, end) {\n    return maybeString ? start + maybeString + (end || '') : '';\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\nfunction printBlockString(value, isDescription = false) {\n    const escaped = value.replace(/\"\"\"/g, '\\\\\"\"\"');\n    return (value[0] === ' ' || value[0] === '\\t') && value.indexOf('\\n') === -1\n        ? `\"\"\"${escaped.replace(/\"$/, '\"\\n')}\"\"\"`\n        : `\"\"\"\\n${isDescription ? escaped : indent(escaped)}\\n\"\"\"`;\n}\nconst printDocASTReducer = {\n    Name: { leave: node => node.value },\n    Variable: { leave: node => '$' + node.name },\n    // Document\n    Document: {\n        leave: node => join(node.definitions, '\\n\\n'),\n    },\n    OperationDefinition: {\n        leave: node => {\n            const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n            const prefix = join([node.operation, join([node.name, varDefs]), join(node.directives, ' ')], ' ');\n            // the query short form.\n            return prefix + ' ' + node.selectionSet;\n        },\n    },\n    VariableDefinition: {\n        leave: ({ variable, type, defaultValue, directives }) => variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' ')),\n    },\n    SelectionSet: { leave: ({ selections }) => block(selections) },\n    Field: {\n        leave({ alias, name, arguments: args, directives, selectionSet }) {\n            const prefix = wrap('', alias, ': ') + name;\n            let argsLine = prefix + wrap('(', join(args, ', '), ')');\n            if (argsLine.length > MAX_LINE_LENGTH) {\n                argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n            }\n            return join([argsLine, join(directives, ' '), selectionSet], ' ');\n        },\n    },\n    Argument: { leave: ({ name, value }) => name + ': ' + value },\n    // Fragments\n    FragmentSpread: {\n        leave: ({ name, directives }) => '...' + name + wrap(' ', join(directives, ' ')),\n    },\n    InlineFragment: {\n        leave: ({ typeCondition, directives, selectionSet }) => join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' '),\n    },\n    FragmentDefinition: {\n        leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => \n        // Note: fragment variable definitions are experimental and may be changed\n        // or removed in the future.\n        `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n            `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n            selectionSet,\n    },\n    // Value\n    IntValue: { leave: ({ value }) => value },\n    FloatValue: { leave: ({ value }) => value },\n    StringValue: {\n        leave: ({ value, block: isBlockString }) => {\n            if (isBlockString) {\n                return printBlockString(value);\n            }\n            return JSON.stringify(value);\n        },\n    },\n    BooleanValue: { leave: ({ value }) => (value ? 'true' : 'false') },\n    NullValue: { leave: () => 'null' },\n    EnumValue: { leave: ({ value }) => value },\n    ListValue: { leave: ({ values }) => '[' + join(values, ', ') + ']' },\n    ObjectValue: { leave: ({ fields }) => '{' + join(fields, ', ') + '}' },\n    ObjectField: { leave: ({ name, value }) => name + ': ' + value },\n    // Directive\n    Directive: {\n        leave: ({ name, arguments: args }) => '@' + name + wrap('(', join(args, ', '), ')'),\n    },\n    // Type\n    NamedType: { leave: ({ name }) => name },\n    ListType: { leave: ({ type }) => '[' + type + ']' },\n    NonNullType: { leave: ({ type }) => type + '!' },\n    // Type System Definitions\n    SchemaDefinition: {\n        leave: ({ directives, operationTypes }) => join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n    },\n    OperationTypeDefinition: {\n        leave: ({ operation, type }) => operation + ': ' + type,\n    },\n    ScalarTypeDefinition: {\n        leave: ({ name, directives }) => join(['scalar', name, join(directives, ' ')], ' '),\n    },\n    ObjectTypeDefinition: {\n        leave: ({ name, interfaces, directives, fields }) => join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' '),\n    },\n    FieldDefinition: {\n        leave: ({ name, arguments: args, type, directives }) => name +\n            (hasMultilineItems(args)\n                ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n                : wrap('(', join(args, ', '), ')')) +\n            ': ' +\n            type +\n            wrap(' ', join(directives, ' ')),\n    },\n    InputValueDefinition: {\n        leave: ({ name, type, defaultValue, directives }) => join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' '),\n    },\n    InterfaceTypeDefinition: {\n        leave: ({ name, interfaces, directives, fields }) => join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' '),\n    },\n    UnionTypeDefinition: {\n        leave: ({ name, directives, types }) => join(['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' '),\n    },\n    EnumTypeDefinition: {\n        leave: ({ name, directives, values }) => join(['enum', name, join(directives, ' '), block(values)], ' '),\n    },\n    EnumValueDefinition: {\n        leave: ({ name, directives }) => join([name, join(directives, ' ')], ' '),\n    },\n    InputObjectTypeDefinition: {\n        leave: ({ name, directives, fields }) => join(['input', name, join(directives, ' '), block(fields)], ' '),\n    },\n    DirectiveDefinition: {\n        leave: ({ name, arguments: args, repeatable, locations }) => 'directive @' +\n            name +\n            (hasMultilineItems(args)\n                ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n                : wrap('(', join(args, ', '), ')')) +\n            (repeatable ? ' repeatable' : '') +\n            ' on ' +\n            join(locations, ' | '),\n    },\n    SchemaExtension: {\n        leave: ({ directives, operationTypes }) => join(['extend schema', join(directives, ' '), block(operationTypes)], ' '),\n    },\n    ScalarTypeExtension: {\n        leave: ({ name, directives }) => join(['extend scalar', name, join(directives, ' ')], ' '),\n    },\n    ObjectTypeExtension: {\n        leave: ({ name, interfaces, directives, fields }) => join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' '),\n    },\n    InterfaceTypeExtension: {\n        leave: ({ name, interfaces, directives, fields }) => join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' '),\n    },\n    UnionTypeExtension: {\n        leave: ({ name, directives, types }) => join(['extend union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' '),\n    },\n    EnumTypeExtension: {\n        leave: ({ name, directives, values }) => join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n    },\n    InputObjectTypeExtension: {\n        leave: ({ name, directives, fields }) => join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n    },\n};\nconst printDocASTReducerWithComments = Object.keys(printDocASTReducer).reduce((prev, key) => ({\n    ...prev,\n    [key]: {\n        leave: addDescription(printDocASTReducer[key].leave),\n    },\n}), {});\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\nfunction printWithComments(ast) {\n    return visit(ast, printDocASTReducerWithComments);\n}\nfunction isFieldDefinitionNode(node) {\n    return node.kind === 'FieldDefinition';\n}\n// graphql < v13 and > v15 does not export getDescription\nfunction getDescription(node, options) {\n    if (node.description != null) {\n        return node.description.value;\n    }\n    if (options === null || options === void 0 ? void 0 : options.commentDescriptions) {\n        return getComment(node);\n    }\n}\nfunction getComment(node) {\n    const rawValue = getLeadingCommentBlock(node);\n    if (rawValue !== undefined) {\n        return dedentBlockStringValue(`\\n${rawValue}`);\n    }\n}\nfunction getLeadingCommentBlock(node) {\n    const loc = node.loc;\n    if (!loc) {\n        return;\n    }\n    const comments = [];\n    let token = loc.startToken.prev;\n    while (token != null &&\n        token.kind === TokenKind.COMMENT &&\n        token.next != null &&\n        token.prev != null &&\n        token.line + 1 === token.next.line &&\n        token.line !== token.prev.line) {\n        const value = String(token.value);\n        comments.push(value);\n        token = token.prev;\n    }\n    return comments.length > 0 ? comments.reverse().join('\\n') : undefined;\n}\nfunction dedentBlockStringValue(rawString) {\n    // Expand a block string's raw value into independent lines.\n    const lines = rawString.split(/\\r\\n|[\\n\\r]/g);\n    // Remove common indentation from all lines but first.\n    const commonIndent = getBlockStringIndentation(lines);\n    if (commonIndent !== 0) {\n        for (let i = 1; i < lines.length; i++) {\n            lines[i] = lines[i].slice(commonIndent);\n        }\n    }\n    // Remove leading and trailing blank lines.\n    while (lines.length > 0 && isBlank(lines[0])) {\n        lines.shift();\n    }\n    while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n        lines.pop();\n    }\n    // Return a string of the lines joined with U+000A.\n    return lines.join('\\n');\n}\n/**\n * @internal\n */\nfunction getBlockStringIndentation(lines) {\n    let commonIndent = null;\n    for (let i = 1; i < lines.length; i++) {\n        const line = lines[i];\n        const indent = leadingWhitespace(line);\n        if (indent === line.length) {\n            continue; // skip empty lines\n        }\n        if (commonIndent === null || indent < commonIndent) {\n            commonIndent = indent;\n            if (commonIndent === 0) {\n                break;\n            }\n        }\n    }\n    return commonIndent === null ? 0 : commonIndent;\n}\nfunction leadingWhitespace(str) {\n    let i = 0;\n    while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n        i++;\n    }\n    return i;\n}\nfunction isBlank(str) {\n    return leadingWhitespace(str) === str.length;\n}\n\nfunction parseGraphQLSDL(location, rawSDL, options = {}) {\n    let document;\n    try {\n        if (options.commentDescriptions && rawSDL.includes('#')) {\n            document = transformCommentsToDescriptions(rawSDL, options);\n            // If noLocation=true, we need to make sure to print and parse it again, to remove locations,\n            // since `transformCommentsToDescriptions` must have locations set in order to transform the comments\n            // into descriptions.\n            if (options.noLocation) {\n                document = parse(print(document), options);\n            }\n        }\n        else {\n            document = parse(new Source(rawSDL, location), options);\n        }\n    }\n    catch (e) {\n        if (e.message.includes('EOF') && rawSDL.replace(/(\\#[^*]*)/g, '').trim() === '') {\n            document = {\n                kind: Kind.DOCUMENT,\n                definitions: [],\n            };\n        }\n        else {\n            throw e;\n        }\n    }\n    return {\n        location,\n        document,\n    };\n}\nfunction transformCommentsToDescriptions(sourceSdl, options = {}) {\n    const parsedDoc = parse(sourceSdl, {\n        ...options,\n        noLocation: false,\n    });\n    const modifiedDoc = visit(parsedDoc, {\n        leave: (node) => {\n            if (isDescribable(node)) {\n                const rawValue = getLeadingCommentBlock(node);\n                if (rawValue !== undefined) {\n                    const commentsBlock = dedentBlockStringValue('\\n' + rawValue);\n                    const isBlock = commentsBlock.includes('\\n');\n                    if (!node.description) {\n                        return {\n                            ...node,\n                            description: {\n                                kind: Kind.STRING,\n                                value: commentsBlock,\n                                block: isBlock,\n                            },\n                        };\n                    }\n                    else {\n                        return {\n                            ...node,\n                            description: {\n                                ...node.description,\n                                value: node.description.value + '\\n' + commentsBlock,\n                                block: true,\n                            },\n                        };\n                    }\n                }\n            }\n        },\n    });\n    return modifiedDoc;\n}\nfunction isDescribable(node) {\n    return (isTypeSystemDefinitionNode(node) ||\n        node.kind === Kind.FIELD_DEFINITION ||\n        node.kind === Kind.INPUT_VALUE_DEFINITION ||\n        node.kind === Kind.ENUM_VALUE_DEFINITION);\n}\n\nlet operationVariables = [];\nlet fieldTypeMap = new Map();\nfunction addOperationVariable(variable) {\n    operationVariables.push(variable);\n}\nfunction resetOperationVariables() {\n    operationVariables = [];\n}\nfunction resetFieldMap() {\n    fieldTypeMap = new Map();\n}\nfunction buildOperationNodeForField({ schema, kind, field, models, ignore = [], depthLimit, circularReferenceDepth, argNames, selectedFields = true, }) {\n    resetOperationVariables();\n    resetFieldMap();\n    const rootTypeNames = getRootTypeNames(schema);\n    const operationNode = buildOperationAndCollectVariables({\n        schema,\n        fieldName: field,\n        kind,\n        models: models || [],\n        ignore,\n        depthLimit: depthLimit || Infinity,\n        circularReferenceDepth: circularReferenceDepth || 1,\n        argNames,\n        selectedFields,\n        rootTypeNames,\n    });\n    // attach variables\n    operationNode.variableDefinitions = [...operationVariables];\n    resetOperationVariables();\n    resetFieldMap();\n    return operationNode;\n}\nfunction buildOperationAndCollectVariables({ schema, fieldName, kind, models, ignore, depthLimit, circularReferenceDepth, argNames, selectedFields, rootTypeNames, }) {\n    const type = getDefinedRootType(schema, kind);\n    const field = type.getFields()[fieldName];\n    const operationName = `${fieldName}_${kind}`;\n    if (field.args) {\n        for (const arg of field.args) {\n            const argName = arg.name;\n            if (!argNames || argNames.includes(argName)) {\n                addOperationVariable(resolveVariable(arg, argName));\n            }\n        }\n    }\n    return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: kind,\n        name: {\n            kind: Kind.NAME,\n            value: operationName,\n        },\n        variableDefinitions: [],\n        selectionSet: {\n            kind: Kind.SELECTION_SET,\n            selections: [\n                resolveField({\n                    type,\n                    field,\n                    models,\n                    firstCall: true,\n                    path: [],\n                    ancestors: [],\n                    ignore,\n                    depthLimit,\n                    circularReferenceDepth,\n                    schema,\n                    depth: 0,\n                    argNames,\n                    selectedFields,\n                    rootTypeNames,\n                }),\n            ],\n        },\n    };\n}\nfunction resolveSelectionSet({ parent, type, models, firstCall, path, ancestors, ignore, depthLimit, circularReferenceDepth, schema, depth, argNames, selectedFields, rootTypeNames, }) {\n    if (typeof selectedFields === 'boolean' && depth > depthLimit) {\n        return;\n    }\n    if (isUnionType(type)) {\n        const types = type.getTypes();\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: types\n                .filter(t => !hasCircularRef([...ancestors, t], {\n                depth: circularReferenceDepth,\n            }))\n                .map(t => {\n                return {\n                    kind: Kind.INLINE_FRAGMENT,\n                    typeCondition: {\n                        kind: Kind.NAMED_TYPE,\n                        name: {\n                            kind: Kind.NAME,\n                            value: t.name,\n                        },\n                    },\n                    selectionSet: resolveSelectionSet({\n                        parent: type,\n                        type: t,\n                        models,\n                        path,\n                        ancestors,\n                        ignore,\n                        depthLimit,\n                        circularReferenceDepth,\n                        schema,\n                        depth,\n                        argNames,\n                        selectedFields,\n                        rootTypeNames,\n                    }),\n                };\n            })\n                .filter(fragmentNode => { var _a, _b; return ((_b = (_a = fragmentNode === null || fragmentNode === void 0 ? void 0 : fragmentNode.selectionSet) === null || _a === void 0 ? void 0 : _a.selections) === null || _b === void 0 ? void 0 : _b.length) > 0; }),\n        };\n    }\n    if (isInterfaceType(type)) {\n        const types = Object.values(schema.getTypeMap()).filter((t) => isObjectType(t) && t.getInterfaces().includes(type));\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: types\n                .filter(t => !hasCircularRef([...ancestors, t], {\n                depth: circularReferenceDepth,\n            }))\n                .map(t => {\n                return {\n                    kind: Kind.INLINE_FRAGMENT,\n                    typeCondition: {\n                        kind: Kind.NAMED_TYPE,\n                        name: {\n                            kind: Kind.NAME,\n                            value: t.name,\n                        },\n                    },\n                    selectionSet: resolveSelectionSet({\n                        parent: type,\n                        type: t,\n                        models,\n                        path,\n                        ancestors,\n                        ignore,\n                        depthLimit,\n                        circularReferenceDepth,\n                        schema,\n                        depth,\n                        argNames,\n                        selectedFields,\n                        rootTypeNames,\n                    }),\n                };\n            })\n                .filter(fragmentNode => { var _a, _b; return ((_b = (_a = fragmentNode === null || fragmentNode === void 0 ? void 0 : fragmentNode.selectionSet) === null || _a === void 0 ? void 0 : _a.selections) === null || _b === void 0 ? void 0 : _b.length) > 0; }),\n        };\n    }\n    if (isObjectType(type) && !rootTypeNames.has(type.name)) {\n        const isIgnored = ignore.includes(type.name) || ignore.includes(`${parent.name}.${path[path.length - 1]}`);\n        const isModel = models.includes(type.name);\n        if (!firstCall && isModel && !isIgnored) {\n            return {\n                kind: Kind.SELECTION_SET,\n                selections: [\n                    {\n                        kind: Kind.FIELD,\n                        name: {\n                            kind: Kind.NAME,\n                            value: 'id',\n                        },\n                    },\n                ],\n            };\n        }\n        const fields = type.getFields();\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: Object.keys(fields)\n                .filter(fieldName => {\n                return !hasCircularRef([...ancestors, getNamedType(fields[fieldName].type)], {\n                    depth: circularReferenceDepth,\n                });\n            })\n                .map(fieldName => {\n                const selectedSubFields = typeof selectedFields === 'object' ? selectedFields[fieldName] : true;\n                if (selectedSubFields) {\n                    return resolveField({\n                        type: type,\n                        field: fields[fieldName],\n                        models,\n                        path: [...path, fieldName],\n                        ancestors,\n                        ignore,\n                        depthLimit,\n                        circularReferenceDepth,\n                        schema,\n                        depth,\n                        argNames,\n                        selectedFields: selectedSubFields,\n                        rootTypeNames,\n                    });\n                }\n                return null;\n            })\n                .filter((f) => {\n                var _a, _b;\n                if (f == null) {\n                    return false;\n                }\n                else if ('selectionSet' in f) {\n                    return !!((_b = (_a = f.selectionSet) === null || _a === void 0 ? void 0 : _a.selections) === null || _b === void 0 ? void 0 : _b.length);\n                }\n                return true;\n            }),\n        };\n    }\n}\nfunction resolveVariable(arg, name) {\n    function resolveVariableType(type) {\n        if (isListType(type)) {\n            return {\n                kind: Kind.LIST_TYPE,\n                type: resolveVariableType(type.ofType),\n            };\n        }\n        if (isNonNullType(type)) {\n            return {\n                kind: Kind.NON_NULL_TYPE,\n                // for v16 compatibility\n                type: resolveVariableType(type.ofType),\n            };\n        }\n        return {\n            kind: Kind.NAMED_TYPE,\n            name: {\n                kind: Kind.NAME,\n                value: type.name,\n            },\n        };\n    }\n    return {\n        kind: Kind.VARIABLE_DEFINITION,\n        variable: {\n            kind: Kind.VARIABLE,\n            name: {\n                kind: Kind.NAME,\n                value: name || arg.name,\n            },\n        },\n        type: resolveVariableType(arg.type),\n    };\n}\nfunction getArgumentName(name, path) {\n    return [...path, name].join('_');\n}\nfunction resolveField({ type, field, models, firstCall, path, ancestors, ignore, depthLimit, circularReferenceDepth, schema, depth, argNames, selectedFields, rootTypeNames, }) {\n    const namedType = getNamedType(field.type);\n    let args = [];\n    let removeField = false;\n    if (field.args && field.args.length) {\n        args = field.args\n            .map(arg => {\n            const argumentName = getArgumentName(arg.name, path);\n            if (argNames && !argNames.includes(argumentName)) {\n                if (isNonNullType(arg.type)) {\n                    removeField = true;\n                }\n                return null;\n            }\n            if (!firstCall) {\n                addOperationVariable(resolveVariable(arg, argumentName));\n            }\n            return {\n                kind: Kind.ARGUMENT,\n                name: {\n                    kind: Kind.NAME,\n                    value: arg.name,\n                },\n                value: {\n                    kind: Kind.VARIABLE,\n                    name: {\n                        kind: Kind.NAME,\n                        value: getArgumentName(arg.name, path),\n                    },\n                },\n            };\n        })\n            .filter(Boolean);\n    }\n    if (removeField) {\n        return null;\n    }\n    const fieldPath = [...path, field.name];\n    const fieldPathStr = fieldPath.join('.');\n    let fieldName = field.name;\n    if (fieldTypeMap.has(fieldPathStr) && fieldTypeMap.get(fieldPathStr) !== field.type.toString()) {\n        fieldName += field.type.toString().replace('!', 'NonNull');\n    }\n    fieldTypeMap.set(fieldPathStr, field.type.toString());\n    if (!isScalarType(namedType) && !isEnumType(namedType)) {\n        return {\n            kind: Kind.FIELD,\n            name: {\n                kind: Kind.NAME,\n                value: field.name,\n            },\n            ...(fieldName !== field.name && { alias: { kind: Kind.NAME, value: fieldName } }),\n            selectionSet: resolveSelectionSet({\n                parent: type,\n                type: namedType,\n                models,\n                firstCall,\n                path: fieldPath,\n                ancestors: [...ancestors, type],\n                ignore,\n                depthLimit,\n                circularReferenceDepth,\n                schema,\n                depth: depth + 1,\n                argNames,\n                selectedFields,\n                rootTypeNames,\n            }) || undefined,\n            arguments: args,\n        };\n    }\n    return {\n        kind: Kind.FIELD,\n        name: {\n            kind: Kind.NAME,\n            value: field.name,\n        },\n        ...(fieldName !== field.name && { alias: { kind: Kind.NAME, value: fieldName } }),\n        arguments: args,\n    };\n}\nfunction hasCircularRef(types, config = {\n    depth: 1,\n}) {\n    const type = types[types.length - 1];\n    if (isScalarType(type)) {\n        return false;\n    }\n    const size = types.filter(t => t.name === type.name).length;\n    return size > config.depth;\n}\n\nvar DirectiveLocation;\n(function (DirectiveLocation) {\n    /** Request Definitions */\n    DirectiveLocation[\"QUERY\"] = \"QUERY\";\n    DirectiveLocation[\"MUTATION\"] = \"MUTATION\";\n    DirectiveLocation[\"SUBSCRIPTION\"] = \"SUBSCRIPTION\";\n    DirectiveLocation[\"FIELD\"] = \"FIELD\";\n    DirectiveLocation[\"FRAGMENT_DEFINITION\"] = \"FRAGMENT_DEFINITION\";\n    DirectiveLocation[\"FRAGMENT_SPREAD\"] = \"FRAGMENT_SPREAD\";\n    DirectiveLocation[\"INLINE_FRAGMENT\"] = \"INLINE_FRAGMENT\";\n    DirectiveLocation[\"VARIABLE_DEFINITION\"] = \"VARIABLE_DEFINITION\";\n    /** Type System Definitions */\n    DirectiveLocation[\"SCHEMA\"] = \"SCHEMA\";\n    DirectiveLocation[\"SCALAR\"] = \"SCALAR\";\n    DirectiveLocation[\"OBJECT\"] = \"OBJECT\";\n    DirectiveLocation[\"FIELD_DEFINITION\"] = \"FIELD_DEFINITION\";\n    DirectiveLocation[\"ARGUMENT_DEFINITION\"] = \"ARGUMENT_DEFINITION\";\n    DirectiveLocation[\"INTERFACE\"] = \"INTERFACE\";\n    DirectiveLocation[\"UNION\"] = \"UNION\";\n    DirectiveLocation[\"ENUM\"] = \"ENUM\";\n    DirectiveLocation[\"ENUM_VALUE\"] = \"ENUM_VALUE\";\n    DirectiveLocation[\"INPUT_OBJECT\"] = \"INPUT_OBJECT\";\n    DirectiveLocation[\"INPUT_FIELD_DEFINITION\"] = \"INPUT_FIELD_DEFINITION\";\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nvar MapperKind;\n(function (MapperKind) {\n    MapperKind[\"TYPE\"] = \"MapperKind.TYPE\";\n    MapperKind[\"SCALAR_TYPE\"] = \"MapperKind.SCALAR_TYPE\";\n    MapperKind[\"ENUM_TYPE\"] = \"MapperKind.ENUM_TYPE\";\n    MapperKind[\"COMPOSITE_TYPE\"] = \"MapperKind.COMPOSITE_TYPE\";\n    MapperKind[\"OBJECT_TYPE\"] = \"MapperKind.OBJECT_TYPE\";\n    MapperKind[\"INPUT_OBJECT_TYPE\"] = \"MapperKind.INPUT_OBJECT_TYPE\";\n    MapperKind[\"ABSTRACT_TYPE\"] = \"MapperKind.ABSTRACT_TYPE\";\n    MapperKind[\"UNION_TYPE\"] = \"MapperKind.UNION_TYPE\";\n    MapperKind[\"INTERFACE_TYPE\"] = \"MapperKind.INTERFACE_TYPE\";\n    MapperKind[\"ROOT_OBJECT\"] = \"MapperKind.ROOT_OBJECT\";\n    MapperKind[\"QUERY\"] = \"MapperKind.QUERY\";\n    MapperKind[\"MUTATION\"] = \"MapperKind.MUTATION\";\n    MapperKind[\"SUBSCRIPTION\"] = \"MapperKind.SUBSCRIPTION\";\n    MapperKind[\"DIRECTIVE\"] = \"MapperKind.DIRECTIVE\";\n    MapperKind[\"FIELD\"] = \"MapperKind.FIELD\";\n    MapperKind[\"COMPOSITE_FIELD\"] = \"MapperKind.COMPOSITE_FIELD\";\n    MapperKind[\"OBJECT_FIELD\"] = \"MapperKind.OBJECT_FIELD\";\n    MapperKind[\"ROOT_FIELD\"] = \"MapperKind.ROOT_FIELD\";\n    MapperKind[\"QUERY_ROOT_FIELD\"] = \"MapperKind.QUERY_ROOT_FIELD\";\n    MapperKind[\"MUTATION_ROOT_FIELD\"] = \"MapperKind.MUTATION_ROOT_FIELD\";\n    MapperKind[\"SUBSCRIPTION_ROOT_FIELD\"] = \"MapperKind.SUBSCRIPTION_ROOT_FIELD\";\n    MapperKind[\"INTERFACE_FIELD\"] = \"MapperKind.INTERFACE_FIELD\";\n    MapperKind[\"INPUT_OBJECT_FIELD\"] = \"MapperKind.INPUT_OBJECT_FIELD\";\n    MapperKind[\"ARGUMENT\"] = \"MapperKind.ARGUMENT\";\n    MapperKind[\"ENUM_VALUE\"] = \"MapperKind.ENUM_VALUE\";\n})(MapperKind || (MapperKind = {}));\n\nfunction getObjectTypeFromTypeMap(typeMap, type) {\n    if (type) {\n        const maybeObjectType = typeMap[type.name];\n        if (isObjectType(maybeObjectType)) {\n            return maybeObjectType;\n        }\n    }\n}\n\nfunction createNamedStub(name, type) {\n    let constructor;\n    if (type === 'object') {\n        constructor = GraphQLObjectType;\n    }\n    else if (type === 'interface') {\n        constructor = GraphQLInterfaceType;\n    }\n    else {\n        constructor = GraphQLInputObjectType;\n    }\n    return new constructor({\n        name,\n        fields: {\n            _fake: {\n                type: GraphQLString,\n            },\n        },\n    });\n}\nfunction createStub(node, type) {\n    switch (node.kind) {\n        case Kind.LIST_TYPE:\n            return new GraphQLList(createStub(node.type, type));\n        case Kind.NON_NULL_TYPE:\n            return new GraphQLNonNull(createStub(node.type, type));\n        default:\n            if (type === 'output') {\n                return createNamedStub(node.name.value, 'object');\n            }\n            return createNamedStub(node.name.value, 'input');\n    }\n}\nfunction isNamedStub(type) {\n    if ('getFields' in type) {\n        const fields = type.getFields();\n        // eslint-disable-next-line no-unreachable-loop\n        for (const fieldName in fields) {\n            const field = fields[fieldName];\n            return field.name === '_fake';\n        }\n    }\n    return false;\n}\nfunction getBuiltInForStub(type) {\n    switch (type.name) {\n        case GraphQLInt.name:\n            return GraphQLInt;\n        case GraphQLFloat.name:\n            return GraphQLFloat;\n        case GraphQLString.name:\n            return GraphQLString;\n        case GraphQLBoolean.name:\n            return GraphQLBoolean;\n        case GraphQLID.name:\n            return GraphQLID;\n        default:\n            return type;\n    }\n}\n\nfunction rewireTypes(originalTypeMap, directives) {\n    const referenceTypeMap = Object.create(null);\n    for (const typeName in originalTypeMap) {\n        referenceTypeMap[typeName] = originalTypeMap[typeName];\n    }\n    const newTypeMap = Object.create(null);\n    for (const typeName in referenceTypeMap) {\n        const namedType = referenceTypeMap[typeName];\n        if (namedType == null || typeName.startsWith('__')) {\n            continue;\n        }\n        const newName = namedType.name;\n        if (newName.startsWith('__')) {\n            continue;\n        }\n        if (newTypeMap[newName] != null) {\n            throw new Error(`Duplicate schema type name ${newName}`);\n        }\n        newTypeMap[newName] = namedType;\n    }\n    for (const typeName in newTypeMap) {\n        newTypeMap[typeName] = rewireNamedType(newTypeMap[typeName]);\n    }\n    const newDirectives = directives.map(directive => rewireDirective(directive));\n    return {\n        typeMap: newTypeMap,\n        directives: newDirectives,\n    };\n    function rewireDirective(directive) {\n        if (isSpecifiedDirective(directive)) {\n            return directive;\n        }\n        const directiveConfig = directive.toConfig();\n        directiveConfig.args = rewireArgs(directiveConfig.args);\n        return new GraphQLDirective(directiveConfig);\n    }\n    function rewireArgs(args) {\n        const rewiredArgs = {};\n        for (const argName in args) {\n            const arg = args[argName];\n            const rewiredArgType = rewireType(arg.type);\n            if (rewiredArgType != null) {\n                arg.type = rewiredArgType;\n                rewiredArgs[argName] = arg;\n            }\n        }\n        return rewiredArgs;\n    }\n    function rewireNamedType(type) {\n        if (isObjectType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireFields(config.fields),\n                interfaces: () => rewireNamedTypes(config.interfaces),\n            };\n            return new GraphQLObjectType(newConfig);\n        }\n        else if (isInterfaceType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireFields(config.fields),\n            };\n            if ('interfaces' in newConfig) {\n                newConfig.interfaces = () => rewireNamedTypes(config.interfaces);\n            }\n            return new GraphQLInterfaceType(newConfig);\n        }\n        else if (isUnionType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                types: () => rewireNamedTypes(config.types),\n            };\n            return new GraphQLUnionType(newConfig);\n        }\n        else if (isInputObjectType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireInputFields(config.fields),\n            };\n            return new GraphQLInputObjectType(newConfig);\n        }\n        else if (isEnumType(type)) {\n            const enumConfig = type.toConfig();\n            return new GraphQLEnumType(enumConfig);\n        }\n        else if (isScalarType(type)) {\n            if (isSpecifiedScalarType(type)) {\n                return type;\n            }\n            const scalarConfig = type.toConfig();\n            return new GraphQLScalarType(scalarConfig);\n        }\n        throw new Error(`Unexpected schema type: ${type}`);\n    }\n    function rewireFields(fields) {\n        const rewiredFields = {};\n        for (const fieldName in fields) {\n            const field = fields[fieldName];\n            const rewiredFieldType = rewireType(field.type);\n            if (rewiredFieldType != null && field.args) {\n                field.type = rewiredFieldType;\n                field.args = rewireArgs(field.args);\n                rewiredFields[fieldName] = field;\n            }\n        }\n        return rewiredFields;\n    }\n    function rewireInputFields(fields) {\n        const rewiredFields = {};\n        for (const fieldName in fields) {\n            const field = fields[fieldName];\n            const rewiredFieldType = rewireType(field.type);\n            if (rewiredFieldType != null) {\n                field.type = rewiredFieldType;\n                rewiredFields[fieldName] = field;\n            }\n        }\n        return rewiredFields;\n    }\n    function rewireNamedTypes(namedTypes) {\n        const rewiredTypes = [];\n        for (const namedType of namedTypes) {\n            const rewiredType = rewireType(namedType);\n            if (rewiredType != null) {\n                rewiredTypes.push(rewiredType);\n            }\n        }\n        return rewiredTypes;\n    }\n    function rewireType(type) {\n        if (isListType(type)) {\n            const rewiredType = rewireType(type.ofType);\n            return rewiredType != null ? new GraphQLList(rewiredType) : null;\n        }\n        else if (isNonNullType(type)) {\n            const rewiredType = rewireType(type.ofType);\n            return rewiredType != null ? new GraphQLNonNull(rewiredType) : null;\n        }\n        else if (isNamedType(type)) {\n            let rewiredType = referenceTypeMap[type.name];\n            if (rewiredType === undefined) {\n                rewiredType = isNamedStub(type) ? getBuiltInForStub(type) : rewireNamedType(type);\n                newTypeMap[rewiredType.name] = referenceTypeMap[type.name] = rewiredType;\n            }\n            return rewiredType != null ? newTypeMap[rewiredType.name] : null;\n        }\n        return null;\n    }\n}\n\nfunction transformInputValue(type, value, inputLeafValueTransformer = null, inputObjectValueTransformer = null) {\n    if (value == null) {\n        return value;\n    }\n    const nullableType = getNullableType(type);\n    if (isLeafType(nullableType)) {\n        return inputLeafValueTransformer != null ? inputLeafValueTransformer(nullableType, value) : value;\n    }\n    else if (isListType(nullableType)) {\n        return value.map((listMember) => transformInputValue(nullableType.ofType, listMember, inputLeafValueTransformer, inputObjectValueTransformer));\n    }\n    else if (isInputObjectType(nullableType)) {\n        const fields = nullableType.getFields();\n        const newValue = {};\n        for (const key in value) {\n            const field = fields[key];\n            if (field != null) {\n                newValue[key] = transformInputValue(field.type, value[key], inputLeafValueTransformer, inputObjectValueTransformer);\n            }\n        }\n        return inputObjectValueTransformer != null ? inputObjectValueTransformer(nullableType, newValue) : newValue;\n    }\n    // unreachable, no other possible return value\n}\nfunction serializeInputValue(type, value) {\n    return transformInputValue(type, value, (t, v) => {\n        try {\n            return t.serialize(v);\n        }\n        catch (_a) {\n            return v;\n        }\n    });\n}\nfunction parseInputValue(type, value) {\n    return transformInputValue(type, value, (t, v) => {\n        try {\n            return t.parseValue(v);\n        }\n        catch (_a) {\n            return v;\n        }\n    });\n}\nfunction parseInputValueLiteral(type, value) {\n    return transformInputValue(type, value, (t, v) => t.parseLiteral(v, {}));\n}\n\nfunction mapSchema(schema, schemaMapper = {}) {\n    const newTypeMap = mapArguments(mapFields(mapTypes(mapDefaultValues(mapEnumValues(mapTypes(mapDefaultValues(schema.getTypeMap(), schema, serializeInputValue), schema, schemaMapper, type => isLeafType(type)), schema, schemaMapper), schema, parseInputValue), schema, schemaMapper, type => !isLeafType(type)), schema, schemaMapper), schema, schemaMapper);\n    const originalDirectives = schema.getDirectives();\n    const newDirectives = mapDirectives(originalDirectives, schema, schemaMapper);\n    const { typeMap, directives } = rewireTypes(newTypeMap, newDirectives);\n    return new GraphQLSchema({\n        ...schema.toConfig(),\n        query: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getQueryType())),\n        mutation: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getMutationType())),\n        subscription: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getSubscriptionType())),\n        types: Object.values(typeMap),\n        directives,\n    });\n}\nfunction mapTypes(originalTypeMap, schema, schemaMapper, testFn = () => true) {\n    const newTypeMap = {};\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__')) {\n            const originalType = originalTypeMap[typeName];\n            if (originalType == null || !testFn(originalType)) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const typeMapper = getTypeMapper(schema, schemaMapper, typeName);\n            if (typeMapper == null) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const maybeNewType = typeMapper(originalType, schema);\n            if (maybeNewType === undefined) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            newTypeMap[typeName] = maybeNewType;\n        }\n    }\n    return newTypeMap;\n}\nfunction mapEnumValues(originalTypeMap, schema, schemaMapper) {\n    const enumValueMapper = getEnumValueMapper(schemaMapper);\n    if (!enumValueMapper) {\n        return originalTypeMap;\n    }\n    return mapTypes(originalTypeMap, schema, {\n        [MapperKind.ENUM_TYPE]: type => {\n            const config = type.toConfig();\n            const originalEnumValueConfigMap = config.values;\n            const newEnumValueConfigMap = {};\n            for (const externalValue in originalEnumValueConfigMap) {\n                const originalEnumValueConfig = originalEnumValueConfigMap[externalValue];\n                const mappedEnumValue = enumValueMapper(originalEnumValueConfig, type.name, schema, externalValue);\n                if (mappedEnumValue === undefined) {\n                    newEnumValueConfigMap[externalValue] = originalEnumValueConfig;\n                }\n                else if (Array.isArray(mappedEnumValue)) {\n                    const [newExternalValue, newEnumValueConfig] = mappedEnumValue;\n                    newEnumValueConfigMap[newExternalValue] =\n                        newEnumValueConfig === undefined ? originalEnumValueConfig : newEnumValueConfig;\n                }\n                else if (mappedEnumValue !== null) {\n                    newEnumValueConfigMap[externalValue] = mappedEnumValue;\n                }\n            }\n            return correctASTNodes(new GraphQLEnumType({\n                ...config,\n                values: newEnumValueConfigMap,\n            }));\n        },\n    }, type => isEnumType(type));\n}\nfunction mapDefaultValues(originalTypeMap, schema, fn) {\n    const newTypeMap = mapArguments(originalTypeMap, schema, {\n        [MapperKind.ARGUMENT]: argumentConfig => {\n            if (argumentConfig.defaultValue === undefined) {\n                return argumentConfig;\n            }\n            const maybeNewType = getNewType(originalTypeMap, argumentConfig.type);\n            if (maybeNewType != null) {\n                return {\n                    ...argumentConfig,\n                    defaultValue: fn(maybeNewType, argumentConfig.defaultValue),\n                };\n            }\n        },\n    });\n    return mapFields(newTypeMap, schema, {\n        [MapperKind.INPUT_OBJECT_FIELD]: inputFieldConfig => {\n            if (inputFieldConfig.defaultValue === undefined) {\n                return inputFieldConfig;\n            }\n            const maybeNewType = getNewType(newTypeMap, inputFieldConfig.type);\n            if (maybeNewType != null) {\n                return {\n                    ...inputFieldConfig,\n                    defaultValue: fn(maybeNewType, inputFieldConfig.defaultValue),\n                };\n            }\n        },\n    });\n}\nfunction getNewType(newTypeMap, type) {\n    if (isListType(type)) {\n        const newType = getNewType(newTypeMap, type.ofType);\n        return newType != null ? new GraphQLList(newType) : null;\n    }\n    else if (isNonNullType(type)) {\n        const newType = getNewType(newTypeMap, type.ofType);\n        return newType != null ? new GraphQLNonNull(newType) : null;\n    }\n    else if (isNamedType(type)) {\n        const newType = newTypeMap[type.name];\n        return newType != null ? newType : null;\n    }\n    return null;\n}\nfunction mapFields(originalTypeMap, schema, schemaMapper) {\n    const newTypeMap = {};\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__')) {\n            const originalType = originalTypeMap[typeName];\n            if (!isObjectType(originalType) && !isInterfaceType(originalType) && !isInputObjectType(originalType)) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const fieldMapper = getFieldMapper(schema, schemaMapper, typeName);\n            if (fieldMapper == null) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const config = originalType.toConfig();\n            const originalFieldConfigMap = config.fields;\n            const newFieldConfigMap = {};\n            for (const fieldName in originalFieldConfigMap) {\n                const originalFieldConfig = originalFieldConfigMap[fieldName];\n                const mappedField = fieldMapper(originalFieldConfig, fieldName, typeName, schema);\n                if (mappedField === undefined) {\n                    newFieldConfigMap[fieldName] = originalFieldConfig;\n                }\n                else if (Array.isArray(mappedField)) {\n                    const [newFieldName, newFieldConfig] = mappedField;\n                    if (newFieldConfig.astNode != null) {\n                        newFieldConfig.astNode = {\n                            ...newFieldConfig.astNode,\n                            name: {\n                                ...newFieldConfig.astNode.name,\n                                value: newFieldName,\n                            },\n                        };\n                    }\n                    newFieldConfigMap[newFieldName] = newFieldConfig === undefined ? originalFieldConfig : newFieldConfig;\n                }\n                else if (mappedField !== null) {\n                    newFieldConfigMap[fieldName] = mappedField;\n                }\n            }\n            if (isObjectType(originalType)) {\n                newTypeMap[typeName] = correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n            else if (isInterfaceType(originalType)) {\n                newTypeMap[typeName] = correctASTNodes(new GraphQLInterfaceType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n            else {\n                newTypeMap[typeName] = correctASTNodes(new GraphQLInputObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        }\n    }\n    return newTypeMap;\n}\nfunction mapArguments(originalTypeMap, schema, schemaMapper) {\n    const newTypeMap = {};\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__')) {\n            const originalType = originalTypeMap[typeName];\n            if (!isObjectType(originalType) && !isInterfaceType(originalType)) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const argumentMapper = getArgumentMapper(schemaMapper);\n            if (argumentMapper == null) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const config = originalType.toConfig();\n            const originalFieldConfigMap = config.fields;\n            const newFieldConfigMap = {};\n            for (const fieldName in originalFieldConfigMap) {\n                const originalFieldConfig = originalFieldConfigMap[fieldName];\n                const originalArgumentConfigMap = originalFieldConfig.args;\n                if (originalArgumentConfigMap == null) {\n                    newFieldConfigMap[fieldName] = originalFieldConfig;\n                    continue;\n                }\n                const argumentNames = Object.keys(originalArgumentConfigMap);\n                if (!argumentNames.length) {\n                    newFieldConfigMap[fieldName] = originalFieldConfig;\n                    continue;\n                }\n                const newArgumentConfigMap = {};\n                for (const argumentName of argumentNames) {\n                    const originalArgumentConfig = originalArgumentConfigMap[argumentName];\n                    const mappedArgument = argumentMapper(originalArgumentConfig, fieldName, typeName, schema);\n                    if (mappedArgument === undefined) {\n                        newArgumentConfigMap[argumentName] = originalArgumentConfig;\n                    }\n                    else if (Array.isArray(mappedArgument)) {\n                        const [newArgumentName, newArgumentConfig] = mappedArgument;\n                        newArgumentConfigMap[newArgumentName] = newArgumentConfig;\n                    }\n                    else if (mappedArgument !== null) {\n                        newArgumentConfigMap[argumentName] = mappedArgument;\n                    }\n                }\n                newFieldConfigMap[fieldName] = {\n                    ...originalFieldConfig,\n                    args: newArgumentConfigMap,\n                };\n            }\n            if (isObjectType(originalType)) {\n                newTypeMap[typeName] = new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                });\n            }\n            else if (isInterfaceType(originalType)) {\n                newTypeMap[typeName] = new GraphQLInterfaceType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                });\n            }\n            else {\n                newTypeMap[typeName] = new GraphQLInputObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                });\n            }\n        }\n    }\n    return newTypeMap;\n}\nfunction mapDirectives(originalDirectives, schema, schemaMapper) {\n    const directiveMapper = getDirectiveMapper(schemaMapper);\n    if (directiveMapper == null) {\n        return originalDirectives.slice();\n    }\n    const newDirectives = [];\n    for (const directive of originalDirectives) {\n        const mappedDirective = directiveMapper(directive, schema);\n        if (mappedDirective === undefined) {\n            newDirectives.push(directive);\n        }\n        else if (mappedDirective !== null) {\n            newDirectives.push(mappedDirective);\n        }\n    }\n    return newDirectives;\n}\nfunction getTypeSpecifiers(schema, typeName) {\n    var _a, _b, _c;\n    const type = schema.getType(typeName);\n    const specifiers = [MapperKind.TYPE];\n    if (isObjectType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.OBJECT_TYPE);\n        if (typeName === ((_a = schema.getQueryType()) === null || _a === void 0 ? void 0 : _a.name)) {\n            specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.QUERY);\n        }\n        else if (typeName === ((_b = schema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name)) {\n            specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.MUTATION);\n        }\n        else if (typeName === ((_c = schema.getSubscriptionType()) === null || _c === void 0 ? void 0 : _c.name)) {\n            specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.SUBSCRIPTION);\n        }\n    }\n    else if (isInputObjectType(type)) {\n        specifiers.push(MapperKind.INPUT_OBJECT_TYPE);\n    }\n    else if (isInterfaceType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.INTERFACE_TYPE);\n    }\n    else if (isUnionType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.UNION_TYPE);\n    }\n    else if (isEnumType(type)) {\n        specifiers.push(MapperKind.ENUM_TYPE);\n    }\n    else if (isScalarType(type)) {\n        specifiers.push(MapperKind.SCALAR_TYPE);\n    }\n    return specifiers;\n}\nfunction getTypeMapper(schema, schemaMapper, typeName) {\n    const specifiers = getTypeSpecifiers(schema, typeName);\n    let typeMapper;\n    const stack = [...specifiers];\n    while (!typeMapper && stack.length > 0) {\n        // It is safe to use the ! operator here as we check the length.\n        const next = stack.pop();\n        typeMapper = schemaMapper[next];\n    }\n    return typeMapper != null ? typeMapper : null;\n}\nfunction getFieldSpecifiers(schema, typeName) {\n    var _a, _b, _c;\n    const type = schema.getType(typeName);\n    const specifiers = [MapperKind.FIELD];\n    if (isObjectType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.OBJECT_FIELD);\n        if (typeName === ((_a = schema.getQueryType()) === null || _a === void 0 ? void 0 : _a.name)) {\n            specifiers.push(MapperKind.ROOT_FIELD, MapperKind.QUERY_ROOT_FIELD);\n        }\n        else if (typeName === ((_b = schema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name)) {\n            specifiers.push(MapperKind.ROOT_FIELD, MapperKind.MUTATION_ROOT_FIELD);\n        }\n        else if (typeName === ((_c = schema.getSubscriptionType()) === null || _c === void 0 ? void 0 : _c.name)) {\n            specifiers.push(MapperKind.ROOT_FIELD, MapperKind.SUBSCRIPTION_ROOT_FIELD);\n        }\n    }\n    else if (isInterfaceType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.INTERFACE_FIELD);\n    }\n    else if (isInputObjectType(type)) {\n        specifiers.push(MapperKind.INPUT_OBJECT_FIELD);\n    }\n    return specifiers;\n}\nfunction getFieldMapper(schema, schemaMapper, typeName) {\n    const specifiers = getFieldSpecifiers(schema, typeName);\n    let fieldMapper;\n    const stack = [...specifiers];\n    while (!fieldMapper && stack.length > 0) {\n        // It is safe to use the ! operator here as we check the length.\n        const next = stack.pop();\n        // TODO: fix this as unknown cast\n        fieldMapper = schemaMapper[next];\n    }\n    return fieldMapper !== null && fieldMapper !== void 0 ? fieldMapper : null;\n}\nfunction getArgumentMapper(schemaMapper) {\n    const argumentMapper = schemaMapper[MapperKind.ARGUMENT];\n    return argumentMapper != null ? argumentMapper : null;\n}\nfunction getDirectiveMapper(schemaMapper) {\n    const directiveMapper = schemaMapper[MapperKind.DIRECTIVE];\n    return directiveMapper != null ? directiveMapper : null;\n}\nfunction getEnumValueMapper(schemaMapper) {\n    const enumValueMapper = schemaMapper[MapperKind.ENUM_VALUE];\n    return enumValueMapper != null ? enumValueMapper : null;\n}\nfunction correctASTNodes(type) {\n    if (isObjectType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const fields = [];\n            for (const fieldName in config.fields) {\n                const fieldConfig = config.fields[fieldName];\n                if (fieldConfig.astNode != null) {\n                    fields.push(fieldConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                kind: Kind.OBJECT_TYPE_DEFINITION,\n                fields,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                kind: Kind.OBJECT_TYPE_EXTENSION,\n                fields: undefined,\n            }));\n        }\n        return new GraphQLObjectType(config);\n    }\n    else if (isInterfaceType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const fields = [];\n            for (const fieldName in config.fields) {\n                const fieldConfig = config.fields[fieldName];\n                if (fieldConfig.astNode != null) {\n                    fields.push(fieldConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                kind: Kind.INTERFACE_TYPE_DEFINITION,\n                fields,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                kind: Kind.INTERFACE_TYPE_EXTENSION,\n                fields: undefined,\n            }));\n        }\n        return new GraphQLInterfaceType(config);\n    }\n    else if (isInputObjectType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const fields = [];\n            for (const fieldName in config.fields) {\n                const fieldConfig = config.fields[fieldName];\n                if (fieldConfig.astNode != null) {\n                    fields.push(fieldConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n                fields,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n                fields: undefined,\n            }));\n        }\n        return new GraphQLInputObjectType(config);\n    }\n    else if (isEnumType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const values = [];\n            for (const enumKey in config.values) {\n                const enumValueConfig = config.values[enumKey];\n                if (enumValueConfig.astNode != null) {\n                    values.push(enumValueConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                values,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                values: undefined,\n            }));\n        }\n        return new GraphQLEnumType(config);\n    }\n    else {\n        return type;\n    }\n}\n\nfunction filterSchema({ schema, typeFilter = () => true, fieldFilter = undefined, rootFieldFilter = undefined, objectFieldFilter = undefined, interfaceFieldFilter = undefined, inputObjectFieldFilter = undefined, argumentFilter = undefined, }) {\n    const filteredSchema = mapSchema(schema, {\n        [MapperKind.QUERY]: (type) => filterRootFields(type, 'Query', rootFieldFilter, argumentFilter),\n        [MapperKind.MUTATION]: (type) => filterRootFields(type, 'Mutation', rootFieldFilter, argumentFilter),\n        [MapperKind.SUBSCRIPTION]: (type) => filterRootFields(type, 'Subscription', rootFieldFilter, argumentFilter),\n        [MapperKind.OBJECT_TYPE]: (type) => typeFilter(type.name, type)\n            ? filterElementFields(GraphQLObjectType, type, objectFieldFilter || fieldFilter, argumentFilter)\n            : null,\n        [MapperKind.INTERFACE_TYPE]: (type) => typeFilter(type.name, type)\n            ? filterElementFields(GraphQLInterfaceType, type, interfaceFieldFilter || fieldFilter, argumentFilter)\n            : null,\n        [MapperKind.INPUT_OBJECT_TYPE]: (type) => typeFilter(type.name, type)\n            ? filterElementFields(GraphQLInputObjectType, type, inputObjectFieldFilter || fieldFilter)\n            : null,\n        [MapperKind.UNION_TYPE]: (type) => (typeFilter(type.name, type) ? undefined : null),\n        [MapperKind.ENUM_TYPE]: (type) => (typeFilter(type.name, type) ? undefined : null),\n        [MapperKind.SCALAR_TYPE]: (type) => (typeFilter(type.name, type) ? undefined : null),\n    });\n    return filteredSchema;\n}\nfunction filterRootFields(type, operation, rootFieldFilter, argumentFilter) {\n    if (rootFieldFilter || argumentFilter) {\n        const config = type.toConfig();\n        for (const fieldName in config.fields) {\n            const field = config.fields[fieldName];\n            if (rootFieldFilter && !rootFieldFilter(operation, fieldName, config.fields[fieldName])) {\n                delete config.fields[fieldName];\n            }\n            else if (argumentFilter && field.args) {\n                for (const argName in field.args) {\n                    if (!argumentFilter(operation, fieldName, argName, field.args[argName])) {\n                        delete field.args[argName];\n                    }\n                }\n            }\n        }\n        return new GraphQLObjectType(config);\n    }\n    return type;\n}\nfunction filterElementFields(ElementConstructor, type, fieldFilter, argumentFilter) {\n    if (fieldFilter || argumentFilter) {\n        const config = type.toConfig();\n        for (const fieldName in config.fields) {\n            const field = config.fields[fieldName];\n            if (fieldFilter && !fieldFilter(type.name, fieldName, config.fields[fieldName])) {\n                delete config.fields[fieldName];\n            }\n            else if (argumentFilter && 'args' in field) {\n                for (const argName in field.args) {\n                    if (!argumentFilter(type.name, fieldName, argName, field.args[argName])) {\n                        delete field.args[argName];\n                    }\n                }\n            }\n        }\n        return new ElementConstructor(config);\n    }\n}\n\n// Update any references to named schema types that disagree with the named\n// types found in schema.getTypeMap().\n//\n// healSchema and its callers (visitSchema/visitSchemaDirectives) all modify the schema in place.\n// Therefore, private variables (such as the stored implementation map and the proper root types)\n// are not updated.\n//\n// If this causes issues, the schema could be more aggressively healed as follows:\n//\n// healSchema(schema);\n// const config = schema.toConfig()\n// const healedSchema = new GraphQLSchema({\n//   ...config,\n//   query: schema.getType('<desired new root query type name>'),\n//   mutation: schema.getType('<desired new root mutation type name>'),\n//   subscription: schema.getType('<desired new root subscription type name>'),\n// });\n//\n// One can then also -- if necessary --  assign the correct private variables to the initial schema\n// as follows:\n// Object.assign(schema, healedSchema);\n//\n// These steps are not taken automatically to preserve backwards compatibility with graphql-tools v4.\n// See https://github.com/ardatan/graphql-tools/issues/1462\n//\n// They were briefly taken in v5, but can now be phased out as they were only required when other\n// areas of the codebase were using healSchema and visitSchema more extensively.\n//\nfunction healSchema(schema) {\n    healTypes(schema.getTypeMap(), schema.getDirectives());\n    return schema;\n}\nfunction healTypes(originalTypeMap, directives) {\n    const actualNamedTypeMap = Object.create(null);\n    // If any of the .name properties of the GraphQLNamedType objects in\n    // schema.getTypeMap() have changed, the keys of the type map need to\n    // be updated accordingly.\n    for (const typeName in originalTypeMap) {\n        const namedType = originalTypeMap[typeName];\n        if (namedType == null || typeName.startsWith('__')) {\n            continue;\n        }\n        const actualName = namedType.name;\n        if (actualName.startsWith('__')) {\n            continue;\n        }\n        if (actualName in actualNamedTypeMap) {\n            throw new Error(`Duplicate schema type name ${actualName}`);\n        }\n        actualNamedTypeMap[actualName] = namedType;\n        // Note: we are deliberately leaving namedType in the schema by its\n        // original name (which might be different from actualName), so that\n        // references by that name can be healed.\n    }\n    // Now add back every named type by its actual name.\n    for (const typeName in actualNamedTypeMap) {\n        const namedType = actualNamedTypeMap[typeName];\n        originalTypeMap[typeName] = namedType;\n    }\n    // Directive declaration argument types can refer to named types.\n    for (const decl of directives) {\n        decl.args = decl.args.filter(arg => {\n            arg.type = healType(arg.type);\n            return arg.type !== null;\n        });\n    }\n    for (const typeName in originalTypeMap) {\n        const namedType = originalTypeMap[typeName];\n        // Heal all named types, except for dangling references, kept only to redirect.\n        if (!typeName.startsWith('__') && typeName in actualNamedTypeMap) {\n            if (namedType != null) {\n                healNamedType(namedType);\n            }\n        }\n    }\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__') && !(typeName in actualNamedTypeMap)) {\n            delete originalTypeMap[typeName];\n        }\n    }\n    function healNamedType(type) {\n        if (isObjectType(type)) {\n            healFields(type);\n            healInterfaces(type);\n            return;\n        }\n        else if (isInterfaceType(type)) {\n            healFields(type);\n            if ('getInterfaces' in type) {\n                healInterfaces(type);\n            }\n            return;\n        }\n        else if (isUnionType(type)) {\n            healUnderlyingTypes(type);\n            return;\n        }\n        else if (isInputObjectType(type)) {\n            healInputFields(type);\n            return;\n        }\n        else if (isLeafType(type)) {\n            return;\n        }\n        throw new Error(`Unexpected schema type: ${type}`);\n    }\n    function healFields(type) {\n        const fieldMap = type.getFields();\n        for (const [key, field] of Object.entries(fieldMap)) {\n            field.args\n                .map(arg => {\n                arg.type = healType(arg.type);\n                return arg.type === null ? null : arg;\n            })\n                .filter(Boolean);\n            field.type = healType(field.type);\n            if (field.type === null) {\n                delete fieldMap[key];\n            }\n        }\n    }\n    function healInterfaces(type) {\n        if ('getInterfaces' in type) {\n            const interfaces = type.getInterfaces();\n            interfaces.push(...interfaces\n                .splice(0)\n                .map(iface => healType(iface))\n                .filter(Boolean));\n        }\n    }\n    function healInputFields(type) {\n        const fieldMap = type.getFields();\n        for (const [key, field] of Object.entries(fieldMap)) {\n            field.type = healType(field.type);\n            if (field.type === null) {\n                delete fieldMap[key];\n            }\n        }\n    }\n    function healUnderlyingTypes(type) {\n        const types = type.getTypes();\n        types.push(...types\n            .splice(0)\n            .map(t => healType(t))\n            .filter(Boolean));\n    }\n    function healType(type) {\n        // Unwrap the two known wrapper types\n        if (isListType(type)) {\n            const healedType = healType(type.ofType);\n            return healedType != null ? new GraphQLList(healedType) : null;\n        }\n        else if (isNonNullType(type)) {\n            const healedType = healType(type.ofType);\n            return healedType != null ? new GraphQLNonNull(healedType) : null;\n        }\n        else if (isNamedType(type)) {\n            // If a type annotation on a field or an argument or a union member is\n            // any `GraphQLNamedType` with a `name`, then it must end up identical\n            // to `schema.getType(name)`, since `schema.getTypeMap()` is the source\n            // of truth for all named schema types.\n            // Note that new types can still be simply added by adding a field, as\n            // the official type will be undefined, not null.\n            const officialType = originalTypeMap[type.name];\n            if (officialType && type !== officialType) {\n                return officialType;\n            }\n        }\n        return type;\n    }\n}\n\nfunction getResolversFromSchema(schema) {\n    var _a, _b;\n    const resolvers = Object.create(null);\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        if (!typeName.startsWith('__')) {\n            const type = typeMap[typeName];\n            if (isScalarType(type)) {\n                if (!isSpecifiedScalarType(type)) {\n                    const config = type.toConfig();\n                    delete config.astNode; // avoid AST duplication elsewhere\n                    resolvers[typeName] = new GraphQLScalarType(config);\n                }\n            }\n            else if (isEnumType(type)) {\n                resolvers[typeName] = {};\n                const values = type.getValues();\n                for (const value of values) {\n                    resolvers[typeName][value.name] = value.value;\n                }\n            }\n            else if (isInterfaceType(type)) {\n                if (type.resolveType != null) {\n                    resolvers[typeName] = {\n                        __resolveType: type.resolveType,\n                    };\n                }\n            }\n            else if (isUnionType(type)) {\n                if (type.resolveType != null) {\n                    resolvers[typeName] = {\n                        __resolveType: type.resolveType,\n                    };\n                }\n            }\n            else if (isObjectType(type)) {\n                resolvers[typeName] = {};\n                if (type.isTypeOf != null) {\n                    resolvers[typeName].__isTypeOf = type.isTypeOf;\n                }\n                const fields = type.getFields();\n                for (const fieldName in fields) {\n                    const field = fields[fieldName];\n                    if (field.subscribe != null) {\n                        resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};\n                        resolvers[typeName][fieldName].subscribe = field.subscribe;\n                    }\n                    if (field.resolve != null &&\n                        ((_a = field.resolve) === null || _a === void 0 ? void 0 : _a.name) !== 'defaultFieldResolver' &&\n                        ((_b = field.resolve) === null || _b === void 0 ? void 0 : _b.name) !== 'defaultMergedResolver') {\n                        resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};\n                        resolvers[typeName][fieldName].resolve = field.resolve;\n                    }\n                }\n            }\n        }\n    }\n    return resolvers;\n}\n\nfunction forEachField(schema, fn) {\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        // TODO: maybe have an option to include these?\n        if (!getNamedType(type).name.startsWith('__') && isObjectType(type)) {\n            const fields = type.getFields();\n            for (const fieldName in fields) {\n                const field = fields[fieldName];\n                fn(field, typeName, fieldName);\n            }\n        }\n    }\n}\n\nfunction forEachDefaultValue(schema, fn) {\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        if (!getNamedType(type).name.startsWith('__')) {\n            if (isObjectType(type)) {\n                const fields = type.getFields();\n                for (const fieldName in fields) {\n                    const field = fields[fieldName];\n                    for (const arg of field.args) {\n                        arg.defaultValue = fn(arg.type, arg.defaultValue);\n                    }\n                }\n            }\n            else if (isInputObjectType(type)) {\n                const fields = type.getFields();\n                for (const fieldName in fields) {\n                    const field = fields[fieldName];\n                    field.defaultValue = fn(field.type, field.defaultValue);\n                }\n            }\n        }\n    }\n}\n\n// addTypes uses toConfig to create a new schema with a new or replaced\nfunction addTypes(schema, newTypesOrDirectives) {\n    const config = schema.toConfig();\n    const originalTypeMap = {};\n    for (const type of config.types) {\n        originalTypeMap[type.name] = type;\n    }\n    const originalDirectiveMap = {};\n    for (const directive of config.directives) {\n        originalDirectiveMap[directive.name] = directive;\n    }\n    for (const newTypeOrDirective of newTypesOrDirectives) {\n        if (isNamedType(newTypeOrDirective)) {\n            originalTypeMap[newTypeOrDirective.name] = newTypeOrDirective;\n        }\n        else if (isDirective(newTypeOrDirective)) {\n            originalDirectiveMap[newTypeOrDirective.name] = newTypeOrDirective;\n        }\n    }\n    const { typeMap, directives } = rewireTypes(originalTypeMap, Object.values(originalDirectiveMap));\n    return new GraphQLSchema({\n        ...config,\n        query: getObjectTypeFromTypeMap(typeMap, schema.getQueryType()),\n        mutation: getObjectTypeFromTypeMap(typeMap, schema.getMutationType()),\n        subscription: getObjectTypeFromTypeMap(typeMap, schema.getSubscriptionType()),\n        types: Object.values(typeMap),\n        directives,\n    });\n}\n\n/**\n * Prunes the provided schema, removing unused and empty types\n * @param schema The schema to prune\n * @param options Additional options for removing unused types from the schema\n */\nfunction pruneSchema(schema, options = {}) {\n    const { skipEmptyCompositeTypePruning, skipEmptyUnionPruning, skipPruning, skipUnimplementedInterfacesPruning, skipUnusedTypesPruning, } = options;\n    let prunedTypes = []; // Pruned types during mapping\n    let prunedSchema = schema;\n    do {\n        let visited = visitSchema(prunedSchema);\n        // Custom pruning  was defined, so we need to pre-emptively revisit the schema accounting for this\n        if (skipPruning) {\n            const revisit = [];\n            for (const typeName in prunedSchema.getTypeMap()) {\n                if (typeName.startsWith('__')) {\n                    continue;\n                }\n                const type = prunedSchema.getType(typeName);\n                // if we want to skip pruning for this type, add it to the list of types to revisit\n                if (type && skipPruning(type)) {\n                    revisit.push(typeName);\n                }\n            }\n            visited = visitQueue(revisit, prunedSchema, visited); // visit again\n        }\n        prunedTypes = [];\n        prunedSchema = mapSchema(prunedSchema, {\n            [MapperKind.TYPE]: type => {\n                if (!visited.has(type.name) && !isSpecifiedScalarType(type)) {\n                    if (isUnionType(type) ||\n                        isInputObjectType(type) ||\n                        isInterfaceType(type) ||\n                        isObjectType(type) ||\n                        isScalarType(type)) {\n                        // skipUnusedTypesPruning: skip pruning unused types\n                        if (skipUnusedTypesPruning) {\n                            return type;\n                        }\n                        // skipEmptyUnionPruning: skip pruning empty unions\n                        if (isUnionType(type) && skipEmptyUnionPruning && !Object.keys(type.getTypes()).length) {\n                            return type;\n                        }\n                        if (isInputObjectType(type) || isInterfaceType(type) || isObjectType(type)) {\n                            // skipEmptyCompositeTypePruning: skip pruning object types or interfaces with no fields\n                            if (skipEmptyCompositeTypePruning && !Object.keys(type.getFields()).length) {\n                                return type;\n                            }\n                        }\n                        // skipUnimplementedInterfacesPruning: skip pruning interfaces that are not implemented by any other types\n                        if (isInterfaceType(type) && skipUnimplementedInterfacesPruning) {\n                            return type;\n                        }\n                    }\n                    prunedTypes.push(type.name);\n                    visited.delete(type.name);\n                    return null;\n                }\n                return type;\n            },\n        });\n    } while (prunedTypes.length); // Might have empty types and need to prune again\n    return prunedSchema;\n}\nfunction visitSchema(schema) {\n    const queue = []; // queue of nodes to visit\n    // Grab the root types and start there\n    for (const type of getRootTypes(schema)) {\n        queue.push(type.name);\n    }\n    return visitQueue(queue, schema);\n}\nfunction visitQueue(queue, schema, visited = new Set()) {\n    // Interfaces encountered that are field return types need to be revisited to add their implementations\n    const revisit = new Map();\n    // Navigate all types starting with pre-queued types (root types)\n    while (queue.length) {\n        const typeName = queue.pop();\n        // Skip types we already visited unless it is an interface type that needs revisiting\n        if (visited.has(typeName) && revisit[typeName] !== true) {\n            continue;\n        }\n        const type = schema.getType(typeName);\n        if (type) {\n            // Get types for union\n            if (isUnionType(type)) {\n                queue.push(...type.getTypes().map(type => type.name));\n            }\n            // If it is an interface and it is a returned type, grab all implementations so we can use proper __typename in fragments\n            if (isInterfaceType(type) && revisit[typeName] === true) {\n                queue.push(...getImplementingTypes(type.name, schema));\n                // No need to revisit this interface again\n                revisit[typeName] = false;\n            }\n            // Visit interfaces this type is implementing if they haven't been visited yet\n            if ('getInterfaces' in type) {\n                // Only pushes to queue to visit but not return types\n                queue.push(...type.getInterfaces().map(iface => iface.name));\n            }\n            // If the type has files visit those field types\n            if ('getFields' in type) {\n                const fields = type.getFields();\n                const entries = Object.entries(fields);\n                if (!entries.length) {\n                    continue;\n                }\n                for (const [, field] of entries) {\n                    if (isObjectType(type)) {\n                        // Visit arg types\n                        queue.push(...field.args.map(arg => getNamedType(arg.type).name));\n                    }\n                    const namedType = getNamedType(field.type);\n                    queue.push(namedType.name);\n                    // Interfaces returned on fields need to be revisited to add their implementations\n                    if (isInterfaceType(namedType) && !(namedType.name in revisit)) {\n                        revisit[namedType.name] = true;\n                    }\n                }\n            }\n            visited.add(typeName); // Mark as visited (and therefore it is used and should be kept)\n        }\n    }\n    return visited;\n}\n\nfunction mergeDeep(sources, respectPrototype = false) {\n    const target = sources[0] || {};\n    const output = {};\n    if (respectPrototype) {\n        Object.setPrototypeOf(output, Object.create(Object.getPrototypeOf(target)));\n    }\n    for (const source of sources) {\n        if (isObject(target) && isObject(source)) {\n            if (respectPrototype) {\n                const outputPrototype = Object.getPrototypeOf(output);\n                const sourcePrototype = Object.getPrototypeOf(source);\n                if (sourcePrototype) {\n                    for (const key of Object.getOwnPropertyNames(sourcePrototype)) {\n                        const descriptor = Object.getOwnPropertyDescriptor(sourcePrototype, key);\n                        if (isSome(descriptor)) {\n                            Object.defineProperty(outputPrototype, key, descriptor);\n                        }\n                    }\n                }\n            }\n            for (const key in source) {\n                if (isObject(source[key])) {\n                    if (!(key in output)) {\n                        Object.assign(output, { [key]: source[key] });\n                    }\n                    else {\n                        output[key] = mergeDeep([output[key], source[key]], respectPrototype);\n                    }\n                }\n                else {\n                    Object.assign(output, { [key]: source[key] });\n                }\n            }\n        }\n    }\n    return output;\n}\nfunction isObject(item) {\n    return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nfunction parseSelectionSet(selectionSet, options) {\n    const query = parse(selectionSet, options).definitions[0];\n    return query.selectionSet;\n}\n\n/**\n * Get the key under which the result of this resolver will be placed in the response JSON. Basically, just\n * resolves aliases.\n * @param info The info argument to the resolver.\n */\nfunction getResponseKeyFromInfo(info) {\n    return info.fieldNodes[0].alias != null ? info.fieldNodes[0].alias.value : info.fieldName;\n}\n\nfunction appendObjectFields(schema, typeName, additionalFields) {\n    if (schema.getType(typeName) == null) {\n        return addTypes(schema, [\n            new GraphQLObjectType({\n                name: typeName,\n                fields: additionalFields,\n            }),\n        ]);\n    }\n    return mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    newFieldConfigMap[fieldName] = originalFieldConfigMap[fieldName];\n                }\n                for (const fieldName in additionalFields) {\n                    newFieldConfigMap[fieldName] = additionalFields[fieldName];\n                }\n                return correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n}\nfunction removeObjectFields(schema, typeName, testFn) {\n    const removedFields = {};\n    const newSchema = mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        removedFields[fieldName] = originalFieldConfig;\n                    }\n                    else {\n                        newFieldConfigMap[fieldName] = originalFieldConfig;\n                    }\n                }\n                return correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n    return [newSchema, removedFields];\n}\nfunction selectObjectFields(schema, typeName, testFn) {\n    const selectedFields = {};\n    mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        selectedFields[fieldName] = originalFieldConfig;\n                    }\n                }\n            }\n            return undefined;\n        },\n    });\n    return selectedFields;\n}\nfunction modifyObjectFields(schema, typeName, testFn, newFields) {\n    const removedFields = {};\n    const newSchema = mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        removedFields[fieldName] = originalFieldConfig;\n                    }\n                    else {\n                        newFieldConfigMap[fieldName] = originalFieldConfig;\n                    }\n                }\n                for (const fieldName in newFields) {\n                    const fieldConfig = newFields[fieldName];\n                    newFieldConfigMap[fieldName] = fieldConfig;\n                }\n                return correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n    return [newSchema, removedFields];\n}\n\nfunction renameType(type, newTypeName) {\n    if (isObjectType(type)) {\n        return new GraphQLObjectType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isInterfaceType(type)) {\n        return new GraphQLInterfaceType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isUnionType(type)) {\n        return new GraphQLUnionType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isInputObjectType(type)) {\n        return new GraphQLInputObjectType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isEnumType(type)) {\n        return new GraphQLEnumType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isScalarType(type)) {\n        return new GraphQLScalarType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    throw new Error(`Unknown type ${type}.`);\n}\n\n/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nfunction mapAsyncIterator(iterator, callback, rejectCallback) {\n    let $return;\n    let abruptClose;\n    if (typeof iterator.return === 'function') {\n        $return = iterator.return;\n        abruptClose = (error) => {\n            const rethrow = () => Promise.reject(error);\n            return $return.call(iterator).then(rethrow, rethrow);\n        };\n    }\n    function mapResult(result) {\n        return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);\n    }\n    let mapReject;\n    if (rejectCallback) {\n        // Capture rejectCallback to ensure it cannot be null.\n        const reject = rejectCallback;\n        mapReject = (error) => asyncMapValue(error, reject).then(iteratorResult, abruptClose);\n    }\n    return {\n        next() {\n            return iterator.next().then(mapResult, mapReject);\n        },\n        return() {\n            return $return\n                ? $return.call(iterator).then(mapResult, mapReject)\n                : Promise.resolve({ value: undefined, done: true });\n        },\n        throw(error) {\n            if (typeof iterator.throw === 'function') {\n                return iterator.throw(error).then(mapResult, mapReject);\n            }\n            return Promise.reject(error).catch(abruptClose);\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\nfunction asyncMapValue(value, callback) {\n    return new Promise(resolve => resolve(callback(value)));\n}\nfunction iteratorResult(value) {\n    return { value, done: false };\n}\n\nfunction updateArgument(argumentNodes, variableDefinitionsMap, variableValues, argName, varName, type, value) {\n    argumentNodes[argName] = {\n        kind: Kind.ARGUMENT,\n        name: {\n            kind: Kind.NAME,\n            value: argName,\n        },\n        value: {\n            kind: Kind.VARIABLE,\n            name: {\n                kind: Kind.NAME,\n                value: varName,\n            },\n        },\n    };\n    variableDefinitionsMap[varName] = {\n        kind: Kind.VARIABLE_DEFINITION,\n        variable: {\n            kind: Kind.VARIABLE,\n            name: {\n                kind: Kind.NAME,\n                value: varName,\n            },\n        },\n        type: astFromType(type),\n    };\n    if (value !== undefined) {\n        variableValues[varName] = value;\n        return;\n    }\n    // including the variable in the map with value of `undefined`\n    // will actually be translated by graphql-js into `null`\n    // see https://github.com/graphql/graphql-js/issues/2533\n    if (varName in variableValues) {\n        delete variableValues[varName];\n    }\n}\nfunction createVariableNameGenerator(variableDefinitionMap) {\n    let varCounter = 0;\n    return (argName) => {\n        let varName;\n        do {\n            varName = `_v${(varCounter++).toString()}_${argName}`;\n        } while (varName in variableDefinitionMap);\n        return varName;\n    };\n}\n\nfunction implementsAbstractType(schema, typeA, typeB) {\n    if (typeB == null || typeA == null) {\n        return false;\n    }\n    else if (typeA === typeB) {\n        return true;\n    }\n    else if (isCompositeType(typeA) && isCompositeType(typeB)) {\n        return doTypesOverlap(schema, typeA, typeB);\n    }\n    return false;\n}\n\nfunction observableToAsyncIterable(observable) {\n    const pullQueue = [];\n    const pushQueue = [];\n    let listening = true;\n    const pushValue = (value) => {\n        if (pullQueue.length !== 0) {\n            // It is safe to use the ! operator here as we check the length.\n            pullQueue.shift()({ value, done: false });\n        }\n        else {\n            pushQueue.push({ value, done: false });\n        }\n    };\n    const pushError = (error) => {\n        if (pullQueue.length !== 0) {\n            // It is safe to use the ! operator here as we check the length.\n            pullQueue.shift()({ value: { errors: [error] }, done: false });\n        }\n        else {\n            pushQueue.push({ value: { errors: [error] }, done: false });\n        }\n    };\n    const pushDone = () => {\n        if (pullQueue.length !== 0) {\n            // It is safe to use the ! operator here as we check the length.\n            pullQueue.shift()({ done: true });\n        }\n        else {\n            pushQueue.push({ done: true });\n        }\n    };\n    const pullValue = () => new Promise(resolve => {\n        if (pushQueue.length !== 0) {\n            const element = pushQueue.shift();\n            // either {value: {errors: [...]}} or {value: ...}\n            resolve(element);\n        }\n        else {\n            pullQueue.push(resolve);\n        }\n    });\n    const subscription = observable.subscribe({\n        next(value) {\n            pushValue(value);\n        },\n        error(err) {\n            pushError(err);\n        },\n        complete() {\n            pushDone();\n        },\n    });\n    const emptyQueue = () => {\n        if (listening) {\n            listening = false;\n            subscription.unsubscribe();\n            for (const resolve of pullQueue) {\n                resolve({ value: undefined, done: true });\n            }\n            pullQueue.length = 0;\n            pushQueue.length = 0;\n        }\n    };\n    return {\n        next() {\n            // return is a defined method, so it is safe to call it.\n            return listening ? pullValue() : this.return();\n        },\n        return() {\n            emptyQueue();\n            return Promise.resolve({ value: undefined, done: true });\n        },\n        throw(error) {\n            emptyQueue();\n            return Promise.reject(error);\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\n\nfunction getOperationASTFromDocument(documentNode, operationName) {\n    const doc = getOperationAST(documentNode, operationName);\n    if (!doc) {\n        throw new Error(`Cannot infer operation ${operationName || ''}`);\n    }\n    return doc;\n}\nconst getOperationASTFromRequest = memoize1(function getOperationASTFromRequest(request) {\n    return getOperationASTFromDocument(request.document, request.operationName);\n});\n\n// Taken from GraphQL-JS v16 for backwards compat\nfunction collectFields(schema, fragments, variableValues, runtimeType, selectionSet, fields, visitedFragmentNames) {\n    for (const selection of selectionSet.selections) {\n        switch (selection.kind) {\n            case Kind.FIELD: {\n                if (!shouldIncludeNode(variableValues, selection)) {\n                    continue;\n                }\n                const name = getFieldEntryKey(selection);\n                const fieldList = fields.get(name);\n                if (fieldList !== undefined) {\n                    fieldList.push(selection);\n                }\n                else {\n                    fields.set(name, [selection]);\n                }\n                break;\n            }\n            case Kind.INLINE_FRAGMENT: {\n                if (!shouldIncludeNode(variableValues, selection) ||\n                    !doesFragmentConditionMatch(schema, selection, runtimeType)) {\n                    continue;\n                }\n                collectFields(schema, fragments, variableValues, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n                break;\n            }\n            case Kind.FRAGMENT_SPREAD: {\n                const fragName = selection.name.value;\n                if (visitedFragmentNames.has(fragName) || !shouldIncludeNode(variableValues, selection)) {\n                    continue;\n                }\n                visitedFragmentNames.add(fragName);\n                const fragment = fragments[fragName];\n                if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType)) {\n                    continue;\n                }\n                collectFields(schema, fragments, variableValues, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n                break;\n            }\n        }\n    }\n    return fields;\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\nfunction shouldIncludeNode(variableValues, node) {\n    const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n    if ((skip === null || skip === void 0 ? void 0 : skip['if']) === true) {\n        return false;\n    }\n    const include = getDirectiveValues(GraphQLIncludeDirective, node, variableValues);\n    if ((include === null || include === void 0 ? void 0 : include['if']) === false) {\n        return false;\n    }\n    return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n    const typeConditionNode = fragment.typeCondition;\n    if (!typeConditionNode) {\n        return true;\n    }\n    const conditionalType = typeFromAST(schema, typeConditionNode);\n    if (conditionalType === type) {\n        return true;\n    }\n    if (isAbstractType(conditionalType)) {\n        const possibleTypes = schema.getPossibleTypes(conditionalType);\n        return possibleTypes.includes(type);\n    }\n    return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\nfunction getFieldEntryKey(node) {\n    return node.alias ? node.alias.value : node.name.value;\n}\nconst collectSubFields = memoize5(function collectSubFields(schema, fragments, variableValues, type, fieldNodes) {\n    const subFieldNodes = new Map();\n    const visitedFragmentNames = new Set();\n    for (const fieldNode of fieldNodes) {\n        if (fieldNode.selectionSet) {\n            collectFields(schema, fragments, variableValues, type, fieldNode.selectionSet, subFieldNodes, visitedFragmentNames);\n        }\n    }\n    return subFieldNodes;\n});\n\nfunction visitData(data, enter, leave) {\n    if (Array.isArray(data)) {\n        return data.map(value => visitData(value, enter, leave));\n    }\n    else if (typeof data === 'object') {\n        const newData = enter != null ? enter(data) : data;\n        if (newData != null) {\n            for (const key in newData) {\n                const value = newData[key];\n                Object.defineProperty(newData, key, {\n                    value: visitData(value, enter, leave),\n                });\n            }\n        }\n        return leave != null ? leave(newData) : newData;\n    }\n    return data;\n}\nfunction visitErrors(errors, visitor) {\n    return errors.map(error => visitor(error));\n}\nfunction visitResult(result, request, schema, resultVisitorMap, errorVisitorMap) {\n    const fragments = request.document.definitions.reduce((acc, def) => {\n        if (def.kind === Kind.FRAGMENT_DEFINITION) {\n            acc[def.name.value] = def;\n        }\n        return acc;\n    }, {});\n    const variableValues = request.variables || {};\n    const errorInfo = {\n        segmentInfoMap: new Map(),\n        unpathedErrors: new Set(),\n    };\n    const data = result.data;\n    const errors = result.errors;\n    const visitingErrors = errors != null && errorVisitorMap != null;\n    const operationDocumentNode = getOperationASTFromRequest(request);\n    if (data != null && operationDocumentNode != null) {\n        result.data = visitRoot(data, operationDocumentNode, schema, fragments, variableValues, resultVisitorMap, visitingErrors ? errors : undefined, errorInfo);\n    }\n    if (errors != null && errorVisitorMap) {\n        result.errors = visitErrorsByType(errors, errorVisitorMap, errorInfo);\n    }\n    return result;\n}\nfunction visitErrorsByType(errors, errorVisitorMap, errorInfo) {\n    const segmentInfoMap = errorInfo.segmentInfoMap;\n    const unpathedErrors = errorInfo.unpathedErrors;\n    const unpathedErrorVisitor = errorVisitorMap['__unpathed'];\n    return errors.map(originalError => {\n        const pathSegmentsInfo = segmentInfoMap.get(originalError);\n        const newError = pathSegmentsInfo == null\n            ? originalError\n            : pathSegmentsInfo.reduceRight((acc, segmentInfo) => {\n                const typeName = segmentInfo.type.name;\n                const typeVisitorMap = errorVisitorMap[typeName];\n                if (typeVisitorMap == null) {\n                    return acc;\n                }\n                const errorVisitor = typeVisitorMap[segmentInfo.fieldName];\n                return errorVisitor == null ? acc : errorVisitor(acc, segmentInfo.pathIndex);\n            }, originalError);\n        if (unpathedErrorVisitor && unpathedErrors.has(originalError)) {\n            return unpathedErrorVisitor(newError);\n        }\n        return newError;\n    });\n}\nfunction getOperationRootType(schema, operationDef) {\n    switch (operationDef.operation) {\n        case 'query':\n            return schema.getQueryType();\n        case 'mutation':\n            return schema.getMutationType();\n        case 'subscription':\n            return schema.getSubscriptionType();\n    }\n}\nfunction visitRoot(root, operation, schema, fragments, variableValues, resultVisitorMap, errors, errorInfo) {\n    const operationRootType = getOperationRootType(schema, operation);\n    const collectedFields = collectFields(schema, fragments, variableValues, operationRootType, operation.selectionSet, new Map(), new Set());\n    return visitObjectValue(root, operationRootType, collectedFields, schema, fragments, variableValues, resultVisitorMap, 0, errors, errorInfo);\n}\nfunction visitObjectValue(object, type, fieldNodeMap, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {\n    var _a;\n    const fieldMap = type.getFields();\n    const typeVisitorMap = resultVisitorMap === null || resultVisitorMap === void 0 ? void 0 : resultVisitorMap[type.name];\n    const enterObject = typeVisitorMap === null || typeVisitorMap === void 0 ? void 0 : typeVisitorMap.__enter;\n    const newObject = enterObject != null ? enterObject(object) : object;\n    let sortedErrors;\n    let errorMap = null;\n    if (errors != null) {\n        sortedErrors = sortErrorsByPathSegment(errors, pathIndex);\n        errorMap = sortedErrors.errorMap;\n        for (const error of sortedErrors.unpathedErrors) {\n            errorInfo.unpathedErrors.add(error);\n        }\n    }\n    for (const [responseKey, subFieldNodes] of fieldNodeMap) {\n        const fieldName = subFieldNodes[0].name.value;\n        const fieldType = fieldName === '__typename' ? TypeNameMetaFieldDef.type : (_a = fieldMap[fieldName]) === null || _a === void 0 ? void 0 : _a.type;\n        const newPathIndex = pathIndex + 1;\n        let fieldErrors;\n        if (errorMap) {\n            fieldErrors = errorMap[responseKey];\n            if (fieldErrors != null) {\n                delete errorMap[responseKey];\n            }\n            addPathSegmentInfo(type, fieldName, newPathIndex, fieldErrors, errorInfo);\n        }\n        const newValue = visitFieldValue(object[responseKey], fieldType, subFieldNodes, schema, fragments, variableValues, resultVisitorMap, newPathIndex, fieldErrors, errorInfo);\n        updateObject(newObject, responseKey, newValue, typeVisitorMap, fieldName);\n    }\n    const oldTypename = newObject.__typename;\n    if (oldTypename != null) {\n        updateObject(newObject, '__typename', oldTypename, typeVisitorMap, '__typename');\n    }\n    if (errorMap) {\n        for (const errorsKey in errorMap) {\n            const errors = errorMap[errorsKey];\n            for (const error of errors) {\n                errorInfo.unpathedErrors.add(error);\n            }\n        }\n    }\n    const leaveObject = typeVisitorMap === null || typeVisitorMap === void 0 ? void 0 : typeVisitorMap.__leave;\n    return leaveObject != null ? leaveObject(newObject) : newObject;\n}\nfunction updateObject(object, responseKey, newValue, typeVisitorMap, fieldName) {\n    if (typeVisitorMap == null) {\n        object[responseKey] = newValue;\n        return;\n    }\n    const fieldVisitor = typeVisitorMap[fieldName];\n    if (fieldVisitor == null) {\n        object[responseKey] = newValue;\n        return;\n    }\n    const visitedValue = fieldVisitor(newValue);\n    if (visitedValue === undefined) {\n        delete object[responseKey];\n        return;\n    }\n    object[responseKey] = visitedValue;\n}\nfunction visitListValue(list, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {\n    return list.map(listMember => visitFieldValue(listMember, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex + 1, errors, errorInfo));\n}\nfunction visitFieldValue(value, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors = [], errorInfo) {\n    if (value == null) {\n        return value;\n    }\n    const nullableType = getNullableType(returnType);\n    if (isListType(nullableType)) {\n        return visitListValue(value, nullableType.ofType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    else if (isAbstractType(nullableType)) {\n        const finalType = schema.getType(value.__typename);\n        const collectedFields = collectSubFields(schema, fragments, variableValues, finalType, fieldNodes);\n        return visitObjectValue(value, finalType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    else if (isObjectType(nullableType)) {\n        const collectedFields = collectSubFields(schema, fragments, variableValues, nullableType, fieldNodes);\n        return visitObjectValue(value, nullableType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    const typeVisitorMap = resultVisitorMap === null || resultVisitorMap === void 0 ? void 0 : resultVisitorMap[nullableType.name];\n    if (typeVisitorMap == null) {\n        return value;\n    }\n    const visitedValue = typeVisitorMap(value);\n    return visitedValue === undefined ? value : visitedValue;\n}\nfunction sortErrorsByPathSegment(errors, pathIndex) {\n    var _a;\n    const errorMap = Object.create(null);\n    const unpathedErrors = new Set();\n    for (const error of errors) {\n        const pathSegment = (_a = error.path) === null || _a === void 0 ? void 0 : _a[pathIndex];\n        if (pathSegment == null) {\n            unpathedErrors.add(error);\n            continue;\n        }\n        if (pathSegment in errorMap) {\n            errorMap[pathSegment].push(error);\n        }\n        else {\n            errorMap[pathSegment] = [error];\n        }\n    }\n    return {\n        errorMap,\n        unpathedErrors,\n    };\n}\nfunction addPathSegmentInfo(type, fieldName, pathIndex, errors = [], errorInfo) {\n    for (const error of errors) {\n        const segmentInfo = {\n            type,\n            fieldName,\n            pathIndex,\n        };\n        const pathSegmentsInfo = errorInfo.segmentInfoMap.get(error);\n        if (pathSegmentsInfo == null) {\n            errorInfo.segmentInfoMap.set(error, [segmentInfo]);\n        }\n        else {\n            pathSegmentsInfo.push(segmentInfo);\n        }\n    }\n}\n\nfunction valueMatchesCriteria(value, criteria) {\n    if (value == null) {\n        return value === criteria;\n    }\n    else if (Array.isArray(value)) {\n        return Array.isArray(criteria) && value.every((val, index) => valueMatchesCriteria(val, criteria[index]));\n    }\n    else if (typeof value === 'object') {\n        return (typeof criteria === 'object' &&\n            criteria &&\n            Object.keys(criteria).every(propertyName => valueMatchesCriteria(value[propertyName], criteria[propertyName])));\n    }\n    else if (criteria instanceof RegExp) {\n        return criteria.test(value);\n    }\n    return value === criteria;\n}\n\nfunction isAsyncIterable(value) {\n    return (typeof value === 'object' &&\n        value != null &&\n        Symbol.asyncIterator in value &&\n        typeof value[Symbol.asyncIterator] === 'function');\n}\n\nfunction isDocumentNode(object) {\n    return object && typeof object === 'object' && 'kind' in object && object.kind === Kind.DOCUMENT;\n}\n\nasync function defaultAsyncIteratorReturn(value) {\n    return { value, done: true };\n}\nconst proxyMethodFactory = memoize2(function proxyMethodFactory(target, targetMethod) {\n    return function proxyMethod(...args) {\n        return Reflect.apply(targetMethod, target, args);\n    };\n});\nfunction getAsyncIteratorWithCancel(asyncIterator, onCancel) {\n    return new Proxy(asyncIterator, {\n        has(asyncIterator, prop) {\n            if (prop === 'return') {\n                return true;\n            }\n            return Reflect.has(asyncIterator, prop);\n        },\n        get(asyncIterator, prop, receiver) {\n            const existingPropValue = Reflect.get(asyncIterator, prop, receiver);\n            if (prop === 'return') {\n                const existingReturn = existingPropValue || defaultAsyncIteratorReturn;\n                return async function returnWithCancel(value) {\n                    const returnValue = await onCancel(value);\n                    return Reflect.apply(existingReturn, asyncIterator, [returnValue]);\n                };\n            }\n            else if (typeof existingPropValue === 'function') {\n                return proxyMethodFactory(asyncIterator, existingPropValue);\n            }\n            return existingPropValue;\n        },\n    });\n}\nfunction getAsyncIterableWithCancel(asyncIterable, onCancel) {\n    return new Proxy(asyncIterable, {\n        get(asyncIterable, prop, receiver) {\n            const existingPropValue = Reflect.get(asyncIterable, prop, receiver);\n            if (Symbol.asyncIterator === prop) {\n                return function asyncIteratorFactory() {\n                    const asyncIterator = Reflect.apply(existingPropValue, asyncIterable, []);\n                    return getAsyncIteratorWithCancel(asyncIterator, onCancel);\n                };\n            }\n            else if (typeof existingPropValue === 'function') {\n                return proxyMethodFactory(asyncIterable, existingPropValue);\n            }\n            return existingPropValue;\n        },\n    });\n}\n\nfunction buildFixedSchema(schema, options) {\n    const document = getDocumentNodeFromSchema(schema);\n    return buildASTSchema(document, {\n        ...(options || {}),\n    });\n}\nfunction fixSchemaAst(schema, options) {\n    // eslint-disable-next-line no-undef-init\n    let schemaWithValidAst = undefined;\n    if (!schema.astNode || !schema.extensionASTNodes) {\n        schemaWithValidAst = buildFixedSchema(schema, options);\n    }\n    if (!schema.astNode && (schemaWithValidAst === null || schemaWithValidAst === void 0 ? void 0 : schemaWithValidAst.astNode)) {\n        schema.astNode = schemaWithValidAst.astNode;\n    }\n    if (!schema.extensionASTNodes && (schemaWithValidAst === null || schemaWithValidAst === void 0 ? void 0 : schemaWithValidAst.astNode)) {\n        schema.extensionASTNodes = schemaWithValidAst.extensionASTNodes;\n    }\n    return schema;\n}\n\nexport { AggregateErrorImpl as AggregateError, DirectiveLocation, MapperKind, addTypes, appendObjectFields, asArray, assertSome, astFromArg, astFromDirective, astFromEnumType, astFromEnumValue, astFromField, astFromInputField, astFromInputObjectType, astFromInterfaceType, astFromObjectType, astFromScalarType, astFromSchema, astFromUnionType, astFromValueUntyped, buildOperationNodeForField, checkValidationErrors, collectComment, collectFields, collectSubFields, compareNodes, compareStrings, correctASTNodes, createDefaultRules, createGraphQLError, createNamedStub, createStub, createVariableNameGenerator, dedentBlockStringValue, filterSchema, fixSchemaAst, forEachDefaultValue, forEachField, getArgumentValues, getAsyncIterableWithCancel, getAsyncIteratorWithCancel, getBlockStringIndentation, getBuiltInForStub, getComment, getDefinedRootType, getDeprecatableDirectiveNodes, getDescription, getDirective, getDirectiveInExtensions, getDirectiveNodes, getDirectives, getDirectivesInExtensions, getDocumentNodeFromSchema, getFieldsWithDirectives, getImplementingTypes, getLeadingCommentBlock, getOperationASTFromDocument, getOperationASTFromRequest, getResolversFromSchema, getResponseKeyFromInfo, getRootTypeMap, getRootTypeNames, getRootTypes, healSchema, healTypes, implementsAbstractType, inspect, isAggregateError, isAsyncIterable, isDescribable, isDocumentNode, isDocumentString, isNamedStub, isSome, isValidPath, makeDeprecatedDirective, makeDirectiveNode, makeDirectiveNodes, mapAsyncIterator, mapSchema, memoize1, memoize2, memoize2of4, memoize3, memoize4, memoize5, mergeDeep, modifyObjectFields, nodeToString, observableToAsyncIterable, parseGraphQLJSON, parseGraphQLSDL, parseInputValue, parseInputValueLiteral, parseSelectionSet, printComment, printSchemaWithDirectives, printWithComments, pruneSchema, pushComment, relocatedError, removeObjectFields, renameType, resetComments, rewireTypes, selectObjectFields, serializeInputValue, transformCommentsToDescriptions, transformInputValue, updateArgument, validateGraphQlDocuments, valueMatchesCriteria, visitData, visitErrors, visitResult, getAsyncIterableWithCancel as withCancel };\n", "import { print } from 'graphql';\nimport lru from 'tiny-lru';\n\nconst DEFAULT_MAX = 1000;\nconst DEFAULT_TTL = 3600000;\nconst rawDocumentSymbol = Symbol('rawDocument');\nconst useValidationCache = (pluginOptions = {}) => {\n    const resultCache = typeof pluginOptions.cache !== 'undefined' ? pluginOptions.cache : lru(DEFAULT_MAX, DEFAULT_TTL);\n    return {\n        onSchemaChange() {\n            resultCache.clear();\n        },\n        onParse({ params, extendContext }) {\n            extendContext({ [rawDocumentSymbol]: params.source.toString() });\n        },\n        onValidate({ params, context, setResult }) {\n            var _a;\n            const key = (_a = context[rawDocumentSymbol]) !== null && _a !== void 0 ? _a : print(params.documentAST);\n            const cachedResult = resultCache.get(key);\n            if (cachedResult !== undefined) {\n                setResult(cachedResult);\n            }\n            return ({ result }) => {\n                resultCache.set(key, result);\n            };\n        },\n    };\n};\n\nexport { useValidationCache };\n", "import { Source } from 'graphql';\nimport lru from 'tiny-lru';\n\nconst DEFAULT_MAX = 1000;\nconst DEFAULT_TTL = 3600000;\nconst useParserCache = (pluginOptions = {}) => {\n    const documentCache = typeof pluginOptions.documentCache !== 'undefined'\n        ? pluginOptions.documentCache\n        : lru(DEFAULT_MAX, DEFAULT_TTL);\n    const errorCache = typeof pluginOptions.errorCache !== 'undefined' ? pluginOptions.errorCache : lru(DEFAULT_MAX, DEFAULT_TTL);\n    return {\n        onParse({ params, setParsedDocument }) {\n            const { source } = params;\n            const key = source instanceof Source ? source.body : source;\n            const cachedError = errorCache.get(key);\n            if (cachedError !== undefined) {\n                throw cachedError;\n            }\n            const cachedDocument = documentCache.get(key);\n            if (cachedDocument !== undefined) {\n                setParsedDocument(cachedDocument);\n            }\n            return ({ result }) => {\n                if (result instanceof Error) {\n                    errorCache.set(key, result);\n                }\n                else if (result !== null) {\n                    documentCache.set(key, result);\n                }\n            };\n        },\n    };\n};\n\nexport { useParserCache };\n", "import { isScalarType, getNamedType, defaultFieldResolver, isSchema, isSpecifiedScalarType, isEnumType, isUnionType, isObjectType, isInterfaceType, GraphQLEnumType, GraphQLScalarType, GraphQLUnionType, GraphQLObjectType, GraphQLInterfaceType, buildSchema, buildASTSchema } from 'graphql';\nimport { forEachField, mapSchema, MapperKind, forEachDefaultValue, serializeInputValue, healSchema, parseInputValue, pruneSchema, asArray, getResolversFromSchema } from '@graphql-tools/utils';\nimport { mergeTypeDefs, mergeResolvers, mergeExtensions, applyExtensions, extractExtensionsFromSchema } from '@graphql-tools/merge';\n\nfunction assertResolversPresent(schema, resolverValidationOptions = {}) {\n    const { requireResolversForArgs, requireResolversForNonScalar, requireResolversForAllFields } = resolverValidationOptions;\n    if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {\n        throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' +\n            'Please configure either requireResolversForAllFields or requireResolversForArgs / ' +\n            'requireResolversForNonScalar, but not a combination of them.');\n    }\n    forEachField(schema, (field, typeName, fieldName) => {\n        // requires a resolver for *every* field.\n        if (requireResolversForAllFields) {\n            expectResolver('requireResolversForAllFields', requireResolversForAllFields, field, typeName, fieldName);\n        }\n        // requires a resolver on every field that has arguments\n        if (requireResolversForArgs && field.args.length > 0) {\n            expectResolver('requireResolversForArgs', requireResolversForArgs, field, typeName, fieldName);\n        }\n        // requires a resolver on every field that returns a non-scalar type\n        if (requireResolversForNonScalar !== 'ignore' && !isScalarType(getNamedType(field.type))) {\n            expectResolver('requireResolversForNonScalar', requireResolversForNonScalar, field, typeName, fieldName);\n        }\n    });\n}\nfunction expectResolver(validator, behavior, field, typeName, fieldName) {\n    if (!field.resolve) {\n        const message = `Resolver missing for \"${typeName}.${fieldName}\".\nTo disable this validator, use:\n  resolverValidationOptions: {\n    ${validator}: 'ignore'\n  }`;\n        if (behavior === 'error') {\n            throw new Error(message);\n        }\n        if (behavior === 'warn') {\n            console.warn(message);\n        }\n        return;\n    }\n    if (typeof field.resolve !== 'function') {\n        throw new Error(`Resolver \"${typeName}.${fieldName}\" must be a function`);\n    }\n}\n\nfunction chainResolvers(resolvers) {\n    return (root, args, ctx, info) => resolvers.reduce((prev, curResolver) => {\n        if (curResolver != null) {\n            return curResolver(prev, args, ctx, info);\n        }\n        return defaultFieldResolver(prev, args, ctx, info);\n    }, root);\n}\n\n// If we have any union or interface types throw if no there is no resolveType resolver\nfunction checkForResolveTypeResolver(schema, requireResolversForResolveType) {\n    mapSchema(schema, {\n        [MapperKind.ABSTRACT_TYPE]: type => {\n            if (!type.resolveType) {\n                const message = `Type \"${type.name}\" is missing a \"__resolveType\" resolver. Pass 'ignore' into ` +\n                    '\"resolverValidationOptions.requireResolversForResolveType\" to disable this error.';\n                if (requireResolversForResolveType === 'error') {\n                    throw new Error(message);\n                }\n                if (requireResolversForResolveType === 'warn') {\n                    console.warn(message);\n                }\n            }\n            return undefined;\n        },\n    });\n}\n\nfunction extendResolversFromInterfaces(schema, resolvers) {\n    const extendedResolvers = {};\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        if ('getInterfaces' in type) {\n            extendedResolvers[typeName] = {};\n            for (const iFace of type.getInterfaces()) {\n                if (resolvers[iFace.name]) {\n                    for (const fieldName in resolvers[iFace.name]) {\n                        if (fieldName === '__isTypeOf' || !fieldName.startsWith('__')) {\n                            extendedResolvers[typeName][fieldName] = resolvers[iFace.name][fieldName];\n                        }\n                    }\n                }\n            }\n            const typeResolvers = resolvers[typeName];\n            extendedResolvers[typeName] = {\n                ...extendedResolvers[typeName],\n                ...typeResolvers,\n            };\n        }\n        else {\n            const typeResolvers = resolvers[typeName];\n            if (typeResolvers != null) {\n                extendedResolvers[typeName] = typeResolvers;\n            }\n        }\n    }\n    return extendedResolvers;\n}\n\nfunction addResolversToSchema(schemaOrOptions, legacyInputResolvers, legacyInputValidationOptions) {\n    const options = isSchema(schemaOrOptions)\n        ? {\n            schema: schemaOrOptions,\n            resolvers: legacyInputResolvers !== null && legacyInputResolvers !== void 0 ? legacyInputResolvers : {},\n            resolverValidationOptions: legacyInputValidationOptions,\n        }\n        : schemaOrOptions;\n    let { schema, resolvers: inputResolvers, defaultFieldResolver, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false, } = options;\n    const { requireResolversToMatchSchema = 'error', requireResolversForResolveType } = resolverValidationOptions;\n    const resolvers = inheritResolversFromInterfaces\n        ? extendResolversFromInterfaces(schema, inputResolvers)\n        : inputResolvers;\n    for (const typeName in resolvers) {\n        const resolverValue = resolvers[typeName];\n        const resolverType = typeof resolverValue;\n        if (resolverType !== 'object') {\n            throw new Error(`\"${typeName}\" defined in resolvers, but has invalid value \"${resolverValue}\". The resolver's value must be of type object.`);\n        }\n        const type = schema.getType(typeName);\n        if (type == null) {\n            if (requireResolversToMatchSchema === 'ignore') {\n                continue;\n            }\n            throw new Error(`\"${typeName}\" defined in resolvers, but not in schema`);\n        }\n        else if (isSpecifiedScalarType(type)) {\n            // allow -- without recommending -- overriding of specified scalar types\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else {\n                    type[fieldName] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if (isEnumType(type)) {\n            const values = type.getValues();\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__') &&\n                    !values.some(value => value.name === fieldName) &&\n                    requireResolversToMatchSchema &&\n                    requireResolversToMatchSchema !== 'ignore') {\n                    throw new Error(`${type.name}.${fieldName} was defined in resolvers, but not present within ${type.name}`);\n                }\n            }\n        }\n        else if (isUnionType(type)) {\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__') &&\n                    requireResolversToMatchSchema &&\n                    requireResolversToMatchSchema !== 'ignore') {\n                    throw new Error(`${type.name}.${fieldName} was defined in resolvers, but ${type.name} is not an object or interface type`);\n                }\n            }\n        }\n        else if (isObjectType(type) || isInterfaceType(type)) {\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__')) {\n                    const fields = type.getFields();\n                    const field = fields[fieldName];\n                    if (field == null) {\n                        // Field present in resolver but not in schema\n                        if (requireResolversToMatchSchema && requireResolversToMatchSchema !== 'ignore') {\n                            throw new Error(`${typeName}.${fieldName} defined in resolvers, but not in schema`);\n                        }\n                    }\n                    else {\n                        // Field present in both the resolver and schema\n                        const fieldResolve = resolverValue[fieldName];\n                        if (typeof fieldResolve !== 'function' && typeof fieldResolve !== 'object') {\n                            throw new Error(`Resolver ${typeName}.${fieldName} must be object or function`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    schema = updateResolversInPlace\n        ? addResolversToExistingSchema(schema, resolvers, defaultFieldResolver)\n        : createNewSchemaWithResolvers(schema, resolvers, defaultFieldResolver);\n    if (requireResolversForResolveType && requireResolversForResolveType !== 'ignore') {\n        checkForResolveTypeResolver(schema, requireResolversForResolveType);\n    }\n    return schema;\n}\nfunction addResolversToExistingSchema(schema, resolvers, defaultFieldResolver) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    const typeMap = schema.getTypeMap();\n    for (const typeName in resolvers) {\n        const type = schema.getType(typeName);\n        const resolverValue = resolvers[typeName];\n        if (isScalarType(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else if (fieldName === 'astNode' && type.astNode != null) {\n                    type.astNode = {\n                        ...type.astNode,\n                        description: (_b = (_a = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : type.astNode.description,\n                        directives: ((_c = type.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : []),\n                    };\n                }\n                else if (fieldName === 'extensionASTNodes' && type.extensionASTNodes != null) {\n                    type.extensionASTNodes = type.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);\n                }\n                else if (fieldName === 'extensions' &&\n                    type.extensions != null &&\n                    resolverValue.extensions != null) {\n                    type.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                }\n                else {\n                    type[fieldName] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if (isEnumType(type)) {\n            const config = type.toConfig();\n            const enumValueConfigMap = config.values;\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    config[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else if (fieldName === 'astNode' && config.astNode != null) {\n                    config.astNode = {\n                        ...config.astNode,\n                        description: (_h = (_g = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _g === void 0 ? void 0 : _g.description) !== null && _h !== void 0 ? _h : config.astNode.description,\n                        directives: ((_j = config.astNode.directives) !== null && _j !== void 0 ? _j : []).concat((_l = (_k = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _k === void 0 ? void 0 : _k.directives) !== null && _l !== void 0 ? _l : []),\n                    };\n                }\n                else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                    config.extensionASTNodes = config.extensionASTNodes.concat((_m = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _m !== void 0 ? _m : []);\n                }\n                else if (fieldName === 'extensions' &&\n                    type.extensions != null &&\n                    resolverValue.extensions != null) {\n                    type.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                }\n                else if (enumValueConfigMap[fieldName]) {\n                    enumValueConfigMap[fieldName].value = resolverValue[fieldName];\n                }\n            }\n            typeMap[typeName] = new GraphQLEnumType(config);\n        }\n        else if (isUnionType(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if (isObjectType(type) || isInterfaceType(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    // this is for isTypeOf and resolveType and all the other stuff.\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                    continue;\n                }\n                const fields = type.getFields();\n                const field = fields[fieldName];\n                if (field != null) {\n                    const fieldResolve = resolverValue[fieldName];\n                    if (typeof fieldResolve === 'function') {\n                        // for convenience. Allows shorter syntax in resolver definition file\n                        field.resolve = fieldResolve.bind(resolverValue);\n                    }\n                    else {\n                        setFieldProperties(field, fieldResolve);\n                    }\n                }\n            }\n        }\n    }\n    // serialize all default values prior to healing fields with new scalar/enum types.\n    forEachDefaultValue(schema, serializeInputValue);\n    // schema may have new scalar/enum types that require healing\n    healSchema(schema);\n    // reparse all default values with new parsing functions.\n    forEachDefaultValue(schema, parseInputValue);\n    if (defaultFieldResolver != null) {\n        forEachField(schema, field => {\n            if (!field.resolve) {\n                field.resolve = defaultFieldResolver;\n            }\n        });\n    }\n    return schema;\n}\nfunction createNewSchemaWithResolvers(schema, resolvers, defaultFieldResolver) {\n    schema = mapSchema(schema, {\n        [MapperKind.SCALAR_TYPE]: type => {\n            var _a, _b, _c, _d, _e, _f;\n            const config = type.toConfig();\n            const resolverValue = resolvers[type.name];\n            if (!isSpecifiedScalarType(type) && resolverValue != null) {\n                for (const fieldName in resolverValue) {\n                    if (fieldName.startsWith('__')) {\n                        config[fieldName.substring(2)] = resolverValue[fieldName];\n                    }\n                    else if (fieldName === 'astNode' && config.astNode != null) {\n                        config.astNode = {\n                            ...config.astNode,\n                            description: (_b = (_a = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : config.astNode.description,\n                            directives: ((_c = config.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : []),\n                        };\n                    }\n                    else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                        config.extensionASTNodes = config.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);\n                    }\n                    else if (fieldName === 'extensions' &&\n                        config.extensions != null &&\n                        resolverValue.extensions != null) {\n                        config.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                    }\n                    else {\n                        config[fieldName] = resolverValue[fieldName];\n                    }\n                }\n                return new GraphQLScalarType(config);\n            }\n        },\n        [MapperKind.ENUM_TYPE]: type => {\n            var _a, _b, _c, _d, _e, _f;\n            const resolverValue = resolvers[type.name];\n            const config = type.toConfig();\n            const enumValueConfigMap = config.values;\n            if (resolverValue != null) {\n                for (const fieldName in resolverValue) {\n                    if (fieldName.startsWith('__')) {\n                        config[fieldName.substring(2)] = resolverValue[fieldName];\n                    }\n                    else if (fieldName === 'astNode' && config.astNode != null) {\n                        config.astNode = {\n                            ...config.astNode,\n                            description: (_b = (_a = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : config.astNode.description,\n                            directives: ((_c = config.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : []),\n                        };\n                    }\n                    else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                        config.extensionASTNodes = config.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);\n                    }\n                    else if (fieldName === 'extensions' &&\n                        config.extensions != null &&\n                        resolverValue.extensions != null) {\n                        config.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                    }\n                    else if (enumValueConfigMap[fieldName]) {\n                        enumValueConfigMap[fieldName].value = resolverValue[fieldName];\n                    }\n                }\n                return new GraphQLEnumType(config);\n            }\n        },\n        [MapperKind.UNION_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__resolveType']) {\n                    config.resolveType = resolverValue['__resolveType'];\n                }\n                return new GraphQLUnionType(config);\n            }\n        },\n        [MapperKind.OBJECT_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__isTypeOf']) {\n                    config.isTypeOf = resolverValue['__isTypeOf'];\n                }\n                return new GraphQLObjectType(config);\n            }\n        },\n        [MapperKind.INTERFACE_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__resolveType']) {\n                    config.resolveType = resolverValue['__resolveType'];\n                }\n                return new GraphQLInterfaceType(config);\n            }\n        },\n        [MapperKind.COMPOSITE_FIELD]: (fieldConfig, fieldName, typeName) => {\n            const resolverValue = resolvers[typeName];\n            if (resolverValue != null) {\n                const fieldResolve = resolverValue[fieldName];\n                if (fieldResolve != null) {\n                    const newFieldConfig = { ...fieldConfig };\n                    if (typeof fieldResolve === 'function') {\n                        // for convenience. Allows shorter syntax in resolver definition file\n                        newFieldConfig.resolve = fieldResolve.bind(resolverValue);\n                    }\n                    else {\n                        setFieldProperties(newFieldConfig, fieldResolve);\n                    }\n                    return newFieldConfig;\n                }\n            }\n        },\n    });\n    if (defaultFieldResolver != null) {\n        schema = mapSchema(schema, {\n            [MapperKind.OBJECT_FIELD]: fieldConfig => ({\n                ...fieldConfig,\n                resolve: fieldConfig.resolve != null ? fieldConfig.resolve : defaultFieldResolver,\n            }),\n        });\n    }\n    return schema;\n}\nfunction setFieldProperties(field, propertiesObj) {\n    for (const propertyName in propertiesObj) {\n        field[propertyName] = propertiesObj[propertyName];\n    }\n}\n\n/**\n * Builds a schema from the provided type definitions and resolvers.\n *\n * The type definitions are written using Schema Definition Language (SDL). They\n * can be provided as a string, a `DocumentNode`, a function, or an array of any\n * of these. If a function is provided, it will be passed no arguments and\n * should return an array of strings or `DocumentNode`s.\n *\n * Note: You can use `graphql-tag` to not only parse a string into a\n * `DocumentNode` but also to provide additional syntax highlighting in your\n * editor (with the appropriate editor plugin).\n *\n * ```js\n * const typeDefs = gql`\n *   type Query {\n *     posts: [Post]\n *     author(id: Int!): Author\n *   }\n * `;\n * ```\n *\n * The `resolvers` object should be a map of type names to nested object, which\n * themselves map the type's fields to their appropriate resolvers.\n * See the [Resolvers](/docs/resolvers) section of the documentation for more details.\n *\n * ```js\n * const resolvers = {\n *   Query: {\n *     posts: (obj, args, ctx, info) => getAllPosts(),\n *     author: (obj, args, ctx, info) => getAuthorById(args.id)\n *   }\n * };\n * ```\n *\n * Once you've defined both the `typeDefs` and `resolvers`, you can create your\n * schema:\n *\n * ```js\n * const schema = makeExecutableSchema({\n *   typeDefs,\n *   resolvers,\n * })\n * ```\n */\nfunction makeExecutableSchema({ typeDefs, resolvers = {}, resolverValidationOptions = {}, parseOptions = {}, inheritResolversFromInterfaces = false, pruningOptions, updateResolversInPlace = false, schemaExtensions, }) {\n    // Validate and clean up arguments\n    if (typeof resolverValidationOptions !== 'object') {\n        throw new Error('Expected `resolverValidationOptions` to be an object');\n    }\n    if (!typeDefs) {\n        throw new Error('Must provide typeDefs');\n    }\n    let schema;\n    if (isSchema(typeDefs)) {\n        schema = typeDefs;\n    }\n    else if (parseOptions === null || parseOptions === void 0 ? void 0 : parseOptions.commentDescriptions) {\n        const mergedTypeDefs = mergeTypeDefs(typeDefs, {\n            ...parseOptions,\n            commentDescriptions: true,\n        });\n        schema = buildSchema(mergedTypeDefs, parseOptions);\n    }\n    else {\n        const mergedTypeDefs = mergeTypeDefs(typeDefs, parseOptions);\n        schema = buildASTSchema(mergedTypeDefs, parseOptions);\n    }\n    if (pruningOptions) {\n        schema = pruneSchema(schema);\n    }\n    // We allow passing in an array of resolver maps, in which case we merge them\n    schema = addResolversToSchema({\n        schema,\n        resolvers: mergeResolvers(resolvers),\n        resolverValidationOptions,\n        inheritResolversFromInterfaces,\n        updateResolversInPlace,\n    });\n    if (Object.keys(resolverValidationOptions).length > 0) {\n        assertResolversPresent(schema, resolverValidationOptions);\n    }\n    if (schemaExtensions) {\n        schemaExtensions = mergeExtensions(asArray(schemaExtensions));\n        applyExtensions(schema, schemaExtensions);\n    }\n    return schema;\n}\n\n/**\n * Synchronously merges multiple schemas, typeDefinitions and/or resolvers into a single schema.\n * @param config Configuration object\n */\nfunction mergeSchemas(config) {\n    const extractedTypeDefs = asArray(config.typeDefs || []);\n    const extractedResolvers = asArray(config.resolvers || []);\n    const extractedSchemaExtensions = asArray(config.schemaExtensions || []);\n    const schemas = config.schemas || [];\n    for (const schema of schemas) {\n        extractedTypeDefs.push(schema);\n        extractedResolvers.push(getResolversFromSchema(schema));\n        extractedSchemaExtensions.push(extractExtensionsFromSchema(schema));\n    }\n    return makeExecutableSchema({\n        parseOptions: config,\n        ...config,\n        typeDefs: extractedTypeDefs,\n        resolvers: extractedResolvers,\n        schemaExtensions: extractedSchemaExtensions,\n    });\n}\n\nexport { addResolversToSchema, assertResolversPresent, chainResolvers, checkForResolveTypeResolver, extendResolversFromInterfaces, makeExecutableSchema, mergeSchemas };\n", "import { mergeDeep, isSome, compareNodes, collectComment, resetComments, printWithComments, getDocumentNodeFromSchema, isDocumentNode } from '@graphql-tools/utils';\nimport { print, Kind, Source, isSchema, parse, isDefinitionNode, isScalarType, isSpecifiedScalarType, isIntrospectionType, isObjectType, isInterfaceType, isInputObjectType, isUnionType, isEnumType } from 'graphql';\n\n/**\n * Deep merges multiple resolver definition objects into a single definition.\n * @param resolversDefinitions Resolver definitions to be merged\n * @param options Additional options\n *\n * ```js\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const clientResolver = require('./clientResolver');\n * const productResolver = require('./productResolver');\n *\n * const resolvers = mergeResolvers([\n *  clientResolver,\n *  productResolver,\n * ]);\n * ```\n *\n * If you don't want to manually create the array of resolver objects, you can\n * also use this function along with loadFiles:\n *\n * ```js\n * const path = require('path');\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const { loadFilesSync } = require('@graphql-tools/load-files');\n *\n * const resolversArray = loadFilesSync(path.join(__dirname, './resolvers'));\n *\n * const resolvers = mergeResolvers(resolversArray)\n * ```\n */\nfunction mergeResolvers(resolversDefinitions, options) {\n    if (!resolversDefinitions || (Array.isArray(resolversDefinitions) && resolversDefinitions.length === 0)) {\n        return {};\n    }\n    if (!Array.isArray(resolversDefinitions)) {\n        return resolversDefinitions;\n    }\n    if (resolversDefinitions.length === 1) {\n        return resolversDefinitions[0] || {};\n    }\n    const resolvers = new Array();\n    for (let resolversDefinition of resolversDefinitions) {\n        if (Array.isArray(resolversDefinition)) {\n            resolversDefinition = mergeResolvers(resolversDefinition);\n        }\n        if (typeof resolversDefinition === 'object' && resolversDefinition) {\n            resolvers.push(resolversDefinition);\n        }\n    }\n    const result = mergeDeep(resolvers, true);\n    if (options === null || options === void 0 ? void 0 : options.exclusions) {\n        for (const exclusion of options.exclusions) {\n            const [typeName, fieldName] = exclusion.split('.');\n            if (!fieldName || fieldName === '*') {\n                delete result[typeName];\n            }\n            else if (result[typeName]) {\n                delete result[typeName][fieldName];\n            }\n        }\n    }\n    return result;\n}\n\nfunction mergeArguments(args1, args2, config) {\n    const result = deduplicateArguments([...args2, ...args1].filter(isSome));\n    if (config && config.sort) {\n        result.sort(compareNodes);\n    }\n    return result;\n}\nfunction deduplicateArguments(args) {\n    return args.reduce((acc, current) => {\n        const dup = acc.find(arg => arg.name.value === current.name.value);\n        if (!dup) {\n            return acc.concat([current]);\n        }\n        return acc;\n    }, []);\n}\n\nfunction directiveAlreadyExists(directivesArr, otherDirective) {\n    return !!directivesArr.find(directive => directive.name.value === otherDirective.name.value);\n}\nfunction nameAlreadyExists(name, namesArr) {\n    return namesArr.some(({ value }) => value === name.value);\n}\nfunction mergeArguments$1(a1, a2) {\n    const result = [...a2];\n    for (const argument of a1) {\n        const existingIndex = result.findIndex(a => a.name.value === argument.name.value);\n        if (existingIndex > -1) {\n            const existingArg = result[existingIndex];\n            if (existingArg.value.kind === 'ListValue') {\n                const source = existingArg.value.values;\n                const target = argument.value.values;\n                // merge values of two lists\n                existingArg.value.values = deduplicateLists(source, target, (targetVal, source) => {\n                    const value = targetVal.value;\n                    return !value || !source.some((sourceVal) => sourceVal.value === value);\n                });\n            }\n            else {\n                existingArg.value = argument.value;\n            }\n        }\n        else {\n            result.push(argument);\n        }\n    }\n    return result;\n}\nfunction deduplicateDirectives(directives) {\n    return directives\n        .map((directive, i, all) => {\n        const firstAt = all.findIndex(d => d.name.value === directive.name.value);\n        if (firstAt !== i) {\n            const dup = all[firstAt];\n            directive.arguments = mergeArguments$1(directive.arguments, dup.arguments);\n            return null;\n        }\n        return directive;\n    })\n        .filter(isSome);\n}\nfunction mergeDirectives(d1 = [], d2 = [], config) {\n    const reverseOrder = config && config.reverseDirectives;\n    const asNext = reverseOrder ? d1 : d2;\n    const asFirst = reverseOrder ? d2 : d1;\n    const result = deduplicateDirectives([...asNext]);\n    for (const directive of asFirst) {\n        if (directiveAlreadyExists(result, directive)) {\n            const existingDirectiveIndex = result.findIndex(d => d.name.value === directive.name.value);\n            const existingDirective = result[existingDirectiveIndex];\n            result[existingDirectiveIndex].arguments = mergeArguments$1(directive.arguments || [], existingDirective.arguments || []);\n        }\n        else {\n            result.push(directive);\n        }\n    }\n    return result;\n}\nfunction validateInputs(node, existingNode) {\n    const printedNode = print({\n        ...node,\n        description: undefined,\n    });\n    const printedExistingNode = print({\n        ...existingNode,\n        description: undefined,\n    });\n    // eslint-disable-next-line\n    const leaveInputs = new RegExp('(directive @w*d*)|( on .*$)', 'g');\n    const sameArguments = printedNode.replace(leaveInputs, '') === printedExistingNode.replace(leaveInputs, '');\n    if (!sameArguments) {\n        throw new Error(`Unable to merge GraphQL directive \"${node.name.value}\". \\nExisting directive:  \\n\\t${printedExistingNode} \\nReceived directive: \\n\\t${printedNode}`);\n    }\n}\nfunction mergeDirective(node, existingNode) {\n    if (existingNode) {\n        validateInputs(node, existingNode);\n        return {\n            ...node,\n            locations: [\n                ...existingNode.locations,\n                ...node.locations.filter(name => !nameAlreadyExists(name, existingNode.locations)),\n            ],\n        };\n    }\n    return node;\n}\nfunction deduplicateLists(source, target, filterFn) {\n    return source.concat(target.filter(val => filterFn(val, source)));\n}\n\nfunction mergeEnumValues(first, second, config) {\n    if (config === null || config === void 0 ? void 0 : config.consistentEnumMerge) {\n        const reversed = [];\n        if (first) {\n            reversed.push(...first);\n        }\n        first = second;\n        second = reversed;\n    }\n    const enumValueMap = new Map();\n    if (first) {\n        for (const firstValue of first) {\n            enumValueMap.set(firstValue.name.value, firstValue);\n        }\n    }\n    if (second) {\n        for (const secondValue of second) {\n            const enumValue = secondValue.name.value;\n            if (enumValueMap.has(enumValue)) {\n                const firstValue = enumValueMap.get(enumValue);\n                firstValue.description = secondValue.description || firstValue.description;\n                firstValue.directives = mergeDirectives(secondValue.directives, firstValue.directives);\n            }\n            else {\n                enumValueMap.set(enumValue, secondValue);\n            }\n        }\n    }\n    const result = [...enumValueMap.values()];\n    if (config && config.sort) {\n        result.sort(compareNodes);\n    }\n    return result;\n}\n\nfunction mergeEnum(e1, e2, config) {\n    if (e2) {\n        return {\n            name: e1.name,\n            description: e1['description'] || e2['description'],\n            kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) || e1.kind === 'EnumTypeDefinition' || e2.kind === 'EnumTypeDefinition'\n                ? 'EnumTypeDefinition'\n                : 'EnumTypeExtension',\n            loc: e1.loc,\n            directives: mergeDirectives(e1.directives, e2.directives, config),\n            values: mergeEnumValues(e1.values, e2.values, config),\n        };\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...e1,\n            kind: Kind.ENUM_TYPE_DEFINITION,\n        }\n        : e1;\n}\n\nfunction isStringTypes(types) {\n    return typeof types === 'string';\n}\nfunction isSourceTypes(types) {\n    return types instanceof Source;\n}\nfunction extractType(type) {\n    let visitedType = type;\n    while (visitedType.kind === Kind.LIST_TYPE || visitedType.kind === 'NonNullType') {\n        visitedType = visitedType.type;\n    }\n    return visitedType;\n}\nfunction isWrappingTypeNode(type) {\n    return type.kind !== Kind.NAMED_TYPE;\n}\nfunction isListTypeNode(type) {\n    return type.kind === Kind.LIST_TYPE;\n}\nfunction isNonNullTypeNode(type) {\n    return type.kind === Kind.NON_NULL_TYPE;\n}\nfunction printTypeNode(type) {\n    if (isListTypeNode(type)) {\n        return `[${printTypeNode(type.type)}]`;\n    }\n    if (isNonNullTypeNode(type)) {\n        return `${printTypeNode(type.type)}!`;\n    }\n    return type.name.value;\n}\nvar CompareVal;\n(function (CompareVal) {\n    CompareVal[CompareVal[\"A_SMALLER_THAN_B\"] = -1] = \"A_SMALLER_THAN_B\";\n    CompareVal[CompareVal[\"A_EQUALS_B\"] = 0] = \"A_EQUALS_B\";\n    CompareVal[CompareVal[\"A_GREATER_THAN_B\"] = 1] = \"A_GREATER_THAN_B\";\n})(CompareVal || (CompareVal = {}));\nfunction defaultStringComparator(a, b) {\n    if (a == null && b == null) {\n        return CompareVal.A_EQUALS_B;\n    }\n    if (a == null) {\n        return CompareVal.A_SMALLER_THAN_B;\n    }\n    if (b == null) {\n        return CompareVal.A_GREATER_THAN_B;\n    }\n    if (a < b)\n        return CompareVal.A_SMALLER_THAN_B;\n    if (a > b)\n        return CompareVal.A_GREATER_THAN_B;\n    return CompareVal.A_EQUALS_B;\n}\n\nfunction fieldAlreadyExists(fieldsArr, otherField, config) {\n    const result = fieldsArr.find(field => field.name.value === otherField.name.value);\n    if (result && !(config === null || config === void 0 ? void 0 : config.ignoreFieldConflicts)) {\n        const t1 = extractType(result.type);\n        const t2 = extractType(otherField.type);\n        if (t1.name.value !== t2.name.value) {\n            throw new Error(`Field \"${otherField.name.value}\" already defined with a different type. Declared as \"${t1.name.value}\", but you tried to override with \"${t2.name.value}\"`);\n        }\n    }\n    return !!result;\n}\nfunction mergeFields(type, f1, f2, config) {\n    const result = [];\n    if (f2 != null) {\n        result.push(...f2);\n    }\n    if (f1 != null) {\n        for (const field of f1) {\n            if (fieldAlreadyExists(result, field, config)) {\n                const existing = result.find((f) => f.name.value === field.name.value);\n                if (!(config === null || config === void 0 ? void 0 : config.ignoreFieldConflicts)) {\n                    if (config === null || config === void 0 ? void 0 : config.throwOnConflict) {\n                        preventConflicts(type, existing, field, false);\n                    }\n                    else {\n                        preventConflicts(type, existing, field, true);\n                    }\n                    if (isNonNullTypeNode(field.type) && !isNonNullTypeNode(existing.type)) {\n                        existing.type = field.type;\n                    }\n                }\n                existing.arguments = mergeArguments(field['arguments'] || [], existing.arguments || [], config);\n                existing.directives = mergeDirectives(field.directives, existing.directives, config);\n                existing.description = field.description || existing.description;\n            }\n            else {\n                result.push(field);\n            }\n        }\n    }\n    if (config && config.sort) {\n        result.sort(compareNodes);\n    }\n    if (config && config.exclusions) {\n        const exclusions = config.exclusions;\n        return result.filter(field => !exclusions.includes(`${type.name.value}.${field.name.value}`));\n    }\n    return result;\n}\nfunction preventConflicts(type, a, b, ignoreNullability = false) {\n    const aType = printTypeNode(a.type);\n    const bType = printTypeNode(b.type);\n    if (aType !== bType && !safeChangeForFieldType(a.type, b.type, ignoreNullability)) {\n        throw new Error(`Field '${type.name.value}.${a.name.value}' changed type from '${aType}' to '${bType}'`);\n    }\n}\nfunction safeChangeForFieldType(oldType, newType, ignoreNullability = false) {\n    // both are named\n    if (!isWrappingTypeNode(oldType) && !isWrappingTypeNode(newType)) {\n        return oldType.toString() === newType.toString();\n    }\n    // new is non-null\n    if (isNonNullTypeNode(newType)) {\n        const ofType = isNonNullTypeNode(oldType) ? oldType.type : oldType;\n        return safeChangeForFieldType(ofType, newType.type);\n    }\n    // old is non-null\n    if (isNonNullTypeNode(oldType)) {\n        return safeChangeForFieldType(newType, oldType, ignoreNullability);\n    }\n    // old is list\n    if (isListTypeNode(oldType)) {\n        return ((isListTypeNode(newType) && safeChangeForFieldType(oldType.type, newType.type)) ||\n            (isNonNullTypeNode(newType) && safeChangeForFieldType(oldType, newType['type'])));\n    }\n    return false;\n}\n\nfunction mergeInputType(node, existingNode, config) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                    node.kind === 'InputObjectTypeDefinition' ||\n                    existingNode.kind === 'InputObjectTypeDefinition'\n                    ? 'InputObjectTypeDefinition'\n                    : 'InputObjectTypeExtension',\n                loc: node.loc,\n                fields: mergeFields(node, node.fields, existingNode.fields, config),\n                directives: mergeDirectives(node.directives, existingNode.directives, config),\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL input type \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        }\n        : node;\n}\n\nfunction mergeInterface(node, existingNode, config) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                    node.kind === 'InterfaceTypeDefinition' ||\n                    existingNode.kind === 'InterfaceTypeDefinition'\n                    ? 'InterfaceTypeDefinition'\n                    : 'InterfaceTypeExtension',\n                loc: node.loc,\n                fields: mergeFields(node, node.fields, existingNode.fields, config),\n                directives: mergeDirectives(node.directives, existingNode.directives, config),\n                interfaces: node['interfaces']\n                    ? mergeNamedTypeArray(node['interfaces'], existingNode['interfaces'], config)\n                    : undefined,\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL interface \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: Kind.INTERFACE_TYPE_DEFINITION,\n        }\n        : node;\n}\n\nfunction alreadyExists(arr, other) {\n    return !!arr.find(i => i.name.value === other.name.value);\n}\nfunction mergeNamedTypeArray(first = [], second = [], config = {}) {\n    const result = [...second, ...first.filter(d => !alreadyExists(second, d))];\n    if (config && config.sort) {\n        result.sort(compareNodes);\n    }\n    return result;\n}\n\nfunction mergeType(node, existingNode, config) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                    node.kind === 'ObjectTypeDefinition' ||\n                    existingNode.kind === 'ObjectTypeDefinition'\n                    ? 'ObjectTypeDefinition'\n                    : 'ObjectTypeExtension',\n                loc: node.loc,\n                fields: mergeFields(node, node.fields, existingNode.fields, config),\n                directives: mergeDirectives(node.directives, existingNode.directives, config),\n                interfaces: mergeNamedTypeArray(node.interfaces, existingNode.interfaces, config),\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL type \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: Kind.OBJECT_TYPE_DEFINITION,\n        }\n        : node;\n}\n\nfunction mergeScalar(node, existingNode, config) {\n    if (existingNode) {\n        return {\n            name: node.name,\n            description: node['description'] || existingNode['description'],\n            kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                node.kind === 'ScalarTypeDefinition' ||\n                existingNode.kind === 'ScalarTypeDefinition'\n                ? 'ScalarTypeDefinition'\n                : 'ScalarTypeExtension',\n            loc: node.loc,\n            directives: mergeDirectives(node.directives, existingNode.directives, config),\n        };\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: Kind.SCALAR_TYPE_DEFINITION,\n        }\n        : node;\n}\n\nfunction mergeUnion(first, second, config) {\n    if (second) {\n        return {\n            name: first.name,\n            description: first['description'] || second['description'],\n            // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n            directives: mergeDirectives(first.directives, second.directives, config),\n            kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) || first.kind === 'UnionTypeDefinition' || second.kind === 'UnionTypeDefinition'\n                ? Kind.UNION_TYPE_DEFINITION\n                : Kind.UNION_TYPE_EXTENSION,\n            loc: first.loc,\n            types: mergeNamedTypeArray(first.types, second.types, config),\n        };\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...first,\n            kind: Kind.UNION_TYPE_DEFINITION,\n        }\n        : first;\n}\n\nconst DEFAULT_OPERATION_TYPE_NAME_MAP = {\n    query: 'Query',\n    mutation: 'Mutation',\n    subscription: 'Subscription',\n};\nfunction mergeOperationTypes(opNodeList = [], existingOpNodeList = []) {\n    const finalOpNodeList = [];\n    for (const opNodeType in DEFAULT_OPERATION_TYPE_NAME_MAP) {\n        const opNode = opNodeList.find(n => n.operation === opNodeType) || existingOpNodeList.find(n => n.operation === opNodeType);\n        if (opNode) {\n            finalOpNodeList.push(opNode);\n        }\n    }\n    return finalOpNodeList;\n}\nfunction mergeSchemaDefs(node, existingNode, config) {\n    if (existingNode) {\n        return {\n            kind: node.kind === Kind.SCHEMA_DEFINITION || existingNode.kind === Kind.SCHEMA_DEFINITION\n                ? Kind.SCHEMA_DEFINITION\n                : Kind.SCHEMA_EXTENSION,\n            description: node['description'] || existingNode['description'],\n            directives: mergeDirectives(node.directives, existingNode.directives, config),\n            operationTypes: mergeOperationTypes(node.operationTypes, existingNode.operationTypes),\n        };\n    }\n    return ((config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: Kind.SCHEMA_DEFINITION,\n        }\n        : node);\n}\n\nconst schemaDefSymbol = 'SCHEMA_DEF_SYMBOL';\nfunction isNamedDefinitionNode(definitionNode) {\n    return 'name' in definitionNode;\n}\nfunction mergeGraphQLNodes(nodes, config) {\n    var _a, _b, _c;\n    const mergedResultMap = {};\n    for (const nodeDefinition of nodes) {\n        if (isNamedDefinitionNode(nodeDefinition)) {\n            const name = (_a = nodeDefinition.name) === null || _a === void 0 ? void 0 : _a.value;\n            if (config === null || config === void 0 ? void 0 : config.commentDescriptions) {\n                collectComment(nodeDefinition);\n            }\n            if (name == null) {\n                continue;\n            }\n            if (((_b = config === null || config === void 0 ? void 0 : config.exclusions) === null || _b === void 0 ? void 0 : _b.includes(name + '.*')) || ((_c = config === null || config === void 0 ? void 0 : config.exclusions) === null || _c === void 0 ? void 0 : _c.includes(name))) {\n                delete mergedResultMap[name];\n            }\n            else {\n                switch (nodeDefinition.kind) {\n                    case Kind.OBJECT_TYPE_DEFINITION:\n                    case Kind.OBJECT_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeType(nodeDefinition, mergedResultMap[name], config);\n                        break;\n                    case Kind.ENUM_TYPE_DEFINITION:\n                    case Kind.ENUM_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeEnum(nodeDefinition, mergedResultMap[name], config);\n                        break;\n                    case Kind.UNION_TYPE_DEFINITION:\n                    case Kind.UNION_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeUnion(nodeDefinition, mergedResultMap[name], config);\n                        break;\n                    case Kind.SCALAR_TYPE_DEFINITION:\n                    case Kind.SCALAR_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeScalar(nodeDefinition, mergedResultMap[name], config);\n                        break;\n                    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n                    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeInputType(nodeDefinition, mergedResultMap[name], config);\n                        break;\n                    case Kind.INTERFACE_TYPE_DEFINITION:\n                    case Kind.INTERFACE_TYPE_EXTENSION:\n                        mergedResultMap[name] = mergeInterface(nodeDefinition, mergedResultMap[name], config);\n                        break;\n                    case Kind.DIRECTIVE_DEFINITION:\n                        mergedResultMap[name] = mergeDirective(nodeDefinition, mergedResultMap[name]);\n                        break;\n                }\n            }\n        }\n        else if (nodeDefinition.kind === Kind.SCHEMA_DEFINITION || nodeDefinition.kind === Kind.SCHEMA_EXTENSION) {\n            mergedResultMap[schemaDefSymbol] = mergeSchemaDefs(nodeDefinition, mergedResultMap[schemaDefSymbol], config);\n        }\n    }\n    return mergedResultMap;\n}\n\nfunction mergeTypeDefs(typeSource, config) {\n    resetComments();\n    const doc = {\n        kind: Kind.DOCUMENT,\n        definitions: mergeGraphQLTypes(typeSource, {\n            useSchemaDefinition: true,\n            forceSchemaDefinition: false,\n            throwOnConflict: false,\n            commentDescriptions: false,\n            ...config,\n        }),\n    };\n    let result;\n    if (config === null || config === void 0 ? void 0 : config.commentDescriptions) {\n        result = printWithComments(doc);\n    }\n    else {\n        result = doc;\n    }\n    resetComments();\n    return result;\n}\nfunction visitTypeSources(typeSource, options, allNodes = [], visitedTypeSources = new Set()) {\n    if (typeSource && !visitedTypeSources.has(typeSource)) {\n        visitedTypeSources.add(typeSource);\n        if (typeof typeSource === 'function') {\n            visitTypeSources(typeSource(), options, allNodes, visitedTypeSources);\n        }\n        else if (Array.isArray(typeSource)) {\n            for (const type of typeSource) {\n                visitTypeSources(type, options, allNodes, visitedTypeSources);\n            }\n        }\n        else if (isSchema(typeSource)) {\n            const documentNode = getDocumentNodeFromSchema(typeSource, options);\n            visitTypeSources(documentNode.definitions, options, allNodes, visitedTypeSources);\n        }\n        else if (isStringTypes(typeSource) || isSourceTypes(typeSource)) {\n            const documentNode = parse(typeSource, options);\n            visitTypeSources(documentNode.definitions, options, allNodes, visitedTypeSources);\n        }\n        else if (typeof typeSource === 'object' && isDefinitionNode(typeSource)) {\n            allNodes.push(typeSource);\n        }\n        else if (isDocumentNode(typeSource)) {\n            visitTypeSources(typeSource.definitions, options, allNodes, visitedTypeSources);\n        }\n        else {\n            throw new Error(`typeDefs must contain only strings, documents, schemas, or functions, got ${typeof typeSource}`);\n        }\n    }\n    return allNodes;\n}\nfunction mergeGraphQLTypes(typeSource, config) {\n    var _a, _b, _c;\n    resetComments();\n    const allNodes = visitTypeSources(typeSource, config);\n    const mergedNodes = mergeGraphQLNodes(allNodes, config);\n    if (config === null || config === void 0 ? void 0 : config.useSchemaDefinition) {\n        // XXX: right now we don't handle multiple schema definitions\n        const schemaDef = mergedNodes[schemaDefSymbol] || {\n            kind: Kind.SCHEMA_DEFINITION,\n            operationTypes: [],\n        };\n        const operationTypes = schemaDef.operationTypes;\n        for (const opTypeDefNodeType in DEFAULT_OPERATION_TYPE_NAME_MAP) {\n            const opTypeDefNode = operationTypes.find(operationType => operationType.operation === opTypeDefNodeType);\n            if (!opTypeDefNode) {\n                const possibleRootTypeName = DEFAULT_OPERATION_TYPE_NAME_MAP[opTypeDefNodeType];\n                const existingPossibleRootType = mergedNodes[possibleRootTypeName];\n                if (existingPossibleRootType != null && existingPossibleRootType.name != null) {\n                    operationTypes.push({\n                        kind: Kind.OPERATION_TYPE_DEFINITION,\n                        type: {\n                            kind: Kind.NAMED_TYPE,\n                            name: existingPossibleRootType.name,\n                        },\n                        operation: opTypeDefNodeType,\n                    });\n                }\n            }\n        }\n        if (((_a = schemaDef === null || schemaDef === void 0 ? void 0 : schemaDef.operationTypes) === null || _a === void 0 ? void 0 : _a.length) != null && schemaDef.operationTypes.length > 0) {\n            mergedNodes[schemaDefSymbol] = schemaDef;\n        }\n    }\n    if ((config === null || config === void 0 ? void 0 : config.forceSchemaDefinition) && !((_c = (_b = mergedNodes[schemaDefSymbol]) === null || _b === void 0 ? void 0 : _b.operationTypes) === null || _c === void 0 ? void 0 : _c.length)) {\n        mergedNodes[schemaDefSymbol] = {\n            kind: Kind.SCHEMA_DEFINITION,\n            operationTypes: [\n                {\n                    kind: Kind.OPERATION_TYPE_DEFINITION,\n                    operation: 'query',\n                    type: {\n                        kind: Kind.NAMED_TYPE,\n                        name: {\n                            kind: Kind.NAME,\n                            value: 'Query',\n                        },\n                    },\n                },\n            ],\n        };\n    }\n    const mergedNodeDefinitions = Object.values(mergedNodes);\n    if (config === null || config === void 0 ? void 0 : config.sort) {\n        const sortFn = typeof config.sort === 'function' ? config.sort : defaultStringComparator;\n        mergedNodeDefinitions.sort((a, b) => { var _a, _b; return sortFn((_a = a.name) === null || _a === void 0 ? void 0 : _a.value, (_b = b.name) === null || _b === void 0 ? void 0 : _b.value); });\n    }\n    return mergedNodeDefinitions;\n}\n\nfunction travelSchemaPossibleExtensions(schema, hooks) {\n    hooks.onSchema(schema);\n    const typesMap = schema.getTypeMap();\n    for (const [, type] of Object.entries(typesMap)) {\n        const isPredefinedScalar = isScalarType(type) && isSpecifiedScalarType(type);\n        const isIntrospection = isIntrospectionType(type);\n        if (isPredefinedScalar || isIntrospection) {\n            continue;\n        }\n        if (isObjectType(type)) {\n            hooks.onObjectType(type);\n            const fields = type.getFields();\n            for (const [, field] of Object.entries(fields)) {\n                hooks.onObjectField(type, field);\n                const args = field.args || [];\n                for (const arg of args) {\n                    hooks.onObjectFieldArg(type, field, arg);\n                }\n            }\n        }\n        else if (isInterfaceType(type)) {\n            hooks.onInterface(type);\n            const fields = type.getFields();\n            for (const [, field] of Object.entries(fields)) {\n                hooks.onInterfaceField(type, field);\n                const args = field.args || [];\n                for (const arg of args) {\n                    hooks.onInterfaceFieldArg(type, field, arg);\n                }\n            }\n        }\n        else if (isInputObjectType(type)) {\n            hooks.onInputType(type);\n            const fields = type.getFields();\n            for (const [, field] of Object.entries(fields)) {\n                hooks.onInputFieldType(type, field);\n            }\n        }\n        else if (isUnionType(type)) {\n            hooks.onUnion(type);\n        }\n        else if (isScalarType(type)) {\n            hooks.onScalar(type);\n        }\n        else if (isEnumType(type)) {\n            hooks.onEnum(type);\n            for (const value of type.getValues()) {\n                hooks.onEnumValue(type, value);\n            }\n        }\n    }\n}\nfunction mergeExtensions(extensions) {\n    return mergeDeep(extensions);\n}\nfunction applyExtensionObject(obj, extensions) {\n    if (!obj) {\n        return;\n    }\n    obj.extensions = mergeDeep([obj.extensions || {}, extensions || {}]);\n}\nfunction applyExtensions(schema, extensions) {\n    applyExtensionObject(schema, extensions.schemaExtensions);\n    for (const [typeName, data] of Object.entries(extensions.types || {})) {\n        const type = schema.getType(typeName);\n        if (type) {\n            applyExtensionObject(type, data.extensions);\n            if (data.type === 'object' || data.type === 'interface') {\n                for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n                    const field = type.getFields()[fieldName];\n                    if (field) {\n                        applyExtensionObject(field, fieldData.extensions);\n                        for (const [arg, argData] of Object.entries(fieldData.arguments)) {\n                            applyExtensionObject(field.args.find(a => a.name === arg), argData);\n                        }\n                    }\n                }\n            }\n            else if (data.type === 'input') {\n                for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n                    const field = type.getFields()[fieldName];\n                    applyExtensionObject(field, fieldData.extensions);\n                }\n            }\n            else if (data.type === 'enum') {\n                for (const [valueName, valueData] of Object.entries(data.values)) {\n                    const value = type.getValue(valueName);\n                    applyExtensionObject(value, valueData);\n                }\n            }\n        }\n    }\n    return schema;\n}\nfunction extractExtensionsFromSchema(schema) {\n    const result = {\n        schemaExtensions: {},\n        types: {},\n    };\n    travelSchemaPossibleExtensions(schema, {\n        onSchema: schema => (result.schemaExtensions = schema.extensions || {}),\n        onObjectType: type => (result.types[type.name] = { fields: {}, type: 'object', extensions: type.extensions || {} }),\n        onObjectField: (type, field) => (result.types[type.name].fields[field.name] = {\n            arguments: {},\n            extensions: field.extensions || {},\n        }),\n        onObjectFieldArg: (type, field, arg) => (result.types[type.name].fields[field.name].arguments[arg.name] = arg.extensions || {}),\n        onInterface: type => (result.types[type.name] = { fields: {}, type: 'interface', extensions: type.extensions || {} }),\n        onInterfaceField: (type, field) => (result.types[type.name].fields[field.name] = {\n            arguments: {},\n            extensions: field.extensions || {},\n        }),\n        onInterfaceFieldArg: (type, field, arg) => (result.types[type.name].fields[field.name].arguments[arg.name] =\n            arg.extensions || {}),\n        onEnum: type => (result.types[type.name] = { values: {}, type: 'enum', extensions: type.extensions || {} }),\n        onEnumValue: (type, value) => (result.types[type.name].values[value.name] = value.extensions || {}),\n        onScalar: type => (result.types[type.name] = { type: 'scalar', extensions: type.extensions || {} }),\n        onUnion: type => (result.types[type.name] = { type: 'union', extensions: type.extensions || {} }),\n        onInputType: type => (result.types[type.name] = { fields: {}, type: 'input', extensions: type.extensions || {} }),\n        onInputFieldType: (type, field) => (result.types[type.name].fields[field.name] = { extensions: field.extensions || {} }),\n    });\n    return result;\n}\n\nexport { CompareVal, applyExtensions, defaultStringComparator, extractExtensionsFromSchema, extractType, isListTypeNode, isNamedDefinitionNode, isNonNullTypeNode, isSourceTypes, isStringTypes, isWrappingTypeNode, mergeArguments, mergeDirective, mergeDirectives, mergeEnum, mergeEnumValues, mergeExtensions, mergeFields, mergeGraphQLNodes, mergeGraphQLTypes, mergeInputType, mergeInterface, mergeNamedTypeArray, mergeResolvers, mergeScalar, mergeType, mergeTypeDefs, mergeUnion, printTypeNode, schemaDefSymbol, travelSchemaPossibleExtensions };\n", "export function dset(obj, keys, val) {\n\tkeys.split && (keys=keys.split('.'));\n\tvar i=0, l=keys.length, t=obj, x, k;\n\twhile (i < l) {\n\t\tk = keys[i++];\n\t\tif (k === '__proto__' || k === 'constructor' || k === 'prototype') break;\n\t\tt = t[k] = (i === l) ? val : (typeof(x=t[k])===typeof(keys)) ? x : (keys[i]*0 !== 0 || !!~(''+keys[i]).indexOf('.')) ? {} : [];\n\t}\n}\n", "import { Repeater } from '@repeaterjs/repeater';\nexport { Repeater } from '@repeaterjs/repeater';\n\nconst resolveGlobalConfig = (api = globalThis) => {\n    if (!api.Event || !api.EventTarget) {\n        throw new Error(`\n[@graphql-yoga/subscription] 'createPubSub' uses the Event and EventTarget APIs.\n\nIn modern JavaScript environments those are part of the global scope. However, if you are using an older version of Node.js (< 16.x.x), those APIs must be polyfilled.\nYou can provide polyfills to the 'createPubSub' function:\n\n\\`\\`\\`\n// yarn install --exact event-target-polyfill@0.0.3\nimport 'event-target-polyfill'\n\nconst pubSub = createPubSub()\n\\`\\`\\`\n\nAlternatively, you can provide your own custom implementation.\n\n\\`\\`\\`\nconst pubSub = createPubSub({\n  event: {\n    Event,\n    EventTarget,\n  }\n})\n\\`\\`\\`\n`);\n    }\n    return globalThis;\n};\n/**\n * Utility for publishing and subscribing to events.\n */\nconst createPubSub = (config) => {\n    var _a;\n    const { Event, EventTarget } = resolveGlobalConfig(config === null || config === void 0 ? void 0 : config.event);\n    const target = (_a = config === null || config === void 0 ? void 0 : config.eventTarget) !== null && _a !== void 0 ? _a : new EventTarget();\n    return {\n        publish(routingKey, ...args) {\n            var _a;\n            const payload = (_a = args[1]) !== null && _a !== void 0 ? _a : args[0];\n            const topic = args[1] === undefined\n                ? routingKey\n                : `${routingKey}:${args[0]}`;\n            const event = new Event(topic);\n            event.data = payload;\n            target.dispatchEvent(event);\n        },\n        subscribe(...[routingKey, id]) {\n            const topic = id === undefined ? routingKey : `${routingKey}:${id}`;\n            return new Repeater(function subscriptionRepeater(next, stop) {\n                stop.then(function subscriptionRepeaterStopHandler() {\n                    target.removeEventListener(topic, pubsubEventListener);\n                });\n                target.addEventListener(topic, pubsubEventListener);\n                function pubsubEventListener(event) {\n                    next(event.data);\n                }\n            });\n        },\n    };\n};\n\n/**\n * Utility for mapping an event stream.\n */\nconst map = (mapper) => (source) => new Repeater(async (push, stop) => {\n    const iterable = source[Symbol.asyncIterator]();\n    stop.then(() => {\n        var _a;\n        (_a = iterable.return) === null || _a === void 0 ? void 0 : _a.call(iterable);\n    });\n    let latest;\n    while ((latest = await iterable.next()).done === false) {\n        await push(await mapper(latest.value));\n    }\n    stop();\n});\n\nfunction filter(filter) {\n    return (source) => new Repeater(async (push, stop) => {\n        const iterable = source[Symbol.asyncIterator]();\n        stop.then(() => {\n            var _a;\n            (_a = iterable.return) === null || _a === void 0 ? void 0 : _a.call(iterable);\n        });\n        let latest;\n        while ((latest = await iterable.next()).done === false) {\n            if (filter(latest.value)) {\n                await push(latest.value);\n            }\n        }\n        stop();\n    });\n}\n\nfunction pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {\n    switch (arguments.length) {\n        case 1:\n            return a;\n        case 2:\n            return ab(a);\n        case 3:\n            return bc(ab(a));\n        case 4:\n            return cd(bc(ab(a)));\n        case 5:\n            return de(cd(bc(ab(a))));\n        case 6:\n            return ef(de(cd(bc(ab(a)))));\n        case 7:\n            return fg(ef(de(cd(bc(ab(a))))));\n        case 8:\n            return gh(fg(ef(de(cd(bc(ab(a)))))));\n        case 9:\n            return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n        default:\n            let ret = arguments[0];\n            for (let i = 1; i < arguments.length; i++) {\n                ret = arguments[i](ret);\n            }\n            return ret;\n    }\n}\n\nexport { createPubSub, filter, map, pipe };\n", "/// <reference types=\"./repeater.d.ts\" />\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\n\n/** An error subclass which is thrown when there are too many pending push or next operations on a single repeater. */\r\nvar RepeaterOverflowError = /** @class */ (function (_super) {\r\n    __extends(RepeaterOverflowError, _super);\r\n    function RepeaterOverflowError(message) {\r\n        var _this = _super.call(this, message) || this;\r\n        Object.defineProperty(_this, \"name\", {\r\n            value: \"RepeaterOverflowError\",\r\n            enumerable: false,\r\n        });\r\n        if (typeof Object.setPrototypeOf === \"function\") {\r\n            Object.setPrototypeOf(_this, _this.constructor.prototype);\r\n        }\r\n        else {\r\n            _this.__proto__ = _this.constructor.prototype;\r\n        }\r\n        if (typeof Error.captureStackTrace === \"function\") {\r\n            Error.captureStackTrace(_this, _this.constructor);\r\n        }\r\n        return _this;\r\n    }\r\n    return RepeaterOverflowError;\r\n}(Error));\r\n/** A buffer which allows you to push a set amount of values to the repeater without pushes waiting or throwing errors. */\r\nvar FixedBuffer = /** @class */ (function () {\r\n    function FixedBuffer(capacity) {\r\n        if (capacity < 0) {\r\n            throw new RangeError(\"Capacity may not be less than 0\");\r\n        }\r\n        this._c = capacity;\r\n        this._q = [];\r\n    }\r\n    Object.defineProperty(FixedBuffer.prototype, \"empty\", {\r\n        get: function () {\r\n            return this._q.length === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(FixedBuffer.prototype, \"full\", {\r\n        get: function () {\r\n            return this._q.length >= this._c;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    FixedBuffer.prototype.add = function (value) {\r\n        if (this.full) {\r\n            throw new Error(\"Buffer full\");\r\n        }\r\n        else {\r\n            this._q.push(value);\r\n        }\r\n    };\r\n    FixedBuffer.prototype.remove = function () {\r\n        if (this.empty) {\r\n            throw new Error(\"Buffer empty\");\r\n        }\r\n        return this._q.shift();\r\n    };\r\n    return FixedBuffer;\r\n}());\r\n// TODO: Use a circular buffer here.\r\n/** Sliding buffers allow you to push a set amount of values to the repeater without pushes waiting or throwing errors. If the number of values exceeds the capacity set in the constructor, the buffer will discard the earliest values added. */\r\nvar SlidingBuffer = /** @class */ (function () {\r\n    function SlidingBuffer(capacity) {\r\n        if (capacity < 1) {\r\n            throw new RangeError(\"Capacity may not be less than 1\");\r\n        }\r\n        this._c = capacity;\r\n        this._q = [];\r\n    }\r\n    Object.defineProperty(SlidingBuffer.prototype, \"empty\", {\r\n        get: function () {\r\n            return this._q.length === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SlidingBuffer.prototype, \"full\", {\r\n        get: function () {\r\n            return false;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    SlidingBuffer.prototype.add = function (value) {\r\n        while (this._q.length >= this._c) {\r\n            this._q.shift();\r\n        }\r\n        this._q.push(value);\r\n    };\r\n    SlidingBuffer.prototype.remove = function () {\r\n        if (this.empty) {\r\n            throw new Error(\"Buffer empty\");\r\n        }\r\n        return this._q.shift();\r\n    };\r\n    return SlidingBuffer;\r\n}());\r\n/** Dropping buffers allow you to push a set amount of values to the repeater without the push function waiting or throwing errors. If the number of values exceeds the capacity set in the constructor, the buffer will discard the latest values added. */\r\nvar DroppingBuffer = /** @class */ (function () {\r\n    function DroppingBuffer(capacity) {\r\n        if (capacity < 1) {\r\n            throw new RangeError(\"Capacity may not be less than 1\");\r\n        }\r\n        this._c = capacity;\r\n        this._q = [];\r\n    }\r\n    Object.defineProperty(DroppingBuffer.prototype, \"empty\", {\r\n        get: function () {\r\n            return this._q.length === 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DroppingBuffer.prototype, \"full\", {\r\n        get: function () {\r\n            return false;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DroppingBuffer.prototype.add = function (value) {\r\n        if (this._q.length < this._c) {\r\n            this._q.push(value);\r\n        }\r\n    };\r\n    DroppingBuffer.prototype.remove = function () {\r\n        if (this.empty) {\r\n            throw new Error(\"Buffer empty\");\r\n        }\r\n        return this._q.shift();\r\n    };\r\n    return DroppingBuffer;\r\n}());\r\n/** Makes sure promise-likes don\u2019t cause unhandled rejections. */\r\nfunction swallow(value) {\r\n    if (value != null && typeof value.then === \"function\") {\r\n        value.then(NOOP, NOOP);\r\n    }\r\n}\r\n/*** REPEATER STATES ***/\r\n/** The following is an enumeration of all possible repeater states. These states are ordered, and a repeater may only advance to higher states. */\r\n/** The initial state of the repeater. */\r\nvar Initial = 0;\r\n/** Repeaters advance to this state the first time the next method is called on the repeater. */\r\nvar Started = 1;\r\n/** Repeaters advance to this state when the stop function is called. */\r\nvar Stopped = 2;\r\n/** Repeaters advance to this state when there are no values left to be pulled from the repeater. */\r\nvar Done = 3;\r\n/** Repeaters advance to this state if an error is thrown into the repeater. */\r\nvar Rejected = 4;\r\n/** The maximum number of push or next operations which may exist on a single repeater. */\r\nvar MAX_QUEUE_LENGTH = 1024;\r\nvar NOOP = function () { };\r\n/** A helper function used to mimic the behavior of async generators where the final iteration is consumed. */\r\nfunction consumeExecution(r) {\r\n    var err = r.err;\r\n    var execution = Promise.resolve(r.execution).then(function (value) {\r\n        if (err != null) {\r\n            throw err;\r\n        }\r\n        return value;\r\n    });\r\n    r.err = undefined;\r\n    r.execution = execution.then(function () { return undefined; }, function () { return undefined; });\r\n    return r.pending === undefined ? execution : r.pending.then(function () { return execution; });\r\n}\r\n/** A helper function for building iterations from values. Promises are unwrapped, so that iterations never have their value property set to a promise. */\r\nfunction createIteration(r, value) {\r\n    var done = r.state >= Done;\r\n    return Promise.resolve(value).then(function (value) {\r\n        if (!done && r.state >= Rejected) {\r\n            return consumeExecution(r).then(function (value) { return ({\r\n                value: value,\r\n                done: true,\r\n            }); });\r\n        }\r\n        return { value: value, done: done };\r\n    });\r\n}\r\n/**\r\n * This function is bound and passed to the executor as the stop argument.\r\n *\r\n * Advances state to Stopped.\r\n */\r\nfunction stop(r, err) {\r\n    var e_1, _a;\r\n    if (r.state >= Stopped) {\r\n        return;\r\n    }\r\n    r.state = Stopped;\r\n    r.onnext();\r\n    r.onstop();\r\n    if (r.err == null) {\r\n        r.err = err;\r\n    }\r\n    if (r.pushes.length === 0 &&\r\n        (typeof r.buffer === \"undefined\" || r.buffer.empty)) {\r\n        finish(r);\r\n    }\r\n    else {\r\n        try {\r\n            for (var _b = __values(r.pushes), _d = _b.next(); !_d.done; _d = _b.next()) {\r\n                var push_1 = _d.value;\r\n                push_1.resolve();\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (_d && !_d.done && (_a = _b.return)) _a.call(_b);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n    }\r\n}\r\n/**\r\n * The difference between stopping a repeater vs finishing a repeater is that stopping a repeater allows next to continue to drain values from the push queue and buffer, while finishing a repeater will clear all pending values and end iteration immediately. Once, a repeater is finished, all iterations will have the done property set to true.\r\n *\r\n * Advances state to Done.\r\n */\r\nfunction finish(r) {\r\n    var e_2, _a;\r\n    if (r.state >= Done) {\r\n        return;\r\n    }\r\n    if (r.state < Stopped) {\r\n        stop(r);\r\n    }\r\n    r.state = Done;\r\n    r.buffer = undefined;\r\n    try {\r\n        for (var _b = __values(r.nexts), _d = _b.next(); !_d.done; _d = _b.next()) {\r\n            var next = _d.value;\r\n            var execution = r.pending === undefined\r\n                ? consumeExecution(r)\r\n                : r.pending.then(function () { return consumeExecution(r); });\r\n            next.resolve(createIteration(r, execution));\r\n        }\r\n    }\r\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n    finally {\r\n        try {\r\n            if (_d && !_d.done && (_a = _b.return)) _a.call(_b);\r\n        }\r\n        finally { if (e_2) throw e_2.error; }\r\n    }\r\n    r.pushes = [];\r\n    r.nexts = [];\r\n}\r\n/**\r\n * Called when a promise passed to push rejects, or when a push call is unhandled.\r\n *\r\n * Advances state to Rejected.\r\n */\r\nfunction reject(r) {\r\n    if (r.state >= Rejected) {\r\n        return;\r\n    }\r\n    if (r.state < Done) {\r\n        finish(r);\r\n    }\r\n    r.state = Rejected;\r\n}\r\n/** This function is bound and passed to the executor as the push argument. */\r\nfunction push(r, value) {\r\n    swallow(value);\r\n    if (r.pushes.length >= MAX_QUEUE_LENGTH) {\r\n        throw new RepeaterOverflowError(\"No more than \" + MAX_QUEUE_LENGTH + \" pending calls to push are allowed on a single repeater.\");\r\n    }\r\n    else if (r.state >= Stopped) {\r\n        return Promise.resolve(undefined);\r\n    }\r\n    var valueP = r.pending === undefined\r\n        ? Promise.resolve(value)\r\n        : r.pending.then(function () { return value; });\r\n    valueP = valueP.catch(function (err) {\r\n        if (r.state < Stopped) {\r\n            r.err = err;\r\n        }\r\n        reject(r);\r\n        return undefined; // void :(\r\n    });\r\n    var nextP;\r\n    if (r.nexts.length) {\r\n        var next_1 = r.nexts.shift();\r\n        next_1.resolve(createIteration(r, valueP));\r\n        if (r.nexts.length) {\r\n            nextP = Promise.resolve(r.nexts[0].value);\r\n        }\r\n        else {\r\n            nextP = new Promise(function (resolve) { return (r.onnext = resolve); });\r\n        }\r\n    }\r\n    else if (typeof r.buffer !== \"undefined\" && !r.buffer.full) {\r\n        r.buffer.add(valueP);\r\n        nextP = Promise.resolve(undefined);\r\n    }\r\n    else {\r\n        nextP = new Promise(function (resolve) { return r.pushes.push({ resolve: resolve, value: valueP }); });\r\n    }\r\n    // If an error is thrown into the repeater via the next or throw methods, we give the repeater a chance to handle this by rejecting the promise returned from push. If the push call is not immediately handled we throw the next iteration of the repeater.\r\n    // To check that the promise returned from push is floating, we modify the then and catch methods of the returned promise so that they flip the floating flag. The push function actually does not return a promise, because modern engines do not call the then and catch methods on native promises. By making next a plain old javascript object, we ensure that the then and catch methods will be called.\r\n    var floating = true;\r\n    var next = {};\r\n    var unhandled = nextP.catch(function (err) {\r\n        if (floating) {\r\n            throw err;\r\n        }\r\n        return undefined; // void :(\r\n    });\r\n    next.then = function (onfulfilled, onrejected) {\r\n        floating = false;\r\n        return Promise.prototype.then.call(nextP, onfulfilled, onrejected);\r\n    };\r\n    next.catch = function (onrejected) {\r\n        floating = false;\r\n        return Promise.prototype.catch.call(nextP, onrejected);\r\n    };\r\n    next.finally = nextP.finally.bind(nextP);\r\n    r.pending = valueP\r\n        .then(function () { return unhandled; })\r\n        .catch(function (err) {\r\n        r.err = err;\r\n        reject(r);\r\n    });\r\n    return next;\r\n}\r\n/**\r\n * Creates the stop callable promise which is passed to the executor\r\n */\r\nfunction createStop(r) {\r\n    var stop1 = stop.bind(null, r);\r\n    var stopP = new Promise(function (resolve) { return (r.onstop = resolve); });\r\n    stop1.then = stopP.then.bind(stopP);\r\n    stop1.catch = stopP.catch.bind(stopP);\r\n    stop1.finally = stopP.finally.bind(stopP);\r\n    return stop1;\r\n}\r\n/**\r\n * Calls the executor passed into the constructor. This function is called the first time the next method is called on the repeater.\r\n *\r\n * Advances state to Started.\r\n */\r\nfunction execute(r) {\r\n    if (r.state >= Started) {\r\n        return;\r\n    }\r\n    r.state = Started;\r\n    var push1 = push.bind(null, r);\r\n    var stop1 = createStop(r);\r\n    r.execution = new Promise(function (resolve) { return resolve(r.executor(push1, stop1)); });\r\n    // TODO: We should consider stopping all repeaters when the executor settles.\r\n    r.execution.catch(function () { return stop(r); });\r\n}\r\nvar records = new WeakMap();\r\n// NOTE: While repeaters implement and are assignable to the AsyncGenerator interface, and you can use the types interchangeably, we don\u2019t use typescript\u2019s implements syntax here because this would make supporting earlier versions of typescript trickier. This is because TypeScript version 3.6 changed the iterator types by adding the TReturn and TNext type parameters.\r\nvar Repeater = /** @class */ (function () {\r\n    function Repeater(executor, buffer) {\r\n        records.set(this, {\r\n            executor: executor,\r\n            buffer: buffer,\r\n            err: undefined,\r\n            state: Initial,\r\n            pushes: [],\r\n            nexts: [],\r\n            pending: undefined,\r\n            execution: undefined,\r\n            onnext: NOOP,\r\n            onstop: NOOP,\r\n        });\r\n    }\r\n    Repeater.prototype.next = function (value) {\r\n        swallow(value);\r\n        var r = records.get(this);\r\n        if (r === undefined) {\r\n            throw new Error(\"WeakMap error\");\r\n        }\r\n        if (r.nexts.length >= MAX_QUEUE_LENGTH) {\r\n            throw new RepeaterOverflowError(\"No more than \" + MAX_QUEUE_LENGTH + \" pending calls to next are allowed on a single repeater.\");\r\n        }\r\n        if (r.state <= Initial) {\r\n            execute(r);\r\n        }\r\n        r.onnext(value);\r\n        if (typeof r.buffer !== \"undefined\" && !r.buffer.empty) {\r\n            var result = createIteration(r, r.buffer.remove());\r\n            if (r.pushes.length) {\r\n                var push_2 = r.pushes.shift();\r\n                r.buffer.add(push_2.value);\r\n                r.onnext = push_2.resolve;\r\n            }\r\n            return result;\r\n        }\r\n        else if (r.pushes.length) {\r\n            var push_3 = r.pushes.shift();\r\n            r.onnext = push_3.resolve;\r\n            return createIteration(r, push_3.value);\r\n        }\r\n        else if (r.state >= Stopped) {\r\n            finish(r);\r\n            return createIteration(r, consumeExecution(r));\r\n        }\r\n        return new Promise(function (resolve) { return r.nexts.push({ resolve: resolve, value: value }); });\r\n    };\r\n    Repeater.prototype.return = function (value) {\r\n        swallow(value);\r\n        var r = records.get(this);\r\n        if (r === undefined) {\r\n            throw new Error(\"WeakMap error\");\r\n        }\r\n        finish(r);\r\n        // We override the execution because return should always return the value passed in.\r\n        r.execution = Promise.resolve(r.execution).then(function () { return value; });\r\n        return createIteration(r, consumeExecution(r));\r\n    };\r\n    Repeater.prototype.throw = function (err) {\r\n        var r = records.get(this);\r\n        if (r === undefined) {\r\n            throw new Error(\"WeakMap error\");\r\n        }\r\n        if (r.state <= Initial ||\r\n            r.state >= Stopped ||\r\n            (typeof r.buffer !== \"undefined\" && !r.buffer.empty)) {\r\n            finish(r);\r\n            // If r.err is already set, that mean the repeater has already produced an error, so we throw that error rather than the error passed in, because doing so might be more informative for the caller.\r\n            if (r.err == null) {\r\n                r.err = err;\r\n            }\r\n            return createIteration(r, consumeExecution(r));\r\n        }\r\n        return this.next(Promise.reject(err));\r\n    };\r\n    Repeater.prototype[Symbol.asyncIterator] = function () {\r\n        return this;\r\n    };\r\n    // TODO: Remove these static methods from the class.\r\n    Repeater.race = race;\r\n    Repeater.merge = merge;\r\n    Repeater.zip = zip;\r\n    Repeater.latest = latest;\r\n    return Repeater;\r\n}());\r\n/*** COMBINATOR FUNCTIONS ***/\r\n// TODO: move these combinators to their own file.\r\nfunction getIterators(values, options) {\r\n    var e_3, _a;\r\n    var iters = [];\r\n    var _loop_1 = function (value) {\r\n        if (value != null && typeof value[Symbol.asyncIterator] === \"function\") {\r\n            iters.push(value[Symbol.asyncIterator]());\r\n        }\r\n        else if (value != null && typeof value[Symbol.iterator] === \"function\") {\r\n            iters.push(value[Symbol.iterator]());\r\n        }\r\n        else {\r\n            iters.push((function valueToAsyncIterator() {\r\n                return __asyncGenerator(this, arguments, function valueToAsyncIterator_1() {\r\n                    return __generator(this, function (_a) {\r\n                        switch (_a.label) {\r\n                            case 0:\r\n                                if (!options.yieldValues) return [3 /*break*/, 3];\r\n                                return [4 /*yield*/, __await(value)];\r\n                            case 1: return [4 /*yield*/, _a.sent()];\r\n                            case 2:\r\n                                _a.sent();\r\n                                _a.label = 3;\r\n                            case 3:\r\n                                if (!options.returnValues) return [3 /*break*/, 5];\r\n                                return [4 /*yield*/, __await(value)];\r\n                            case 4: return [2 /*return*/, _a.sent()];\r\n                            case 5: return [2 /*return*/];\r\n                        }\r\n                    });\r\n                });\r\n            })());\r\n        }\r\n    };\r\n    try {\r\n        for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {\r\n            var value = values_1_1.value;\r\n            _loop_1(value);\r\n        }\r\n    }\r\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n    finally {\r\n        try {\r\n            if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);\r\n        }\r\n        finally { if (e_3) throw e_3.error; }\r\n    }\r\n    return iters;\r\n}\r\n// NOTE: whenever you see any variables called `advance` or `advances`, know that it is a hack to get around the fact that `Promise.race` leaks memory. These variables are intended to be set to the resolve function of a promise which is constructed and awaited as an alternative to Promise.race. For more information, see this comment in the Node.js issue tracker: https://github.com/nodejs/node/issues/17469#issuecomment-685216777.\r\nfunction race(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, { returnValues: true });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advance, stopped, finalIteration, iteration, i_1, _loop_2;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/];\r\n                    }\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        advance();\r\n                        stopped = true;\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 5, 7]);\r\n                    iteration = void 0;\r\n                    i_1 = 0;\r\n                    _loop_2 = function () {\r\n                        var j, iters_1, iters_1_1, iter;\r\n                        var e_4, _a;\r\n                        return __generator(this, function (_b) {\r\n                            switch (_b.label) {\r\n                                case 0:\r\n                                    j = i_1;\r\n                                    try {\r\n                                        for (iters_1 = (e_4 = void 0, __values(iters)), iters_1_1 = iters_1.next(); !iters_1_1.done; iters_1_1 = iters_1.next()) {\r\n                                            iter = iters_1_1.value;\r\n                                            Promise.resolve(iter.next()).then(function (iteration) {\r\n                                                if (iteration.done) {\r\n                                                    stop();\r\n                                                    if (finalIteration === undefined) {\r\n                                                        finalIteration = iteration;\r\n                                                    }\r\n                                                }\r\n                                                else if (i_1 === j) {\r\n                                                    // This iterator has won, advance i and resolve the promise.\r\n                                                    i_1++;\r\n                                                    advance(iteration);\r\n                                                }\r\n                                            }, function (err) { return stop(err); });\r\n                                        }\r\n                                    }\r\n                                    catch (e_4_1) { e_4 = { error: e_4_1 }; }\r\n                                    finally {\r\n                                        try {\r\n                                            if (iters_1_1 && !iters_1_1.done && (_a = iters_1.return)) _a.call(iters_1);\r\n                                        }\r\n                                        finally { if (e_4) throw e_4.error; }\r\n                                    }\r\n                                    return [4 /*yield*/, new Promise(function (resolve) { return (advance = resolve); })];\r\n                                case 1:\r\n                                    iteration = _b.sent();\r\n                                    if (!(iteration !== undefined)) return [3 /*break*/, 3];\r\n                                    return [4 /*yield*/, push(iteration.value)];\r\n                                case 2:\r\n                                    _b.sent();\r\n                                    _b.label = 3;\r\n                                case 3: return [2 /*return*/];\r\n                            }\r\n                        });\r\n                    };\r\n                    _a.label = 2;\r\n                case 2:\r\n                    if (!!stopped) return [3 /*break*/, 4];\r\n                    return [5 /*yield**/, _loop_2()];\r\n                case 3:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 2];\r\n                case 4: return [2 /*return*/, finalIteration && finalIteration.value];\r\n                case 5:\r\n                    stop();\r\n                    return [4 /*yield*/, Promise.race(iters.map(function (iter) { return iter.return && iter.return(); }))];\r\n                case 6:\r\n                    _a.sent();\r\n                    return [7 /*endfinally*/];\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nfunction merge(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, { yieldValues: true });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advances, stopped, finalIteration;\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/];\r\n                    }\r\n                    advances = [];\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        var e_5, _a;\r\n                        stopped = true;\r\n                        try {\r\n                            for (var advances_1 = __values(advances), advances_1_1 = advances_1.next(); !advances_1_1.done; advances_1_1 = advances_1.next()) {\r\n                                var advance = advances_1_1.value;\r\n                                advance();\r\n                            }\r\n                        }\r\n                        catch (e_5_1) { e_5 = { error: e_5_1 }; }\r\n                        finally {\r\n                            try {\r\n                                if (advances_1_1 && !advances_1_1.done && (_a = advances_1.return)) _a.call(advances_1);\r\n                            }\r\n                            finally { if (e_5) throw e_5.error; }\r\n                        }\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 3, 4]);\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter, i) { return __awaiter(_this, void 0, void 0, function () {\r\n                            var iteration, _a;\r\n                            return __generator(this, function (_b) {\r\n                                switch (_b.label) {\r\n                                    case 0:\r\n                                        _b.trys.push([0, , 6, 9]);\r\n                                        _b.label = 1;\r\n                                    case 1:\r\n                                        if (!!stopped) return [3 /*break*/, 5];\r\n                                        Promise.resolve(iter.next()).then(function (iteration) { return advances[i](iteration); }, function (err) { return stop(err); });\r\n                                        return [4 /*yield*/, new Promise(function (resolve) {\r\n                                                advances[i] = resolve;\r\n                                            })];\r\n                                    case 2:\r\n                                        iteration = _b.sent();\r\n                                        if (!(iteration !== undefined)) return [3 /*break*/, 4];\r\n                                        if (iteration.done) {\r\n                                            finalIteration = iteration;\r\n                                            return [2 /*return*/];\r\n                                        }\r\n                                        return [4 /*yield*/, push(iteration.value)];\r\n                                    case 3:\r\n                                        _b.sent();\r\n                                        _b.label = 4;\r\n                                    case 4: return [3 /*break*/, 1];\r\n                                    case 5: return [3 /*break*/, 9];\r\n                                    case 6:\r\n                                        _a = iter.return;\r\n                                        if (!_a) return [3 /*break*/, 8];\r\n                                        return [4 /*yield*/, iter.return()];\r\n                                    case 7:\r\n                                        _a = (_b.sent());\r\n                                        _b.label = 8;\r\n                                    case 8:\r\n                                        return [7 /*endfinally*/];\r\n                                    case 9: return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        }); }))];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [2 /*return*/, finalIteration && finalIteration.value];\r\n                case 3:\r\n                    stop();\r\n                    return [7 /*endfinally*/];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nfunction zip(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, { returnValues: true });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advance, stopped, iterations, values;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/, []];\r\n                    }\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        advance();\r\n                        stopped = true;\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 6, 8]);\r\n                    _a.label = 2;\r\n                case 2:\r\n                    if (!!stopped) return [3 /*break*/, 5];\r\n                    Promise.all(iters.map(function (iter) { return iter.next(); })).then(function (iterations) { return advance(iterations); }, function (err) { return stop(err); });\r\n                    return [4 /*yield*/, new Promise(function (resolve) { return (advance = resolve); })];\r\n                case 3:\r\n                    iterations = _a.sent();\r\n                    if (iterations === undefined) {\r\n                        return [2 /*return*/];\r\n                    }\r\n                    values = iterations.map(function (iteration) { return iteration.value; });\r\n                    if (iterations.some(function (iteration) { return iteration.done; })) {\r\n                        return [2 /*return*/, values];\r\n                    }\r\n                    return [4 /*yield*/, push(values)];\r\n                case 4:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 2];\r\n                case 5: return [3 /*break*/, 8];\r\n                case 6:\r\n                    stop();\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter) { return iter.return && iter.return(); }))];\r\n                case 7:\r\n                    _a.sent();\r\n                    return [7 /*endfinally*/];\r\n                case 8: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\r\nfunction latest(contenders) {\r\n    var _this = this;\r\n    var iters = getIterators(contenders, {\r\n        yieldValues: true,\r\n        returnValues: true,\r\n    });\r\n    return new Repeater(function (push, stop) { return __awaiter(_this, void 0, void 0, function () {\r\n        var advance, advances, stopped, iterations_1, values_2;\r\n        var _this = this;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!iters.length) {\r\n                        stop();\r\n                        return [2 /*return*/, []];\r\n                    }\r\n                    advances = [];\r\n                    stopped = false;\r\n                    stop.then(function () {\r\n                        var e_6, _a;\r\n                        advance();\r\n                        try {\r\n                            for (var advances_2 = __values(advances), advances_2_1 = advances_2.next(); !advances_2_1.done; advances_2_1 = advances_2.next()) {\r\n                                var advance1 = advances_2_1.value;\r\n                                advance1();\r\n                            }\r\n                        }\r\n                        catch (e_6_1) { e_6 = { error: e_6_1 }; }\r\n                        finally {\r\n                            try {\r\n                                if (advances_2_1 && !advances_2_1.done && (_a = advances_2.return)) _a.call(advances_2);\r\n                            }\r\n                            finally { if (e_6) throw e_6.error; }\r\n                        }\r\n                        stopped = true;\r\n                    });\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, , 5, 7]);\r\n                    Promise.all(iters.map(function (iter) { return iter.next(); })).then(function (iterations) { return advance(iterations); }, function (err) { return stop(err); });\r\n                    return [4 /*yield*/, new Promise(function (resolve) { return (advance = resolve); })];\r\n                case 2:\r\n                    iterations_1 = _a.sent();\r\n                    if (iterations_1 === undefined) {\r\n                        return [2 /*return*/];\r\n                    }\r\n                    values_2 = iterations_1.map(function (iteration) { return iteration.value; });\r\n                    if (iterations_1.every(function (iteration) { return iteration.done; })) {\r\n                        return [2 /*return*/, values_2];\r\n                    }\r\n                    // We continuously yield and mutate the same values array so we shallow copy it each time it is pushed.\r\n                    return [4 /*yield*/, push(values_2.slice())];\r\n                case 3:\r\n                    // We continuously yield and mutate the same values array so we shallow copy it each time it is pushed.\r\n                    _a.sent();\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter, i) { return __awaiter(_this, void 0, void 0, function () {\r\n                            var iteration;\r\n                            return __generator(this, function (_a) {\r\n                                switch (_a.label) {\r\n                                    case 0:\r\n                                        if (iterations_1[i].done) {\r\n                                            return [2 /*return*/, iterations_1[i].value];\r\n                                        }\r\n                                        _a.label = 1;\r\n                                    case 1:\r\n                                        if (!!stopped) return [3 /*break*/, 4];\r\n                                        Promise.resolve(iter.next()).then(function (iteration) { return advances[i](iteration); }, function (err) { return stop(err); });\r\n                                        return [4 /*yield*/, new Promise(function (resolve) { return (advances[i] = resolve); })];\r\n                                    case 2:\r\n                                        iteration = _a.sent();\r\n                                        if (iteration === undefined) {\r\n                                            return [2 /*return*/, iterations_1[i].value];\r\n                                        }\r\n                                        else if (iteration.done) {\r\n                                            return [2 /*return*/, iteration.value];\r\n                                        }\r\n                                        values_2[i] = iteration.value;\r\n                                        return [4 /*yield*/, push(values_2.slice())];\r\n                                    case 3:\r\n                                        _a.sent();\r\n                                        return [3 /*break*/, 1];\r\n                                    case 4: return [2 /*return*/];\r\n                                }\r\n                            });\r\n                        }); }))];\r\n                case 4: return [2 /*return*/, _a.sent()];\r\n                case 5:\r\n                    stop();\r\n                    return [4 /*yield*/, Promise.all(iters.map(function (iter) { return iter.return && iter.return(); }))];\r\n                case 6:\r\n                    _a.sent();\r\n                    return [7 /*endfinally*/];\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); });\r\n}\n\nexport { DroppingBuffer, FixedBuffer, MAX_QUEUE_LENGTH, Repeater, RepeaterOverflowError, SlidingBuffer };\n//# sourceMappingURL=repeater.js.map\n", "// @ts-nocheck\nimport { GraphQLResolveInfo, SelectionSetNode, FieldNode, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  _Any: any;\n};\n\nexport type Query = {\n  countries: Array<Country>;\n  country?: Maybe<Country>;\n  continents: Array<Continent>;\n  continent?: Maybe<Continent>;\n  languages: Array<Language>;\n  language?: Maybe<Language>;\n  _entities: Array<Maybe<_Entity>>;\n  allFilms?: Maybe<FilmsConnection>;\n  film?: Maybe<Film>;\n  allPeople?: Maybe<PeopleConnection>;\n  person?: Maybe<Person>;\n  allPlanets?: Maybe<PlanetsConnection>;\n  planet?: Maybe<Planet>;\n  allSpecies?: Maybe<SpeciesConnection>;\n  species?: Maybe<Species>;\n  allStarships?: Maybe<StarshipsConnection>;\n  starship?: Maybe<Starship>;\n  allVehicles?: Maybe<VehiclesConnection>;\n  vehicle?: Maybe<Vehicle>;\n  /** Fetches an object given its ID */\n  node?: Maybe<Node>;\n};\n\n\nexport type QuerycountriesArgs = {\n  filter?: InputMaybe<CountryFilterInput>;\n};\n\n\nexport type QuerycountryArgs = {\n  code: Scalars['ID'];\n};\n\n\nexport type QuerycontinentsArgs = {\n  filter?: InputMaybe<ContinentFilterInput>;\n};\n\n\nexport type QuerycontinentArgs = {\n  code: Scalars['ID'];\n};\n\n\nexport type QuerylanguagesArgs = {\n  filter?: InputMaybe<LanguageFilterInput>;\n};\n\n\nexport type QuerylanguageArgs = {\n  code: Scalars['ID'];\n};\n\n\nexport type Query_entitiesArgs = {\n  representations: Array<Scalars['_Any']>;\n};\n\n\nexport type QueryallFilmsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryfilmArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  filmID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type QueryallPeopleArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QuerypersonArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  personID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type QueryallPlanetsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryplanetArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  planetID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type QueryallSpeciesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryspeciesArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  speciesID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type QueryallStarshipsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QuerystarshipArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  starshipID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type QueryallVehiclesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryvehicleArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  vehicleID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type QuerynodeArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Country = {\n  code: Scalars['ID'];\n  name: Scalars['String'];\n  native: Scalars['String'];\n  phone: Scalars['String'];\n  continent: Continent;\n  capital?: Maybe<Scalars['String']>;\n  currency?: Maybe<Scalars['String']>;\n  languages: Array<Language>;\n  emoji: Scalars['String'];\n  emojiU: Scalars['String'];\n  states: Array<State>;\n};\n\nexport type Continent = {\n  code: Scalars['ID'];\n  name: Scalars['String'];\n  countries: Array<Country>;\n};\n\nexport type Language = {\n  code: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  native?: Maybe<Scalars['String']>;\n  rtl: Scalars['Boolean'];\n};\n\nexport type State = {\n  code?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  country: Country;\n};\n\nexport type StringQueryOperatorInput = {\n  eq?: InputMaybe<Scalars['String']>;\n  ne?: InputMaybe<Scalars['String']>;\n  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  nin?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  regex?: InputMaybe<Scalars['String']>;\n  glob?: InputMaybe<Scalars['String']>;\n};\n\nexport type CountryFilterInput = {\n  code?: InputMaybe<StringQueryOperatorInput>;\n  currency?: InputMaybe<StringQueryOperatorInput>;\n  continent?: InputMaybe<StringQueryOperatorInput>;\n};\n\nexport type ContinentFilterInput = {\n  code?: InputMaybe<StringQueryOperatorInput>;\n};\n\nexport type LanguageFilterInput = {\n  code?: InputMaybe<StringQueryOperatorInput>;\n};\n\nexport type _Entity = Country | Continent | Language;\n\n/** A connection to a list of items. */\nexport type FilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n};\n\n/** An edge in a connection. */\nexport type FilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A single film. */\nexport type Film = Node & {\n  /** The title of this film. */\n  title?: Maybe<Scalars['String']>;\n  /** The episode number of this film. */\n  episodeID?: Maybe<Scalars['Int']>;\n  /** The opening paragraphs at the beginning of this film. */\n  openingCrawl?: Maybe<Scalars['String']>;\n  /** The name of the director of this film. */\n  director?: Maybe<Scalars['String']>;\n  /** The name(s) of the producer(s) of this film. */\n  producers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The ISO 8601 date format of film release at original creator country. */\n  releaseDate?: Maybe<Scalars['String']>;\n  speciesConnection?: Maybe<FilmSpeciesConnection>;\n  starshipConnection?: Maybe<FilmStarshipsConnection>;\n  vehicleConnection?: Maybe<FilmVehiclesConnection>;\n  characterConnection?: Maybe<FilmCharactersConnection>;\n  planetConnection?: Maybe<FilmPlanetsConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/** A single film. */\nexport type FilmspeciesConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single film. */\nexport type FilmstarshipConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single film. */\nexport type FilmvehicleConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single film. */\nexport type FilmcharacterConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single film. */\nexport type FilmplanetConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** An object with an ID */\nexport type Node = {\n  /** The id of the object. */\n  id: Scalars['ID'];\n};\n\n/** A connection to a list of items. */\nexport type FilmSpeciesConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmSpeciesEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  species?: Maybe<Array<Maybe<Species>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmSpeciesEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Species>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A type of person or character within the Star Wars Universe. */\nexport type Species = Node & {\n  /** The name of this species. */\n  name?: Maybe<Scalars['String']>;\n  /** The classification of this species, such as \"mammal\" or \"reptile\". */\n  classification?: Maybe<Scalars['String']>;\n  /** The designation of this species, such as \"sentient\". */\n  designation?: Maybe<Scalars['String']>;\n  /** The average height of this species in centimeters. */\n  averageHeight?: Maybe<Scalars['Float']>;\n  /** The average lifespan of this species in years, null if unknown. */\n  averageLifespan?: Maybe<Scalars['Int']>;\n  /**\n   * Common eye colors for this species, null if this species does not typically\n   * have eyes.\n   */\n  eyeColors?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /**\n   * Common hair colors for this species, null if this species does not typically\n   * have hair.\n   */\n  hairColors?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /**\n   * Common skin colors for this species, null if this species does not typically\n   * have skin.\n   */\n  skinColors?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The language commonly spoken by this species. */\n  language?: Maybe<Scalars['String']>;\n  /** A planet that this species originates from. */\n  homeworld?: Maybe<Planet>;\n  personConnection?: Maybe<SpeciesPeopleConnection>;\n  filmConnection?: Maybe<SpeciesFilmsConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/** A type of person or character within the Star Wars Universe. */\nexport type SpeciespersonConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A type of person or character within the Star Wars Universe. */\nexport type SpeciesfilmConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type Planet = Node & {\n  /** The name of this planet. */\n  name?: Maybe<Scalars['String']>;\n  /** The diameter of this planet in kilometers. */\n  diameter?: Maybe<Scalars['Int']>;\n  /**\n   * The number of standard hours it takes for this planet to complete a single\n   * rotation on its axis.\n   */\n  rotationPeriod?: Maybe<Scalars['Int']>;\n  /**\n   * The number of standard days it takes for this planet to complete a single orbit\n   * of its local star.\n   */\n  orbitalPeriod?: Maybe<Scalars['Int']>;\n  /**\n   * A number denoting the gravity of this planet, where \"1\" is normal or 1 standard\n   * G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs.\n   */\n  gravity?: Maybe<Scalars['String']>;\n  /** The average population of sentient beings inhabiting this planet. */\n  population?: Maybe<Scalars['Float']>;\n  /** The climates of this planet. */\n  climates?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The terrains of this planet. */\n  terrains?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /**\n   * The percentage of the planet surface that is naturally occurring water or bodies\n   * of water.\n   */\n  surfaceWater?: Maybe<Scalars['Float']>;\n  residentConnection?: Maybe<PlanetResidentsConnection>;\n  filmConnection?: Maybe<PlanetFilmsConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type PlanetresidentConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type PlanetfilmConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A connection to a list of items. */\nexport type PlanetResidentsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetResidentsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  residents?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type PlanetResidentsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type Person = Node & {\n  /** The name of this person. */\n  name?: Maybe<Scalars['String']>;\n  /**\n   * The birth year of the person, using the in-universe standard of BBY or ABY -\n   * Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is\n   * a battle that occurs at the end of Star Wars episode IV: A New Hope.\n   */\n  birthYear?: Maybe<Scalars['String']>;\n  /**\n   * The eye color of this person. Will be \"unknown\" if not known or \"n/a\" if the\n   * person does not have an eye.\n   */\n  eyeColor?: Maybe<Scalars['String']>;\n  /**\n   * The gender of this person. Either \"Male\", \"Female\" or \"unknown\",\n   * \"n/a\" if the person does not have a gender.\n   */\n  gender?: Maybe<Scalars['String']>;\n  /**\n   * The hair color of this person. Will be \"unknown\" if not known or \"n/a\" if the\n   * person does not have hair.\n   */\n  hairColor?: Maybe<Scalars['String']>;\n  /** The height of the person in centimeters. */\n  height?: Maybe<Scalars['Int']>;\n  /** The mass of the person in kilograms. */\n  mass?: Maybe<Scalars['Float']>;\n  /** The skin color of this person. */\n  skinColor?: Maybe<Scalars['String']>;\n  /** A planet that this person was born on or inhabits. */\n  homeworld?: Maybe<Planet>;\n  filmConnection?: Maybe<PersonFilmsConnection>;\n  /** The species that this person belongs to, or null if unknown. */\n  species?: Maybe<Species>;\n  starshipConnection?: Maybe<PersonStarshipsConnection>;\n  vehicleConnection?: Maybe<PersonVehiclesConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonfilmConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonstarshipConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonvehicleConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A connection to a list of items. */\nexport type PersonFilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonFilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** An edge in a connection. */\nexport type PersonFilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type PersonStarshipsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonStarshipsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n};\n\n/** An edge in a connection. */\nexport type PersonStarshipsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A single transport craft that has hyperdrive capability. */\nexport type Starship = Node & {\n  /** The name of this starship. The common name, such as \"Death Star\". */\n  name?: Maybe<Scalars['String']>;\n  /**\n   * The model or official name of this starship. Such as \"T-65 X-wing\" or \"DS-1\n   * Orbital Battle Station\".\n   */\n  model?: Maybe<Scalars['String']>;\n  /**\n   * The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile\n   * Battlestation\"\n   */\n  starshipClass?: Maybe<Scalars['String']>;\n  /** The manufacturers of this starship. */\n  manufacturers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The cost of this starship new, in galactic credits. */\n  costInCredits?: Maybe<Scalars['Float']>;\n  /** The length of this starship in meters. */\n  length?: Maybe<Scalars['Float']>;\n  /** The number of personnel needed to run or pilot this starship. */\n  crew?: Maybe<Scalars['String']>;\n  /** The number of non-essential people this starship can transport. */\n  passengers?: Maybe<Scalars['String']>;\n  /**\n   * The maximum speed of this starship in atmosphere. null if this starship is\n   * incapable of atmosphering flight.\n   */\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>;\n  /** The class of this starships hyperdrive. */\n  hyperdriveRating?: Maybe<Scalars['Float']>;\n  /**\n   * The Maximum number of Megalights this starship can travel in a standard hour.\n   * A \"Megalight\" is a standard unit of distance and has never been defined before\n   * within the Star Wars universe. This figure is only really useful for measuring\n   * the difference in speed of starships. We can assume it is similar to AU, the\n   * distance between our Sun (Sol) and Earth.\n   */\n  MGLT?: Maybe<Scalars['Int']>;\n  /** The maximum number of kilograms that this starship can transport. */\n  cargoCapacity?: Maybe<Scalars['Float']>;\n  /**\n   * The maximum length of time that this starship can provide consumables for its\n   * entire crew without having to resupply.\n   */\n  consumables?: Maybe<Scalars['String']>;\n  pilotConnection?: Maybe<StarshipPilotsConnection>;\n  filmConnection?: Maybe<StarshipFilmsConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/** A single transport craft that has hyperdrive capability. */\nexport type StarshippilotConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single transport craft that has hyperdrive capability. */\nexport type StarshipfilmConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A connection to a list of items. */\nexport type StarshipPilotsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipPilotsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  pilots?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type StarshipPilotsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type StarshipFilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipFilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** An edge in a connection. */\nexport type StarshipFilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type PersonVehiclesConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonVehiclesEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type PersonVehiclesEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type Vehicle = Node & {\n  /**\n   * The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder\n   * bike\".\n   */\n  name?: Maybe<Scalars['String']>;\n  /**\n   * The model or official name of this vehicle. Such as \"All-Terrain Attack\n   * Transport\".\n   */\n  model?: Maybe<Scalars['String']>;\n  /** The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\". */\n  vehicleClass?: Maybe<Scalars['String']>;\n  /** The manufacturers of this vehicle. */\n  manufacturers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The cost of this vehicle new, in Galactic Credits. */\n  costInCredits?: Maybe<Scalars['Float']>;\n  /** The length of this vehicle in meters. */\n  length?: Maybe<Scalars['Float']>;\n  /** The number of personnel needed to run or pilot this vehicle. */\n  crew?: Maybe<Scalars['String']>;\n  /** The number of non-essential people this vehicle can transport. */\n  passengers?: Maybe<Scalars['String']>;\n  /** The maximum speed of this vehicle in atmosphere. */\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>;\n  /** The maximum number of kilograms that this vehicle can transport. */\n  cargoCapacity?: Maybe<Scalars['Float']>;\n  /**\n   * The maximum length of time that this vehicle can provide consumables for its\n   * entire crew without having to resupply.\n   */\n  consumables?: Maybe<Scalars['String']>;\n  pilotConnection?: Maybe<VehiclePilotsConnection>;\n  filmConnection?: Maybe<VehicleFilmsConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type VehiclepilotConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type VehiclefilmConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A connection to a list of items. */\nexport type VehiclePilotsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehiclePilotsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  pilots?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type VehiclePilotsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type VehicleFilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehicleFilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** An edge in a connection. */\nexport type VehicleFilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type PlanetFilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetFilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** An edge in a connection. */\nexport type PlanetFilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type SpeciesPeopleConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesPeopleEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  people?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesPeopleEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type SpeciesFilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesFilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesFilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type FilmStarshipsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmStarshipsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmStarshipsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type FilmVehiclesConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmVehiclesEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmVehiclesEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type FilmCharactersConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmCharactersEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  characters?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmCharactersEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type FilmPlanetsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmPlanetsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  planets?: Maybe<Array<Maybe<Planet>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmPlanetsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Planet>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type PeopleConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PeopleEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  people?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type PeopleEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type PlanetsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  planets?: Maybe<Array<Maybe<Planet>>>;\n};\n\n/** An edge in a connection. */\nexport type PlanetsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Planet>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type SpeciesConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  species?: Maybe<Array<Maybe<Species>>>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Species>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type StarshipsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n};\n\n/** An edge in a connection. */\nexport type StarshipsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type VehiclesConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehiclesEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type VehiclesEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\nexport type WithIndex<TObject> = TObject & Record<string, any>;\nexport type ResolversObject<TObject> = WithIndex<TObject>;\n\nexport type ResolverTypeWrapper<T> = Promise<T> | T;\n\n\nexport type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\n\nexport type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  fragment: string;\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\n\nexport type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {\n  selectionSet: string | ((fieldNode: FieldNode) => SelectionSetNode);\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\n};\nexport type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;\nexport type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =\n  | ResolverFn<TResult, TParent, TContext, TArgs>\n  | ResolverWithResolve<TResult, TParent, TContext, TArgs>\n  | StitchingResolver<TResult, TParent, TContext, TArgs>;\n\nexport type ResolverFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Promise<TResult> | TResult;\n\nexport type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;\n\nexport type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\nexport interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;\n  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;\n}\n\nexport interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {\n  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;\n  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;\n}\n\nexport type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =\n  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>\n  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;\n\nexport type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =\n  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)\n  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;\n\nexport type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (\n  parent: TParent,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => Maybe<TTypes> | Promise<Maybe<TTypes>>;\n\nexport type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;\n\nexport type NextResolverFn<T> = () => Promise<T>;\n\nexport type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (\n  next: NextResolverFn<TResult>,\n  parent: TParent,\n  args: TArgs,\n  context: TContext,\n  info: GraphQLResolveInfo\n) => TResult | Promise<TResult>;\n\n/** Mapping between all available schema types and the resolvers types */\nexport type ResolversTypes = ResolversObject<{\n  Query: ResolverTypeWrapper<{}>;\n  Country: ResolverTypeWrapper<Country>;\n  ID: ResolverTypeWrapper<Scalars['ID']>;\n  String: ResolverTypeWrapper<Scalars['String']>;\n  Continent: ResolverTypeWrapper<Continent>;\n  Language: ResolverTypeWrapper<Language>;\n  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;\n  State: ResolverTypeWrapper<State>;\n  StringQueryOperatorInput: StringQueryOperatorInput;\n  CountryFilterInput: CountryFilterInput;\n  ContinentFilterInput: ContinentFilterInput;\n  LanguageFilterInput: LanguageFilterInput;\n  _Any: ResolverTypeWrapper<Scalars['_Any']>;\n  _Entity: ResolversTypes['Country'] | ResolversTypes['Continent'] | ResolversTypes['Language'];\n  Int: ResolverTypeWrapper<Scalars['Int']>;\n  FilmsConnection: ResolverTypeWrapper<FilmsConnection>;\n  PageInfo: ResolverTypeWrapper<PageInfo>;\n  FilmsEdge: ResolverTypeWrapper<FilmsEdge>;\n  Film: ResolverTypeWrapper<Film>;\n  Node: ResolversTypes['Film'] | ResolversTypes['Species'] | ResolversTypes['Planet'] | ResolversTypes['Person'] | ResolversTypes['Starship'] | ResolversTypes['Vehicle'];\n  FilmSpeciesConnection: ResolverTypeWrapper<FilmSpeciesConnection>;\n  FilmSpeciesEdge: ResolverTypeWrapper<FilmSpeciesEdge>;\n  Species: ResolverTypeWrapper<Species>;\n  Float: ResolverTypeWrapper<Scalars['Float']>;\n  Planet: ResolverTypeWrapper<Planet>;\n  PlanetResidentsConnection: ResolverTypeWrapper<PlanetResidentsConnection>;\n  PlanetResidentsEdge: ResolverTypeWrapper<PlanetResidentsEdge>;\n  Person: ResolverTypeWrapper<Person>;\n  PersonFilmsConnection: ResolverTypeWrapper<PersonFilmsConnection>;\n  PersonFilmsEdge: ResolverTypeWrapper<PersonFilmsEdge>;\n  PersonStarshipsConnection: ResolverTypeWrapper<PersonStarshipsConnection>;\n  PersonStarshipsEdge: ResolverTypeWrapper<PersonStarshipsEdge>;\n  Starship: ResolverTypeWrapper<Starship>;\n  StarshipPilotsConnection: ResolverTypeWrapper<StarshipPilotsConnection>;\n  StarshipPilotsEdge: ResolverTypeWrapper<StarshipPilotsEdge>;\n  StarshipFilmsConnection: ResolverTypeWrapper<StarshipFilmsConnection>;\n  StarshipFilmsEdge: ResolverTypeWrapper<StarshipFilmsEdge>;\n  PersonVehiclesConnection: ResolverTypeWrapper<PersonVehiclesConnection>;\n  PersonVehiclesEdge: ResolverTypeWrapper<PersonVehiclesEdge>;\n  Vehicle: ResolverTypeWrapper<Vehicle>;\n  VehiclePilotsConnection: ResolverTypeWrapper<VehiclePilotsConnection>;\n  VehiclePilotsEdge: ResolverTypeWrapper<VehiclePilotsEdge>;\n  VehicleFilmsConnection: ResolverTypeWrapper<VehicleFilmsConnection>;\n  VehicleFilmsEdge: ResolverTypeWrapper<VehicleFilmsEdge>;\n  PlanetFilmsConnection: ResolverTypeWrapper<PlanetFilmsConnection>;\n  PlanetFilmsEdge: ResolverTypeWrapper<PlanetFilmsEdge>;\n  SpeciesPeopleConnection: ResolverTypeWrapper<SpeciesPeopleConnection>;\n  SpeciesPeopleEdge: ResolverTypeWrapper<SpeciesPeopleEdge>;\n  SpeciesFilmsConnection: ResolverTypeWrapper<SpeciesFilmsConnection>;\n  SpeciesFilmsEdge: ResolverTypeWrapper<SpeciesFilmsEdge>;\n  FilmStarshipsConnection: ResolverTypeWrapper<FilmStarshipsConnection>;\n  FilmStarshipsEdge: ResolverTypeWrapper<FilmStarshipsEdge>;\n  FilmVehiclesConnection: ResolverTypeWrapper<FilmVehiclesConnection>;\n  FilmVehiclesEdge: ResolverTypeWrapper<FilmVehiclesEdge>;\n  FilmCharactersConnection: ResolverTypeWrapper<FilmCharactersConnection>;\n  FilmCharactersEdge: ResolverTypeWrapper<FilmCharactersEdge>;\n  FilmPlanetsConnection: ResolverTypeWrapper<FilmPlanetsConnection>;\n  FilmPlanetsEdge: ResolverTypeWrapper<FilmPlanetsEdge>;\n  PeopleConnection: ResolverTypeWrapper<PeopleConnection>;\n  PeopleEdge: ResolverTypeWrapper<PeopleEdge>;\n  PlanetsConnection: ResolverTypeWrapper<PlanetsConnection>;\n  PlanetsEdge: ResolverTypeWrapper<PlanetsEdge>;\n  SpeciesConnection: ResolverTypeWrapper<SpeciesConnection>;\n  SpeciesEdge: ResolverTypeWrapper<SpeciesEdge>;\n  StarshipsConnection: ResolverTypeWrapper<StarshipsConnection>;\n  StarshipsEdge: ResolverTypeWrapper<StarshipsEdge>;\n  VehiclesConnection: ResolverTypeWrapper<VehiclesConnection>;\n  VehiclesEdge: ResolverTypeWrapper<VehiclesEdge>;\n}>;\n\n/** Mapping between all available schema types and the resolvers parents */\nexport type ResolversParentTypes = ResolversObject<{\n  Query: {};\n  Country: Country;\n  ID: Scalars['ID'];\n  String: Scalars['String'];\n  Continent: Continent;\n  Language: Language;\n  Boolean: Scalars['Boolean'];\n  State: State;\n  StringQueryOperatorInput: StringQueryOperatorInput;\n  CountryFilterInput: CountryFilterInput;\n  ContinentFilterInput: ContinentFilterInput;\n  LanguageFilterInput: LanguageFilterInput;\n  _Any: Scalars['_Any'];\n  _Entity: ResolversParentTypes['Country'] | ResolversParentTypes['Continent'] | ResolversParentTypes['Language'];\n  Int: Scalars['Int'];\n  FilmsConnection: FilmsConnection;\n  PageInfo: PageInfo;\n  FilmsEdge: FilmsEdge;\n  Film: Film;\n  Node: ResolversParentTypes['Film'] | ResolversParentTypes['Species'] | ResolversParentTypes['Planet'] | ResolversParentTypes['Person'] | ResolversParentTypes['Starship'] | ResolversParentTypes['Vehicle'];\n  FilmSpeciesConnection: FilmSpeciesConnection;\n  FilmSpeciesEdge: FilmSpeciesEdge;\n  Species: Species;\n  Float: Scalars['Float'];\n  Planet: Planet;\n  PlanetResidentsConnection: PlanetResidentsConnection;\n  PlanetResidentsEdge: PlanetResidentsEdge;\n  Person: Person;\n  PersonFilmsConnection: PersonFilmsConnection;\n  PersonFilmsEdge: PersonFilmsEdge;\n  PersonStarshipsConnection: PersonStarshipsConnection;\n  PersonStarshipsEdge: PersonStarshipsEdge;\n  Starship: Starship;\n  StarshipPilotsConnection: StarshipPilotsConnection;\n  StarshipPilotsEdge: StarshipPilotsEdge;\n  StarshipFilmsConnection: StarshipFilmsConnection;\n  StarshipFilmsEdge: StarshipFilmsEdge;\n  PersonVehiclesConnection: PersonVehiclesConnection;\n  PersonVehiclesEdge: PersonVehiclesEdge;\n  Vehicle: Vehicle;\n  VehiclePilotsConnection: VehiclePilotsConnection;\n  VehiclePilotsEdge: VehiclePilotsEdge;\n  VehicleFilmsConnection: VehicleFilmsConnection;\n  VehicleFilmsEdge: VehicleFilmsEdge;\n  PlanetFilmsConnection: PlanetFilmsConnection;\n  PlanetFilmsEdge: PlanetFilmsEdge;\n  SpeciesPeopleConnection: SpeciesPeopleConnection;\n  SpeciesPeopleEdge: SpeciesPeopleEdge;\n  SpeciesFilmsConnection: SpeciesFilmsConnection;\n  SpeciesFilmsEdge: SpeciesFilmsEdge;\n  FilmStarshipsConnection: FilmStarshipsConnection;\n  FilmStarshipsEdge: FilmStarshipsEdge;\n  FilmVehiclesConnection: FilmVehiclesConnection;\n  FilmVehiclesEdge: FilmVehiclesEdge;\n  FilmCharactersConnection: FilmCharactersConnection;\n  FilmCharactersEdge: FilmCharactersEdge;\n  FilmPlanetsConnection: FilmPlanetsConnection;\n  FilmPlanetsEdge: FilmPlanetsEdge;\n  PeopleConnection: PeopleConnection;\n  PeopleEdge: PeopleEdge;\n  PlanetsConnection: PlanetsConnection;\n  PlanetsEdge: PlanetsEdge;\n  SpeciesConnection: SpeciesConnection;\n  SpeciesEdge: SpeciesEdge;\n  StarshipsConnection: StarshipsConnection;\n  StarshipsEdge: StarshipsEdge;\n  VehiclesConnection: VehiclesConnection;\n  VehiclesEdge: VehiclesEdge;\n}>;\n\nexport type QueryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{\n  countries?: Resolver<Array<ResolversTypes['Country']>, ParentType, ContextType, Partial<QuerycountriesArgs>>;\n  country?: Resolver<Maybe<ResolversTypes['Country']>, ParentType, ContextType, RequireFields<QuerycountryArgs, 'code'>>;\n  continents?: Resolver<Array<ResolversTypes['Continent']>, ParentType, ContextType, Partial<QuerycontinentsArgs>>;\n  continent?: Resolver<Maybe<ResolversTypes['Continent']>, ParentType, ContextType, RequireFields<QuerycontinentArgs, 'code'>>;\n  languages?: Resolver<Array<ResolversTypes['Language']>, ParentType, ContextType, Partial<QuerylanguagesArgs>>;\n  language?: Resolver<Maybe<ResolversTypes['Language']>, ParentType, ContextType, RequireFields<QuerylanguageArgs, 'code'>>;\n  _entities?: Resolver<Array<Maybe<ResolversTypes['_Entity']>>, ParentType, ContextType, RequireFields<Query_entitiesArgs, 'representations'>>;\n  allFilms?: Resolver<Maybe<ResolversTypes['FilmsConnection']>, ParentType, ContextType, Partial<QueryallFilmsArgs>>;\n  film?: Resolver<Maybe<ResolversTypes['Film']>, ParentType, ContextType, Partial<QueryfilmArgs>>;\n  allPeople?: Resolver<Maybe<ResolversTypes['PeopleConnection']>, ParentType, ContextType, Partial<QueryallPeopleArgs>>;\n  person?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType, Partial<QuerypersonArgs>>;\n  allPlanets?: Resolver<Maybe<ResolversTypes['PlanetsConnection']>, ParentType, ContextType, Partial<QueryallPlanetsArgs>>;\n  planet?: Resolver<Maybe<ResolversTypes['Planet']>, ParentType, ContextType, Partial<QueryplanetArgs>>;\n  allSpecies?: Resolver<Maybe<ResolversTypes['SpeciesConnection']>, ParentType, ContextType, Partial<QueryallSpeciesArgs>>;\n  species?: Resolver<Maybe<ResolversTypes['Species']>, ParentType, ContextType, Partial<QueryspeciesArgs>>;\n  allStarships?: Resolver<Maybe<ResolversTypes['StarshipsConnection']>, ParentType, ContextType, Partial<QueryallStarshipsArgs>>;\n  starship?: Resolver<Maybe<ResolversTypes['Starship']>, ParentType, ContextType, Partial<QuerystarshipArgs>>;\n  allVehicles?: Resolver<Maybe<ResolversTypes['VehiclesConnection']>, ParentType, ContextType, Partial<QueryallVehiclesArgs>>;\n  vehicle?: Resolver<Maybe<ResolversTypes['Vehicle']>, ParentType, ContextType, Partial<QueryvehicleArgs>>;\n  node?: Resolver<Maybe<ResolversTypes['Node']>, ParentType, ContextType, RequireFields<QuerynodeArgs, 'id'>>;\n}>;\n\nexport type CountryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Country'] = ResolversParentTypes['Country']> = ResolversObject<{\n  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  native?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  phone?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  continent?: Resolver<ResolversTypes['Continent'], ParentType, ContextType>;\n  capital?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  languages?: Resolver<Array<ResolversTypes['Language']>, ParentType, ContextType>;\n  emoji?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  emojiU?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  states?: Resolver<Array<ResolversTypes['State']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type ContinentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Continent'] = ResolversParentTypes['Continent']> = ResolversObject<{\n  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  countries?: Resolver<Array<ResolversTypes['Country']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type LanguageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Language'] = ResolversParentTypes['Language']> = ResolversObject<{\n  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  native?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  rtl?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type StateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['State'] = ResolversParentTypes['State']> = ResolversObject<{\n  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  country?: Resolver<ResolversTypes['Country'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport interface _AnyScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['_Any'], any> {\n  name: '_Any';\n}\n\nexport type _EntityResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['_Entity'] = ResolversParentTypes['_Entity']> = ResolversObject<{\n  __resolveType: TypeResolveFn<'Country' | 'Continent' | 'Language', ParentType, ContextType>;\n}>;\n\nexport type FilmsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmsConnection'] = ResolversParentTypes['FilmsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['FilmsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  films?: Resolver<Maybe<Array<Maybe<ResolversTypes['Film']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PageInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']> = ResolversObject<{\n  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;\n  startCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type FilmsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmsEdge'] = ResolversParentTypes['FilmsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Film']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type FilmResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Film'] = ResolversParentTypes['Film']> = ResolversObject<{\n  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  episodeID?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  openingCrawl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  director?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  producers?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;\n  releaseDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  speciesConnection?: Resolver<Maybe<ResolversTypes['FilmSpeciesConnection']>, ParentType, ContextType, Partial<FilmspeciesConnectionArgs>>;\n  starshipConnection?: Resolver<Maybe<ResolversTypes['FilmStarshipsConnection']>, ParentType, ContextType, Partial<FilmstarshipConnectionArgs>>;\n  vehicleConnection?: Resolver<Maybe<ResolversTypes['FilmVehiclesConnection']>, ParentType, ContextType, Partial<FilmvehicleConnectionArgs>>;\n  characterConnection?: Resolver<Maybe<ResolversTypes['FilmCharactersConnection']>, ParentType, ContextType, Partial<FilmcharacterConnectionArgs>>;\n  planetConnection?: Resolver<Maybe<ResolversTypes['FilmPlanetsConnection']>, ParentType, ContextType, Partial<FilmplanetConnectionArgs>>;\n  created?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  edited?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type NodeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = ResolversObject<{\n  __resolveType: TypeResolveFn<'Film' | 'Species' | 'Planet' | 'Person' | 'Starship' | 'Vehicle', ParentType, ContextType>;\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n}>;\n\nexport type FilmSpeciesConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmSpeciesConnection'] = ResolversParentTypes['FilmSpeciesConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['FilmSpeciesEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  species?: Resolver<Maybe<Array<Maybe<ResolversTypes['Species']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type FilmSpeciesEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmSpeciesEdge'] = ResolversParentTypes['FilmSpeciesEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Species']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type SpeciesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Species'] = ResolversParentTypes['Species']> = ResolversObject<{\n  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  classification?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  designation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  averageHeight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;\n  averageLifespan?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  eyeColors?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;\n  hairColors?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;\n  skinColors?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;\n  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  homeworld?: Resolver<Maybe<ResolversTypes['Planet']>, ParentType, ContextType>;\n  personConnection?: Resolver<Maybe<ResolversTypes['SpeciesPeopleConnection']>, ParentType, ContextType, Partial<SpeciespersonConnectionArgs>>;\n  filmConnection?: Resolver<Maybe<ResolversTypes['SpeciesFilmsConnection']>, ParentType, ContextType, Partial<SpeciesfilmConnectionArgs>>;\n  created?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  edited?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PlanetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Planet'] = ResolversParentTypes['Planet']> = ResolversObject<{\n  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  diameter?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  rotationPeriod?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  orbitalPeriod?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  gravity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  population?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;\n  climates?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;\n  terrains?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;\n  surfaceWater?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;\n  residentConnection?: Resolver<Maybe<ResolversTypes['PlanetResidentsConnection']>, ParentType, ContextType, Partial<PlanetresidentConnectionArgs>>;\n  filmConnection?: Resolver<Maybe<ResolversTypes['PlanetFilmsConnection']>, ParentType, ContextType, Partial<PlanetfilmConnectionArgs>>;\n  created?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  edited?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PlanetResidentsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PlanetResidentsConnection'] = ResolversParentTypes['PlanetResidentsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['PlanetResidentsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  residents?: Resolver<Maybe<Array<Maybe<ResolversTypes['Person']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PlanetResidentsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PlanetResidentsEdge'] = ResolversParentTypes['PlanetResidentsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Person'] = ResolversParentTypes['Person']> = ResolversObject<{\n  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  birthYear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  eyeColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  hairColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  mass?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;\n  skinColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  homeworld?: Resolver<Maybe<ResolversTypes['Planet']>, ParentType, ContextType>;\n  filmConnection?: Resolver<Maybe<ResolversTypes['PersonFilmsConnection']>, ParentType, ContextType, Partial<PersonfilmConnectionArgs>>;\n  species?: Resolver<Maybe<ResolversTypes['Species']>, ParentType, ContextType>;\n  starshipConnection?: Resolver<Maybe<ResolversTypes['PersonStarshipsConnection']>, ParentType, ContextType, Partial<PersonstarshipConnectionArgs>>;\n  vehicleConnection?: Resolver<Maybe<ResolversTypes['PersonVehiclesConnection']>, ParentType, ContextType, Partial<PersonvehicleConnectionArgs>>;\n  created?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  edited?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonFilmsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PersonFilmsConnection'] = ResolversParentTypes['PersonFilmsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['PersonFilmsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  films?: Resolver<Maybe<Array<Maybe<ResolversTypes['Film']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonFilmsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PersonFilmsEdge'] = ResolversParentTypes['PersonFilmsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Film']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonStarshipsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PersonStarshipsConnection'] = ResolversParentTypes['PersonStarshipsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['PersonStarshipsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  starships?: Resolver<Maybe<Array<Maybe<ResolversTypes['Starship']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonStarshipsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PersonStarshipsEdge'] = ResolversParentTypes['PersonStarshipsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Starship']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type StarshipResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Starship'] = ResolversParentTypes['Starship']> = ResolversObject<{\n  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  model?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  starshipClass?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  manufacturers?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;\n  costInCredits?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;\n  length?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;\n  crew?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  passengers?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  maxAtmospheringSpeed?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  hyperdriveRating?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;\n  MGLT?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  cargoCapacity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;\n  consumables?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  pilotConnection?: Resolver<Maybe<ResolversTypes['StarshipPilotsConnection']>, ParentType, ContextType, Partial<StarshippilotConnectionArgs>>;\n  filmConnection?: Resolver<Maybe<ResolversTypes['StarshipFilmsConnection']>, ParentType, ContextType, Partial<StarshipfilmConnectionArgs>>;\n  created?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  edited?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type StarshipPilotsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['StarshipPilotsConnection'] = ResolversParentTypes['StarshipPilotsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['StarshipPilotsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  pilots?: Resolver<Maybe<Array<Maybe<ResolversTypes['Person']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type StarshipPilotsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['StarshipPilotsEdge'] = ResolversParentTypes['StarshipPilotsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type StarshipFilmsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['StarshipFilmsConnection'] = ResolversParentTypes['StarshipFilmsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['StarshipFilmsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  films?: Resolver<Maybe<Array<Maybe<ResolversTypes['Film']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type StarshipFilmsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['StarshipFilmsEdge'] = ResolversParentTypes['StarshipFilmsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Film']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonVehiclesConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PersonVehiclesConnection'] = ResolversParentTypes['PersonVehiclesConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['PersonVehiclesEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  vehicles?: Resolver<Maybe<Array<Maybe<ResolversTypes['Vehicle']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PersonVehiclesEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PersonVehiclesEdge'] = ResolversParentTypes['PersonVehiclesEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Vehicle']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type VehicleResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Vehicle'] = ResolversParentTypes['Vehicle']> = ResolversObject<{\n  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  model?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  vehicleClass?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  manufacturers?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;\n  costInCredits?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;\n  length?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;\n  crew?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  passengers?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  maxAtmospheringSpeed?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  cargoCapacity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;\n  consumables?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  pilotConnection?: Resolver<Maybe<ResolversTypes['VehiclePilotsConnection']>, ParentType, ContextType, Partial<VehiclepilotConnectionArgs>>;\n  filmConnection?: Resolver<Maybe<ResolversTypes['VehicleFilmsConnection']>, ParentType, ContextType, Partial<VehiclefilmConnectionArgs>>;\n  created?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  edited?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\n  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type VehiclePilotsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VehiclePilotsConnection'] = ResolversParentTypes['VehiclePilotsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['VehiclePilotsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  pilots?: Resolver<Maybe<Array<Maybe<ResolversTypes['Person']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type VehiclePilotsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VehiclePilotsEdge'] = ResolversParentTypes['VehiclePilotsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type VehicleFilmsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VehicleFilmsConnection'] = ResolversParentTypes['VehicleFilmsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['VehicleFilmsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  films?: Resolver<Maybe<Array<Maybe<ResolversTypes['Film']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type VehicleFilmsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VehicleFilmsEdge'] = ResolversParentTypes['VehicleFilmsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Film']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PlanetFilmsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PlanetFilmsConnection'] = ResolversParentTypes['PlanetFilmsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['PlanetFilmsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  films?: Resolver<Maybe<Array<Maybe<ResolversTypes['Film']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PlanetFilmsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PlanetFilmsEdge'] = ResolversParentTypes['PlanetFilmsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Film']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type SpeciesPeopleConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SpeciesPeopleConnection'] = ResolversParentTypes['SpeciesPeopleConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['SpeciesPeopleEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  people?: Resolver<Maybe<Array<Maybe<ResolversTypes['Person']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type SpeciesPeopleEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SpeciesPeopleEdge'] = ResolversParentTypes['SpeciesPeopleEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type SpeciesFilmsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SpeciesFilmsConnection'] = ResolversParentTypes['SpeciesFilmsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['SpeciesFilmsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  films?: Resolver<Maybe<Array<Maybe<ResolversTypes['Film']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type SpeciesFilmsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SpeciesFilmsEdge'] = ResolversParentTypes['SpeciesFilmsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Film']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type FilmStarshipsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmStarshipsConnection'] = ResolversParentTypes['FilmStarshipsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['FilmStarshipsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  starships?: Resolver<Maybe<Array<Maybe<ResolversTypes['Starship']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type FilmStarshipsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmStarshipsEdge'] = ResolversParentTypes['FilmStarshipsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Starship']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type FilmVehiclesConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmVehiclesConnection'] = ResolversParentTypes['FilmVehiclesConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['FilmVehiclesEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  vehicles?: Resolver<Maybe<Array<Maybe<ResolversTypes['Vehicle']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type FilmVehiclesEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmVehiclesEdge'] = ResolversParentTypes['FilmVehiclesEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Vehicle']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type FilmCharactersConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmCharactersConnection'] = ResolversParentTypes['FilmCharactersConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['FilmCharactersEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  characters?: Resolver<Maybe<Array<Maybe<ResolversTypes['Person']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type FilmCharactersEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmCharactersEdge'] = ResolversParentTypes['FilmCharactersEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type FilmPlanetsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmPlanetsConnection'] = ResolversParentTypes['FilmPlanetsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['FilmPlanetsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  planets?: Resolver<Maybe<Array<Maybe<ResolversTypes['Planet']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type FilmPlanetsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FilmPlanetsEdge'] = ResolversParentTypes['FilmPlanetsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Planet']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PeopleConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PeopleConnection'] = ResolversParentTypes['PeopleConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['PeopleEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  people?: Resolver<Maybe<Array<Maybe<ResolversTypes['Person']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PeopleEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PeopleEdge'] = ResolversParentTypes['PeopleEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Person']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PlanetsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PlanetsConnection'] = ResolversParentTypes['PlanetsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['PlanetsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  planets?: Resolver<Maybe<Array<Maybe<ResolversTypes['Planet']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type PlanetsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PlanetsEdge'] = ResolversParentTypes['PlanetsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Planet']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type SpeciesConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SpeciesConnection'] = ResolversParentTypes['SpeciesConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['SpeciesEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  species?: Resolver<Maybe<Array<Maybe<ResolversTypes['Species']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type SpeciesEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SpeciesEdge'] = ResolversParentTypes['SpeciesEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Species']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type StarshipsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['StarshipsConnection'] = ResolversParentTypes['StarshipsConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['StarshipsEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  starships?: Resolver<Maybe<Array<Maybe<ResolversTypes['Starship']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type StarshipsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['StarshipsEdge'] = ResolversParentTypes['StarshipsEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Starship']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type VehiclesConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VehiclesConnection'] = ResolversParentTypes['VehiclesConnection']> = ResolversObject<{\n  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;\n  edges?: Resolver<Maybe<Array<Maybe<ResolversTypes['VehiclesEdge']>>>, ParentType, ContextType>;\n  totalCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;\n  vehicles?: Resolver<Maybe<Array<Maybe<ResolversTypes['Vehicle']>>>, ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type VehiclesEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VehiclesEdge'] = ResolversParentTypes['VehiclesEdge']> = ResolversObject<{\n  node?: Resolver<Maybe<ResolversTypes['Vehicle']>, ParentType, ContextType>;\n  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;\n  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;\n}>;\n\nexport type Resolvers<ContextType = MeshContext> = ResolversObject<{\n  Query?: QueryResolvers<ContextType>;\n  Country?: CountryResolvers<ContextType>;\n  Continent?: ContinentResolvers<ContextType>;\n  Language?: LanguageResolvers<ContextType>;\n  State?: StateResolvers<ContextType>;\n  _Any?: GraphQLScalarType;\n  _Entity?: _EntityResolvers<ContextType>;\n  FilmsConnection?: FilmsConnectionResolvers<ContextType>;\n  PageInfo?: PageInfoResolvers<ContextType>;\n  FilmsEdge?: FilmsEdgeResolvers<ContextType>;\n  Film?: FilmResolvers<ContextType>;\n  Node?: NodeResolvers<ContextType>;\n  FilmSpeciesConnection?: FilmSpeciesConnectionResolvers<ContextType>;\n  FilmSpeciesEdge?: FilmSpeciesEdgeResolvers<ContextType>;\n  Species?: SpeciesResolvers<ContextType>;\n  Planet?: PlanetResolvers<ContextType>;\n  PlanetResidentsConnection?: PlanetResidentsConnectionResolvers<ContextType>;\n  PlanetResidentsEdge?: PlanetResidentsEdgeResolvers<ContextType>;\n  Person?: PersonResolvers<ContextType>;\n  PersonFilmsConnection?: PersonFilmsConnectionResolvers<ContextType>;\n  PersonFilmsEdge?: PersonFilmsEdgeResolvers<ContextType>;\n  PersonStarshipsConnection?: PersonStarshipsConnectionResolvers<ContextType>;\n  PersonStarshipsEdge?: PersonStarshipsEdgeResolvers<ContextType>;\n  Starship?: StarshipResolvers<ContextType>;\n  StarshipPilotsConnection?: StarshipPilotsConnectionResolvers<ContextType>;\n  StarshipPilotsEdge?: StarshipPilotsEdgeResolvers<ContextType>;\n  StarshipFilmsConnection?: StarshipFilmsConnectionResolvers<ContextType>;\n  StarshipFilmsEdge?: StarshipFilmsEdgeResolvers<ContextType>;\n  PersonVehiclesConnection?: PersonVehiclesConnectionResolvers<ContextType>;\n  PersonVehiclesEdge?: PersonVehiclesEdgeResolvers<ContextType>;\n  Vehicle?: VehicleResolvers<ContextType>;\n  VehiclePilotsConnection?: VehiclePilotsConnectionResolvers<ContextType>;\n  VehiclePilotsEdge?: VehiclePilotsEdgeResolvers<ContextType>;\n  VehicleFilmsConnection?: VehicleFilmsConnectionResolvers<ContextType>;\n  VehicleFilmsEdge?: VehicleFilmsEdgeResolvers<ContextType>;\n  PlanetFilmsConnection?: PlanetFilmsConnectionResolvers<ContextType>;\n  PlanetFilmsEdge?: PlanetFilmsEdgeResolvers<ContextType>;\n  SpeciesPeopleConnection?: SpeciesPeopleConnectionResolvers<ContextType>;\n  SpeciesPeopleEdge?: SpeciesPeopleEdgeResolvers<ContextType>;\n  SpeciesFilmsConnection?: SpeciesFilmsConnectionResolvers<ContextType>;\n  SpeciesFilmsEdge?: SpeciesFilmsEdgeResolvers<ContextType>;\n  FilmStarshipsConnection?: FilmStarshipsConnectionResolvers<ContextType>;\n  FilmStarshipsEdge?: FilmStarshipsEdgeResolvers<ContextType>;\n  FilmVehiclesConnection?: FilmVehiclesConnectionResolvers<ContextType>;\n  FilmVehiclesEdge?: FilmVehiclesEdgeResolvers<ContextType>;\n  FilmCharactersConnection?: FilmCharactersConnectionResolvers<ContextType>;\n  FilmCharactersEdge?: FilmCharactersEdgeResolvers<ContextType>;\n  FilmPlanetsConnection?: FilmPlanetsConnectionResolvers<ContextType>;\n  FilmPlanetsEdge?: FilmPlanetsEdgeResolvers<ContextType>;\n  PeopleConnection?: PeopleConnectionResolvers<ContextType>;\n  PeopleEdge?: PeopleEdgeResolvers<ContextType>;\n  PlanetsConnection?: PlanetsConnectionResolvers<ContextType>;\n  PlanetsEdge?: PlanetsEdgeResolvers<ContextType>;\n  SpeciesConnection?: SpeciesConnectionResolvers<ContextType>;\n  SpeciesEdge?: SpeciesEdgeResolvers<ContextType>;\n  StarshipsConnection?: StarshipsConnectionResolvers<ContextType>;\n  StarshipsEdge?: StarshipsEdgeResolvers<ContextType>;\n  VehiclesConnection?: VehiclesConnectionResolvers<ContextType>;\n  VehiclesEdge?: VehiclesEdgeResolvers<ContextType>;\n}>;\n\n\nimport { MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';\n\nimport { InContextSdkMethod } from '@graphql-mesh/types';\n\n\n    export namespace CountriesTypes {\n      export type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  _Any: any;\n};\n\nexport type Country = {\n  code: Scalars['ID'];\n  name: Scalars['String'];\n  native: Scalars['String'];\n  phone: Scalars['String'];\n  continent: Continent;\n  capital?: Maybe<Scalars['String']>;\n  currency?: Maybe<Scalars['String']>;\n  languages: Array<Language>;\n  emoji: Scalars['String'];\n  emojiU: Scalars['String'];\n  states: Array<State>;\n};\n\nexport type Continent = {\n  code: Scalars['ID'];\n  name: Scalars['String'];\n  countries: Array<Country>;\n};\n\nexport type Language = {\n  code: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  native?: Maybe<Scalars['String']>;\n  rtl: Scalars['Boolean'];\n};\n\nexport type State = {\n  code?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  country: Country;\n};\n\nexport type StringQueryOperatorInput = {\n  eq?: InputMaybe<Scalars['String']>;\n  ne?: InputMaybe<Scalars['String']>;\n  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  nin?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n  regex?: InputMaybe<Scalars['String']>;\n  glob?: InputMaybe<Scalars['String']>;\n};\n\nexport type CountryFilterInput = {\n  code?: InputMaybe<StringQueryOperatorInput>;\n  currency?: InputMaybe<StringQueryOperatorInput>;\n  continent?: InputMaybe<StringQueryOperatorInput>;\n};\n\nexport type ContinentFilterInput = {\n  code?: InputMaybe<StringQueryOperatorInput>;\n};\n\nexport type LanguageFilterInput = {\n  code?: InputMaybe<StringQueryOperatorInput>;\n};\n\nexport type Query = {\n  countries: Array<Country>;\n  country?: Maybe<Country>;\n  continents: Array<Continent>;\n  continent?: Maybe<Continent>;\n  languages: Array<Language>;\n  language?: Maybe<Language>;\n  _entities: Array<Maybe<_Entity>>;\n};\n\n\nexport type QuerycountriesArgs = {\n  filter?: InputMaybe<CountryFilterInput>;\n};\n\n\nexport type QuerycountryArgs = {\n  code: Scalars['ID'];\n};\n\n\nexport type QuerycontinentsArgs = {\n  filter?: InputMaybe<ContinentFilterInput>;\n};\n\n\nexport type QuerycontinentArgs = {\n  code: Scalars['ID'];\n};\n\n\nexport type QuerylanguagesArgs = {\n  filter?: InputMaybe<LanguageFilterInput>;\n};\n\n\nexport type QuerylanguageArgs = {\n  code: Scalars['ID'];\n};\n\n\nexport type Query_entitiesArgs = {\n  representations: Array<Scalars['_Any']>;\n};\n\nexport type _Entity = Country | Continent | Language;\n\n    }\n    export type QueryCountriesSdk = {\n  /** undefined **/\n  countries: InContextSdkMethod<CountriesTypes.Query['countries'], CountriesTypes.QuerycountriesArgs, MeshContext>,\n  /** undefined **/\n  country: InContextSdkMethod<CountriesTypes.Query['country'], CountriesTypes.QuerycountryArgs, MeshContext>,\n  /** undefined **/\n  continents: InContextSdkMethod<CountriesTypes.Query['continents'], CountriesTypes.QuerycontinentsArgs, MeshContext>,\n  /** undefined **/\n  continent: InContextSdkMethod<CountriesTypes.Query['continent'], CountriesTypes.QuerycontinentArgs, MeshContext>,\n  /** undefined **/\n  languages: InContextSdkMethod<CountriesTypes.Query['languages'], CountriesTypes.QuerylanguagesArgs, MeshContext>,\n  /** undefined **/\n  language: InContextSdkMethod<CountriesTypes.Query['language'], CountriesTypes.QuerylanguageArgs, MeshContext>,\n  /** undefined **/\n  _entities: InContextSdkMethod<CountriesTypes.Query['_entities'], CountriesTypes.Query_entitiesArgs, MeshContext>\n};\n\nexport type MutationCountriesSdk = {\n\n};\n\nexport type SubscriptionCountriesSdk = {\n\n};\n\n\n    export namespace StarWarsTypes {\n      export type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Root = {\n  allFilms?: Maybe<FilmsConnection>;\n  film?: Maybe<Film>;\n  allPeople?: Maybe<PeopleConnection>;\n  person?: Maybe<Person>;\n  allPlanets?: Maybe<PlanetsConnection>;\n  planet?: Maybe<Planet>;\n  allSpecies?: Maybe<SpeciesConnection>;\n  species?: Maybe<Species>;\n  allStarships?: Maybe<StarshipsConnection>;\n  starship?: Maybe<Starship>;\n  allVehicles?: Maybe<VehiclesConnection>;\n  vehicle?: Maybe<Vehicle>;\n  /** Fetches an object given its ID */\n  node?: Maybe<Node>;\n};\n\n\nexport type RootallFilmsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type RootfilmArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  filmID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type RootallPeopleArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type RootpersonArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  personID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type RootallPlanetsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type RootplanetArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  planetID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type RootallSpeciesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type RootspeciesArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  speciesID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type RootallStarshipsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type RootstarshipArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  starshipID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type RootallVehiclesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type RootvehicleArgs = {\n  id?: InputMaybe<Scalars['ID']>;\n  vehicleID?: InputMaybe<Scalars['ID']>;\n};\n\n\nexport type RootnodeArgs = {\n  id: Scalars['ID'];\n};\n\n/** A connection to a list of items. */\nexport type FilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n};\n\n/** An edge in a connection. */\nexport type FilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A single film. */\nexport type Film = Node & {\n  /** The title of this film. */\n  title?: Maybe<Scalars['String']>;\n  /** The episode number of this film. */\n  episodeID?: Maybe<Scalars['Int']>;\n  /** The opening paragraphs at the beginning of this film. */\n  openingCrawl?: Maybe<Scalars['String']>;\n  /** The name of the director of this film. */\n  director?: Maybe<Scalars['String']>;\n  /** The name(s) of the producer(s) of this film. */\n  producers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The ISO 8601 date format of film release at original creator country. */\n  releaseDate?: Maybe<Scalars['String']>;\n  speciesConnection?: Maybe<FilmSpeciesConnection>;\n  starshipConnection?: Maybe<FilmStarshipsConnection>;\n  vehicleConnection?: Maybe<FilmVehiclesConnection>;\n  characterConnection?: Maybe<FilmCharactersConnection>;\n  planetConnection?: Maybe<FilmPlanetsConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/** A single film. */\nexport type FilmspeciesConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single film. */\nexport type FilmstarshipConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single film. */\nexport type FilmvehicleConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single film. */\nexport type FilmcharacterConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single film. */\nexport type FilmplanetConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** An object with an ID */\nexport type Node = {\n  /** The id of the object. */\n  id: Scalars['ID'];\n};\n\n/** A connection to a list of items. */\nexport type FilmSpeciesConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmSpeciesEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  species?: Maybe<Array<Maybe<Species>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmSpeciesEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Species>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A type of person or character within the Star Wars Universe. */\nexport type Species = Node & {\n  /** The name of this species. */\n  name?: Maybe<Scalars['String']>;\n  /** The classification of this species, such as \"mammal\" or \"reptile\". */\n  classification?: Maybe<Scalars['String']>;\n  /** The designation of this species, such as \"sentient\". */\n  designation?: Maybe<Scalars['String']>;\n  /** The average height of this species in centimeters. */\n  averageHeight?: Maybe<Scalars['Float']>;\n  /** The average lifespan of this species in years, null if unknown. */\n  averageLifespan?: Maybe<Scalars['Int']>;\n  /**\n   * Common eye colors for this species, null if this species does not typically\n   * have eyes.\n   */\n  eyeColors?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /**\n   * Common hair colors for this species, null if this species does not typically\n   * have hair.\n   */\n  hairColors?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /**\n   * Common skin colors for this species, null if this species does not typically\n   * have skin.\n   */\n  skinColors?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The language commonly spoken by this species. */\n  language?: Maybe<Scalars['String']>;\n  /** A planet that this species originates from. */\n  homeworld?: Maybe<Planet>;\n  personConnection?: Maybe<SpeciesPeopleConnection>;\n  filmConnection?: Maybe<SpeciesFilmsConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/** A type of person or character within the Star Wars Universe. */\nexport type SpeciespersonConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A type of person or character within the Star Wars Universe. */\nexport type SpeciesfilmConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type Planet = Node & {\n  /** The name of this planet. */\n  name?: Maybe<Scalars['String']>;\n  /** The diameter of this planet in kilometers. */\n  diameter?: Maybe<Scalars['Int']>;\n  /**\n   * The number of standard hours it takes for this planet to complete a single\n   * rotation on its axis.\n   */\n  rotationPeriod?: Maybe<Scalars['Int']>;\n  /**\n   * The number of standard days it takes for this planet to complete a single orbit\n   * of its local star.\n   */\n  orbitalPeriod?: Maybe<Scalars['Int']>;\n  /**\n   * A number denoting the gravity of this planet, where \"1\" is normal or 1 standard\n   * G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs.\n   */\n  gravity?: Maybe<Scalars['String']>;\n  /** The average population of sentient beings inhabiting this planet. */\n  population?: Maybe<Scalars['Float']>;\n  /** The climates of this planet. */\n  climates?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The terrains of this planet. */\n  terrains?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /**\n   * The percentage of the planet surface that is naturally occurring water or bodies\n   * of water.\n   */\n  surfaceWater?: Maybe<Scalars['Float']>;\n  residentConnection?: Maybe<PlanetResidentsConnection>;\n  filmConnection?: Maybe<PlanetFilmsConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type PlanetresidentConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type PlanetfilmConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A connection to a list of items. */\nexport type PlanetResidentsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetResidentsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  residents?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type PlanetResidentsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type Person = Node & {\n  /** The name of this person. */\n  name?: Maybe<Scalars['String']>;\n  /**\n   * The birth year of the person, using the in-universe standard of BBY or ABY -\n   * Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is\n   * a battle that occurs at the end of Star Wars episode IV: A New Hope.\n   */\n  birthYear?: Maybe<Scalars['String']>;\n  /**\n   * The eye color of this person. Will be \"unknown\" if not known or \"n/a\" if the\n   * person does not have an eye.\n   */\n  eyeColor?: Maybe<Scalars['String']>;\n  /**\n   * The gender of this person. Either \"Male\", \"Female\" or \"unknown\",\n   * \"n/a\" if the person does not have a gender.\n   */\n  gender?: Maybe<Scalars['String']>;\n  /**\n   * The hair color of this person. Will be \"unknown\" if not known or \"n/a\" if the\n   * person does not have hair.\n   */\n  hairColor?: Maybe<Scalars['String']>;\n  /** The height of the person in centimeters. */\n  height?: Maybe<Scalars['Int']>;\n  /** The mass of the person in kilograms. */\n  mass?: Maybe<Scalars['Float']>;\n  /** The skin color of this person. */\n  skinColor?: Maybe<Scalars['String']>;\n  /** A planet that this person was born on or inhabits. */\n  homeworld?: Maybe<Planet>;\n  filmConnection?: Maybe<PersonFilmsConnection>;\n  /** The species that this person belongs to, or null if unknown. */\n  species?: Maybe<Species>;\n  starshipConnection?: Maybe<PersonStarshipsConnection>;\n  vehicleConnection?: Maybe<PersonVehiclesConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonfilmConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonstarshipConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonvehicleConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A connection to a list of items. */\nexport type PersonFilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonFilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** An edge in a connection. */\nexport type PersonFilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type PersonStarshipsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonStarshipsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n};\n\n/** An edge in a connection. */\nexport type PersonStarshipsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A single transport craft that has hyperdrive capability. */\nexport type Starship = Node & {\n  /** The name of this starship. The common name, such as \"Death Star\". */\n  name?: Maybe<Scalars['String']>;\n  /**\n   * The model or official name of this starship. Such as \"T-65 X-wing\" or \"DS-1\n   * Orbital Battle Station\".\n   */\n  model?: Maybe<Scalars['String']>;\n  /**\n   * The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile\n   * Battlestation\"\n   */\n  starshipClass?: Maybe<Scalars['String']>;\n  /** The manufacturers of this starship. */\n  manufacturers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The cost of this starship new, in galactic credits. */\n  costInCredits?: Maybe<Scalars['Float']>;\n  /** The length of this starship in meters. */\n  length?: Maybe<Scalars['Float']>;\n  /** The number of personnel needed to run or pilot this starship. */\n  crew?: Maybe<Scalars['String']>;\n  /** The number of non-essential people this starship can transport. */\n  passengers?: Maybe<Scalars['String']>;\n  /**\n   * The maximum speed of this starship in atmosphere. null if this starship is\n   * incapable of atmosphering flight.\n   */\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>;\n  /** The class of this starships hyperdrive. */\n  hyperdriveRating?: Maybe<Scalars['Float']>;\n  /**\n   * The Maximum number of Megalights this starship can travel in a standard hour.\n   * A \"Megalight\" is a standard unit of distance and has never been defined before\n   * within the Star Wars universe. This figure is only really useful for measuring\n   * the difference in speed of starships. We can assume it is similar to AU, the\n   * distance between our Sun (Sol) and Earth.\n   */\n  MGLT?: Maybe<Scalars['Int']>;\n  /** The maximum number of kilograms that this starship can transport. */\n  cargoCapacity?: Maybe<Scalars['Float']>;\n  /**\n   * The maximum length of time that this starship can provide consumables for its\n   * entire crew without having to resupply.\n   */\n  consumables?: Maybe<Scalars['String']>;\n  pilotConnection?: Maybe<StarshipPilotsConnection>;\n  filmConnection?: Maybe<StarshipFilmsConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/** A single transport craft that has hyperdrive capability. */\nexport type StarshippilotConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single transport craft that has hyperdrive capability. */\nexport type StarshipfilmConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A connection to a list of items. */\nexport type StarshipPilotsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipPilotsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  pilots?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type StarshipPilotsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type StarshipFilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipFilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** An edge in a connection. */\nexport type StarshipFilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type PersonVehiclesConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonVehiclesEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type PersonVehiclesEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type Vehicle = Node & {\n  /**\n   * The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder\n   * bike\".\n   */\n  name?: Maybe<Scalars['String']>;\n  /**\n   * The model or official name of this vehicle. Such as \"All-Terrain Attack\n   * Transport\".\n   */\n  model?: Maybe<Scalars['String']>;\n  /** The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\". */\n  vehicleClass?: Maybe<Scalars['String']>;\n  /** The manufacturers of this vehicle. */\n  manufacturers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The cost of this vehicle new, in Galactic Credits. */\n  costInCredits?: Maybe<Scalars['Float']>;\n  /** The length of this vehicle in meters. */\n  length?: Maybe<Scalars['Float']>;\n  /** The number of personnel needed to run or pilot this vehicle. */\n  crew?: Maybe<Scalars['String']>;\n  /** The number of non-essential people this vehicle can transport. */\n  passengers?: Maybe<Scalars['String']>;\n  /** The maximum speed of this vehicle in atmosphere. */\n  maxAtmospheringSpeed?: Maybe<Scalars['Int']>;\n  /** The maximum number of kilograms that this vehicle can transport. */\n  cargoCapacity?: Maybe<Scalars['Float']>;\n  /**\n   * The maximum length of time that this vehicle can provide consumables for its\n   * entire crew without having to resupply.\n   */\n  consumables?: Maybe<Scalars['String']>;\n  pilotConnection?: Maybe<VehiclePilotsConnection>;\n  filmConnection?: Maybe<VehicleFilmsConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars['String']>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars['String']>;\n  /** The ID of an object */\n  id: Scalars['ID'];\n};\n\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type VehiclepilotConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type VehiclefilmConnectionArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n/** A connection to a list of items. */\nexport type VehiclePilotsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehiclePilotsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  pilots?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type VehiclePilotsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type VehicleFilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehicleFilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** An edge in a connection. */\nexport type VehicleFilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type PlanetFilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetFilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** An edge in a connection. */\nexport type PlanetFilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type SpeciesPeopleConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesPeopleEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  people?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesPeopleEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type SpeciesFilmsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesFilmsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesFilmsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type FilmStarshipsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmStarshipsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmStarshipsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type FilmVehiclesConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmVehiclesEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmVehiclesEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type FilmCharactersConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmCharactersEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  characters?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmCharactersEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type FilmPlanetsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmPlanetsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  planets?: Maybe<Array<Maybe<Planet>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmPlanetsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Planet>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type PeopleConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PeopleEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  people?: Maybe<Array<Maybe<Person>>>;\n};\n\n/** An edge in a connection. */\nexport type PeopleEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type PlanetsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  planets?: Maybe<Array<Maybe<Planet>>>;\n};\n\n/** An edge in a connection. */\nexport type PlanetsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Planet>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type SpeciesConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  species?: Maybe<Array<Maybe<Species>>>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Species>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type StarshipsConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipsEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n};\n\n/** An edge in a connection. */\nexport type StarshipsEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n/** A connection to a list of items. */\nexport type VehiclesConnection = {\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehiclesEdge>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars['Int']>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type VehiclesEdge = {\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n};\n\n    }\n    export type QueryStarWarsSdk = {\n  /** null **/\n  allFilms: InContextSdkMethod<StarWarsTypes.Root['allFilms'], StarWarsTypes.RootallFilmsArgs, MeshContext>,\n  /** null **/\n  film: InContextSdkMethod<StarWarsTypes.Root['film'], StarWarsTypes.RootfilmArgs, MeshContext>,\n  /** null **/\n  allPeople: InContextSdkMethod<StarWarsTypes.Root['allPeople'], StarWarsTypes.RootallPeopleArgs, MeshContext>,\n  /** null **/\n  person: InContextSdkMethod<StarWarsTypes.Root['person'], StarWarsTypes.RootpersonArgs, MeshContext>,\n  /** null **/\n  allPlanets: InContextSdkMethod<StarWarsTypes.Root['allPlanets'], StarWarsTypes.RootallPlanetsArgs, MeshContext>,\n  /** null **/\n  planet: InContextSdkMethod<StarWarsTypes.Root['planet'], StarWarsTypes.RootplanetArgs, MeshContext>,\n  /** null **/\n  allSpecies: InContextSdkMethod<StarWarsTypes.Root['allSpecies'], StarWarsTypes.RootallSpeciesArgs, MeshContext>,\n  /** null **/\n  species: InContextSdkMethod<StarWarsTypes.Root['species'], StarWarsTypes.RootspeciesArgs, MeshContext>,\n  /** null **/\n  allStarships: InContextSdkMethod<StarWarsTypes.Root['allStarships'], StarWarsTypes.RootallStarshipsArgs, MeshContext>,\n  /** null **/\n  starship: InContextSdkMethod<StarWarsTypes.Root['starship'], StarWarsTypes.RootstarshipArgs, MeshContext>,\n  /** null **/\n  allVehicles: InContextSdkMethod<StarWarsTypes.Root['allVehicles'], StarWarsTypes.RootallVehiclesArgs, MeshContext>,\n  /** null **/\n  vehicle: InContextSdkMethod<StarWarsTypes.Root['vehicle'], StarWarsTypes.RootvehicleArgs, MeshContext>,\n  /** Fetches an object given its ID **/\n  node: InContextSdkMethod<StarWarsTypes.Root['node'], StarWarsTypes.RootnodeArgs, MeshContext>\n};\n\nexport type MutationStarWarsSdk = {\n\n};\n\nexport type SubscriptionStarWarsSdk = {\n\n};\n\nexport type CountriesContext = {\n      [\"Countries\"]: { Query: QueryCountriesSdk, Mutation: MutationCountriesSdk, Subscription: SubscriptionCountriesSdk },\n      \n    };\n\nexport type StarWarsContext = {\n      [\"Star wars\"]: { Query: QueryStarWarsSdk, Mutation: MutationStarWarsSdk, Subscription: SubscriptionStarWarsSdk },\n      \n    };\n\nexport type MeshContext = CountriesContext & StarWarsContext & BaseMeshContext;\n\n\nimport { getMesh, ExecuteMeshFn, SubscribeMeshFn } from '@graphql-mesh/runtime';\nimport { MeshStore, FsStoreStorageAdapter } from '@graphql-mesh/store';\nimport { path as pathModule } from '@graphql-mesh/cross-helpers';\n\nimport { fileURLToPath } from '@graphql-mesh/utils';\nconst baseDir = pathModule.join(pathModule.dirname(fileURLToPath(import.meta.url)), '..');\n\nconst importFn = (moduleId: string) => {\n  const relativeModuleId = (pathModule.isAbsolute(moduleId) ? pathModule.relative(baseDir, moduleId) : moduleId).split('\\\\').join('/').replace(baseDir + '/', '');\n  switch(relativeModuleId) {\n    case \".mesh/sources/Countries/introspectionSchema\":\n      return import(\"./sources/Countries/introspectionSchema\");\n    \n    case \".mesh/sources/Star wars/introspectionSchema\":\n      return import(\"./sources/Star wars/introspectionSchema\");\n    \n    case \".mesh/stitchingMerger/Countries_stitching\":\n      return import(\"./stitchingMerger/Countries_stitching\");\n    \n    default:\n      return Promise.reject(new Error(`Cannot find module '${relativeModuleId}'.`));\n  }\n};\n\nconst rootStore = new MeshStore('.mesh', new FsStoreStorageAdapter({\n  cwd: baseDir,\n  importFn,\n  fileType: \"ts\",\n}), {\n  readonly: true,\n  validate: false\n});\n\nimport type { GetMeshOptions } from '@graphql-mesh/runtime';\nimport type { YamlConfig } from '@graphql-mesh/types';\nimport { PubSub } from '@graphql-mesh/utils';\nimport MeshCache from \"@graphql-mesh/cache-localforage\";\nimport { DefaultLogger } from '@graphql-mesh/utils';\nimport GraphqlHandler from \"@graphql-mesh/graphql\"\nimport StitchingMerger from \"@graphql-mesh/merger-stitching\";\nimport { printWithCache } from '@graphql-mesh/utils';\nexport const rawServeConfig: YamlConfig.Config['serve'] = undefined as any\nexport async function getMeshOptions(): Promise<GetMeshOptions> {\nconst pubsub = new PubSub();\nconst cache = new (MeshCache as any)({\n      ...({} as any),\n      importFn,\n      store: rootStore.child('cache'),\n      pubsub,\n    } as any)\nconst sourcesStore = rootStore.child('sources');\nconst logger = new DefaultLogger(\"\uD83D\uDD78\uFE0F  Mesh\");\nconst sources = [];\nconst transforms = [];\nconst additionalEnvelopPlugins = [];\nconst countriesTransforms = [];\nconst starWarsTransforms = [];\nconst additionalTypeDefs = [] as any[];\nconst countriesHandler = new GraphqlHandler({\n              name: \"Countries\",\n              config: {\"endpoint\":\"https://countries.trevorblades.com/\"},\n              baseDir,\n              cache,\n              pubsub,\n              store: sourcesStore.child(\"Countries\"),\n              logger: logger.child(\"Countries\"),\n              importFn\n            });\nconst starWarsHandler = new GraphqlHandler({\n              name: \"Star wars\",\n              config: {\"endpoint\":\"https://swapi-graphql.netlify.app/.netlify/functions/index\"},\n              baseDir,\n              cache,\n              pubsub,\n              store: sourcesStore.child(\"Star wars\"),\n              logger: logger.child(\"Star wars\"),\n              importFn\n            });\nsources[0] = {\n          name: 'Countries',\n          handler: countriesHandler,\n          transforms: countriesTransforms\n        }\nsources[1] = {\n          name: 'Star wars',\n          handler: starWarsHandler,\n          transforms: starWarsTransforms\n        }\nconst merger = new(StitchingMerger as any)({\n        cache,\n        pubsub,\n        logger: logger.child('stitchingMerger'),\n        store: rootStore.child('stitchingMerger')\n      })\nconst additionalResolvers = [] as any[]\n\n  return {\n    sources,\n    transforms,\n    additionalTypeDefs,\n    additionalResolvers,\n    cache,\n    pubsub,\n    merger,\n    logger,\n    additionalEnvelopPlugins,\n    get documents() {\n      return [\n      \n    ];\n    },\n  };\n}\n\nlet meshInstance$: Promise<MeshInstance<MeshContext>>;\n\nexport function getBuiltMesh(): Promise<MeshInstance<MeshContext>> {\n  if (meshInstance$ == null) {\n    meshInstance$ = getMeshOptions().then(meshOptions => getMesh<MeshContext>(meshOptions)).then(mesh => {\n      const id$ = mesh.pubsub.subscribe('destroy', () => {\n        meshInstance$ = undefined;\n        id$.then(id => mesh.pubsub.unsubscribe(id)).catch(err => console.error(err));\n      });\n      return mesh;\n    });\n  }\n  return meshInstance$;\n}\n\nexport const execute: ExecuteMeshFn = (...args) => getBuiltMesh().then(({ execute }) => execute(...args));\n\nexport const subscribe: SubscribeMeshFn = (...args) => getBuiltMesh().then(({ subscribe }) => subscribe(...args));", "import { getOperationAST, getNamedType, isLeafType, Kind, print } from 'graphql';\nimport { PubSub, DefaultLogger, groupTransforms, applySchemaTransforms, parseWithCache } from '@graphql-mesh/utils';\nimport { delegateToSchema } from '@graphql-tools/delegate';\nimport { batchDelegateToSchema } from '@graphql-tools/batch-delegate';\nimport { WrapQuery } from '@graphql-tools/wrap';\nimport { memoize1, isAsyncIterable, mapAsyncIterator, AggregateError, parseSelectionSet, isDocumentNode } from '@graphql-tools/utils';\nimport { envelop, useSchema, useExtendContext, enableIf } from '@envelop/core';\nimport { useExtendedValidation, OneOfInputObjectsRule } from '@envelop/extended-validation';\n\nconst MESH_CONTEXT_SYMBOL = Symbol('isMeshContext');\nconst MESH_API_CONTEXT_SYMBOL = Symbol('isMeshAPIContext');\n\nconst memoizedGetOperationType = memoize1((document) => {\n    const operationAST = getOperationAST(document, undefined);\n    if (!operationAST) {\n        throw new Error('Must provide document with a valid operation');\n    }\n    return operationAST.operation;\n});\nconst memoizedGetEnvelopedFactory = memoize1(function getEnvelopedFactory(plugins) {\n    const getEnveloped = envelop({ plugins });\n    return memoize1(function getEnvelopedByContext(initialContext) {\n        return getEnveloped(initialContext);\n    });\n});\nasync function getMesh(options) {\n    const rawSources = [];\n    const { pubsub = new PubSub(), cache, logger = new DefaultLogger('\uD83D\uDD78\uFE0F  Mesh'), additionalEnvelopPlugins = [], sources, merger, additionalResolvers, additionalTypeDefs, transforms, } = options;\n    const getMeshLogger = logger.child('GetMesh');\n    getMeshLogger.debug(`Getting subschemas from source handlers`);\n    let failed = false;\n    await Promise.allSettled(sources.map(async (apiSource) => {\n        const apiName = apiSource.name;\n        const sourceLogger = logger.child(apiName);\n        sourceLogger.debug(`Generating the schema`);\n        try {\n            const source = await apiSource.handler.getMeshSource();\n            sourceLogger.debug(`The schema has been generated successfully`);\n            let apiSchema = source.schema;\n            sourceLogger.debug(`Analyzing transforms`);\n            let transforms;\n            const { wrapTransforms, noWrapTransforms } = groupTransforms(apiSource.transforms);\n            if (!(wrapTransforms === null || wrapTransforms === void 0 ? void 0 : wrapTransforms.length) && (noWrapTransforms === null || noWrapTransforms === void 0 ? void 0 : noWrapTransforms.length)) {\n                sourceLogger.debug(`${noWrapTransforms.length} bare transforms found and applying`);\n                apiSchema = applySchemaTransforms(apiSchema, source, null, noWrapTransforms);\n            }\n            else {\n                transforms = apiSource.transforms;\n            }\n            rawSources.push({\n                name: apiName,\n                schema: apiSchema,\n                executor: source.executor,\n                transforms,\n                contextVariables: source.contextVariables || {},\n                handler: apiSource.handler,\n                batch: 'batch' in source ? source.batch : true,\n                merge: apiSource.merge,\n            });\n        }\n        catch (e) {\n            sourceLogger.error(`Failed to generate the schema`, e);\n            failed = true;\n        }\n    }));\n    if (failed) {\n        throw new Error(`Schemas couldn't be generated successfully. Check for the logs by running Mesh with DEBUG=1 environmental variable to get more verbose output.`);\n    }\n    getMeshLogger.debug(`Schemas have been generated by the source handlers`);\n    getMeshLogger.debug(`Merging schemas using the defined merging strategy.`);\n    const unifiedSchema = await merger.getUnifiedSchema({\n        rawSources,\n        typeDefs: additionalTypeDefs,\n        resolvers: additionalResolvers,\n        transforms,\n    });\n    getMeshLogger.debug(`Building Mesh Context`);\n    const meshContext = {\n        pubsub,\n        cache,\n        logger,\n        [MESH_CONTEXT_SYMBOL]: true,\n    };\n    getMeshLogger.debug(`Attaching in-context SDK, pubsub and cache to the context`);\n    const sourceMap = unifiedSchema.extensions.sourceMap;\n    await Promise.all(rawSources.map(async (rawSource) => {\n        const rawSourceLogger = logger.child(`${rawSource.name}`);\n        const rawSourceContext = {\n            rawSource,\n            [MESH_API_CONTEXT_SYMBOL]: true,\n        };\n        // TODO: Somehow rawSource reference got lost in somewhere\n        let rawSourceSubSchemaConfig;\n        const stitchingInfo = unifiedSchema.extensions.stitchingInfo;\n        if (stitchingInfo) {\n            for (const [subschemaConfig, subschema] of stitchingInfo.subschemaMap) {\n                if (subschemaConfig.name === rawSource.name) {\n                    rawSourceSubSchemaConfig = subschema;\n                    break;\n                }\n            }\n        }\n        else {\n            rawSourceSubSchemaConfig = rawSource;\n        }\n        const transformedSchema = sourceMap.get(rawSource);\n        const rootTypes = {\n            query: transformedSchema.getQueryType(),\n            mutation: transformedSchema.getMutationType(),\n            subscription: transformedSchema.getSubscriptionType(),\n        };\n        rawSourceLogger.debug(`Generating In Context SDK`);\n        for (const operationType in rootTypes) {\n            const rootType = rootTypes[operationType];\n            if (rootType) {\n                rawSourceContext[rootType.name] = {};\n                const rootTypeFieldMap = rootType.getFields();\n                for (const fieldName in rootTypeFieldMap) {\n                    const rootTypeField = rootTypeFieldMap[fieldName];\n                    const inContextSdkLogger = rawSourceLogger.child(`InContextSDK.${rootType.name}.${fieldName}`);\n                    const namedReturnType = getNamedType(rootTypeField.type);\n                    const shouldHaveSelectionSet = !isLeafType(namedReturnType);\n                    rawSourceContext[rootType.name][fieldName] = ({ root, args, context, info = {\n                        fieldName,\n                        fieldNodes: [],\n                        returnType: namedReturnType,\n                        parentType: rootType,\n                        path: {\n                            typename: rootType.name,\n                            key: fieldName,\n                            prev: undefined,\n                        },\n                        schema: transformedSchema,\n                        fragments: {},\n                        rootValue: root,\n                        operation: {\n                            kind: Kind.OPERATION_DEFINITION,\n                            operation: operationType,\n                            selectionSet: {\n                                kind: Kind.SELECTION_SET,\n                                selections: [],\n                            },\n                        },\n                        variableValues: {},\n                        cacheControl: {\n                            setCacheHint: () => { },\n                            cacheHint: {},\n                        },\n                    }, selectionSet, key, argsFromKeys, valuesFromResults, }) => {\n                        inContextSdkLogger.debug(`Called with`, {\n                            args,\n                            key,\n                        });\n                        const commonDelegateOptions = {\n                            schema: rawSourceSubSchemaConfig,\n                            rootValue: root,\n                            operation: operationType,\n                            fieldName,\n                            context,\n                            transformedSchema,\n                            info,\n                        };\n                        // If there isn't an extraction of a value\n                        if (typeof selectionSet !== 'function') {\n                            commonDelegateOptions.returnType = rootTypeField.type;\n                        }\n                        if (shouldHaveSelectionSet) {\n                            let selectionCount = 0;\n                            for (const fieldNode of info.fieldNodes) {\n                                if (fieldNode.selectionSet != null) {\n                                    selectionCount += fieldNode.selectionSet.selections.length;\n                                }\n                            }\n                            if (selectionCount === 0) {\n                                if (!selectionSet) {\n                                    throw new Error(`You have to provide 'selectionSet' for context.${rawSource.name}.${rootType.name}.${fieldName}`);\n                                }\n                                commonDelegateOptions.info = {\n                                    ...info,\n                                    fieldNodes: [\n                                        {\n                                            ...info.fieldNodes[0],\n                                            selectionSet: {\n                                                kind: Kind.SELECTION_SET,\n                                                selections: [\n                                                    {\n                                                        kind: Kind.FIELD,\n                                                        name: {\n                                                            kind: Kind.NAME,\n                                                            value: '__typename',\n                                                        },\n                                                    },\n                                                ],\n                                            },\n                                        },\n                                        ...info.fieldNodes.slice(1),\n                                    ],\n                                };\n                            }\n                        }\n                        if (key && argsFromKeys) {\n                            const batchDelegationOptions = {\n                                ...commonDelegateOptions,\n                                key,\n                                argsFromKeys,\n                                valuesFromResults,\n                            };\n                            if (selectionSet) {\n                                const selectionSetFactory = normalizeSelectionSetParamOrFactory(selectionSet);\n                                const path = [fieldName];\n                                const wrapQueryTransform = new WrapQuery(path, selectionSetFactory, identical);\n                                batchDelegationOptions.transforms = [wrapQueryTransform];\n                            }\n                            return batchDelegateToSchema(batchDelegationOptions);\n                        }\n                        else {\n                            const regularDelegateOptions = {\n                                ...commonDelegateOptions,\n                                args,\n                            };\n                            if (selectionSet) {\n                                const selectionSetFactory = normalizeSelectionSetParamOrFactory(selectionSet);\n                                const path = [fieldName];\n                                const wrapQueryTransform = new WrapQuery(path, selectionSetFactory, valuesFromResults || identical);\n                                regularDelegateOptions.transforms = [wrapQueryTransform];\n                            }\n                            return delegateToSchema(regularDelegateOptions);\n                        }\n                    };\n                }\n            }\n        }\n        meshContext[rawSource.name] = rawSourceContext;\n    }));\n    const plugins = [\n        useSchema(unifiedSchema),\n        useExtendContext(() => meshContext),\n        enableIf(!!unifiedSchema.getDirective('oneOf'), () => useExtendedValidation({\n            rules: [OneOfInputObjectsRule],\n        })),\n        {\n            onParse({ setParseFn }) {\n                setParseFn(parseWithCache);\n            },\n        },\n        ...additionalEnvelopPlugins,\n    ];\n    const EMPTY_ROOT_VALUE = {};\n    const EMPTY_CONTEXT_VALUE = {};\n    const EMPTY_VARIABLES_VALUE = {};\n    async function meshExecute(documentOrSDL, variableValues = EMPTY_VARIABLES_VALUE, contextValue = EMPTY_CONTEXT_VALUE, rootValue = EMPTY_ROOT_VALUE, operationName) {\n        const getEnveloped = memoizedGetEnvelopedFactory(plugins);\n        const { execute, contextFactory, parse } = getEnveloped(contextValue);\n        return execute({\n            document: typeof documentOrSDL === 'string' ? parse(documentOrSDL) : documentOrSDL,\n            contextValue: await contextFactory(),\n            rootValue,\n            variableValues: variableValues,\n            schema: unifiedSchema,\n            operationName,\n        });\n    }\n    async function meshSubscribe(documentOrSDL, variableValues = EMPTY_VARIABLES_VALUE, contextValue = EMPTY_CONTEXT_VALUE, rootValue = EMPTY_ROOT_VALUE, operationName) {\n        const getEnveloped = memoizedGetEnvelopedFactory(plugins);\n        const { subscribe, contextFactory, parse } = getEnveloped(contextValue);\n        return subscribe({\n            document: typeof documentOrSDL === 'string' ? parse(documentOrSDL) : documentOrSDL,\n            contextValue: await contextFactory(),\n            rootValue,\n            variableValues: variableValues,\n            schema: unifiedSchema,\n            operationName,\n        });\n    }\n    function sdkRequesterFactory(globalContext) {\n        return async function meshSdkRequester(document, variables, contextValue) {\n            var _a, _b;\n            if (memoizedGetOperationType(document) === 'subscription') {\n                const result = await meshSubscribe(document, variables, {\n                    ...globalContext,\n                    ...contextValue,\n                });\n                if (isAsyncIterable(result)) {\n                    return mapAsyncIterator(result, result => {\n                        var _a;\n                        if ((_a = result === null || result === void 0 ? void 0 : result.errors) === null || _a === void 0 ? void 0 : _a.length) {\n                            return new AggregateError(result.errors);\n                        }\n                        return result === null || result === void 0 ? void 0 : result.data;\n                    });\n                }\n                if ((_a = result === null || result === void 0 ? void 0 : result.errors) === null || _a === void 0 ? void 0 : _a.length) {\n                    return new AggregateError(result.errors);\n                }\n                return result === null || result === void 0 ? void 0 : result.data;\n            }\n            else {\n                const result = await meshExecute(document, variables, {\n                    ...globalContext,\n                    ...contextValue,\n                });\n                if ((_b = result === null || result === void 0 ? void 0 : result.errors) === null || _b === void 0 ? void 0 : _b.length) {\n                    return new AggregateError(result.errors);\n                }\n                return result === null || result === void 0 ? void 0 : result.data;\n            }\n        };\n    }\n    return {\n        execute: meshExecute,\n        subscribe: meshSubscribe,\n        schema: unifiedSchema,\n        rawSources,\n        cache,\n        pubsub,\n        destroy() {\n            return pubsub.publish('destroy', undefined);\n        },\n        logger,\n        meshContext: meshContext,\n        plugins,\n        get getEnveloped() {\n            return memoizedGetEnvelopedFactory(plugins);\n        },\n        sdkRequesterFactory,\n    };\n}\nfunction normalizeSelectionSetParam(selectionSetParam) {\n    if (typeof selectionSetParam === 'string') {\n        return parseSelectionSet(selectionSetParam);\n    }\n    if (isDocumentNode(selectionSetParam)) {\n        return parseSelectionSet(print(selectionSetParam));\n    }\n    return selectionSetParam;\n}\nfunction normalizeSelectionSetParamOrFactory(selectionSetParamOrFactory) {\n    return function getSelectionSet(subtree) {\n        if (typeof selectionSetParamOrFactory === 'function') {\n            const selectionSetParam = selectionSetParamOrFactory(subtree);\n            return normalizeSelectionSetParam(selectionSetParam);\n        }\n        else {\n            return normalizeSelectionSetParam(selectionSetParamOrFactory);\n        }\n    };\n}\nfunction identical(val) {\n    return val;\n}\n\nexport { getMesh };\n", "import { fetchFactory } from 'fetchache';\nimport { fetch, Request, Response } from 'cross-undici-fetch';\nimport isUrl from 'is-url';\nimport { load, DEFAULT_SCHEMA, Type } from 'js-yaml';\nimport { path, fs, process as process$1, util } from '@graphql-mesh/cross-helpers';\nimport { memoize1, getResolversFromSchema, parseSelectionSet, observableToAsyncIterable } from '@graphql-tools/utils';\nimport lru from 'tiny-lru';\nimport { isAbstractType, getNamedType, isInterfaceType, isObjectType, Kind, parse, print } from 'graphql';\nimport { withFilter } from 'graphql-subscriptions';\nimport lodashGet from 'lodash.get';\nimport lodashSet from 'lodash.set';\nimport toPath from 'lodash.topath';\nimport { stringInterpolator } from '@graphql-mesh/string-interpolation';\nimport chalk from 'chalk';\nimport fileUriToPath from 'file-uri-to-path';\n\nasync function defaultImportFn(path) {\n    let module = await import(/* @vite-ignore */ path).catch(e => {\n        if (e.message.includes('Must use import to load ES Module')) {\n            // eslint-disable-next-line no-new-func\n            return new Function(`return import(${JSON.stringify(path)})`)();\n        }\n        throw e;\n    });\n    if (module.default != null) {\n        module = module.default;\n    }\n    if (typeof module === 'object' && module != null) {\n        const prototypeOfObject = Object.getPrototypeOf(module);\n        if (prototypeOfObject == null || prototypeOfObject === Object.prototype) {\n            const normalizedVal = {};\n            for (const key in module) {\n                normalizedVal[key] = module[key];\n            }\n            return normalizedVal;\n        }\n    }\n    return module;\n}\n\n/* eslint-disable @typescript-eslint/return-await */\nasync function loadFromModuleExportExpression(expression, options) {\n    if (typeof expression !== 'string') {\n        return Promise.resolve(expression);\n    }\n    const { defaultExportName, cwd, importFn = defaultImportFn } = options || {};\n    const [modulePath, exportName = defaultExportName] = expression.split('#');\n    const mod = await tryImport(modulePath, cwd, importFn);\n    return mod[exportName] || (mod.default && mod.default[exportName]) || mod.default || mod;\n}\nasync function tryImport(modulePath, cwd, importFn) {\n    try {\n        return await importFn(modulePath);\n    }\n    catch (_a) {\n        if (!path.isAbsolute(modulePath)) {\n            const absoluteModulePath = path.isAbsolute(modulePath) ? modulePath : path.join(cwd, modulePath);\n            return importFn(absoluteModulePath);\n        }\n    }\n}\n\nconst getCachedFetch = memoize1(function getCachedFetch(cache) {\n    return fetchFactory({\n        fetch: fetch,\n        Request,\n        Response,\n        cache,\n    });\n});\nasync function readFileOrUrl(filePathOrUrl, config) {\n    var _a, _b;\n    if (isUrl(filePathOrUrl)) {\n        (_a = config === null || config === void 0 ? void 0 : config.logger) === null || _a === void 0 ? void 0 : _a.debug(`Fetching ${filePathOrUrl} via HTTP`);\n        return readUrl(filePathOrUrl, config);\n    }\n    else if (filePathOrUrl.startsWith('{') || filePathOrUrl.startsWith('[')) {\n        return JSON.parse(filePathOrUrl);\n    }\n    else {\n        (_b = config === null || config === void 0 ? void 0 : config.logger) === null || _b === void 0 ? void 0 : _b.debug(`Reading ${filePathOrUrl} from the file system`);\n        return readFile(filePathOrUrl, config);\n    }\n}\nfunction getSchema(filepath, logger) {\n    return DEFAULT_SCHEMA.extend([\n        new Type('!include', {\n            kind: 'scalar',\n            resolve(path) {\n                return typeof path === 'string';\n            },\n            construct(path$1) {\n                const newCwd = path.dirname(filepath);\n                const absoluteFilePath = path.isAbsolute(path$1) ? path$1 : path.resolve(newCwd, path$1);\n                const content = fs.readFileSync(absoluteFilePath, 'utf8');\n                return loadYaml(absoluteFilePath, content, logger);\n            },\n        }),\n        new Type('!includes', {\n            kind: 'scalar',\n            resolve(path) {\n                return typeof path === 'string';\n            },\n            construct(path$1) {\n                const newCwd = path.dirname(filepath);\n                const absoluteDirPath = path.isAbsolute(path$1) ? path$1 : path.resolve(newCwd, path$1);\n                const files = fs.readdirSync(absoluteDirPath);\n                return files.map(filePath => {\n                    const absoluteFilePath = path.resolve(absoluteDirPath, filePath);\n                    const fileContent = fs.readFileSync(absoluteFilePath, 'utf8');\n                    return loadYaml(absoluteFilePath, fileContent, logger);\n                });\n            },\n        }),\n    ]);\n}\nfunction loadYaml(filepath, content, logger) {\n    return load(content, {\n        filename: filepath,\n        schema: getSchema(filepath, logger),\n        onWarning(warning) {\n            logger === null || logger === void 0 ? void 0 : logger.warn(`${filepath}: ${warning.message}\\n${warning.stack}`);\n        },\n    });\n}\nasync function readFile(fileExpression, config) {\n    const { allowUnknownExtensions, cwd, fallbackFormat, importFn = defaultImportFn } = config || {};\n    const [filePath] = fileExpression.split('#');\n    if (/js$/.test(filePath) || /ts$/.test(filePath)) {\n        return loadFromModuleExportExpression(fileExpression, {\n            cwd,\n            importFn,\n            defaultExportName: 'default',\n        });\n    }\n    const actualPath = path.isAbsolute(filePath) ? filePath : path.resolve(cwd || process.cwd(), filePath);\n    const rawResult = await fs.promises.readFile(actualPath, 'utf-8');\n    if (/json$/.test(actualPath)) {\n        return JSON.parse(rawResult);\n    }\n    if (/yaml$/.test(actualPath) || /yml$/.test(actualPath)) {\n        return loadYaml(actualPath, rawResult, config === null || config === void 0 ? void 0 : config.logger);\n    }\n    else if (fallbackFormat) {\n        switch (fallbackFormat) {\n            case 'json':\n                return JSON.parse(rawResult);\n            case 'yaml':\n                return loadYaml(actualPath, rawResult, config === null || config === void 0 ? void 0 : config.logger);\n            case 'ts':\n            case 'js':\n                return importFn(actualPath);\n        }\n    }\n    else if (!allowUnknownExtensions) {\n        throw new Error(`Failed to parse JSON/YAML. Ensure file '${filePath}' has ` +\n            `the correct extension (i.e. '.json', '.yaml', or '.yml).`);\n    }\n    return rawResult;\n}\nasync function readUrl(path, config) {\n    var _a, _b;\n    const { allowUnknownExtensions, fallbackFormat } = config || {};\n    const fetch$1 = (config === null || config === void 0 ? void 0 : config.fetch) || fetch;\n    config.headers = config.headers || {};\n    const response = await fetch$1(path, config);\n    const contentType = ((_a = response.headers) === null || _a === void 0 ? void 0 : _a.get('content-type')) || '';\n    const responseText = await response.text();\n    (_b = config === null || config === void 0 ? void 0 : config.logger) === null || _b === void 0 ? void 0 : _b.debug(`${path} returned `, responseText);\n    if (/json$/.test(path) || contentType.startsWith('application/json') || fallbackFormat === 'json') {\n        return JSON.parse(responseText);\n    }\n    else if (/yaml$/.test(path) ||\n        /yml$/.test(path) ||\n        contentType.includes('yaml') ||\n        contentType.includes('yml') ||\n        fallbackFormat === 'yaml') {\n        return loadYaml(path, responseText, config === null || config === void 0 ? void 0 : config.logger);\n    }\n    else if (!allowUnknownExtensions) {\n        throw new Error(`Failed to parse JSON/YAML. Ensure URL '${path}' has ` +\n            `the correct extension (i.e. '.json', '.yaml', or '.yml) or mime type in the response headers.`);\n    }\n    return responseText;\n}\n\nfunction withCancel(asyncIterable, onCancel) {\n    return new Proxy(asyncIterable, {\n        get(asyncIterable, prop) {\n            var _a;\n            if (prop === Symbol.asyncIterator) {\n                return function getIteratorWithCancel() {\n                    const asyncIterator = asyncIterable[Symbol.asyncIterator]();\n                    return {\n                        next: asyncIterator.next ? (...args) => asyncIterator.next(...args) : undefined,\n                        return: async (...args) => {\n                            onCancel();\n                            if (asyncIterator.return) {\n                                return asyncIterator.return(...args);\n                            }\n                            return {\n                                value: undefined,\n                                done: true,\n                            };\n                        },\n                        throw: asyncIterator.throw ? (...args) => asyncIterator.throw(...args) : undefined,\n                    };\n                };\n            }\n            return (_a = asyncIterable[prop]) === null || _a === void 0 ? void 0 : _a.bind(asyncIterable);\n        },\n    });\n}\n\nfunction extractResolvers(schema) {\n    const allResolvers = getResolversFromSchema(schema);\n    const filteredResolvers = {};\n    for (const prop in allResolvers) {\n        if (!prop.startsWith('_')) {\n            filteredResolvers[prop] = allResolvers[prop];\n        }\n        if (typeof filteredResolvers === 'object') {\n            for (const fieldName in filteredResolvers[prop]) {\n                if (!prop.startsWith('_resolveType')) {\n                    filteredResolvers[prop][fieldName] = allResolvers[prop][fieldName];\n                }\n            }\n        }\n    }\n    return filteredResolvers;\n}\n\nfunction groupTransforms(transforms) {\n    const wrapTransforms = [];\n    const noWrapTransforms = [];\n    transforms === null || transforms === void 0 ? void 0 : transforms.forEach(transform => {\n        if (transform.noWrap) {\n            noWrapTransforms.push(transform);\n        }\n        else {\n            wrapTransforms.push(transform);\n        }\n    });\n    return { wrapTransforms, noWrapTransforms };\n}\n\nfunction applySchemaTransforms(originalWrappingSchema, subschemaConfig, transformedSchema, transforms) {\n    return transforms.reduce((schema, transform) => 'transformSchema' in transform ? transform.transformSchema(schema, subschemaConfig, transformedSchema) : schema, originalWrappingSchema);\n}\nfunction applyRequestTransforms(originalRequest, delegationContext, transformationContext, transforms) {\n    transformationContext.contextMap = transformationContext.contextMap || new WeakMap();\n    const contextMap = transformationContext.contextMap;\n    transforms === null || transforms === void 0 ? void 0 : transforms.forEach(transform => {\n        if (!contextMap.has(transform)) {\n            contextMap.set(transform, {\n                nextIndex: 0,\n                paths: {},\n            });\n        }\n    });\n    return transforms.reduceRight((request, transform) => 'transformRequest' in transform\n        ? transform.transformRequest(request, delegationContext, contextMap.get(transform))\n        : request, originalRequest);\n}\nfunction applyResultTransforms(originalResult, delegationContext, transformationContext, transforms) {\n    const contextMap = transformationContext.contextMap;\n    return transforms.reduce((result, transform) => 'transformResult' in transform\n        ? transform.transformResult(result, delegationContext, contextMap.get(transform))\n        : result, originalResult);\n}\n\nasync function pathExists(path) {\n    if (!path) {\n        return false;\n    }\n    try {\n        await fs.promises.stat(path);\n        return true;\n    }\n    catch (e) {\n        if (e.toString().includes('ENOENT')) {\n            return false;\n        }\n        else {\n            throw e;\n        }\n    }\n}\nfunction writeJSON(path, data, replacer, space) {\n    const stringified = JSON.stringify(data, replacer, space);\n    return writeFile(path, stringified, 'utf-8');\n}\nconst writeFile = async (path$1, ...args) => {\n    if (typeof path$1 === 'string') {\n        const containingDir = path.dirname(path$1);\n        if (!(await pathExists(containingDir))) {\n            await mkdir(containingDir);\n        }\n    }\n    return fs.promises.writeFile(path$1, ...args);\n};\nasync function mkdir(path, options = { recursive: true }) {\n    const ifExists = await pathExists(path);\n    if (!ifExists) {\n        await fs.promises.mkdir(path, options);\n    }\n}\nasync function rmdirs(dir) {\n    if (await pathExists(dir)) {\n        const entries = await fs.promises.readdir(dir, { withFileTypes: true });\n        const results = await Promise.allSettled(entries.map(entry => {\n            const fullPath = path.join(dir, entry.name);\n            if (entry.isDirectory()) {\n                return rmdirs(fullPath);\n            }\n            else {\n                return fs.promises.unlink(fullPath);\n            }\n        }));\n        for (const result of results) {\n            if (result.status === 'rejected' && result.reason.code !== 'ENOENT') {\n                throw result.reason;\n            }\n        }\n        await fs.promises.rmdir(dir);\n    }\n}\n\nfunction createLruCache(max, ttl) {\n    return lru(max, ttl);\n}\n\nconst reservedNames = ['Query', 'Mutation', 'Subscription'];\nconst KNOWN_CHARACTERS = {\n    '+': 'PLUS',\n    '-': 'MINUS',\n    '>': 'GREATER_THAN',\n    '<': 'LESS_THAN',\n    '=': 'EQUALS',\n    '&': 'AMPERSAND',\n    '|': 'PIPE',\n    '@': 'AT',\n    '*': 'STAR',\n    ':': 'COLON',\n    '{': 'LEFT_CURLY_BRACE',\n    '}': 'RIGHT_CURLY_BRACE',\n    '[': 'LEFT_SQUARE_BRACE',\n    ']': 'RIGHT_SQUARE_BRACE',\n    ',': 'COMMA',\n    '%': 'PERCENT',\n    $: 'DOLLAR',\n    '#': 'POUND',\n    '^': 'CARET',\n    '~': 'TILDE',\n    '?': 'QUESTION_MARK',\n    '!': 'EXCLAMATION_MARK',\n    '\"': 'QUOTATION_MARK',\n    \"'\": 'SINGLE_QUOTE',\n    '\\\\': 'BACKSLASH',\n    '/': 'SLASH',\n    '.': 'DOT',\n    '`': 'BACKTICK',\n    ';': 'SEMICOLON',\n    '(': 'LEFT_PARENTHESIS',\n    ')': 'RIGHT_PARENTHESIS',\n};\nfunction getKnownCharacterOrCharCode(ch) {\n    return KNOWN_CHARACTERS[ch] || ch.charCodeAt(0).toString();\n}\nfunction sanitizeNameForGraphQL(unsafeName) {\n    let sanitizedName = unsafeName.trim();\n    if (!isNaN(parseInt(sanitizedName))) {\n        if (sanitizedName.startsWith('-')) {\n            sanitizedName = sanitizedName.replace('-', 'NEGATIVE_');\n        }\n        else {\n            sanitizedName = '_' + sanitizedName;\n        }\n    }\n    if (!/^[_a-zA-Z0-9]*$/.test(sanitizedName)) {\n        const unsanitizedName = sanitizedName;\n        sanitizedName = '';\n        for (const ch of unsanitizedName) {\n            if (/^[_a-zA-Z0-9]$/.test(ch)) {\n                sanitizedName += ch;\n            }\n            else if (ch === ' ' || ch === '-' || ch === '.') {\n                sanitizedName += '_';\n            }\n            else {\n                sanitizedName += `_${getKnownCharacterOrCharCode(ch)}_`;\n            }\n        }\n    }\n    // Names cannot start with __\n    if (sanitizedName.startsWith('__')) {\n        sanitizedName = sanitizedName.replace('__', '_0');\n    }\n    if (reservedNames.includes(sanitizedName)) {\n        sanitizedName += '_';\n    }\n    return sanitizedName;\n}\n\nfunction getTypeByPath(type, path) {\n    if ('ofType' in type) {\n        return getTypeByPath(getNamedType(type), path);\n    }\n    if (path.length === 0) {\n        return getNamedType(type);\n    }\n    if (!('getFields' in type)) {\n        throw new Error(`${type} cannot have a path ${path.join('.')}`);\n    }\n    const fieldMap = type.getFields();\n    const currentFieldName = path[0];\n    // Might be an index of an array\n    if (!Number.isNaN(parseInt(currentFieldName))) {\n        return getTypeByPath(type, path.slice(1));\n    }\n    const field = fieldMap[currentFieldName];\n    if (!(field === null || field === void 0 ? void 0 : field.type)) {\n        throw new Error(`${type}.${currentFieldName} is not a valid field.`);\n    }\n    return getTypeByPath(field.type, path.slice(1));\n}\nfunction generateSelectionSetFactory(schema, additionalResolver) {\n    if (additionalResolver.sourceSelectionSet) {\n        return () => parseSelectionSet(additionalResolver.sourceSelectionSet);\n        // If result path provided without a selectionSet\n    }\n    else if (additionalResolver.result) {\n        const resultPath = toPath(additionalResolver.result);\n        let abstractResultTypeName;\n        const sourceType = schema.getType(additionalResolver.sourceTypeName);\n        const sourceTypeFields = sourceType.getFields();\n        const sourceField = sourceTypeFields[additionalResolver.sourceFieldName];\n        const resultFieldType = getTypeByPath(sourceField.type, resultPath);\n        if (isAbstractType(resultFieldType)) {\n            if (additionalResolver.resultType) {\n                abstractResultTypeName = additionalResolver.resultType;\n            }\n            else {\n                const targetType = schema.getType(additionalResolver.targetTypeName);\n                const targetTypeFields = targetType.getFields();\n                const targetField = targetTypeFields[additionalResolver.targetFieldName];\n                const targetFieldType = getNamedType(targetField.type);\n                abstractResultTypeName = targetFieldType === null || targetFieldType === void 0 ? void 0 : targetFieldType.name;\n            }\n            if (abstractResultTypeName !== resultFieldType.name) {\n                const abstractResultType = schema.getType(abstractResultTypeName);\n                if ((isInterfaceType(abstractResultType) || isObjectType(abstractResultType)) &&\n                    !schema.isSubType(resultFieldType, abstractResultType)) {\n                    throw new Error(`${additionalResolver.sourceTypeName}.${additionalResolver.sourceFieldName}.${resultPath.join('.')} doesn't implement ${abstractResultTypeName}.}`);\n                }\n            }\n        }\n        return (subtree) => {\n            let finalSelectionSet = subtree;\n            let isLastResult = true;\n            const resultPathReversed = [...resultPath].reverse();\n            for (const pathElem of resultPathReversed) {\n                // Ensure the path elem is not array index\n                if (Number.isNaN(parseInt(pathElem))) {\n                    if (isLastResult && abstractResultTypeName && abstractResultTypeName !== resultFieldType.name) {\n                        finalSelectionSet = {\n                            kind: Kind.SELECTION_SET,\n                            selections: [\n                                {\n                                    kind: Kind.INLINE_FRAGMENT,\n                                    typeCondition: {\n                                        kind: Kind.NAMED_TYPE,\n                                        name: {\n                                            kind: Kind.NAME,\n                                            value: abstractResultTypeName,\n                                        },\n                                    },\n                                    selectionSet: finalSelectionSet,\n                                },\n                            ],\n                        };\n                    }\n                    finalSelectionSet = {\n                        kind: Kind.SELECTION_SET,\n                        selections: [\n                            {\n                                // we create a wrapping AST Field\n                                kind: Kind.FIELD,\n                                name: {\n                                    kind: Kind.NAME,\n                                    value: pathElem,\n                                },\n                                // Inside the field selection\n                                selectionSet: finalSelectionSet,\n                            },\n                        ],\n                    };\n                    isLastResult = false;\n                }\n            }\n            return finalSelectionSet;\n        };\n    }\n    return undefined;\n}\nfunction generateValuesFromResults(resultExpression) {\n    return function valuesFromResults(result) {\n        if (Array.isArray(result)) {\n            return result.map(valuesFromResults);\n        }\n        return lodashGet(result, resultExpression);\n    };\n}\nfunction resolveAdditionalResolversWithoutImport(additionalResolver, pubsub) {\n    const baseOptions = {};\n    if (additionalResolver.result) {\n        baseOptions.valuesFromResults = generateValuesFromResults(additionalResolver.result);\n    }\n    if ('pubsubTopic' in additionalResolver) {\n        return {\n            [additionalResolver.targetTypeName]: {\n                [additionalResolver.targetFieldName]: {\n                    subscribe: withFilter((root, args, context, info) => {\n                        const resolverData = { root, args, context, info, env: process$1.env };\n                        const topic = stringInterpolator.parse(additionalResolver.pubsubTopic, resolverData);\n                        return pubsub.asyncIterator(topic);\n                    }, (root, args, context, info) => {\n                        // eslint-disable-next-line no-new-func\n                        return additionalResolver.filterBy ? new Function(`return ${additionalResolver.filterBy}`)() : true;\n                    }),\n                    resolve: (payload) => {\n                        if (baseOptions.valuesFromResults) {\n                            return baseOptions.valuesFromResults(payload);\n                        }\n                        return payload;\n                    },\n                },\n            },\n        };\n    }\n    else if ('keysArg' in additionalResolver) {\n        return {\n            [additionalResolver.targetTypeName]: {\n                [additionalResolver.targetFieldName]: {\n                    selectionSet: additionalResolver.requiredSelectionSet || `{ ${additionalResolver.keyField} }`,\n                    resolve: async (root, args, context, info) => {\n                        if (!baseOptions.selectionSet) {\n                            baseOptions.selectionSet = generateSelectionSetFactory(info.schema, additionalResolver);\n                        }\n                        const resolverData = { root, args, context, info, env: process$1.env };\n                        const targetArgs = {};\n                        for (const argPath in additionalResolver.additionalArgs || {}) {\n                            lodashSet(targetArgs, argPath, stringInterpolator.parse(additionalResolver.additionalArgs[argPath], resolverData));\n                        }\n                        const options = {\n                            ...baseOptions,\n                            root,\n                            context,\n                            info,\n                            argsFromKeys: (keys) => {\n                                const args = {};\n                                lodashSet(args, additionalResolver.keysArg, keys);\n                                Object.assign(args, targetArgs);\n                                return args;\n                            },\n                            key: lodashGet(root, additionalResolver.keyField),\n                        };\n                        return context[additionalResolver.sourceName][additionalResolver.sourceTypeName][additionalResolver.sourceFieldName](options);\n                    },\n                },\n            },\n        };\n    }\n    else if ('targetTypeName' in additionalResolver) {\n        return {\n            [additionalResolver.targetTypeName]: {\n                [additionalResolver.targetFieldName]: {\n                    selectionSet: additionalResolver.requiredSelectionSet,\n                    resolve: (root, args, context, info) => {\n                        // Assert source exists\n                        if (!context[additionalResolver.sourceName]) {\n                            throw new Error(`No source found named \"${additionalResolver.sourceName}\"`);\n                        }\n                        if (!context[additionalResolver.sourceName][additionalResolver.sourceTypeName]) {\n                            throw new Error(`No root type found named \"${additionalResolver.sourceTypeName}\" exists in the source ${additionalResolver.sourceName}\\n` +\n                                `It should be one of the following; ${Object.keys(context[additionalResolver.sourceName]).join(',')})}}`);\n                        }\n                        if (!context[additionalResolver.sourceName][additionalResolver.sourceTypeName][additionalResolver.sourceFieldName]) {\n                            throw new Error(`No field named \"${additionalResolver.sourceFieldName}\" exists in the type ${additionalResolver.sourceTypeName} from the source ${additionalResolver.sourceName}`);\n                        }\n                        if (!baseOptions.selectionSet) {\n                            baseOptions.selectionSet = generateSelectionSetFactory(info.schema, additionalResolver);\n                        }\n                        const resolverData = { root, args, context, info, env: process$1.env };\n                        const targetArgs = {};\n                        for (const argPath in additionalResolver.sourceArgs) {\n                            lodashSet(targetArgs, argPath, stringInterpolator.parse(additionalResolver.sourceArgs[argPath].toString(), resolverData));\n                        }\n                        const options = {\n                            ...baseOptions,\n                            root,\n                            args: targetArgs,\n                            context,\n                            info,\n                        };\n                        return context[additionalResolver.sourceName][additionalResolver.sourceTypeName][additionalResolver.sourceFieldName](options);\n                    },\n                },\n            },\n        };\n    }\n    else {\n        return additionalResolver;\n    }\n}\nfunction resolveAdditionalResolvers(baseDir, additionalResolvers, importFn, pubsub) {\n    return Promise.all((additionalResolvers || []).map(async (additionalResolver) => {\n        if (typeof additionalResolver === 'string') {\n            const resolvers = await loadFromModuleExportExpression(additionalResolver, {\n                cwd: baseDir,\n                defaultExportName: 'resolvers',\n                importFn,\n            });\n            if (!resolvers) {\n                console.warn(`Unable to load resolvers from file: ${additionalResolver}`);\n                return {};\n            }\n            return resolvers;\n        }\n        else {\n            const baseOptions = {};\n            if (additionalResolver.result) {\n                baseOptions.valuesFromResults = generateValuesFromResults(additionalResolver.result);\n            }\n            if ('pubsubTopic' in additionalResolver) {\n                return {\n                    [additionalResolver.targetTypeName]: {\n                        [additionalResolver.targetFieldName]: {\n                            subscribe: withFilter((root, args, context, info) => {\n                                const resolverData = { root, args, context, info, env: process$1.env };\n                                const topic = stringInterpolator.parse(additionalResolver.pubsubTopic, resolverData);\n                                return pubsub.asyncIterator(topic);\n                            }, (root, args, context, info) => {\n                                // eslint-disable-next-line no-new-func\n                                return additionalResolver.filterBy ? new Function(`return ${additionalResolver.filterBy}`)() : true;\n                            }),\n                            resolve: (payload) => {\n                                if (baseOptions.valuesFromResults) {\n                                    return baseOptions.valuesFromResults(payload);\n                                }\n                                return payload;\n                            },\n                        },\n                    },\n                };\n            }\n            else if ('keysArg' in additionalResolver) {\n                return {\n                    [additionalResolver.targetTypeName]: {\n                        [additionalResolver.targetFieldName]: {\n                            selectionSet: additionalResolver.requiredSelectionSet || `{ ${additionalResolver.keyField} }`,\n                            resolve: async (root, args, context, info) => {\n                                if (!baseOptions.selectionSet) {\n                                    baseOptions.selectionSet = generateSelectionSetFactory(info.schema, additionalResolver);\n                                }\n                                const resolverData = { root, args, context, info, env: process$1.env };\n                                const targetArgs = {};\n                                for (const argPath in additionalResolver.additionalArgs || {}) {\n                                    lodashSet(targetArgs, argPath, stringInterpolator.parse(additionalResolver.additionalArgs[argPath], resolverData));\n                                }\n                                const options = {\n                                    ...baseOptions,\n                                    root,\n                                    context,\n                                    info,\n                                    argsFromKeys: (keys) => {\n                                        const args = {};\n                                        lodashSet(args, additionalResolver.keysArg, keys);\n                                        Object.assign(args, targetArgs);\n                                        return args;\n                                    },\n                                    key: lodashGet(root, additionalResolver.keyField),\n                                };\n                                return context[additionalResolver.sourceName][additionalResolver.sourceTypeName][additionalResolver.sourceFieldName](options);\n                            },\n                        },\n                    },\n                };\n            }\n            else if ('targetTypeName' in additionalResolver) {\n                return {\n                    [additionalResolver.targetTypeName]: {\n                        [additionalResolver.targetFieldName]: {\n                            selectionSet: additionalResolver.requiredSelectionSet,\n                            resolve: (root, args, context, info) => {\n                                // Assert source exists\n                                if (!context[additionalResolver.sourceName]) {\n                                    throw new Error(`No source found named \"${additionalResolver.sourceName}\"`);\n                                }\n                                if (!context[additionalResolver.sourceName][additionalResolver.sourceTypeName]) {\n                                    throw new Error(`No root type found named \"${additionalResolver.sourceTypeName}\" exists in the source ${additionalResolver.sourceName}\\n` +\n                                        `It should be one of the following; ${Object.keys(context[additionalResolver.sourceName]).join(',')})}}`);\n                                }\n                                if (!context[additionalResolver.sourceName][additionalResolver.sourceTypeName][additionalResolver.sourceFieldName]) {\n                                    throw new Error(`No field named \"${additionalResolver.sourceFieldName}\" exists in the type ${additionalResolver.sourceTypeName} from the source ${additionalResolver.sourceName}`);\n                                }\n                                if (!baseOptions.selectionSet) {\n                                    baseOptions.selectionSet = generateSelectionSetFactory(info.schema, additionalResolver);\n                                }\n                                const resolverData = { root, args, context, info, env: process$1.env };\n                                const targetArgs = {};\n                                for (const argPath in additionalResolver.sourceArgs) {\n                                    lodashSet(targetArgs, argPath, stringInterpolator.parse(additionalResolver.sourceArgs[argPath].toString(), resolverData));\n                                }\n                                const options = {\n                                    ...baseOptions,\n                                    root,\n                                    args: targetArgs,\n                                    context,\n                                    info,\n                                };\n                                return context[additionalResolver.sourceName][additionalResolver.sourceTypeName][additionalResolver.sourceFieldName](options);\n                            },\n                        },\n                    },\n                };\n            }\n            else {\n                return additionalResolver;\n            }\n        }\n    }));\n}\n\nconst warnColor = chalk.keyword(`orange`);\nconst infoColor = chalk.cyan;\nconst errorColor = chalk.red;\nconst debugColor = chalk.magenta;\nconst titleBold = chalk.bold;\nclass DefaultLogger {\n    constructor(name) {\n        this.name = name;\n    }\n    getLoggerMessage(...args) {\n        return args\n            .flat(Infinity)\n            .map(arg => {\n            if (typeof arg === 'string') {\n                if (arg.length > 100 && !this.isDebug) {\n                    return arg.slice(0, 100) + '...';\n                }\n                return arg;\n            }\n            else if (typeof arg === 'object' && (arg === null || arg === void 0 ? void 0 : arg.stack) != null) {\n                return arg.stack;\n            }\n            return util.inspect(arg);\n        })\n            .join(` `);\n    }\n    handleLazyMessage(...lazyArgs) {\n        const flattenedArgs = lazyArgs.flat(Infinity).flatMap(arg => {\n            if (typeof arg === 'function') {\n                return arg();\n            }\n            return arg;\n        });\n        return this.getLoggerMessage(flattenedArgs);\n    }\n    get isDebug() {\n        return (process$1.env.DEBUG && process$1.env.DEBUG === '1') || this.name.includes(process$1.env.DEBUG);\n    }\n    get prefix() {\n        return this.name ? titleBold(this.name) : ``;\n    }\n    log(...args) {\n        const message = this.getLoggerMessage(...args);\n        return console.log(`${this.prefix} ${message}`);\n    }\n    warn(...args) {\n        const message = this.getLoggerMessage(...args);\n        const fullMessage = `\u26A0\uFE0F ${this.prefix} ${warnColor(message)}`;\n        if (console.warn) {\n            console.warn(fullMessage);\n        }\n        else {\n            console.log(fullMessage);\n        }\n    }\n    info(...args) {\n        const message = this.getLoggerMessage(...args);\n        const fullMessage = `\uD83D\uDCA1 ${this.prefix} ${infoColor(message)}`;\n        if (console.info) {\n            console.info(fullMessage);\n        }\n        else {\n            console.log(fullMessage);\n        }\n    }\n    error(...args) {\n        const message = this.getLoggerMessage(...args);\n        const fullMessage = `\uD83D\uDCA5 ${this.prefix} ${errorColor(message)}`;\n        if (console.error) {\n            console.error(fullMessage);\n        }\n        else {\n            console.log(fullMessage);\n        }\n    }\n    debug(...lazyArgs) {\n        if (this.isDebug) {\n            const message = this.handleLazyMessage(lazyArgs);\n            const fullMessage = `\uD83D\uDC1B ${this.prefix} ${debugColor(message)}`;\n            if (console.debug) {\n                console.debug(fullMessage);\n            }\n            else {\n                console.log(fullMessage);\n            }\n        }\n    }\n    child(name) {\n        return new DefaultLogger(this.name ? `${this.name} - ${name}` : name);\n    }\n}\n\nconst parseCache = createLruCache(1000, 3600);\nconst printCache = createLruCache(1000, 3600);\nfunction parseWithCache(sdl) {\n    const trimmedSdl = sdl.trim();\n    let document = parseCache.get(trimmedSdl);\n    if (!document) {\n        document = parse(trimmedSdl, { noLocation: true });\n        parseCache.set(trimmedSdl, document);\n        printCache.set(JSON.stringify(document), trimmedSdl);\n    }\n    return document;\n}\nconst printWithCache = memoize1(function printWithCache(document) {\n    const stringifedDocumentJson = JSON.stringify(document);\n    let sdl = printCache.get(stringifedDocumentJson);\n    if (!sdl) {\n        sdl = print(document).trim();\n        printCache.set(stringifedDocumentJson, sdl);\n        parseCache.set(sdl, document);\n    }\n    return sdl;\n});\nfunction gql([sdl], ...args) {\n    let result = sdl;\n    for (const arg of args || []) {\n        if (typeof arg === 'string') {\n            result += arg;\n        }\n        else {\n            result += printWithCache(arg);\n        }\n    }\n    return parseWithCache(result);\n}\n\nclass PubSub {\n    constructor() {\n        this.subIdListenerMap = new Map();\n        this.listenerEventMap = new Map();\n        this.eventNameListenersMap = new Map();\n    }\n    publish(triggerName, detail) {\n        const eventNameListeners = this.eventNameListenersMap.get(triggerName);\n        if (eventNameListeners) {\n            Promise.allSettled([...eventNameListeners].map(listener => listener(detail))).catch(e => console.error(e));\n        }\n    }\n    subscribe(triggerName, onMessage) {\n        let eventNameListeners = this.eventNameListenersMap.get(triggerName);\n        if (!eventNameListeners) {\n            eventNameListeners = new Set();\n            this.eventNameListenersMap.set(triggerName, eventNameListeners);\n        }\n        const subId = Date.now();\n        eventNameListeners.add(onMessage);\n        this.subIdListenerMap.set(subId, onMessage);\n        this.listenerEventMap.set(onMessage, triggerName);\n        return subId;\n    }\n    unsubscribe(subId) {\n        const listener = this.subIdListenerMap.get(subId);\n        if (listener) {\n            this.subIdListenerMap.delete(subId);\n            const eventName = this.listenerEventMap.get(listener);\n            if (eventName) {\n                const eventNameListeners = this.eventNameListenersMap.get(eventName);\n                if (eventNameListeners) {\n                    eventNameListeners.delete(listener);\n                }\n            }\n        }\n        this.listenerEventMap.delete(listener);\n    }\n    asyncIterator(triggerName) {\n        return observableToAsyncIterable({\n            subscribe: observer => {\n                const subId = this.subscribe(triggerName, data => observer.next(data));\n                return {\n                    unsubscribe: () => this.unsubscribe(subId),\n                };\n            },\n        });\n    }\n}\n\nfunction fileURLToPath(url) {\n    if (url === null || url === void 0 ? void 0 : url.startsWith('file://')) {\n        return fileUriToPath(url);\n    }\n    return url || '';\n}\n\nexport { DefaultLogger, PubSub, applyRequestTransforms, applyResultTransforms, applySchemaTransforms, createLruCache, defaultImportFn, extractResolvers, fileURLToPath, getCachedFetch, gql, groupTransforms, loadFromModuleExportExpression, loadYaml, mkdir, parseWithCache, pathExists, printWithCache, readFile, readFileOrUrl, readUrl, resolveAdditionalResolvers, resolveAdditionalResolversWithoutImport, rmdirs, sanitizeNameForGraphQL, withCancel, writeFile, writeJSON };\n", "import CachePolicy from 'http-cache-semantics';\n\nfunction fetchFactory({ fetch, Request, Response, cache }) {\n    return async (input, init) => {\n        let request;\n        if (input instanceof Request) {\n            request = input;\n        }\n        else {\n            request = new Request(input, init);\n        }\n        const cacheKey = request.url;\n        const entry = await cache.get(cacheKey);\n        if (!entry) {\n            const response = await fetch(request);\n            const policy = new CachePolicy(policyRequestFrom(request), policyResponseFrom(response));\n            return storeResponseAndReturnClone(cache, response, policy, cacheKey);\n        }\n        const { policy: policyRaw, bytes } = typeof entry === 'string' ? JSON.parse(entry) : entry;\n        const policy = CachePolicy.fromObject(policyRaw);\n        // Remove url from the policy, because otherwise it would never match a request with a custom cache key\n        policy._url = undefined;\n        const bodyInit = new Uint8Array(bytes);\n        if (policy.satisfiesWithoutRevalidation(policyRequestFrom(request))) {\n            const headers = policy.responseHeaders();\n            return new Response(bodyInit, {\n                url: policy._url,\n                status: policy._status,\n                headers,\n            });\n        }\n        else {\n            const revalidationHeaders = policy.revalidationHeaders(policyRequestFrom(request));\n            const revalidationRequest = new Request(request, {\n                headers: revalidationHeaders,\n            });\n            const revalidationResponse = await fetch(revalidationRequest);\n            const { policy: revalidatedPolicy, modified } = policy.revalidatedPolicy(policyRequestFrom(revalidationRequest), policyResponseFrom(revalidationResponse));\n            const newArrayBuffer = await revalidationResponse.arrayBuffer();\n            const newBody = modified ? newArrayBuffer : bodyInit;\n            return storeResponseAndReturnClone(cache, new Response(newBody, {\n                url: revalidatedPolicy._url,\n                status: revalidatedPolicy._status,\n                headers: revalidatedPolicy.responseHeaders(),\n            }), revalidatedPolicy, cacheKey);\n        }\n    };\n    async function storeResponseAndReturnClone(cache, response, policy, cacheKey) {\n        let ttl = Math.round(policy.timeToLive() / 1000);\n        if (ttl <= 0)\n            return response;\n        // If a response can be revalidated, we don't want to remove it from the cache right after it expires.\n        // We may be able to use better heuristics here, but for now we'll take the max-age times 2.\n        if (canBeRevalidated(response)) {\n            ttl *= 2;\n        }\n        const arrayBuffer = await response.arrayBuffer();\n        const uint8array = new Uint8Array(arrayBuffer);\n        const entry = {\n            policy: policy.toObject(),\n            bytes: [...uint8array],\n        };\n        await cache.set(cacheKey, entry, {\n            ttl,\n        });\n        // We have to clone the response before returning it because the\n        // body can only be used once.\n        // To avoid https://github.com/bitinn/node-fetch/issues/151, we don't use\n        // response.clone() but create a new response from the consumed body\n        return new Response(uint8array, {\n            url: response.url,\n            status: response.status,\n            statusText: response.statusText,\n            headers: response.headers,\n        });\n    }\n}\nfunction canBeRevalidated(response) {\n    return response.headers.has('ETag');\n}\nfunction policyRequestFrom(request) {\n    return {\n        url: request.url,\n        method: request.method,\n        headers: headersToObject(request.headers),\n    };\n}\nfunction policyResponseFrom(response) {\n    return {\n        status: response.status,\n        headers: headersToObject(response.headers),\n    };\n}\nfunction headersToObject(headers) {\n    const object = Object.create(null);\n    headers === null || headers === void 0 ? void 0 : headers.forEach((val, key) => {\n        object[key] = val;\n    });\n    return object;\n}\n\nexport { fetchFactory };\n", "\n/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */\nfunction isNothing(subject) {\n  return (typeof subject === 'undefined') || (subject === null);\n}\n\n\nfunction isObject(subject) {\n  return (typeof subject === 'object') && (subject !== null);\n}\n\n\nfunction toArray(sequence) {\n  if (Array.isArray(sequence)) return sequence;\n  else if (isNothing(sequence)) return [];\n\n  return [ sequence ];\n}\n\n\nfunction extend(target, source) {\n  var index, length, key, sourceKeys;\n\n  if (source) {\n    sourceKeys = Object.keys(source);\n\n    for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\n\nfunction repeat(string, count) {\n  var result = '', cycle;\n\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n\n  return result;\n}\n\n\nfunction isNegativeZero(number) {\n  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);\n}\n\n\nvar isNothing_1      = isNothing;\nvar isObject_1       = isObject;\nvar toArray_1        = toArray;\nvar repeat_1         = repeat;\nvar isNegativeZero_1 = isNegativeZero;\nvar extend_1         = extend;\n\nvar common = {\n\tisNothing: isNothing_1,\n\tisObject: isObject_1,\n\ttoArray: toArray_1,\n\trepeat: repeat_1,\n\tisNegativeZero: isNegativeZero_1,\n\textend: extend_1\n};\n\n// YAML error class. http://stackoverflow.com/questions/8458984\n\n\nfunction formatError(exception, compact) {\n  var where = '', message = exception.reason || '(unknown reason)';\n\n  if (!exception.mark) return message;\n\n  if (exception.mark.name) {\n    where += 'in \"' + exception.mark.name + '\" ';\n  }\n\n  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';\n\n  if (!compact && exception.mark.snippet) {\n    where += '\\n\\n' + exception.mark.snippet;\n  }\n\n  return message + ' ' + where;\n}\n\n\nfunction YAMLException$1(reason, mark) {\n  // Super constructor\n  Error.call(this);\n\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = formatError(this, false);\n\n  // Include stack trace in error object\n  if (Error.captureStackTrace) {\n    // Chrome and NodeJS\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    // FF, IE 10+ and Safari 6+. Fallback for others\n    this.stack = (new Error()).stack || '';\n  }\n}\n\n\n// Inherit from Error\nYAMLException$1.prototype = Object.create(Error.prototype);\nYAMLException$1.prototype.constructor = YAMLException$1;\n\n\nYAMLException$1.prototype.toString = function toString(compact) {\n  return this.name + ': ' + formatError(this, compact);\n};\n\n\nvar exception = YAMLException$1;\n\n// get snippet for a single line, respecting maxLength\nfunction getLine(buffer, lineStart, lineEnd, position, maxLineLength) {\n  var head = '';\n  var tail = '';\n  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;\n\n  if (position - lineStart > maxHalfLength) {\n    head = ' ... ';\n    lineStart = position - maxHalfLength + head.length;\n  }\n\n  if (lineEnd - position > maxHalfLength) {\n    tail = ' ...';\n    lineEnd = position + maxHalfLength - tail.length;\n  }\n\n  return {\n    str: head + buffer.slice(lineStart, lineEnd).replace(/\\t/g, '\u2192') + tail,\n    pos: position - lineStart + head.length // relative position\n  };\n}\n\n\nfunction padStart(string, max) {\n  return common.repeat(' ', max - string.length) + string;\n}\n\n\nfunction makeSnippet(mark, options) {\n  options = Object.create(options || null);\n\n  if (!mark.buffer) return null;\n\n  if (!options.maxLength) options.maxLength = 79;\n  if (typeof options.indent      !== 'number') options.indent      = 1;\n  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;\n  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;\n\n  var re = /\\r?\\n|\\r|\\0/g;\n  var lineStarts = [ 0 ];\n  var lineEnds = [];\n  var match;\n  var foundLineNo = -1;\n\n  while ((match = re.exec(mark.buffer))) {\n    lineEnds.push(match.index);\n    lineStarts.push(match.index + match[0].length);\n\n    if (mark.position <= match.index && foundLineNo < 0) {\n      foundLineNo = lineStarts.length - 2;\n    }\n  }\n\n  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;\n\n  var result = '', i, line;\n  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;\n  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);\n\n  for (i = 1; i <= options.linesBefore; i++) {\n    if (foundLineNo - i < 0) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo - i],\n      lineEnds[foundLineNo - i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),\n      maxLineLength\n    );\n    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n' + result;\n  }\n\n  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);\n  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +\n    ' | ' + line.str + '\\n';\n  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\\n';\n\n  for (i = 1; i <= options.linesAfter; i++) {\n    if (foundLineNo + i >= lineEnds.length) break;\n    line = getLine(\n      mark.buffer,\n      lineStarts[foundLineNo + i],\n      lineEnds[foundLineNo + i],\n      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),\n      maxLineLength\n    );\n    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +\n      ' | ' + line.str + '\\n';\n  }\n\n  return result.replace(/\\n$/, '');\n}\n\n\nvar snippet = makeSnippet;\n\nvar TYPE_CONSTRUCTOR_OPTIONS = [\n  'kind',\n  'multi',\n  'resolve',\n  'construct',\n  'instanceOf',\n  'predicate',\n  'represent',\n  'representName',\n  'defaultStyle',\n  'styleAliases'\n];\n\nvar YAML_NODE_KINDS = [\n  'scalar',\n  'sequence',\n  'mapping'\n];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type$1(tag, options) {\n  options = options || {};\n\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new exception('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  });\n\n  // TODO: Add tag format check.\n  this.options       = options; // keep original options in case user wants to extend this type later\n  this.tag           = tag;\n  this.kind          = options['kind']          || null;\n  this.resolve       = options['resolve']       || function () { return true; };\n  this.construct     = options['construct']     || function (data) { return data; };\n  this.instanceOf    = options['instanceOf']    || null;\n  this.predicate     = options['predicate']     || null;\n  this.represent     = options['represent']     || null;\n  this.representName = options['representName'] || null;\n  this.defaultStyle  = options['defaultStyle']  || null;\n  this.multi         = options['multi']         || false;\n  this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new exception('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nvar type = Type$1;\n\n/*eslint-disable max-len*/\n\n\n\n\n\nfunction compileList(schema, name) {\n  var result = [];\n\n  schema[name].forEach(function (currentType) {\n    var newIndex = result.length;\n\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag &&\n          previousType.kind === currentType.kind &&\n          previousType.multi === currentType.multi) {\n\n        newIndex = previousIndex;\n      }\n    });\n\n    result[newIndex] = currentType;\n  });\n\n  return result;\n}\n\n\nfunction compileMap(/* lists... */) {\n  var result = {\n        scalar: {},\n        sequence: {},\n        mapping: {},\n        fallback: {},\n        multi: {\n          scalar: [],\n          sequence: [],\n          mapping: [],\n          fallback: []\n        }\n      }, index, length;\n\n  function collectType(type) {\n    if (type.multi) {\n      result.multi[type.kind].push(type);\n      result.multi['fallback'].push(type);\n    } else {\n      result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n    }\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\n\n\nfunction Schema$1(definition) {\n  return this.extend(definition);\n}\n\n\nSchema$1.prototype.extend = function extend(definition) {\n  var implicit = [];\n  var explicit = [];\n\n  if (definition instanceof type) {\n    // Schema.extend(type)\n    explicit.push(definition);\n\n  } else if (Array.isArray(definition)) {\n    // Schema.extend([ type1, type2, ... ])\n    explicit = explicit.concat(definition);\n\n  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {\n    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })\n    if (definition.implicit) implicit = implicit.concat(definition.implicit);\n    if (definition.explicit) explicit = explicit.concat(definition.explicit);\n\n  } else {\n    throw new exception('Schema.extend argument should be a Type, [ Type ], ' +\n      'or a schema definition ({ implicit: [...], explicit: [...] })');\n  }\n\n  implicit.forEach(function (type$1) {\n    if (!(type$1 instanceof type)) {\n      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n\n    if (type$1.loadKind && type$1.loadKind !== 'scalar') {\n      throw new exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n\n    if (type$1.multi) {\n      throw new exception('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');\n    }\n  });\n\n  explicit.forEach(function (type$1) {\n    if (!(type$1 instanceof type)) {\n      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n    }\n  });\n\n  var result = Object.create(Schema$1.prototype);\n\n  result.implicit = (this.implicit || []).concat(implicit);\n  result.explicit = (this.explicit || []).concat(explicit);\n\n  result.compiledImplicit = compileList(result, 'implicit');\n  result.compiledExplicit = compileList(result, 'explicit');\n  result.compiledTypeMap  = compileMap(result.compiledImplicit, result.compiledExplicit);\n\n  return result;\n};\n\n\nvar schema = Schema$1;\n\nvar str = new type('tag:yaml.org,2002:str', {\n  kind: 'scalar',\n  construct: function (data) { return data !== null ? data : ''; }\n});\n\nvar seq = new type('tag:yaml.org,2002:seq', {\n  kind: 'sequence',\n  construct: function (data) { return data !== null ? data : []; }\n});\n\nvar map = new type('tag:yaml.org,2002:map', {\n  kind: 'mapping',\n  construct: function (data) { return data !== null ? data : {}; }\n});\n\nvar failsafe = new schema({\n  explicit: [\n    str,\n    seq,\n    map\n  ]\n});\n\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n\n  var max = data.length;\n\n  return (max === 1 && data === '~') ||\n         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));\n}\n\nfunction constructYamlNull() {\n  return null;\n}\n\nfunction isNull(object) {\n  return object === null;\n}\n\nvar _null = new type('tag:yaml.org,2002:null', {\n  kind: 'scalar',\n  resolve: resolveYamlNull,\n  construct: constructYamlNull,\n  predicate: isNull,\n  represent: {\n    canonical: function () { return '~';    },\n    lowercase: function () { return 'null'; },\n    uppercase: function () { return 'NULL'; },\n    camelcase: function () { return 'Null'; },\n    empty:     function () { return '';     }\n  },\n  defaultStyle: 'lowercase'\n});\n\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n\n  var max = data.length;\n\n  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||\n         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));\n}\n\nfunction constructYamlBoolean(data) {\n  return data === 'true' ||\n         data === 'True' ||\n         data === 'TRUE';\n}\n\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\n\nvar bool = new type('tag:yaml.org,2002:bool', {\n  kind: 'scalar',\n  resolve: resolveYamlBoolean,\n  construct: constructYamlBoolean,\n  predicate: isBoolean,\n  represent: {\n    lowercase: function (object) { return object ? 'true' : 'false'; },\n    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },\n    camelcase: function (object) { return object ? 'True' : 'False'; }\n  },\n  defaultStyle: 'lowercase'\n});\n\nfunction isHexCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||\n         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||\n         ((0x61/* a */ <= c) && (c <= 0x66/* f */));\n}\n\nfunction isOctCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));\n}\n\nfunction isDecCode(c) {\n  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n\n  if (!max) return false;\n\n  ch = data[index];\n\n  // sign\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index];\n\n    // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n\n    if (ch === 'o') {\n      // base 8\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isOctCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n  }\n\n  // base 10 (except 0)\n\n  // value should not start with `_`;\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n\n  // Should have digits and should not end with `_`\n  if (!hasDigits || ch === '_') return false;\n\n  return true;\n}\n\nfunction constructYamlInteger(data) {\n  var value = data, sign = 1, ch;\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);\n    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return (Object.prototype.toString.call(object)) === '[object Number]' &&\n         (object % 1 === 0 && !common.isNegativeZero(object));\n}\n\nvar int = new type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },\n    octal:       function (obj) { return obj >= 0 ? '0o'  + obj.toString(8) : '-0o'  + obj.toString(8).slice(1); },\n    decimal:     function (obj) { return obj.toString(10); },\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary:      [ 2,  'bin' ],\n    octal:       [ 8,  'oct' ],\n    decimal:     [ 10, 'dec' ],\n    hexadecimal: [ 16, 'hex' ]\n  }\n});\n\nvar YAML_FLOAT_PATTERN = new RegExp(\n  // 2.5e4, 2.5 and integers\n  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +\n  // .2e4, .2\n  // special case, seems not from spec\n  '|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +\n  // .inf\n  '|[-+]?\\\\.(?:inf|Inf|INF)' +\n  // .nan\n  '|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) ||\n      // Quick hack to not allow integers end with `_`\n      // Probably should update regexp & check speed\n      data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign;\n\n  value  = data.replace(/_/g, '').toLowerCase();\n  sign   = value[0] === '-' ? -1 : 1;\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n  } else if (value === '.nan') {\n    return NaN;\n  }\n  return sign * parseFloat(value, 10);\n}\n\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase': return '.nan';\n      case 'uppercase': return '.NAN';\n      case 'camelcase': return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '.inf';\n      case 'uppercase': return '.INF';\n      case 'camelcase': return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '-.inf';\n      case 'uppercase': return '-.INF';\n      case 'camelcase': return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10);\n\n  // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return (Object.prototype.toString.call(object) === '[object Number]') &&\n         (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nvar float = new type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});\n\nvar json = failsafe.extend({\n  implicit: [\n    _null,\n    bool,\n    int,\n    float\n  ]\n});\n\nvar core = json;\n\nvar YAML_DATE_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9])'                    + // [2] month\n  '-([0-9][0-9])$');                   // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp(\n  '^([0-9][0-9][0-9][0-9])'          + // [1] year\n  '-([0-9][0-9]?)'                   + // [2] month\n  '-([0-9][0-9]?)'                   + // [3] day\n  '(?:[Tt]|[ \\\\t]+)'                 + // ...\n  '([0-9][0-9]?)'                    + // [4] hour\n  ':([0-9][0-9])'                    + // [5] minute\n  ':([0-9][0-9])'                    + // [6] second\n  '(?:\\\\.([0-9]*))?'                 + // [7] fraction\n  '(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match, year, month, day, hour, minute, second, fraction = 0,\n      delta = null, tz_hour, tz_minute, date;\n\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n\n  if (match === null) throw new Error('Date resolve error');\n\n  // match: [1] year [2] month [3] day\n\n  year = +(match[1]);\n  month = +(match[2]) - 1; // JS month starts with 0\n  day = +(match[3]);\n\n  if (!match[4]) { // no hour\n    return new Date(Date.UTC(year, month, day));\n  }\n\n  // match: [4] hour [5] minute [6] second [7] fraction\n\n  hour = +(match[4]);\n  minute = +(match[5]);\n  second = +(match[6]);\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n    while (fraction.length < 3) { // milli-seconds\n      fraction += '0';\n    }\n    fraction = +fraction;\n  }\n\n  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n  if (match[9]) {\n    tz_hour = +(match[10]);\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n\n  if (delta) date.setTime(date.getTime() - delta);\n\n  return date;\n}\n\nfunction representYamlTimestamp(object /*, style*/) {\n  return object.toISOString();\n}\n\nvar timestamp = new type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nvar merge = new type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});\n\n/*eslint-disable no-bitwise*/\n\n\n\n\n\n// [ 64, 65, 66 ] -> [ padding, CR, LF ]\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n\n  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;\n\n  // Convert one by one.\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx));\n\n    // Skip CR/LF\n    if (code > 64) continue;\n\n    // Fail on illegal characters\n    if (code < 0) return false;\n\n    bitlen += 6;\n  }\n\n  // If there are any bits left, source was corrupted\n  return (bitlen % 8) === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx, tailbits,\n      input = data.replace(/[\\r\\n=]/g, ''), // remove CR/LF & padding to simplify scan\n      max = input.length,\n      map = BASE64_MAP,\n      bits = 0,\n      result = [];\n\n  // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 4 === 0) && idx) {\n      result.push((bits >> 16) & 0xFF);\n      result.push((bits >> 8) & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = (bits << 6) | map.indexOf(input.charAt(idx));\n  }\n\n  // Dump tail\n\n  tailbits = (max % 4) * 6;\n\n  if (tailbits === 0) {\n    result.push((bits >> 16) & 0xFF);\n    result.push((bits >> 8) & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push((bits >> 10) & 0xFF);\n    result.push((bits >> 2) & 0xFF);\n  } else if (tailbits === 12) {\n    result.push((bits >> 4) & 0xFF);\n  }\n\n  return new Uint8Array(result);\n}\n\nfunction representYamlBinary(object /*, style*/) {\n  var result = '', bits = 0, idx, tail,\n      max = object.length,\n      map = BASE64_MAP;\n\n  // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if ((idx % 3 === 0) && idx) {\n      result += map[(bits >> 18) & 0x3F];\n      result += map[(bits >> 12) & 0x3F];\n      result += map[(bits >> 6) & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  }\n\n  // Dump tail\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[(bits >> 18) & 0x3F];\n    result += map[(bits >> 12) & 0x3F];\n    result += map[(bits >> 6) & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[(bits >> 10) & 0x3F];\n    result += map[(bits >> 4) & 0x3F];\n    result += map[(bits << 2) & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[(bits >> 2) & 0x3F];\n    result += map[(bits << 4) & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(obj) {\n  return Object.prototype.toString.call(obj) ===  '[object Uint8Array]';\n}\n\nvar binary = new type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});\n\nvar _hasOwnProperty$3 = Object.prototype.hasOwnProperty;\nvar _toString$2       = Object.prototype.toString;\n\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n\n  var objectKeys = [], index, length, pair, pairKey, pairHasKey,\n      object = data;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n\n    if (_toString$2.call(pair) !== '[object Object]') return false;\n\n    for (pairKey in pair) {\n      if (_hasOwnProperty$3.call(pair, pairKey)) {\n        if (!pairHasKey) pairHasKey = true;\n        else return false;\n      }\n    }\n\n    if (!pairHasKey) return false;\n\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);\n    else return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\n\nvar omap = new type('tag:yaml.org,2002:omap', {\n  kind: 'sequence',\n  resolve: resolveYamlOmap,\n  construct: constructYamlOmap\n});\n\nvar _toString$1 = Object.prototype.toString;\n\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n\n  var index, length, pair, keys, result,\n      object = data;\n\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n\n    if (_toString$1.call(pair) !== '[object Object]') return false;\n\n    keys = Object.keys(pair);\n\n    if (keys.length !== 1) return false;\n\n    result[index] = [ keys[0], pair[keys[0]] ];\n  }\n\n  return true;\n}\n\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n\n  var index, length, pair, keys, result,\n      object = data;\n\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n\n    keys = Object.keys(pair);\n\n    result[index] = [ keys[0], pair[keys[0]] ];\n  }\n\n  return result;\n}\n\nvar pairs = new type('tag:yaml.org,2002:pairs', {\n  kind: 'sequence',\n  resolve: resolveYamlPairs,\n  construct: constructYamlPairs\n});\n\nvar _hasOwnProperty$2 = Object.prototype.hasOwnProperty;\n\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n\n  var key, object = data;\n\n  for (key in object) {\n    if (_hasOwnProperty$2.call(object, key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\n\nvar set = new type('tag:yaml.org,2002:set', {\n  kind: 'mapping',\n  resolve: resolveYamlSet,\n  construct: constructYamlSet\n});\n\nvar _default = core.extend({\n  implicit: [\n    timestamp,\n    merge\n  ],\n  explicit: [\n    binary,\n    omap,\n    pairs,\n    set\n  ]\n});\n\n/*eslint-disable max-len,no-use-before-define*/\n\n\n\n\n\n\n\nvar _hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n\n\nvar CONTEXT_FLOW_IN   = 1;\nvar CONTEXT_FLOW_OUT  = 2;\nvar CONTEXT_BLOCK_IN  = 3;\nvar CONTEXT_BLOCK_OUT = 4;\n\n\nvar CHOMPING_CLIP  = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP  = 3;\n\n\nvar PATTERN_NON_PRINTABLE         = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS       = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI               = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction is_EOL(c) {\n  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);\n}\n\nfunction is_WHITE_SPACE(c) {\n  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);\n}\n\nfunction is_WS_OR_EOL(c) {\n  return (c === 0x09/* Tab */) ||\n         (c === 0x20/* Space */) ||\n         (c === 0x0A/* LF */) ||\n         (c === 0x0D/* CR */);\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C/* , */ ||\n         c === 0x5B/* [ */ ||\n         c === 0x5D/* ] */ ||\n         c === 0x7B/* { */ ||\n         c === 0x7D/* } */;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  /*eslint-disable no-bitwise*/\n  lc = c | 0x20;\n\n  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78/* x */) { return 2; }\n  if (c === 0x75/* u */) { return 4; }\n  if (c === 0x55/* U */) { return 8; }\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return (c === 0x30/* 0 */) ? '\\x00' :\n        (c === 0x61/* a */) ? '\\x07' :\n        (c === 0x62/* b */) ? '\\x08' :\n        (c === 0x74/* t */) ? '\\x09' :\n        (c === 0x09/* Tab */) ? '\\x09' :\n        (c === 0x6E/* n */) ? '\\x0A' :\n        (c === 0x76/* v */) ? '\\x0B' :\n        (c === 0x66/* f */) ? '\\x0C' :\n        (c === 0x72/* r */) ? '\\x0D' :\n        (c === 0x65/* e */) ? '\\x1B' :\n        (c === 0x20/* Space */) ? ' ' :\n        (c === 0x22/* \" */) ? '\\x22' :\n        (c === 0x2F/* / */) ? '/' :\n        (c === 0x5C/* \\ */) ? '\\x5C' :\n        (c === 0x4E/* N */) ? '\\x85' :\n        (c === 0x5F/* _ */) ? '\\xA0' :\n        (c === 0x4C/* L */) ? '\\u2028' :\n        (c === 0x50/* P */) ? '\\u2029' : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  }\n  // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n  return String.fromCharCode(\n    ((c - 0x010000) >> 10) + 0xD800,\n    ((c - 0x010000) & 0x03FF) + 0xDC00\n  );\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\nvar simpleEscapeMap = new Array(256);\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\n\nfunction State$1(input, options) {\n  this.input = input;\n\n  this.filename  = options['filename']  || null;\n  this.schema    = options['schema']    || _default;\n  this.onWarning = options['onWarning'] || null;\n  // (Hidden) Remove? makes the loader to expect YAML 1.1 documents\n  // if such documents have no explicit %YAML directive\n  this.legacy    = options['legacy']    || false;\n\n  this.json      = options['json']      || false;\n  this.listener  = options['listener']  || null;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap       = this.schema.compiledTypeMap;\n\n  this.length     = input.length;\n  this.position   = 0;\n  this.line       = 0;\n  this.lineStart  = 0;\n  this.lineIndent = 0;\n\n  // position of first leading tab in the current line,\n  // used to make sure there are no tabs in the indentation\n  this.firstTabInLine = -1;\n\n  this.documents = [];\n\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n\n}\n\n\nfunction generateError(state, message) {\n  var mark = {\n    name:     state.filename,\n    buffer:   state.input.slice(0, -1), // omit trailing \\0\n    position: state.position,\n    line:     state.line,\n    column:   state.position - state.lineStart\n  };\n\n  mark.snippet = snippet(mark);\n\n  return new exception(message, mark);\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\n\n\nvar directiveHandlers = {\n\n  YAML: function handleYamlDirective(state, name, args) {\n\n    var match, major, minor;\n\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = (minor < 2);\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n\n  TAG: function handleTagDirective(state, name, args) {\n\n    var handle, prefix;\n\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty$1.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    try {\n      prefix = decodeURIComponent(prefix);\n    } catch (err) {\n      throwError(state, 'tag prefix is malformed: ' + prefix);\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n        if (!(_character === 0x09 ||\n              (0x20 <= _character && _character <= 0x10FFFF))) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty$1.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode,\n  startLine, startLineStart, startPos) {\n\n  var index, quantity;\n\n  // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  }\n\n  // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json &&\n        !_hasOwnProperty$1.call(overridableKeys, keyNode) &&\n        _hasOwnProperty$1.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.lineStart = startLineStart || state.lineStart;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    }\n\n    // used for this specific key only because Object.defineProperty is slow\n    if (keyNode === '__proto__') {\n      Object.defineProperty(_result, keyNode, {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: valueNode\n      });\n    } else {\n      _result[keyNode] = valueNode;\n    }\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A/* LF */) {\n    state.position++;\n  } else if (ch === 0x0D/* CR */) {\n    state.position++;\n    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n  state.firstTabInLine = -1;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      if (ch === 0x09/* Tab */ && state.firstTabInLine === -1) {\n        state.firstTabInLine = state.position;\n      }\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23/* # */) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);\n    }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20/* Space */) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n\n  ch = state.input.charCodeAt(_position);\n\n  // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&\n      ch === state.input.charCodeAt(_position + 1) &&\n      ch === state.input.charCodeAt(_position + 2)) {\n\n    _position += 3;\n\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch)      ||\n      is_FLOW_INDICATOR(ch) ||\n      ch === 0x23/* # */    ||\n      ch === 0x26/* & */    ||\n      ch === 0x2A/* * */    ||\n      ch === 0x21/* ! */    ||\n      ch === 0x7C/* | */    ||\n      ch === 0x3E/* > */    ||\n      ch === 0x27/* ' */    ||\n      ch === 0x22/* \" */    ||\n      ch === 0x25/* % */    ||\n      ch === 0x40/* @ */    ||\n      ch === 0x60/* ` */) {\n    return false;\n  }\n\n  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (is_WS_OR_EOL(following) ||\n        withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A/* : */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) ||\n          withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n\n    } else if (ch === 0x23/* # */) {\n      preceding = state.input.charCodeAt(state.position - 1);\n\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n\n    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||\n               withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch,\n      captureStart, captureEnd;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27/* ' */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27/* ' */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (ch === 0x27/* ' */) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart,\n      captureEnd,\n      hexLength,\n      hexResult,\n      tmp,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22/* \" */) {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22/* \" */) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n\n    } else if (ch === 0x5C/* \\ */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent);\n\n        // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n\n        state.result += charFromCodepoint(hexResult);\n\n        state.position++;\n\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n\n      captureStart = captureEnd = state.position;\n\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _lineStart,\n      _pos,\n      _tag     = state.tag,\n      _result,\n      _anchor  = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      overridableKeys = Object.create(null),\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B/* [ */) {\n    terminator = 0x5D;/* ] */\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B/* { */) {\n    terminator = 0x7D;/* } */\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    } else if (ch === 0x2C/* , */) {\n      // \"flow collection entries can never be completely empty\", as per YAML 1.2, section 7.4\n      throwError(state, \"expected the node content, but found ','\");\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F/* ? */) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n\n    _line = state.line; // Save the current line.\n    _lineStart = state.lineStart;\n    _pos = state.position;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C/* , */) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping       = CHOMPING_CLIP,\n      didReadContent = false,\n      detectedIndent = false,\n      textIndent     = nodeIndent,\n      emptyLines     = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C/* | */) {\n    folding = false;\n  } else if (ch === 0x3E/* > */) {\n    folding = true;\n  } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23/* # */) {\n      do { ch = state.input.charCodeAt(++state.position); }\n      while (!is_EOL(ch) && (ch !== 0));\n    }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) &&\n           (ch === 0x20/* Space */)) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    }\n\n    // End of the scalar.\n    if (state.lineIndent < textIndent) {\n\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) { // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      }\n\n      // Break this `while` cycle and go to the funciton's epilogue.\n      break;\n    }\n\n    // Folded style: use fancy rules to handle line breaks.\n    if (folding) {\n\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true;\n        // except for the first content line (cf. Example 8.1)\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n\n      // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1);\n\n      // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) { // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        }\n\n      // Several line breaks - perceive as different lines.\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      }\n\n    // Literal style: just add exact number of line breaks between content lines.\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && (ch !== 0)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag      = state.tag,\n      _anchor   = state.anchor,\n      _result   = [],\n      following,\n      detected  = false,\n      ch;\n\n  // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    if (ch !== 0x2D/* - */) {\n      break;\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n    _result.push(state.result);\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _keyLine,\n      _keyLineStart,\n      _keyPos,\n      _tag          = state.tag,\n      _anchor       = state.anchor,\n      _result       = {},\n      overridableKeys = Object.create(null),\n      keyTag        = null,\n      keyNode       = null,\n      valueNode     = null,\n      atExplicitKey = false,\n      detected      = false,\n      ch;\n\n  // there is a leading tab before this token, so it can't be a block sequence/mapping;\n  // it can still be flow sequence/mapping or a scalar\n  if (state.firstTabInLine !== -1) return false;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (!atExplicitKey && state.firstTabInLine !== -1) {\n      state.position = state.firstTabInLine;\n      throwError(state, 'tab characters must not be used in indentation');\n    }\n\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n\n    //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {\n\n      if (ch === 0x3F/* ? */) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n          keyTag = keyNode = valueNode = null;\n        }\n\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following;\n\n    //\n    // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n    //\n    } else {\n      _keyLine = state.line;\n      _keyLineStart = state.lineStart;\n      _keyPos = state.position;\n\n      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n        // Neither implicit nor explicit notation.\n        // Reading is done. Go to the epilogue.\n        break;\n      }\n\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A/* : */) {\n          ch = state.input.charCodeAt(++state.position);\n\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    }\n\n    //\n    // Common reading code for both explicit and implicit notations.\n    //\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (atExplicitKey) {\n        _keyLine = state.line;\n        _keyLineStart = state.lineStart;\n        _keyPos = state.position;\n      }\n\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  //\n  // Epilogue.\n  //\n\n  // Special case: last mapping's node contains only the key in explicit notation.\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);\n  }\n\n  // Expose the resulting mapping.\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed    = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x21/* ! */) return false;\n\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C/* < */) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n\n  } else if (ch === 0x21/* ! */) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n\n  } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do { ch = state.input.charCodeAt(++state.position); }\n    while (ch !== 0 && ch !== 0x3E/* > */);\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n\n      if (ch === 0x21/* ! */) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  try {\n    tagName = decodeURIComponent(tagName);\n  } catch (err) {\n    throwError(state, 'tag name is malformed: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n\n  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x26/* & */) return false;\n\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x2A/* * */) return false;\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent\n      atNewLine  = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      typeList,\n      type,\n      flowIndent,\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n\n  state.tag    = null;\n  state.anchor = null;\n  state.kind   = null;\n  state.result = null;\n\n  allowBlockStyles = allowBlockScalars = allowBlockCollections =\n    CONTEXT_BLOCK_OUT === nodeContext ||\n    CONTEXT_BLOCK_IN  === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections &&\n          (readBlockSequence(state, blockIndent) ||\n           readBlockMapping(state, blockIndent, flowIndent)) ||\n          readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||\n            readSingleQuotedScalar(state, flowIndent) ||\n            readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (state.tag === null) {\n    if (state.anchor !== null) {\n      state.anchorMap[state.anchor] = state.result;\n    }\n\n  } else if (state.tag === '?') {\n    // Implicit resolving is not allowed for non-scalar types, and '?'\n    // non-specific tag is only automatically assigned to plain scalars.\n    //\n    // We only need to check kind conformity in case user explicitly assigns '?'\n    // tag, for example like this: \"!<?> [0]\"\n    //\n    if (state.result !== null && state.kind !== 'scalar') {\n      throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n    }\n\n    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n      type = state.implicitTypes[typeIndex];\n\n      if (type.resolve(state.result)) { // `state.result` updated in resolver if matched\n        state.result = type.construct(state.result);\n        state.tag = type.tag;\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n        break;\n      }\n    }\n  } else if (state.tag !== '!') {\n    if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n    } else {\n      // looking for multi type\n      type = null;\n      typeList = state.typeMap.multi[state.kind || 'fallback'];\n\n      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {\n        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {\n          type = typeList[typeIndex];\n          break;\n        }\n      }\n    }\n\n    if (!type) {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n\n    if (state.result !== null && type.kind !== state.kind) {\n      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n    }\n\n    if (!type.resolve(state.result, state.tag)) { // `state.result` updated in resolver if matched\n      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n    } else {\n      state.result = type.construct(state.result, state.tag);\n      if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = state.result;\n      }\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n  return state.tag !== null ||  state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = Object.create(null);\n  state.anchorMap = Object.create(null);\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25/* % */) {\n      break;\n    }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23/* # */) {\n        do { ch = state.input.charCodeAt(++state.position); }\n        while (ch !== 0 && !is_EOL(ch));\n        break;\n      }\n\n      if (is_EOL(ch)) break;\n\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (state.lineIndent === 0 &&\n      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&\n      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks &&\n      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n\n    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n    return;\n  }\n\n  if (state.position < (state.length - 1)) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&\n        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {\n      input += '\\n';\n    }\n\n    // Strip BOM\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State$1(input, options);\n\n  var nullpos = input.indexOf('\\0');\n\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state, 'null byte is not allowed in input');\n  }\n\n  // Use 0 as string terminator. That significantly simplifies bounds check.\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < (state.length - 1)) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\n\nfunction loadAll$1(input, iterator, options) {\n  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  var documents = loadDocuments(input, options);\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (var index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\n\nfunction load$1(input, options) {\n  var documents = loadDocuments(input, options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n  throw new exception('expected a single document in the stream, but found more');\n}\n\n\nvar loadAll_1 = loadAll$1;\nvar load_1    = load$1;\n\nvar loader = {\n\tloadAll: loadAll_1,\n\tload: load_1\n};\n\n/*eslint-disable no-use-before-define*/\n\n\n\n\n\nvar _toString       = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar CHAR_BOM                  = 0xFEFF;\nvar CHAR_TAB                  = 0x09; /* Tab */\nvar CHAR_LINE_FEED            = 0x0A; /* LF */\nvar CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */\nvar CHAR_SPACE                = 0x20; /* Space */\nvar CHAR_EXCLAMATION          = 0x21; /* ! */\nvar CHAR_DOUBLE_QUOTE         = 0x22; /* \" */\nvar CHAR_SHARP                = 0x23; /* # */\nvar CHAR_PERCENT              = 0x25; /* % */\nvar CHAR_AMPERSAND            = 0x26; /* & */\nvar CHAR_SINGLE_QUOTE         = 0x27; /* ' */\nvar CHAR_ASTERISK             = 0x2A; /* * */\nvar CHAR_COMMA                = 0x2C; /* , */\nvar CHAR_MINUS                = 0x2D; /* - */\nvar CHAR_COLON                = 0x3A; /* : */\nvar CHAR_EQUALS               = 0x3D; /* = */\nvar CHAR_GREATER_THAN         = 0x3E; /* > */\nvar CHAR_QUESTION             = 0x3F; /* ? */\nvar CHAR_COMMERCIAL_AT        = 0x40; /* @ */\nvar CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */\nvar CHAR_GRAVE_ACCENT         = 0x60; /* ` */\nvar CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */\nvar CHAR_VERTICAL_LINE        = 0x7C; /* | */\nvar CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */\n\nvar ESCAPE_SEQUENCES = {};\n\nESCAPE_SEQUENCES[0x00]   = '\\\\0';\nESCAPE_SEQUENCES[0x07]   = '\\\\a';\nESCAPE_SEQUENCES[0x08]   = '\\\\b';\nESCAPE_SEQUENCES[0x09]   = '\\\\t';\nESCAPE_SEQUENCES[0x0A]   = '\\\\n';\nESCAPE_SEQUENCES[0x0B]   = '\\\\v';\nESCAPE_SEQUENCES[0x0C]   = '\\\\f';\nESCAPE_SEQUENCES[0x0D]   = '\\\\r';\nESCAPE_SEQUENCES[0x1B]   = '\\\\e';\nESCAPE_SEQUENCES[0x22]   = '\\\\\"';\nESCAPE_SEQUENCES[0x5C]   = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85]   = '\\\\N';\nESCAPE_SEQUENCES[0xA0]   = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\n\nvar DEPRECATED_BOOLEANS_SYNTAX = [\n  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',\n  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'\n];\n\nvar DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\\.[0-9_]*)?$/;\n\nfunction compileStyleMap(schema, map) {\n  var result, keys, index, length, tag, style, type;\n\n  if (map === null) return {};\n\n  result = {};\n  keys = Object.keys(map);\n\n  for (index = 0, length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n\n    if (tag.slice(0, 2) === '!!') {\n      tag = 'tag:yaml.org,2002:' + tag.slice(2);\n    }\n    type = schema.compiledTypeMap['fallback'][tag];\n\n    if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n      style = type.styleAliases[style];\n    }\n\n    result[tag] = style;\n  }\n\n  return result;\n}\n\nfunction encodeHex(character) {\n  var string, handle, length;\n\n  string = character.toString(16).toUpperCase();\n\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new exception('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n\n  return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\n\n\nvar QUOTING_TYPE_SINGLE = 1,\n    QUOTING_TYPE_DOUBLE = 2;\n\nfunction State(options) {\n  this.schema        = options['schema'] || _default;\n  this.indent        = Math.max(1, (options['indent'] || 2));\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid   = options['skipInvalid'] || false;\n  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);\n  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);\n  this.sortKeys      = options['sortKeys'] || false;\n  this.lineWidth     = options['lineWidth'] || 80;\n  this.noRefs        = options['noRefs'] || false;\n  this.noCompatMode  = options['noCompatMode'] || false;\n  this.condenseFlow  = options['condenseFlow'] || false;\n  this.quotingType   = options['quotingType'] === '\"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;\n  this.forceQuotes   = options['forceQuotes'] || false;\n  this.replacer      = typeof options['replacer'] === 'function' ? options['replacer'] : null;\n\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n\n  this.tag = null;\n  this.result = '';\n\n  this.duplicates = [];\n  this.usedDuplicates = null;\n}\n\n// Indents every line in a string. Empty lines (\\n only) are not indented.\nfunction indentString(string, spaces) {\n  var ind = common.repeat(' ', spaces),\n      position = 0,\n      next = -1,\n      result = '',\n      line,\n      length = string.length;\n\n  while (position < length) {\n    next = string.indexOf('\\n', position);\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position, next + 1);\n      position = next + 1;\n    }\n\n    if (line.length && line !== '\\n') result += ind;\n\n    result += line;\n  }\n\n  return result;\n}\n\nfunction generateNextLine(state, level) {\n  return '\\n' + common.repeat(' ', state.indent * level);\n}\n\nfunction testImplicitResolving(state, str) {\n  var index, length, type;\n\n  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// [33] s-white ::= s-space | s-tab\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n}\n\n// Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn\u2019t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\nfunction isPrintable(c) {\n  return  (0x00020 <= c && c <= 0x00007E)\n      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)\n      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== CHAR_BOM)\n      ||  (0x10000 <= c && c <= 0x10FFFF);\n}\n\n// [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// Including s-white (for some reason, examples doesn't match specs in this aspect)\n// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark\nfunction isNsCharOrWhitespace(c) {\n  return isPrintable(c)\n    && c !== CHAR_BOM\n    // - b-char\n    && c !== CHAR_CARRIAGE_RETURN\n    && c !== CHAR_LINE_FEED;\n}\n\n// [127]  ns-plain-safe(c) ::= c = flow-out  \u21D2 ns-plain-safe-out\n//                             c = flow-in   \u21D2 ns-plain-safe-in\n//                             c = block-key \u21D2 ns-plain-safe-out\n//                             c = flow-key  \u21D2 ns-plain-safe-in\n// [128] ns-plain-safe-out ::= ns-char\n// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator\n// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - \u201C:\u201D - \u201C#\u201D )\n//                            | ( /* An ns-char preceding */ \u201C#\u201D )\n//                            | ( \u201C:\u201D /* Followed by an ns-plain-safe(c) */ )\nfunction isPlainSafe(c, prev, inblock) {\n  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);\n  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);\n  return (\n    // ns-plain-safe\n    inblock ? // c = flow-in\n      cIsNsCharOrWhitespace\n      : cIsNsCharOrWhitespace\n        // - c-flow-indicator\n        && c !== CHAR_COMMA\n        && c !== CHAR_LEFT_SQUARE_BRACKET\n        && c !== CHAR_RIGHT_SQUARE_BRACKET\n        && c !== CHAR_LEFT_CURLY_BRACKET\n        && c !== CHAR_RIGHT_CURLY_BRACKET\n  )\n    // ns-plain-char\n    && c !== CHAR_SHARP // false on '#'\n    && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '\n    || (isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP) // change to true on '[^ ]#'\n    || (prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'\n}\n\n// Simplified test for values allowed as the first character in plain style.\nfunction isPlainSafeFirst(c) {\n  // Uses a subset of ns-char - c-indicator\n  // where ns-char = nb-char - s-white.\n  // No support of ( ( \u201C?\u201D | \u201C:\u201D | \u201C-\u201D ) /* Followed by an ns-plain-safe(c)) */ ) part\n  return isPrintable(c) && c !== CHAR_BOM\n    && !isWhitespace(c) // - s-white\n    // - (c-indicator ::=\n    // \u201C-\u201D | \u201C?\u201D | \u201C:\u201D | \u201C,\u201D | \u201C[\u201D | \u201C]\u201D | \u201C{\u201D | \u201C}\u201D\n    && c !== CHAR_MINUS\n    && c !== CHAR_QUESTION\n    && c !== CHAR_COLON\n    && c !== CHAR_COMMA\n    && c !== CHAR_LEFT_SQUARE_BRACKET\n    && c !== CHAR_RIGHT_SQUARE_BRACKET\n    && c !== CHAR_LEFT_CURLY_BRACKET\n    && c !== CHAR_RIGHT_CURLY_BRACKET\n    // | \u201C#\u201D | \u201C&\u201D | \u201C*\u201D | \u201C!\u201D | \u201C|\u201D | \u201C=\u201D | \u201C>\u201D | \u201C'\u201D | \u201C\"\u201D\n    && c !== CHAR_SHARP\n    && c !== CHAR_AMPERSAND\n    && c !== CHAR_ASTERISK\n    && c !== CHAR_EXCLAMATION\n    && c !== CHAR_VERTICAL_LINE\n    && c !== CHAR_EQUALS\n    && c !== CHAR_GREATER_THAN\n    && c !== CHAR_SINGLE_QUOTE\n    && c !== CHAR_DOUBLE_QUOTE\n    // | \u201C%\u201D | \u201C@\u201D | \u201C`\u201D)\n    && c !== CHAR_PERCENT\n    && c !== CHAR_COMMERCIAL_AT\n    && c !== CHAR_GRAVE_ACCENT;\n}\n\n// Simplified test for values allowed as the last character in plain style.\nfunction isPlainSafeLast(c) {\n  // just not whitespace or colon, it will be checked to be plain character later\n  return !isWhitespace(c) && c !== CHAR_COLON;\n}\n\n// Same as 'string'.codePointAt(pos), but works in older browsers.\nfunction codePointAt(string, pos) {\n  var first = string.charCodeAt(pos), second;\n  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {\n    second = string.charCodeAt(pos + 1);\n    if (second >= 0xDC00 && second <= 0xDFFF) {\n      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n    }\n  }\n  return first;\n}\n\n// Determines whether block indentation indicator is required.\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\n\nvar STYLE_PLAIN   = 1,\n    STYLE_SINGLE  = 2,\n    STYLE_LITERAL = 3,\n    STYLE_FOLDED  = 4,\n    STYLE_DOUBLE  = 5;\n\n// Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth,\n  testAmbiguousType, quotingType, forceQuotes, inblock) {\n\n  var i;\n  var char = 0;\n  var prevChar = null;\n  var hasLineBreak = false;\n  var hasFoldableLine = false; // only checked if shouldTrackWidth\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1; // count the first line correctly\n  var plain = isPlainSafeFirst(codePointAt(string, 0))\n          && isPlainSafeLast(codePointAt(string, string.length - 1));\n\n  if (singleLineOnly || forceQuotes) {\n    // Case: no block styles.\n    // Check for disallowed characters to rule out plain and single.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n      if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    }\n  } else {\n    // Case: block styles permitted.\n    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n      char = codePointAt(string, i);\n      if (char === CHAR_LINE_FEED) {\n        hasLineBreak = true;\n        // Check if any line can be folded.\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine ||\n            // Foldable line = too long, and not more-indented.\n            (i - previousLineBreak - 1 > lineWidth &&\n             string[previousLineBreak + 1] !== ' ');\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      plain = plain && isPlainSafe(char, prevChar, inblock);\n      prevChar = char;\n    }\n    // in case the end is missing a \\n\n    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&\n      (i - previousLineBreak - 1 > lineWidth &&\n       string[previousLineBreak + 1] !== ' '));\n  }\n  // Although every style can represent \\n without escaping, prefer block styles\n  // for multiline, since they're more readable and they don't add empty lines.\n  // Also prefer folding a super-long line.\n  if (!hasLineBreak && !hasFoldableLine) {\n    // Strings interpretable as another type have to be quoted;\n    // e.g. the string 'true' vs. the boolean true.\n    if (plain && !forceQuotes && !testAmbiguousType(string)) {\n      return STYLE_PLAIN;\n    }\n    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n  }\n  // Edge case: block indentation indicator can only have one digit.\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  }\n  // At this point we know block styles are valid.\n  // Prefer literal style unless we want to fold.\n  if (!forceQuotes) {\n    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n  }\n  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;\n}\n\n// Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    \u2022 No ending newline => unaffected; already using strip \"-\" chomping.\n//    \u2022 Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\nfunction writeScalar(state, string, level, iskey, inblock) {\n  state.dump = (function () {\n    if (string.length === 0) {\n      return state.quotingType === QUOTING_TYPE_DOUBLE ? '\"\"' : \"''\";\n    }\n    if (!state.noCompatMode) {\n      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {\n        return state.quotingType === QUOTING_TYPE_DOUBLE ? ('\"' + string + '\"') : (\"'\" + string + \"'\");\n      }\n    }\n\n    var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n    // As indentation gets deeper, let the width decrease monotonically\n    // to the lower bound min(state.lineWidth, 40).\n    // Note that this implies\n    //  state.lineWidth \u2264 40 + state.indent: width is fixed at the lower bound.\n    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n    // This behaves better than a constant minimum width which disallows narrower options,\n    // or an indent threshold which causes the width to suddenly increase.\n    var lineWidth = state.lineWidth === -1\n      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);\n\n    // Without knowing if keys are implicit/explicit, assume implicit for safety.\n    var singleLineOnly = iskey\n      // No block styles in flow mode.\n      || (state.flowLevel > -1 && level >= state.flowLevel);\n    function testAmbiguity(string) {\n      return testImplicitResolving(state, string);\n    }\n\n    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth,\n      testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {\n\n      case STYLE_PLAIN:\n        return string;\n      case STYLE_SINGLE:\n        return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string, state.indent)\n          + dropEndingNewline(indentString(string, indent));\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string, state.indent)\n          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n      case STYLE_DOUBLE:\n        return '\"' + escapeString(string) + '\"';\n      default:\n        throw new exception('impossible error: invalid scalar style');\n    }\n  }());\n}\n\n// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\nfunction blockHeader(string, indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';\n\n  // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n  var clip =          string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : (clip ? '' : '-');\n\n  return indentIndicator + chomp + '\\n';\n}\n\n// (See the note for writeScalar.)\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n}\n\n// Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\nfunction foldString(string, width) {\n  // In folded style, $k$ consecutive newlines output as $k+1$ newlines\u2014\n  // unless they're before or after a more-indented line, or at the very\n  // beginning or end, in which case $k$ maps to $k$.\n  // Therefore, parse each chunk as newline(s) followed by a content line.\n  var lineRe = /(\\n+)([^\\n]*)/g;\n\n  // first line (possibly an empty line)\n  var result = (function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0, nextLF), width);\n  }());\n  // If we haven't reached the first content line yet, don't add an extra \\n.\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented;\n\n  // rest of the lines\n  var match;\n  while ((match = lineRe.exec(string))) {\n    var prefix = match[1], line = match[2];\n    moreIndented = (line[0] === ' ');\n    result += prefix\n      + (!prevMoreIndented && !moreIndented && line !== ''\n        ? '\\n' : '')\n      + foldLine(line, width);\n    prevMoreIndented = moreIndented;\n  }\n\n  return result;\n}\n\n// Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\nfunction foldLine(line, width) {\n  if (line === '' || line[0] === ' ') return line;\n\n  // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n  var match;\n  // start is an inclusive index. end, curr, and next are exclusive.\n  var start = 0, end, curr = 0, next = 0;\n  var result = '';\n\n  // Invariants: 0 <= start <= length-1.\n  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n  // Inside the loop:\n  //   A match implies length >= 2, so curr and next are <= length-2.\n  while ((match = breakRe.exec(line))) {\n    next = match.index;\n    // maintain invariant: curr - start <= width\n    if (next - start > width) {\n      end = (curr > start) ? curr : next; // derive end <= length-2\n      result += '\\n' + line.slice(start, end);\n      // skip the space that was output as \\n\n      start = end + 1;                    // derive start <= length-1\n    }\n    curr = next;\n  }\n\n  // By the invariants, start <= length-1, so there is something left over.\n  // It is either the whole string or a part starting from non-whitespace.\n  result += '\\n';\n  // Insert a break if the remainder is too long and there is a break available.\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n\n  return result.slice(1); // drop extra \\n joiner\n}\n\n// Escapes a double-quoted string.\nfunction escapeString(string) {\n  var result = '';\n  var char = 0;\n  var escapeSeq;\n\n  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {\n    char = codePointAt(string, i);\n    escapeSeq = ESCAPE_SEQUENCES[char];\n\n    if (!escapeSeq && isPrintable(char)) {\n      result += string[i];\n      if (char >= 0x10000) result += string[i + 1];\n    } else {\n      result += escapeSeq || encodeHex(char);\n    }\n  }\n\n  return result;\n}\n\nfunction writeFlowSequence(state, level, object) {\n  var _result = '',\n      _tag    = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    }\n\n    // Write only valid elements, put null instead of invalid elements.\n    if (writeNode(state, level, value, false, false) ||\n        (typeof value === 'undefined' &&\n         writeNode(state, level, null, false, false))) {\n\n      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\n\nfunction writeBlockSequence(state, level, object, compact) {\n  var _result = '',\n      _tag    = state.tag,\n      index,\n      length,\n      value;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    value = object[index];\n\n    if (state.replacer) {\n      value = state.replacer.call(object, String(index), value);\n    }\n\n    // Write only valid elements, put null instead of invalid elements.\n    if (writeNode(state, level + 1, value, true, true, false, true) ||\n        (typeof value === 'undefined' &&\n         writeNode(state, level + 1, null, true, true, false, true))) {\n\n      if (!compact || _result !== '') {\n        _result += generateNextLine(state, level);\n      }\n\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '[]'; // Empty sequence if no valid values.\n}\n\nfunction writeFlowMapping(state, level, object) {\n  var _result       = '',\n      _tag          = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      pairBuffer;\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n\n    pairBuffer = '';\n    if (_result !== '') pairBuffer += ', ';\n\n    if (state.condenseFlow) pairBuffer += '\"';\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level, objectKey, false, false)) {\n      continue; // Skip this pair because of invalid key;\n    }\n\n    if (state.dump.length > 1024) pairBuffer += '? ';\n\n    pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n\n    if (!writeNode(state, level, objectValue, false, false)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\n\nfunction writeBlockMapping(state, level, object, compact) {\n  var _result       = '',\n      _tag          = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      explicitPair,\n      pairBuffer;\n\n  // Allow sorting keys so that the output file is deterministic\n  if (state.sortKeys === true) {\n    // Default sorting\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    // Custom sort function\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    // Something is wrong\n    throw new exception('sortKeys must be a boolean or a function');\n  }\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n\n    if (!compact || _result !== '') {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (state.replacer) {\n      objectValue = state.replacer.call(object, objectKey, objectValue);\n    }\n\n    if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n      continue; // Skip this pair because of invalid key.\n    }\n\n    explicitPair = (state.tag !== null && state.tag !== '?') ||\n                   (state.dump && state.dump.length > 1024);\n\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n\n    pairBuffer += state.dump;\n\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n}\n\nfunction detectType(state, object, explicit) {\n  var _result, typeList, index, length, type, style;\n\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n\n  for (index = 0, length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n\n    if ((type.instanceOf  || type.predicate) &&\n        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&\n        (!type.predicate  || type.predicate(object))) {\n\n      if (explicit) {\n        if (type.multi && type.representName) {\n          state.tag = type.representName(object);\n        } else {\n          state.tag = type.tag;\n        }\n      } else {\n        state.tag = '?';\n      }\n\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n\n        if (_toString.call(type.represent) === '[object Function]') {\n          _result = type.represent(object, style);\n        } else if (_hasOwnProperty.call(type.represent, style)) {\n          _result = type.represent[style](object, style);\n        } else {\n          throw new exception('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n        }\n\n        state.dump = _result;\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\nfunction writeNode(state, level, object, block, compact, iskey, isblockseq) {\n  state.tag = null;\n  state.dump = object;\n\n  if (!detectType(state, object, false)) {\n    detectType(state, object, true);\n  }\n\n  var type = _toString.call(state.dump);\n  var inblock = block;\n  var tagStr;\n\n  if (block) {\n    block = (state.flowLevel < 0 || state.flowLevel > level);\n  }\n\n  var objectOrArray = type === '[object Object]' || type === '[object Array]',\n      duplicateIndex,\n      duplicate;\n\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n\n  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {\n    compact = false;\n  }\n\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n    if (type === '[object Object]') {\n      if (block && (Object.keys(state.dump).length !== 0)) {\n        writeBlockMapping(state, level, state.dump, compact);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state, level, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      if (block && (state.dump.length !== 0)) {\n        if (state.noArrayIndent && !isblockseq && level > 0) {\n          writeBlockSequence(state, level - 1, state.dump, compact);\n        } else {\n          writeBlockSequence(state, level, state.dump, compact);\n        }\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state, level, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state, state.dump, level, iskey, inblock);\n      }\n    } else if (type === '[object Undefined]') {\n      return false;\n    } else {\n      if (state.skipInvalid) return false;\n      throw new exception('unacceptable kind of an object to dump ' + type);\n    }\n\n    if (state.tag !== null && state.tag !== '?') {\n      // Need to encode all characters except those allowed by the spec:\n      //\n      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */\n      // [36] ns-hex-digit    ::=  ns-dec-digit\n      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */\n      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */\n      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | \u201C-\u201D\n      // [39] ns-uri-char     ::=  \u201C%\u201D ns-hex-digit ns-hex-digit | ns-word-char | \u201C#\u201D\n      //                         | \u201C;\u201D | \u201C/\u201D | \u201C?\u201D | \u201C:\u201D | \u201C@\u201D | \u201C&\u201D | \u201C=\u201D | \u201C+\u201D | \u201C$\u201D | \u201C,\u201D\n      //                         | \u201C_\u201D | \u201C.\u201D | \u201C!\u201D | \u201C~\u201D | \u201C*\u201D | \u201C'\u201D | \u201C(\u201D | \u201C)\u201D | \u201C[\u201D | \u201C]\u201D\n      //\n      // Also need to encode '!' because it has special meaning (end of tag prefix).\n      //\n      tagStr = encodeURI(\n        state.tag[0] === '!' ? state.tag.slice(1) : state.tag\n      ).replace(/!/g, '%21');\n\n      if (state.tag[0] === '!') {\n        tagStr = '!' + tagStr;\n      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {\n        tagStr = '!!' + tagStr.slice(18);\n      } else {\n        tagStr = '!<' + tagStr + '>';\n      }\n\n      state.dump = tagStr + ' ' + state.dump;\n    }\n  }\n\n  return true;\n}\n\nfunction getDuplicateReferences(object, state) {\n  var objects = [],\n      duplicatesIndexes = [],\n      index,\n      length;\n\n  inspectNode(object, objects, duplicatesIndexes);\n\n  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n  state.usedDuplicates = new Array(length);\n}\n\nfunction inspectNode(object, objects, duplicatesIndexes) {\n  var objectKeyList,\n      index,\n      length;\n\n  if (object !== null && typeof object === 'object') {\n    index = objects.indexOf(object);\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n\n      if (Array.isArray(object)) {\n        for (index = 0, length = object.length; index < length; index += 1) {\n          inspectNode(object[index], objects, duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n\n        for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\n\nfunction dump$1(input, options) {\n  options = options || {};\n\n  var state = new State(options);\n\n  if (!state.noRefs) getDuplicateReferences(input, state);\n\n  var value = input;\n\n  if (state.replacer) {\n    value = state.replacer.call({ '': value }, '', value);\n  }\n\n  if (writeNode(state, 0, value, true, true)) return state.dump + '\\n';\n\n  return '';\n}\n\nvar dump_1 = dump$1;\n\nvar dumper = {\n\tdump: dump_1\n};\n\nfunction renamed(from, to) {\n  return function () {\n    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' +\n      'Use yaml.' + to + ' instead, which is now safe by default.');\n  };\n}\n\n\nvar Type                = type;\nvar Schema              = schema;\nvar FAILSAFE_SCHEMA     = failsafe;\nvar JSON_SCHEMA         = json;\nvar CORE_SCHEMA         = core;\nvar DEFAULT_SCHEMA      = _default;\nvar load                = loader.load;\nvar loadAll             = loader.loadAll;\nvar dump                = dumper.dump;\nvar YAMLException       = exception;\n\n// Re-export all types in case user wants to create custom schema\nvar types = {\n  binary:    binary,\n  float:     float,\n  map:       map,\n  null:      _null,\n  pairs:     pairs,\n  set:       set,\n  timestamp: timestamp,\n  bool:      bool,\n  int:       int,\n  merge:     merge,\n  omap:      omap,\n  seq:       seq,\n  str:       str\n};\n\n// Removed functions from JS-YAML 3.0.x\nvar safeLoad            = renamed('safeLoad', 'load');\nvar safeLoadAll         = renamed('safeLoadAll', 'loadAll');\nvar safeDump            = renamed('safeDump', 'dump');\n\nvar jsYaml = {\n\tType: Type,\n\tSchema: Schema,\n\tFAILSAFE_SCHEMA: FAILSAFE_SCHEMA,\n\tJSON_SCHEMA: JSON_SCHEMA,\n\tCORE_SCHEMA: CORE_SCHEMA,\n\tDEFAULT_SCHEMA: DEFAULT_SCHEMA,\n\tload: load,\n\tloadAll: loadAll,\n\tdump: dump,\n\tYAMLException: YAMLException,\n\ttypes: types,\n\tsafeLoad: safeLoad,\n\tsafeLoadAll: safeLoadAll,\n\tsafeDump: safeDump\n};\n\nexport default jsYaml;\nexport { CORE_SCHEMA, DEFAULT_SCHEMA, FAILSAFE_SCHEMA, JSON_SCHEMA, Schema, Type, YAMLException, dump, load, loadAll, safeDump, safeLoad, safeLoadAll, types };\n", "import path from 'path-browserify';\nimport { inspect } from '@graphql-tools/utils';\n\nexport const fs = {\n  promises: {},\n};\n\nexport { path };\n\nconst processObj =\n  typeof process !== 'undefined'\n    ? process\n    : {\n        get env() {\n          try {\n            // eslint-disable-next-line no-new-func\n            return new Function('return import.meta.env')();\n          } catch {\n            return {\n              NODE_ENV: 'production',\n              platform: 'linux',\n            };\n          }\n        },\n      };\n\nexport { processObj as process };\n\nexport const util = {\n  promisify(oldSchoolFn) {\n    return function promisifiedFn(...args) {\n      return new Promise(function executor(resolve, reject) {\n        oldSchoolFn(...args, function cb(err, result) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(result);\n          }\n        });\n      });\n    };\n  },\n  inspect,\n};\n", "import { parse, versionInfo, GraphQLError, isNonNullType, Kind, valueFromAST, print, isObjectType, isListType, isSpecifiedDirective, astFromValue, isSpecifiedScalarType, isIntrospectionType, isInterfaceType, isUnionType, isInputObjectType, isEnumType, isScalarType, GraphQLDeprecatedDirective, specifiedRules, concatAST, validate, buildClientSchema, visit, TokenKind, Source, isTypeSystemDefinitionNode, getNamedType, GraphQLString, GraphQLNonNull, GraphQLList, GraphQLID, GraphQLBoolean, GraphQLFloat, GraphQLInt, GraphQLObjectType, GraphQLInterfaceType, GraphQLInputObjectType, GraphQLDirective, GraphQLUnionType, GraphQLEnumType, GraphQLScalarType, isNamedType, getNullableType, isLeafType, GraphQLSchema, isDirective, isCompositeType, doTypesOverlap, getOperationAST, getDirectiveValues, GraphQLSkipDirective, GraphQLIncludeDirective, typeFromAST, isAbstractType, TypeNameMetaFieldDef, buildASTSchema } from 'graphql';\n\nconst asArray = (fns) => (Array.isArray(fns) ? fns : fns ? [fns] : []);\nconst invalidDocRegex = /\\.[a-z0-9]+$/i;\nfunction isDocumentString(str) {\n    if (typeof str !== 'string') {\n        return false;\n    }\n    // XXX: is-valid-path or is-glob treat SDL as a valid path\n    // (`scalar Date` for example)\n    // this why checking the extension is fast enough\n    // and prevent from parsing the string in order to find out\n    // if the string is a SDL\n    if (invalidDocRegex.test(str)) {\n        return false;\n    }\n    try {\n        parse(str);\n        return true;\n    }\n    catch (e) { }\n    return false;\n}\nconst invalidPathRegex = /[\u2018\u201C!%&^<=>`]/;\nfunction isValidPath(str) {\n    return typeof str === 'string' && !invalidPathRegex.test(str);\n}\nfunction compareStrings(a, b) {\n    if (String(a) < String(b)) {\n        return -1;\n    }\n    if (String(a) > String(b)) {\n        return 1;\n    }\n    return 0;\n}\nfunction nodeToString(a) {\n    var _a, _b;\n    let name;\n    if ('alias' in a) {\n        name = (_a = a.alias) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    if (name == null && 'name' in a) {\n        name = (_b = a.name) === null || _b === void 0 ? void 0 : _b.value;\n    }\n    if (name == null) {\n        name = a.kind;\n    }\n    return name;\n}\nfunction compareNodes(a, b, customFn) {\n    const aStr = nodeToString(a);\n    const bStr = nodeToString(b);\n    if (typeof customFn === 'function') {\n        return customFn(aStr, bStr);\n    }\n    return compareStrings(aStr, bStr);\n}\nfunction isSome(input) {\n    return input != null;\n}\nfunction assertSome(input, message = 'Value should be something') {\n    if (input == null) {\n        throw new Error(message);\n    }\n}\n\nfunction createGraphQLError(message, options) {\n    if (versionInfo.major >= 17) {\n        return new GraphQLError(message, options);\n    }\n    return new GraphQLError(message, options === null || options === void 0 ? void 0 : options.nodes, options === null || options === void 0 ? void 0 : options.source, options === null || options === void 0 ? void 0 : options.positions, options === null || options === void 0 ? void 0 : options.path, options === null || options === void 0 ? void 0 : options.originalError, options === null || options === void 0 ? void 0 : options.extensions);\n}\nfunction relocatedError(originalError, path) {\n    return createGraphQLError(originalError.message, {\n        nodes: originalError.nodes,\n        source: originalError.source,\n        positions: originalError.positions,\n        path: path == null ? originalError.path : path,\n        originalError,\n        extensions: originalError.extensions,\n    });\n}\n\nlet AggregateErrorImpl;\nif (typeof AggregateError === 'undefined') {\n    class AggregateErrorClass extends Error {\n        constructor(errors, message = '') {\n            super(message);\n            this.errors = errors;\n            this.name = 'AggregateError';\n            Error.captureStackTrace(this, AggregateErrorClass);\n        }\n    }\n    AggregateErrorImpl = function (errors, message) {\n        return new AggregateErrorClass(errors, message);\n    };\n}\nelse {\n    AggregateErrorImpl = AggregateError;\n}\nfunction isAggregateError(error) {\n    return 'errors' in error && Array.isArray(error['errors']);\n}\n\n// Taken from graphql-js\nconst MAX_RECURSIVE_DEPTH = 3;\n/**\n * Used to print values in error messages.\n */\nfunction inspect(value) {\n    return formatValue(value, []);\n}\nfunction formatValue(value, seenValues) {\n    switch (typeof value) {\n        case 'string':\n            return JSON.stringify(value);\n        case 'function':\n            return value.name ? `[function ${value.name}]` : '[function]';\n        case 'object':\n            return formatObjectValue(value, seenValues);\n        default:\n            return String(value);\n    }\n}\nfunction formatError(value) {\n    if (value instanceof GraphQLError) {\n        return value.toString();\n    }\n    return `${value.name}: ${value.message};\\n ${value.stack}`;\n}\nfunction formatObjectValue(value, previouslySeenValues) {\n    if (value === null) {\n        return 'null';\n    }\n    if (value instanceof Error) {\n        if (isAggregateError(value)) {\n            return formatError(value) + '\\n' + formatArray(value.errors, previouslySeenValues);\n        }\n        return formatError(value);\n    }\n    if (previouslySeenValues.includes(value)) {\n        return '[Circular]';\n    }\n    const seenValues = [...previouslySeenValues, value];\n    if (isJSONable(value)) {\n        const jsonValue = value.toJSON();\n        // check for infinite recursion\n        if (jsonValue !== value) {\n            return typeof jsonValue === 'string' ? jsonValue : formatValue(jsonValue, seenValues);\n        }\n    }\n    else if (Array.isArray(value)) {\n        return formatArray(value, seenValues);\n    }\n    return formatObject(value, seenValues);\n}\nfunction isJSONable(value) {\n    return typeof value.toJSON === 'function';\n}\nfunction formatObject(object, seenValues) {\n    const entries = Object.entries(object);\n    if (entries.length === 0) {\n        return '{}';\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return '[' + getObjectTag(object) + ']';\n    }\n    const properties = entries.map(([key, value]) => key + ': ' + formatValue(value, seenValues));\n    return '{ ' + properties.join(', ') + ' }';\n}\nfunction formatArray(array, seenValues) {\n    if (array.length === 0) {\n        return '[]';\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return '[Array]';\n    }\n    const len = array.length;\n    const remaining = array.length;\n    const items = [];\n    for (let i = 0; i < len; ++i) {\n        items.push(formatValue(array[i], seenValues));\n    }\n    if (remaining === 1) {\n        items.push('... 1 more item');\n    }\n    else if (remaining > 1) {\n        items.push(`... ${remaining} more items`);\n    }\n    return '[' + items.join(', ') + ']';\n}\nfunction getObjectTag(object) {\n    const tag = Object.prototype.toString\n        .call(object)\n        .replace(/^\\[object /, '')\n        .replace(/]$/, '');\n    if (tag === 'Object' && typeof object.constructor === 'function') {\n        const name = object.constructor.name;\n        if (typeof name === 'string' && name !== '') {\n            return name;\n        }\n    }\n    return tag;\n}\n\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getArgumentValues(def, node, variableValues = {}) {\n    var _a;\n    const variableMap = Object.entries(variableValues).reduce((prev, [key, value]) => ({\n        ...prev,\n        [key]: value,\n    }), {});\n    const coercedValues = {};\n    const argumentNodes = (_a = node.arguments) !== null && _a !== void 0 ? _a : [];\n    const argNodeMap = argumentNodes.reduce((prev, arg) => ({\n        ...prev,\n        [arg.name.value]: arg,\n    }), {});\n    for (const { name, type: argType, defaultValue } of def.args) {\n        const argumentNode = argNodeMap[name];\n        if (!argumentNode) {\n            if (defaultValue !== undefined) {\n                coercedValues[name] = defaultValue;\n            }\n            else if (isNonNullType(argType)) {\n                throw createGraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` + 'was not provided.', {\n                    nodes: [node],\n                });\n            }\n            continue;\n        }\n        const valueNode = argumentNode.value;\n        let isNull = valueNode.kind === Kind.NULL;\n        if (valueNode.kind === Kind.VARIABLE) {\n            const variableName = valueNode.name.value;\n            if (variableValues == null || variableMap[variableName] == null) {\n                if (defaultValue !== undefined) {\n                    coercedValues[name] = defaultValue;\n                }\n                else if (isNonNullType(argType)) {\n                    throw createGraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n                        `was provided the variable \"$${variableName}\" which was not provided a runtime value.`, {\n                        nodes: [valueNode],\n                    });\n                }\n                continue;\n            }\n            isNull = variableValues[variableName] == null;\n        }\n        if (isNull && isNonNullType(argType)) {\n            throw createGraphQLError(`Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` + 'must not be null.', {\n                nodes: [valueNode],\n            });\n        }\n        const coercedValue = valueFromAST(valueNode, argType, variableValues);\n        if (coercedValue === undefined) {\n            // Note: ValuesOfCorrectTypeRule validation should catch this before\n            // execution. This is a runtime check to ensure execution does not\n            // continue with an invalid argument value.\n            throw createGraphQLError(`Argument \"${name}\" has invalid value ${print(valueNode)}.`, {\n                nodes: [valueNode],\n            });\n        }\n        coercedValues[name] = coercedValue;\n    }\n    return coercedValues;\n}\n\nfunction getDirectivesInExtensions(node, pathToDirectivesInExtensions = ['directives']) {\n    return pathToDirectivesInExtensions.reduce((acc, pathSegment) => (acc == null ? acc : acc[pathSegment]), node === null || node === void 0 ? void 0 : node.extensions);\n}\nfunction _getDirectiveInExtensions(directivesInExtensions, directiveName) {\n    const directiveInExtensions = directivesInExtensions.filter(directiveAnnotation => directiveAnnotation.name === directiveName);\n    if (!directiveInExtensions.length) {\n        return undefined;\n    }\n    return directiveInExtensions.map(directive => { var _a; return (_a = directive.args) !== null && _a !== void 0 ? _a : {}; });\n}\nfunction getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions = ['directives']) {\n    const directivesInExtensions = pathToDirectivesInExtensions.reduce((acc, pathSegment) => (acc == null ? acc : acc[pathSegment]), node === null || node === void 0 ? void 0 : node.extensions);\n    if (directivesInExtensions === undefined) {\n        return undefined;\n    }\n    if (Array.isArray(directivesInExtensions)) {\n        return _getDirectiveInExtensions(directivesInExtensions, directiveName);\n    }\n    // Support condensed format by converting to longer format\n    // The condensed format does not preserve ordering of directives when  repeatable directives are used.\n    // See https://github.com/ardatan/graphql-tools/issues/2534\n    const reformattedDirectivesInExtensions = [];\n    for (const [name, argsOrArrayOfArgs] of Object.entries(directivesInExtensions)) {\n        if (Array.isArray(argsOrArrayOfArgs)) {\n            for (const args of argsOrArrayOfArgs) {\n                reformattedDirectivesInExtensions.push({ name, args });\n            }\n        }\n        else {\n            reformattedDirectivesInExtensions.push({ name, args: argsOrArrayOfArgs });\n        }\n    }\n    return _getDirectiveInExtensions(reformattedDirectivesInExtensions, directiveName);\n}\nfunction getDirectives(schema, node, pathToDirectivesInExtensions = ['directives']) {\n    const directivesInExtensions = getDirectivesInExtensions(node, pathToDirectivesInExtensions);\n    if (directivesInExtensions != null && directivesInExtensions.length > 0) {\n        return directivesInExtensions;\n    }\n    const schemaDirectives = schema && schema.getDirectives ? schema.getDirectives() : [];\n    const schemaDirectiveMap = schemaDirectives.reduce((schemaDirectiveMap, schemaDirective) => {\n        schemaDirectiveMap[schemaDirective.name] = schemaDirective;\n        return schemaDirectiveMap;\n    }, {});\n    let astNodes = [];\n    if (node.astNode) {\n        astNodes.push(node.astNode);\n    }\n    if ('extensionASTNodes' in node && node.extensionASTNodes) {\n        astNodes = [...astNodes, ...node.extensionASTNodes];\n    }\n    const result = [];\n    for (const astNode of astNodes) {\n        if (astNode.directives) {\n            for (const directiveNode of astNode.directives) {\n                const schemaDirective = schemaDirectiveMap[directiveNode.name.value];\n                if (schemaDirective) {\n                    result.push({ name: directiveNode.name.value, args: getArgumentValues(schemaDirective, directiveNode) });\n                }\n            }\n        }\n    }\n    return result;\n}\nfunction getDirective(schema, node, directiveName, pathToDirectivesInExtensions = ['directives']) {\n    const directiveInExtensions = getDirectiveInExtensions(node, directiveName, pathToDirectivesInExtensions);\n    if (directiveInExtensions != null) {\n        return directiveInExtensions;\n    }\n    const schemaDirective = schema && schema.getDirective ? schema.getDirective(directiveName) : undefined;\n    if (schemaDirective == null) {\n        return undefined;\n    }\n    let astNodes = [];\n    if (node.astNode) {\n        astNodes.push(node.astNode);\n    }\n    if ('extensionASTNodes' in node && node.extensionASTNodes) {\n        astNodes = [...astNodes, ...node.extensionASTNodes];\n    }\n    const result = [];\n    for (const astNode of astNodes) {\n        if (astNode.directives) {\n            for (const directiveNode of astNode.directives) {\n                if (directiveNode.name.value === directiveName) {\n                    result.push(getArgumentValues(schemaDirective, directiveNode));\n                }\n            }\n        }\n    }\n    if (!result.length) {\n        return undefined;\n    }\n    return result;\n}\n\nfunction parseDirectiveValue(value) {\n    switch (value.kind) {\n        case Kind.INT:\n            return parseInt(value.value);\n        case Kind.FLOAT:\n            return parseFloat(value.value);\n        case Kind.BOOLEAN:\n            return Boolean(value.value);\n        case Kind.STRING:\n        case Kind.ENUM:\n            return value.value;\n        case Kind.LIST:\n            return value.values.map(v => parseDirectiveValue(v));\n        case Kind.OBJECT:\n            return value.fields.reduce((prev, v) => ({ ...prev, [v.name.value]: parseDirectiveValue(v.value) }), {});\n        case Kind.NULL:\n            return null;\n        default:\n            return null;\n    }\n}\nfunction getFieldsWithDirectives(documentNode, options = {}) {\n    const result = {};\n    let selected = ['ObjectTypeDefinition', 'ObjectTypeExtension'];\n    if (options.includeInputTypes) {\n        selected = [...selected, 'InputObjectTypeDefinition', 'InputObjectTypeExtension'];\n    }\n    const allTypes = documentNode.definitions.filter(obj => selected.includes(obj.kind));\n    for (const type of allTypes) {\n        const typeName = type.name.value;\n        if (type.fields == null) {\n            continue;\n        }\n        for (const field of type.fields) {\n            if (field.directives && field.directives.length > 0) {\n                const fieldName = field.name.value;\n                const key = `${typeName}.${fieldName}`;\n                const directives = field.directives.map(d => ({\n                    name: d.name.value,\n                    args: (d.arguments || []).reduce((prev, arg) => ({ ...prev, [arg.name.value]: parseDirectiveValue(arg.value) }), {}),\n                }));\n                result[key] = directives;\n            }\n        }\n    }\n    return result;\n}\n\nfunction getImplementingTypes(interfaceName, schema) {\n    const allTypesMap = schema.getTypeMap();\n    const result = [];\n    for (const graphqlTypeName in allTypesMap) {\n        const graphqlType = allTypesMap[graphqlTypeName];\n        if (isObjectType(graphqlType)) {\n            const allInterfaces = graphqlType.getInterfaces();\n            if (allInterfaces.find(int => int.name === interfaceName)) {\n                result.push(graphqlType.name);\n            }\n        }\n    }\n    return result;\n}\n\nfunction astFromType(type) {\n    if (isNonNullType(type)) {\n        const innerType = astFromType(type.ofType);\n        if (innerType.kind === Kind.NON_NULL_TYPE) {\n            throw new Error(`Invalid type node ${inspect(type)}. Inner type of non-null type cannot be a non-null type.`);\n        }\n        return {\n            kind: Kind.NON_NULL_TYPE,\n            type: innerType,\n        };\n    }\n    else if (isListType(type)) {\n        return {\n            kind: Kind.LIST_TYPE,\n            type: astFromType(type.ofType),\n        };\n    }\n    return {\n        kind: Kind.NAMED_TYPE,\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n    };\n}\n\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using the following mapping.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String               |\n * | Number        | Int / Float          |\n * | null          | NullValue            |\n *\n */\nfunction astFromValueUntyped(value) {\n    // only explicit null, not undefined, NaN\n    if (value === null) {\n        return { kind: Kind.NULL };\n    }\n    // undefined\n    if (value === undefined) {\n        return null;\n    }\n    // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n    // the value is not an array, convert the value using the list's item type.\n    if (Array.isArray(value)) {\n        const valuesNodes = [];\n        for (const item of value) {\n            const itemNode = astFromValueUntyped(item);\n            if (itemNode != null) {\n                valuesNodes.push(itemNode);\n            }\n        }\n        return { kind: Kind.LIST, values: valuesNodes };\n    }\n    if (typeof value === 'object') {\n        const fieldNodes = [];\n        for (const fieldName in value) {\n            const fieldValue = value[fieldName];\n            const ast = astFromValueUntyped(fieldValue);\n            if (ast) {\n                fieldNodes.push({\n                    kind: Kind.OBJECT_FIELD,\n                    name: { kind: Kind.NAME, value: fieldName },\n                    value: ast,\n                });\n            }\n        }\n        return { kind: Kind.OBJECT, fields: fieldNodes };\n    }\n    // Others serialize based on their corresponding JavaScript scalar types.\n    if (typeof value === 'boolean') {\n        return { kind: Kind.BOOLEAN, value };\n    }\n    // JavaScript numbers can be Int or Float values.\n    if (typeof value === 'number' && isFinite(value)) {\n        const stringNum = String(value);\n        return integerStringRegExp.test(stringNum)\n            ? { kind: Kind.INT, value: stringNum }\n            : { kind: Kind.FLOAT, value: stringNum };\n    }\n    if (typeof value === 'string') {\n        return { kind: Kind.STRING, value };\n    }\n    throw new TypeError(`Cannot convert value to AST: ${value}.`);\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n\nfunction memoize1(fn) {\n    const memoize1cache = new WeakMap();\n    return function memoized(a1) {\n        const cachedValue = memoize1cache.get(a1);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1);\n            memoize1cache.set(a1, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nfunction memoize2(fn) {\n    const memoize2cache = new WeakMap();\n    return function memoized(a1, a2) {\n        let cache2 = memoize2cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2cache.set(a1, cache2);\n            const newValue = fn(a1, a2);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nfunction memoize3(fn) {\n    const memoize3Cache = new WeakMap();\n    return function memoized(a1, a2, a3) {\n        let cache2 = memoize3Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize3Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        const cachedValue = cache3.get(a3);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3);\n            cache3.set(a3, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nfunction memoize4(fn) {\n    const memoize4Cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4) {\n        let cache2 = memoize4Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize4Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        const cache4 = cache3.get(a3);\n        if (!cache4) {\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        const cachedValue = cache4.get(a4);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4);\n            cache4.set(a4, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nfunction memoize5(fn) {\n    const memoize5Cache = new WeakMap();\n    return function memoized(a1, a2, a3, a4, a5) {\n        let cache2 = memoize5Cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize5Cache.set(a1, cache2);\n            const cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache3 = cache2.get(a2);\n        if (!cache3) {\n            cache3 = new WeakMap();\n            cache2.set(a2, cache3);\n            const cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache4 = cache3.get(a3);\n        if (!cache4) {\n            cache4 = new WeakMap();\n            cache3.set(a3, cache4);\n            const cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        let cache5 = cache4.get(a4);\n        if (!cache5) {\n            cache5 = new WeakMap();\n            cache4.set(a4, cache5);\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        const cachedValue = cache5.get(a5);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4, a5);\n            cache5.set(a5, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\nconst memoize2of4cache = new WeakMap();\nfunction memoize2of4(fn) {\n    return function memoized(a1, a2, a3, a4) {\n        let cache2 = memoize2of4cache.get(a1);\n        if (!cache2) {\n            cache2 = new WeakMap();\n            memoize2of4cache.set(a1, cache2);\n            const newValue = fn(a1, a2, a3, a4);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        const cachedValue = cache2.get(a2);\n        if (cachedValue === undefined) {\n            const newValue = fn(a1, a2, a3, a4);\n            cache2.set(a2, newValue);\n            return newValue;\n        }\n        return cachedValue;\n    };\n}\n\nfunction getDefinedRootType(schema, operation) {\n    const rootTypeMap = getRootTypeMap(schema);\n    const rootType = rootTypeMap.get(operation);\n    if (rootType == null) {\n        throw new Error(`Root type for operation \"${operation}\" not defined by the given schema.`);\n    }\n    return rootType;\n}\nconst getRootTypeNames = memoize1(function getRootTypeNames(schema) {\n    const rootTypes = getRootTypes(schema);\n    return new Set([...rootTypes].map(type => type.name));\n});\nconst getRootTypes = memoize1(function getRootTypes(schema) {\n    const rootTypeMap = getRootTypeMap(schema);\n    return new Set(rootTypeMap.values());\n});\nconst getRootTypeMap = memoize1(function getRootTypeMap(schema) {\n    const rootTypeMap = new Map();\n    const queryType = schema.getQueryType();\n    if (queryType) {\n        rootTypeMap.set('query', queryType);\n    }\n    const mutationType = schema.getMutationType();\n    if (mutationType) {\n        rootTypeMap.set('mutation', mutationType);\n    }\n    const subscriptionType = schema.getSubscriptionType();\n    if (subscriptionType) {\n        rootTypeMap.set('subscription', subscriptionType);\n    }\n    return rootTypeMap;\n});\n\nfunction getDocumentNodeFromSchema(schema, options = {}) {\n    const pathToDirectivesInExtensions = options.pathToDirectivesInExtensions;\n    const typesMap = schema.getTypeMap();\n    const schemaNode = astFromSchema(schema, pathToDirectivesInExtensions);\n    const definitions = schemaNode != null ? [schemaNode] : [];\n    const directives = schema.getDirectives();\n    for (const directive of directives) {\n        if (isSpecifiedDirective(directive)) {\n            continue;\n        }\n        definitions.push(astFromDirective(directive, schema, pathToDirectivesInExtensions));\n    }\n    for (const typeName in typesMap) {\n        const type = typesMap[typeName];\n        const isPredefinedScalar = isSpecifiedScalarType(type);\n        const isIntrospection = isIntrospectionType(type);\n        if (isPredefinedScalar || isIntrospection) {\n            continue;\n        }\n        if (isObjectType(type)) {\n            definitions.push(astFromObjectType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isInterfaceType(type)) {\n            definitions.push(astFromInterfaceType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isUnionType(type)) {\n            definitions.push(astFromUnionType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isInputObjectType(type)) {\n            definitions.push(astFromInputObjectType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isEnumType(type)) {\n            definitions.push(astFromEnumType(type, schema, pathToDirectivesInExtensions));\n        }\n        else if (isScalarType(type)) {\n            definitions.push(astFromScalarType(type, schema, pathToDirectivesInExtensions));\n        }\n        else {\n            throw new Error(`Unknown type ${type}.`);\n        }\n    }\n    return {\n        kind: Kind.DOCUMENT,\n        definitions,\n    };\n}\n// this approach uses the default schema printer rather than a custom solution, so may be more backwards compatible\n// currently does not allow customization of printSchema options having to do with comments.\nfunction printSchemaWithDirectives(schema, options = {}) {\n    const documentNode = getDocumentNodeFromSchema(schema, options);\n    return print(documentNode);\n}\nfunction astFromSchema(schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    const operationTypeMap = new Map([\n        ['query', undefined],\n        ['mutation', undefined],\n        ['subscription', undefined],\n    ]);\n    const nodes = [];\n    if (schema.astNode != null) {\n        nodes.push(schema.astNode);\n    }\n    if (schema.extensionASTNodes != null) {\n        for (const extensionASTNode of schema.extensionASTNodes) {\n            nodes.push(extensionASTNode);\n        }\n    }\n    for (const node of nodes) {\n        if (node.operationTypes) {\n            for (const operationTypeDefinitionNode of node.operationTypes) {\n                operationTypeMap.set(operationTypeDefinitionNode.operation, operationTypeDefinitionNode);\n            }\n        }\n    }\n    const rootTypeMap = getRootTypeMap(schema);\n    for (const [operationTypeNode, operationTypeDefinitionNode] of operationTypeMap) {\n        const rootType = rootTypeMap.get(operationTypeNode);\n        if (rootType != null) {\n            const rootTypeAST = astFromType(rootType);\n            if (operationTypeDefinitionNode != null) {\n                operationTypeDefinitionNode.type = rootTypeAST;\n            }\n            else {\n                operationTypeMap.set(operationTypeNode, {\n                    kind: Kind.OPERATION_TYPE_DEFINITION,\n                    operation: operationTypeNode,\n                    type: rootTypeAST,\n                });\n            }\n        }\n    }\n    const operationTypes = [...operationTypeMap.values()].filter(isSome);\n    const directives = getDirectiveNodes(schema, schema, pathToDirectivesInExtensions);\n    if (!operationTypes.length && !directives.length) {\n        return null;\n    }\n    const schemaNode = {\n        kind: operationTypes != null ? Kind.SCHEMA_DEFINITION : Kind.SCHEMA_EXTENSION,\n        operationTypes,\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: directives,\n    };\n    // This code is so weird because it needs to support GraphQL.js 14\n    // In GraphQL.js 14 there is no `description` value on schemaNode\n    schemaNode.description =\n        ((_b = (_a = schema.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : schema.description != null)\n            ? {\n                kind: Kind.STRING,\n                value: schema.description,\n                block: true,\n            }\n            : undefined;\n    return schemaNode;\n}\nfunction astFromDirective(directive, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c, _d;\n    return {\n        kind: Kind.DIRECTIVE_DEFINITION,\n        description: (_b = (_a = directive.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (directive.description\n            ? {\n                kind: Kind.STRING,\n                value: directive.description,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: directive.name,\n        },\n        arguments: (_c = directive.args) === null || _c === void 0 ? void 0 : _c.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions)),\n        repeatable: directive.isRepeatable,\n        locations: ((_d = directive.locations) === null || _d === void 0 ? void 0 : _d.map(location => ({\n            kind: Kind.NAME,\n            value: location,\n        }))) || [],\n    };\n}\nfunction getDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {\n    const directivesInExtensions = getDirectivesInExtensions(entity, pathToDirectivesInExtensions);\n    let nodes = [];\n    if (entity.astNode != null) {\n        nodes.push(entity.astNode);\n    }\n    if ('extensionASTNodes' in entity && entity.extensionASTNodes != null) {\n        nodes = nodes.concat(entity.extensionASTNodes);\n    }\n    let directives;\n    if (directivesInExtensions != null) {\n        directives = makeDirectiveNodes(schema, directivesInExtensions);\n    }\n    else {\n        directives = [];\n        for (const node of nodes) {\n            if (node.directives) {\n                directives.push(...node.directives);\n            }\n        }\n    }\n    return directives;\n}\nfunction getDeprecatableDirectiveNodes(entity, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    let directiveNodesBesidesDeprecated = [];\n    let deprecatedDirectiveNode = null;\n    const directivesInExtensions = getDirectivesInExtensions(entity, pathToDirectivesInExtensions);\n    let directives;\n    if (directivesInExtensions != null) {\n        directives = makeDirectiveNodes(schema, directivesInExtensions);\n    }\n    else {\n        directives = (_a = entity.astNode) === null || _a === void 0 ? void 0 : _a.directives;\n    }\n    if (directives != null) {\n        directiveNodesBesidesDeprecated = directives.filter(directive => directive.name.value !== 'deprecated');\n        if (entity.deprecationReason != null) {\n            deprecatedDirectiveNode = (_b = directives.filter(directive => directive.name.value === 'deprecated')) === null || _b === void 0 ? void 0 : _b[0];\n        }\n    }\n    if (entity.deprecationReason != null &&\n        deprecatedDirectiveNode == null) {\n        deprecatedDirectiveNode = makeDeprecatedDirective(entity.deprecationReason);\n    }\n    return deprecatedDirectiveNode == null\n        ? directiveNodesBesidesDeprecated\n        : [deprecatedDirectiveNode].concat(directiveNodesBesidesDeprecated);\n}\nfunction astFromArg(arg, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c;\n    return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        description: (_b = (_a = arg.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (arg.description\n            ? {\n                kind: Kind.STRING,\n                value: arg.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: arg.name,\n        },\n        type: astFromType(arg.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        defaultValue: arg.defaultValue !== undefined ? (_c = astFromValue(arg.defaultValue, arg.type)) !== null && _c !== void 0 ? _c : undefined : undefined,\n        directives: getDeprecatableDirectiveNodes(arg, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction astFromObjectType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.OBJECT_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n        interfaces: Object.values(type.getInterfaces()).map(iFace => astFromType(iFace)),\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction astFromInterfaceType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    const node = {\n        kind: Kind.INTERFACE_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromField(field, schema, pathToDirectivesInExtensions)),\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n    if ('getInterfaces' in type) {\n        node.interfaces = Object.values(type.getInterfaces()).map(iFace => astFromType(iFace));\n    }\n    return node;\n}\nfunction astFromUnionType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.UNION_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n        types: type.getTypes().map(type => astFromType(type)),\n    };\n}\nfunction astFromInputObjectType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        fields: Object.values(type.getFields()).map(field => astFromInputField(field, schema, pathToDirectivesInExtensions)),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction astFromEnumType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.ENUM_TYPE_DEFINITION,\n        description: (_b = (_a = type.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        values: Object.values(type.getValues()).map(value => astFromEnumValue(value, schema, pathToDirectivesInExtensions)),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDirectiveNodes(type, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction astFromScalarType(type, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c;\n    const directivesInExtensions = getDirectivesInExtensions(type, pathToDirectivesInExtensions);\n    const directives = directivesInExtensions\n        ? makeDirectiveNodes(schema, directivesInExtensions)\n        : ((_a = type.astNode) === null || _a === void 0 ? void 0 : _a.directives) || [];\n    const specifiedByValue = (type['specifiedByUrl'] || type['specifiedByURL']);\n    if (specifiedByValue && !directives.some(directiveNode => directiveNode.name.value === 'specifiedBy')) {\n        const specifiedByArgs = {\n            url: specifiedByValue,\n        };\n        directives.push(makeDirectiveNode('specifiedBy', specifiedByArgs));\n    }\n    return {\n        kind: Kind.SCALAR_TYPE_DEFINITION,\n        description: (_c = (_b = type.astNode) === null || _b === void 0 ? void 0 : _b.description) !== null && _c !== void 0 ? _c : (type.description\n            ? {\n                kind: Kind.STRING,\n                value: type.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: type.name,\n        },\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: directives,\n    };\n}\nfunction astFromField(field, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.FIELD_DEFINITION,\n        description: (_b = (_a = field.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (field.description\n            ? {\n                kind: Kind.STRING,\n                value: field.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: field.name,\n        },\n        arguments: field.args.map(arg => astFromArg(arg, schema, pathToDirectivesInExtensions)),\n        type: astFromType(field.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction astFromInputField(field, schema, pathToDirectivesInExtensions) {\n    var _a, _b, _c;\n    return {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        description: (_b = (_a = field.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (field.description\n            ? {\n                kind: Kind.STRING,\n                value: field.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: field.name,\n        },\n        type: astFromType(field.type),\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDeprecatableDirectiveNodes(field, schema, pathToDirectivesInExtensions),\n        defaultValue: (_c = astFromValue(field.defaultValue, field.type)) !== null && _c !== void 0 ? _c : undefined,\n    };\n}\nfunction astFromEnumValue(value, schema, pathToDirectivesInExtensions) {\n    var _a, _b;\n    return {\n        kind: Kind.ENUM_VALUE_DEFINITION,\n        description: (_b = (_a = value.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : (value.description\n            ? {\n                kind: Kind.STRING,\n                value: value.description,\n                block: true,\n            }\n            : undefined),\n        name: {\n            kind: Kind.NAME,\n            value: value.name,\n        },\n        // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n        directives: getDeprecatableDirectiveNodes(value, schema, pathToDirectivesInExtensions),\n    };\n}\nfunction makeDeprecatedDirective(deprecationReason) {\n    return makeDirectiveNode('deprecated', { reason: deprecationReason }, GraphQLDeprecatedDirective);\n}\nfunction makeDirectiveNode(name, args, directive) {\n    const directiveArguments = [];\n    if (directive != null) {\n        for (const arg of directive.args) {\n            const argName = arg.name;\n            const argValue = args[argName];\n            if (argValue !== undefined) {\n                const value = astFromValue(argValue, arg.type);\n                if (value) {\n                    directiveArguments.push({\n                        kind: Kind.ARGUMENT,\n                        name: {\n                            kind: Kind.NAME,\n                            value: argName,\n                        },\n                        value,\n                    });\n                }\n            }\n        }\n    }\n    else {\n        for (const argName in args) {\n            const argValue = args[argName];\n            const value = astFromValueUntyped(argValue);\n            if (value) {\n                directiveArguments.push({\n                    kind: Kind.ARGUMENT,\n                    name: {\n                        kind: Kind.NAME,\n                        value: argName,\n                    },\n                    value,\n                });\n            }\n        }\n    }\n    return {\n        kind: Kind.DIRECTIVE,\n        name: {\n            kind: Kind.NAME,\n            value: name,\n        },\n        arguments: directiveArguments,\n    };\n}\nfunction makeDirectiveNodes(schema, directiveValues) {\n    const directiveNodes = [];\n    for (const directiveName in directiveValues) {\n        const arrayOrSingleValue = directiveValues[directiveName];\n        const directive = schema === null || schema === void 0 ? void 0 : schema.getDirective(directiveName);\n        if (Array.isArray(arrayOrSingleValue)) {\n            for (const value of arrayOrSingleValue) {\n                directiveNodes.push(makeDirectiveNode(directiveName, value, directive));\n            }\n        }\n        else {\n            directiveNodes.push(makeDirectiveNode(directiveName, arrayOrSingleValue, directive));\n        }\n    }\n    return directiveNodes;\n}\n\nasync function validateGraphQlDocuments(schema, documentFiles, effectiveRules = createDefaultRules()) {\n    const allFragmentMap = new Map();\n    const documentFileObjectsToValidate = [];\n    for (const documentFile of documentFiles) {\n        if (documentFile.document) {\n            const definitionsToValidate = [];\n            for (const definitionNode of documentFile.document.definitions) {\n                if (definitionNode.kind === Kind.FRAGMENT_DEFINITION) {\n                    allFragmentMap.set(definitionNode.name.value, definitionNode);\n                }\n                else {\n                    definitionsToValidate.push(definitionNode);\n                }\n            }\n            documentFileObjectsToValidate.push({\n                location: documentFile.location,\n                document: {\n                    kind: Kind.DOCUMENT,\n                    definitions: definitionsToValidate,\n                },\n            });\n        }\n    }\n    const allErrors = [];\n    const allFragmentsDocument = {\n        kind: Kind.DOCUMENT,\n        definitions: [...allFragmentMap.values()],\n    };\n    await Promise.all(documentFileObjectsToValidate.map(async (documentFile) => {\n        const documentToValidate = concatAST([allFragmentsDocument, documentFile.document]);\n        const errors = validate(schema, documentToValidate, effectiveRules);\n        if (errors.length > 0) {\n            allErrors.push({\n                filePath: documentFile.location,\n                errors,\n            });\n        }\n    }));\n    return allErrors;\n}\nfunction checkValidationErrors(loadDocumentErrors) {\n    if (loadDocumentErrors.length > 0) {\n        const errors = [];\n        for (const loadDocumentError of loadDocumentErrors) {\n            for (const graphQLError of loadDocumentError.errors) {\n                const error = new Error();\n                error.name = 'GraphQLDocumentError';\n                error.message = `${error.name}: ${graphQLError.message}`;\n                error.stack = error.message;\n                if (graphQLError.locations) {\n                    for (const location of graphQLError.locations) {\n                        error.stack += `\\n    at ${loadDocumentError.filePath}:${location.line}:${location.column}`;\n                    }\n                }\n                errors.push(error);\n            }\n        }\n        throw new AggregateErrorImpl(errors, `GraphQL Document Validation failed with ${errors.length} errors;\n  ${errors.map((error, index) => `Error ${index}: ${error.stack}`).join('\\n\\n')}`);\n    }\n}\nfunction createDefaultRules() {\n    let ignored = ['NoUnusedFragmentsRule', 'NoUnusedVariablesRule', 'KnownDirectivesRule'];\n    if (versionInfo.major < 15) {\n        ignored = ignored.map(rule => rule.replace(/Rule$/, ''));\n    }\n    return specifiedRules.filter((f) => !ignored.includes(f.name));\n}\n\nfunction stripBOM(content) {\n    content = content.toString();\n    // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n    // because the buffer-to-string conversion in `fs.readFileSync()`\n    // translates it to FEFF, the UTF-16 BOM.\n    if (content.charCodeAt(0) === 0xfeff) {\n        content = content.slice(1);\n    }\n    return content;\n}\nfunction parseBOM(content) {\n    return JSON.parse(stripBOM(content));\n}\nfunction parseGraphQLJSON(location, jsonContent, options) {\n    let parsedJson = parseBOM(jsonContent);\n    if (parsedJson.data) {\n        parsedJson = parsedJson.data;\n    }\n    if (parsedJson.kind === 'Document') {\n        return {\n            location,\n            document: parsedJson,\n        };\n    }\n    else if (parsedJson.__schema) {\n        const schema = buildClientSchema(parsedJson, options);\n        return {\n            location,\n            schema,\n        };\n    }\n    else if (typeof parsedJson === 'string') {\n        return {\n            location,\n            rawSDL: parsedJson,\n        };\n    }\n    throw new Error(`Not valid JSON content`);\n}\n\nconst MAX_LINE_LENGTH = 80;\nlet commentsRegistry = {};\nfunction resetComments() {\n    commentsRegistry = {};\n}\nfunction collectComment(node) {\n    var _a;\n    const entityName = (_a = node.name) === null || _a === void 0 ? void 0 : _a.value;\n    if (entityName == null) {\n        return;\n    }\n    pushComment(node, entityName);\n    switch (node.kind) {\n        case 'EnumTypeDefinition':\n            if (node.values) {\n                for (const value of node.values) {\n                    pushComment(value, entityName, value.name.value);\n                }\n            }\n            break;\n        case 'ObjectTypeDefinition':\n        case 'InputObjectTypeDefinition':\n        case 'InterfaceTypeDefinition':\n            if (node.fields) {\n                for (const field of node.fields) {\n                    pushComment(field, entityName, field.name.value);\n                    if (isFieldDefinitionNode(field) && field.arguments) {\n                        for (const arg of field.arguments) {\n                            pushComment(arg, entityName, field.name.value, arg.name.value);\n                        }\n                    }\n                }\n            }\n            break;\n    }\n}\nfunction pushComment(node, entity, field, argument) {\n    const comment = getComment(node);\n    if (typeof comment !== 'string' || comment.length === 0) {\n        return;\n    }\n    const keys = [entity];\n    if (field) {\n        keys.push(field);\n        if (argument) {\n            keys.push(argument);\n        }\n    }\n    const path = keys.join('.');\n    if (!commentsRegistry[path]) {\n        commentsRegistry[path] = [];\n    }\n    commentsRegistry[path].push(comment);\n}\nfunction printComment(comment) {\n    return '\\n# ' + comment.replace(/\\n/g, '\\n# ');\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/**\n * NOTE: ==> This file has been modified just to add comments to the printed AST\n * This is a temp measure, we will move to using the original non modified printer.js ASAP.\n */\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\nfunction join(maybeArray, separator) {\n    return maybeArray ? maybeArray.filter(x => x).join(separator || '') : '';\n}\nfunction hasMultilineItems(maybeArray) {\n    var _a;\n    return (_a = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some(str => str.includes('\\n'))) !== null && _a !== void 0 ? _a : false;\n}\nfunction addDescription(cb) {\n    return (node, _key, _parent, path, ancestors) => {\n        var _a;\n        const keys = [];\n        const parent = path.reduce((prev, key) => {\n            if (['fields', 'arguments', 'values'].includes(key) && prev.name) {\n                keys.push(prev.name.value);\n            }\n            return prev[key];\n        }, ancestors[0]);\n        const key = [...keys, (_a = parent === null || parent === void 0 ? void 0 : parent.name) === null || _a === void 0 ? void 0 : _a.value].filter(Boolean).join('.');\n        const items = [];\n        if (node.kind.includes('Definition') && commentsRegistry[key]) {\n            items.push(...commentsRegistry[key]);\n        }\n        return join([...items.map(printComment), node.description, cb(node, _key, _parent, path, ancestors)], '\\n');\n    };\n}\nfunction indent(maybeString) {\n    return maybeString && `  ${maybeString.replace(/\\n/g, '\\n  ')}`;\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\nfunction block(array) {\n    return array && array.length !== 0 ? `{\\n${indent(join(array, '\\n'))}\\n}` : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\nfunction wrap(start, maybeString, end) {\n    return maybeString ? start + maybeString + (end || '') : '';\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\nfunction printBlockString(value, isDescription = false) {\n    const escaped = value.replace(/\"\"\"/g, '\\\\\"\"\"');\n    return (value[0] === ' ' || value[0] === '\\t') && value.indexOf('\\n') === -1\n        ? `\"\"\"${escaped.replace(/\"$/, '\"\\n')}\"\"\"`\n        : `\"\"\"\\n${isDescription ? escaped : indent(escaped)}\\n\"\"\"`;\n}\nconst printDocASTReducer = {\n    Name: { leave: node => node.value },\n    Variable: { leave: node => '$' + node.name },\n    // Document\n    Document: {\n        leave: node => join(node.definitions, '\\n\\n'),\n    },\n    OperationDefinition: {\n        leave: node => {\n            const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n            const prefix = join([node.operation, join([node.name, varDefs]), join(node.directives, ' ')], ' ');\n            // the query short form.\n            return prefix + ' ' + node.selectionSet;\n        },\n    },\n    VariableDefinition: {\n        leave: ({ variable, type, defaultValue, directives }) => variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' ')),\n    },\n    SelectionSet: { leave: ({ selections }) => block(selections) },\n    Field: {\n        leave({ alias, name, arguments: args, directives, selectionSet }) {\n            const prefix = wrap('', alias, ': ') + name;\n            let argsLine = prefix + wrap('(', join(args, ', '), ')');\n            if (argsLine.length > MAX_LINE_LENGTH) {\n                argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n            }\n            return join([argsLine, join(directives, ' '), selectionSet], ' ');\n        },\n    },\n    Argument: { leave: ({ name, value }) => name + ': ' + value },\n    // Fragments\n    FragmentSpread: {\n        leave: ({ name, directives }) => '...' + name + wrap(' ', join(directives, ' ')),\n    },\n    InlineFragment: {\n        leave: ({ typeCondition, directives, selectionSet }) => join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' '),\n    },\n    FragmentDefinition: {\n        leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => \n        // Note: fragment variable definitions are experimental and may be changed\n        // or removed in the future.\n        `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n            `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n            selectionSet,\n    },\n    // Value\n    IntValue: { leave: ({ value }) => value },\n    FloatValue: { leave: ({ value }) => value },\n    StringValue: {\n        leave: ({ value, block: isBlockString }) => {\n            if (isBlockString) {\n                return printBlockString(value);\n            }\n            return JSON.stringify(value);\n        },\n    },\n    BooleanValue: { leave: ({ value }) => (value ? 'true' : 'false') },\n    NullValue: { leave: () => 'null' },\n    EnumValue: { leave: ({ value }) => value },\n    ListValue: { leave: ({ values }) => '[' + join(values, ', ') + ']' },\n    ObjectValue: { leave: ({ fields }) => '{' + join(fields, ', ') + '}' },\n    ObjectField: { leave: ({ name, value }) => name + ': ' + value },\n    // Directive\n    Directive: {\n        leave: ({ name, arguments: args }) => '@' + name + wrap('(', join(args, ', '), ')'),\n    },\n    // Type\n    NamedType: { leave: ({ name }) => name },\n    ListType: { leave: ({ type }) => '[' + type + ']' },\n    NonNullType: { leave: ({ type }) => type + '!' },\n    // Type System Definitions\n    SchemaDefinition: {\n        leave: ({ directives, operationTypes }) => join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n    },\n    OperationTypeDefinition: {\n        leave: ({ operation, type }) => operation + ': ' + type,\n    },\n    ScalarTypeDefinition: {\n        leave: ({ name, directives }) => join(['scalar', name, join(directives, ' ')], ' '),\n    },\n    ObjectTypeDefinition: {\n        leave: ({ name, interfaces, directives, fields }) => join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' '),\n    },\n    FieldDefinition: {\n        leave: ({ name, arguments: args, type, directives }) => name +\n            (hasMultilineItems(args)\n                ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n                : wrap('(', join(args, ', '), ')')) +\n            ': ' +\n            type +\n            wrap(' ', join(directives, ' ')),\n    },\n    InputValueDefinition: {\n        leave: ({ name, type, defaultValue, directives }) => join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' '),\n    },\n    InterfaceTypeDefinition: {\n        leave: ({ name, interfaces, directives, fields }) => join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' '),\n    },\n    UnionTypeDefinition: {\n        leave: ({ name, directives, types }) => join(['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' '),\n    },\n    EnumTypeDefinition: {\n        leave: ({ name, directives, values }) => join(['enum', name, join(directives, ' '), block(values)], ' '),\n    },\n    EnumValueDefinition: {\n        leave: ({ name, directives }) => join([name, join(directives, ' ')], ' '),\n    },\n    InputObjectTypeDefinition: {\n        leave: ({ name, directives, fields }) => join(['input', name, join(directives, ' '), block(fields)], ' '),\n    },\n    DirectiveDefinition: {\n        leave: ({ name, arguments: args, repeatable, locations }) => 'directive @' +\n            name +\n            (hasMultilineItems(args)\n                ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n                : wrap('(', join(args, ', '), ')')) +\n            (repeatable ? ' repeatable' : '') +\n            ' on ' +\n            join(locations, ' | '),\n    },\n    SchemaExtension: {\n        leave: ({ directives, operationTypes }) => join(['extend schema', join(directives, ' '), block(operationTypes)], ' '),\n    },\n    ScalarTypeExtension: {\n        leave: ({ name, directives }) => join(['extend scalar', name, join(directives, ' ')], ' '),\n    },\n    ObjectTypeExtension: {\n        leave: ({ name, interfaces, directives, fields }) => join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' '),\n    },\n    InterfaceTypeExtension: {\n        leave: ({ name, interfaces, directives, fields }) => join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' '),\n    },\n    UnionTypeExtension: {\n        leave: ({ name, directives, types }) => join(['extend union', name, join(directives, ' '), wrap('= ', join(types, ' | '))], ' '),\n    },\n    EnumTypeExtension: {\n        leave: ({ name, directives, values }) => join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n    },\n    InputObjectTypeExtension: {\n        leave: ({ name, directives, fields }) => join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n    },\n};\nconst printDocASTReducerWithComments = Object.keys(printDocASTReducer).reduce((prev, key) => ({\n    ...prev,\n    [key]: {\n        leave: addDescription(printDocASTReducer[key].leave),\n    },\n}), {});\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\nfunction printWithComments(ast) {\n    return visit(ast, printDocASTReducerWithComments);\n}\nfunction isFieldDefinitionNode(node) {\n    return node.kind === 'FieldDefinition';\n}\n// graphql < v13 and > v15 does not export getDescription\nfunction getDescription(node, options) {\n    if (node.description != null) {\n        return node.description.value;\n    }\n    if (options === null || options === void 0 ? void 0 : options.commentDescriptions) {\n        return getComment(node);\n    }\n}\nfunction getComment(node) {\n    const rawValue = getLeadingCommentBlock(node);\n    if (rawValue !== undefined) {\n        return dedentBlockStringValue(`\\n${rawValue}`);\n    }\n}\nfunction getLeadingCommentBlock(node) {\n    const loc = node.loc;\n    if (!loc) {\n        return;\n    }\n    const comments = [];\n    let token = loc.startToken.prev;\n    while (token != null &&\n        token.kind === TokenKind.COMMENT &&\n        token.next != null &&\n        token.prev != null &&\n        token.line + 1 === token.next.line &&\n        token.line !== token.prev.line) {\n        const value = String(token.value);\n        comments.push(value);\n        token = token.prev;\n    }\n    return comments.length > 0 ? comments.reverse().join('\\n') : undefined;\n}\nfunction dedentBlockStringValue(rawString) {\n    // Expand a block string's raw value into independent lines.\n    const lines = rawString.split(/\\r\\n|[\\n\\r]/g);\n    // Remove common indentation from all lines but first.\n    const commonIndent = getBlockStringIndentation(lines);\n    if (commonIndent !== 0) {\n        for (let i = 1; i < lines.length; i++) {\n            lines[i] = lines[i].slice(commonIndent);\n        }\n    }\n    // Remove leading and trailing blank lines.\n    while (lines.length > 0 && isBlank(lines[0])) {\n        lines.shift();\n    }\n    while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n        lines.pop();\n    }\n    // Return a string of the lines joined with U+000A.\n    return lines.join('\\n');\n}\n/**\n * @internal\n */\nfunction getBlockStringIndentation(lines) {\n    let commonIndent = null;\n    for (let i = 1; i < lines.length; i++) {\n        const line = lines[i];\n        const indent = leadingWhitespace(line);\n        if (indent === line.length) {\n            continue; // skip empty lines\n        }\n        if (commonIndent === null || indent < commonIndent) {\n            commonIndent = indent;\n            if (commonIndent === 0) {\n                break;\n            }\n        }\n    }\n    return commonIndent === null ? 0 : commonIndent;\n}\nfunction leadingWhitespace(str) {\n    let i = 0;\n    while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n        i++;\n    }\n    return i;\n}\nfunction isBlank(str) {\n    return leadingWhitespace(str) === str.length;\n}\n\nfunction parseGraphQLSDL(location, rawSDL, options = {}) {\n    let document;\n    try {\n        if (options.commentDescriptions && rawSDL.includes('#')) {\n            document = transformCommentsToDescriptions(rawSDL, options);\n            // If noLocation=true, we need to make sure to print and parse it again, to remove locations,\n            // since `transformCommentsToDescriptions` must have locations set in order to transform the comments\n            // into descriptions.\n            if (options.noLocation) {\n                document = parse(print(document), options);\n            }\n        }\n        else {\n            document = parse(new Source(rawSDL, location), options);\n        }\n    }\n    catch (e) {\n        if (e.message.includes('EOF') && rawSDL.replace(/(\\#[^*]*)/g, '').trim() === '') {\n            document = {\n                kind: Kind.DOCUMENT,\n                definitions: [],\n            };\n        }\n        else {\n            throw e;\n        }\n    }\n    return {\n        location,\n        document,\n    };\n}\nfunction transformCommentsToDescriptions(sourceSdl, options = {}) {\n    const parsedDoc = parse(sourceSdl, {\n        ...options,\n        noLocation: false,\n    });\n    const modifiedDoc = visit(parsedDoc, {\n        leave: (node) => {\n            if (isDescribable(node)) {\n                const rawValue = getLeadingCommentBlock(node);\n                if (rawValue !== undefined) {\n                    const commentsBlock = dedentBlockStringValue('\\n' + rawValue);\n                    const isBlock = commentsBlock.includes('\\n');\n                    if (!node.description) {\n                        return {\n                            ...node,\n                            description: {\n                                kind: Kind.STRING,\n                                value: commentsBlock,\n                                block: isBlock,\n                            },\n                        };\n                    }\n                    else {\n                        return {\n                            ...node,\n                            description: {\n                                ...node.description,\n                                value: node.description.value + '\\n' + commentsBlock,\n                                block: true,\n                            },\n                        };\n                    }\n                }\n            }\n        },\n    });\n    return modifiedDoc;\n}\nfunction isDescribable(node) {\n    return (isTypeSystemDefinitionNode(node) ||\n        node.kind === Kind.FIELD_DEFINITION ||\n        node.kind === Kind.INPUT_VALUE_DEFINITION ||\n        node.kind === Kind.ENUM_VALUE_DEFINITION);\n}\n\nlet operationVariables = [];\nlet fieldTypeMap = new Map();\nfunction addOperationVariable(variable) {\n    operationVariables.push(variable);\n}\nfunction resetOperationVariables() {\n    operationVariables = [];\n}\nfunction resetFieldMap() {\n    fieldTypeMap = new Map();\n}\nfunction buildOperationNodeForField({ schema, kind, field, models, ignore = [], depthLimit, circularReferenceDepth, argNames, selectedFields = true, }) {\n    resetOperationVariables();\n    resetFieldMap();\n    const rootTypeNames = getRootTypeNames(schema);\n    const operationNode = buildOperationAndCollectVariables({\n        schema,\n        fieldName: field,\n        kind,\n        models: models || [],\n        ignore,\n        depthLimit: depthLimit || Infinity,\n        circularReferenceDepth: circularReferenceDepth || 1,\n        argNames,\n        selectedFields,\n        rootTypeNames,\n    });\n    // attach variables\n    operationNode.variableDefinitions = [...operationVariables];\n    resetOperationVariables();\n    resetFieldMap();\n    return operationNode;\n}\nfunction buildOperationAndCollectVariables({ schema, fieldName, kind, models, ignore, depthLimit, circularReferenceDepth, argNames, selectedFields, rootTypeNames, }) {\n    const type = getDefinedRootType(schema, kind);\n    const field = type.getFields()[fieldName];\n    const operationName = `${fieldName}_${kind}`;\n    if (field.args) {\n        for (const arg of field.args) {\n            const argName = arg.name;\n            if (!argNames || argNames.includes(argName)) {\n                addOperationVariable(resolveVariable(arg, argName));\n            }\n        }\n    }\n    return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: kind,\n        name: {\n            kind: Kind.NAME,\n            value: operationName,\n        },\n        variableDefinitions: [],\n        selectionSet: {\n            kind: Kind.SELECTION_SET,\n            selections: [\n                resolveField({\n                    type,\n                    field,\n                    models,\n                    firstCall: true,\n                    path: [],\n                    ancestors: [],\n                    ignore,\n                    depthLimit,\n                    circularReferenceDepth,\n                    schema,\n                    depth: 0,\n                    argNames,\n                    selectedFields,\n                    rootTypeNames,\n                }),\n            ],\n        },\n    };\n}\nfunction resolveSelectionSet({ parent, type, models, firstCall, path, ancestors, ignore, depthLimit, circularReferenceDepth, schema, depth, argNames, selectedFields, rootTypeNames, }) {\n    if (typeof selectedFields === 'boolean' && depth > depthLimit) {\n        return;\n    }\n    if (isUnionType(type)) {\n        const types = type.getTypes();\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: types\n                .filter(t => !hasCircularRef([...ancestors, t], {\n                depth: circularReferenceDepth,\n            }))\n                .map(t => {\n                return {\n                    kind: Kind.INLINE_FRAGMENT,\n                    typeCondition: {\n                        kind: Kind.NAMED_TYPE,\n                        name: {\n                            kind: Kind.NAME,\n                            value: t.name,\n                        },\n                    },\n                    selectionSet: resolveSelectionSet({\n                        parent: type,\n                        type: t,\n                        models,\n                        path,\n                        ancestors,\n                        ignore,\n                        depthLimit,\n                        circularReferenceDepth,\n                        schema,\n                        depth,\n                        argNames,\n                        selectedFields,\n                        rootTypeNames,\n                    }),\n                };\n            })\n                .filter(fragmentNode => { var _a, _b; return ((_b = (_a = fragmentNode === null || fragmentNode === void 0 ? void 0 : fragmentNode.selectionSet) === null || _a === void 0 ? void 0 : _a.selections) === null || _b === void 0 ? void 0 : _b.length) > 0; }),\n        };\n    }\n    if (isInterfaceType(type)) {\n        const types = Object.values(schema.getTypeMap()).filter((t) => isObjectType(t) && t.getInterfaces().includes(type));\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: types\n                .filter(t => !hasCircularRef([...ancestors, t], {\n                depth: circularReferenceDepth,\n            }))\n                .map(t => {\n                return {\n                    kind: Kind.INLINE_FRAGMENT,\n                    typeCondition: {\n                        kind: Kind.NAMED_TYPE,\n                        name: {\n                            kind: Kind.NAME,\n                            value: t.name,\n                        },\n                    },\n                    selectionSet: resolveSelectionSet({\n                        parent: type,\n                        type: t,\n                        models,\n                        path,\n                        ancestors,\n                        ignore,\n                        depthLimit,\n                        circularReferenceDepth,\n                        schema,\n                        depth,\n                        argNames,\n                        selectedFields,\n                        rootTypeNames,\n                    }),\n                };\n            })\n                .filter(fragmentNode => { var _a, _b; return ((_b = (_a = fragmentNode === null || fragmentNode === void 0 ? void 0 : fragmentNode.selectionSet) === null || _a === void 0 ? void 0 : _a.selections) === null || _b === void 0 ? void 0 : _b.length) > 0; }),\n        };\n    }\n    if (isObjectType(type) && !rootTypeNames.has(type.name)) {\n        const isIgnored = ignore.includes(type.name) || ignore.includes(`${parent.name}.${path[path.length - 1]}`);\n        const isModel = models.includes(type.name);\n        if (!firstCall && isModel && !isIgnored) {\n            return {\n                kind: Kind.SELECTION_SET,\n                selections: [\n                    {\n                        kind: Kind.FIELD,\n                        name: {\n                            kind: Kind.NAME,\n                            value: 'id',\n                        },\n                    },\n                ],\n            };\n        }\n        const fields = type.getFields();\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: Object.keys(fields)\n                .filter(fieldName => {\n                return !hasCircularRef([...ancestors, getNamedType(fields[fieldName].type)], {\n                    depth: circularReferenceDepth,\n                });\n            })\n                .map(fieldName => {\n                const selectedSubFields = typeof selectedFields === 'object' ? selectedFields[fieldName] : true;\n                if (selectedSubFields) {\n                    return resolveField({\n                        type: type,\n                        field: fields[fieldName],\n                        models,\n                        path: [...path, fieldName],\n                        ancestors,\n                        ignore,\n                        depthLimit,\n                        circularReferenceDepth,\n                        schema,\n                        depth,\n                        argNames,\n                        selectedFields: selectedSubFields,\n                        rootTypeNames,\n                    });\n                }\n                return null;\n            })\n                .filter((f) => {\n                var _a, _b;\n                if (f == null) {\n                    return false;\n                }\n                else if ('selectionSet' in f) {\n                    return !!((_b = (_a = f.selectionSet) === null || _a === void 0 ? void 0 : _a.selections) === null || _b === void 0 ? void 0 : _b.length);\n                }\n                return true;\n            }),\n        };\n    }\n}\nfunction resolveVariable(arg, name) {\n    function resolveVariableType(type) {\n        if (isListType(type)) {\n            return {\n                kind: Kind.LIST_TYPE,\n                type: resolveVariableType(type.ofType),\n            };\n        }\n        if (isNonNullType(type)) {\n            return {\n                kind: Kind.NON_NULL_TYPE,\n                // for v16 compatibility\n                type: resolveVariableType(type.ofType),\n            };\n        }\n        return {\n            kind: Kind.NAMED_TYPE,\n            name: {\n                kind: Kind.NAME,\n                value: type.name,\n            },\n        };\n    }\n    return {\n        kind: Kind.VARIABLE_DEFINITION,\n        variable: {\n            kind: Kind.VARIABLE,\n            name: {\n                kind: Kind.NAME,\n                value: name || arg.name,\n            },\n        },\n        type: resolveVariableType(arg.type),\n    };\n}\nfunction getArgumentName(name, path) {\n    return [...path, name].join('_');\n}\nfunction resolveField({ type, field, models, firstCall, path, ancestors, ignore, depthLimit, circularReferenceDepth, schema, depth, argNames, selectedFields, rootTypeNames, }) {\n    const namedType = getNamedType(field.type);\n    let args = [];\n    let removeField = false;\n    if (field.args && field.args.length) {\n        args = field.args\n            .map(arg => {\n            const argumentName = getArgumentName(arg.name, path);\n            if (argNames && !argNames.includes(argumentName)) {\n                if (isNonNullType(arg.type)) {\n                    removeField = true;\n                }\n                return null;\n            }\n            if (!firstCall) {\n                addOperationVariable(resolveVariable(arg, argumentName));\n            }\n            return {\n                kind: Kind.ARGUMENT,\n                name: {\n                    kind: Kind.NAME,\n                    value: arg.name,\n                },\n                value: {\n                    kind: Kind.VARIABLE,\n                    name: {\n                        kind: Kind.NAME,\n                        value: getArgumentName(arg.name, path),\n                    },\n                },\n            };\n        })\n            .filter(Boolean);\n    }\n    if (removeField) {\n        return null;\n    }\n    const fieldPath = [...path, field.name];\n    const fieldPathStr = fieldPath.join('.');\n    let fieldName = field.name;\n    if (fieldTypeMap.has(fieldPathStr) && fieldTypeMap.get(fieldPathStr) !== field.type.toString()) {\n        fieldName += field.type.toString().replace('!', 'NonNull');\n    }\n    fieldTypeMap.set(fieldPathStr, field.type.toString());\n    if (!isScalarType(namedType) && !isEnumType(namedType)) {\n        return {\n            kind: Kind.FIELD,\n            name: {\n                kind: Kind.NAME,\n                value: field.name,\n            },\n            ...(fieldName !== field.name && { alias: { kind: Kind.NAME, value: fieldName } }),\n            selectionSet: resolveSelectionSet({\n                parent: type,\n                type: namedType,\n                models,\n                firstCall,\n                path: fieldPath,\n                ancestors: [...ancestors, type],\n                ignore,\n                depthLimit,\n                circularReferenceDepth,\n                schema,\n                depth: depth + 1,\n                argNames,\n                selectedFields,\n                rootTypeNames,\n            }) || undefined,\n            arguments: args,\n        };\n    }\n    return {\n        kind: Kind.FIELD,\n        name: {\n            kind: Kind.NAME,\n            value: field.name,\n        },\n        ...(fieldName !== field.name && { alias: { kind: Kind.NAME, value: fieldName } }),\n        arguments: args,\n    };\n}\nfunction hasCircularRef(types, config = {\n    depth: 1,\n}) {\n    const type = types[types.length - 1];\n    if (isScalarType(type)) {\n        return false;\n    }\n    const size = types.filter(t => t.name === type.name).length;\n    return size > config.depth;\n}\n\nvar DirectiveLocation;\n(function (DirectiveLocation) {\n    /** Request Definitions */\n    DirectiveLocation[\"QUERY\"] = \"QUERY\";\n    DirectiveLocation[\"MUTATION\"] = \"MUTATION\";\n    DirectiveLocation[\"SUBSCRIPTION\"] = \"SUBSCRIPTION\";\n    DirectiveLocation[\"FIELD\"] = \"FIELD\";\n    DirectiveLocation[\"FRAGMENT_DEFINITION\"] = \"FRAGMENT_DEFINITION\";\n    DirectiveLocation[\"FRAGMENT_SPREAD\"] = \"FRAGMENT_SPREAD\";\n    DirectiveLocation[\"INLINE_FRAGMENT\"] = \"INLINE_FRAGMENT\";\n    DirectiveLocation[\"VARIABLE_DEFINITION\"] = \"VARIABLE_DEFINITION\";\n    /** Type System Definitions */\n    DirectiveLocation[\"SCHEMA\"] = \"SCHEMA\";\n    DirectiveLocation[\"SCALAR\"] = \"SCALAR\";\n    DirectiveLocation[\"OBJECT\"] = \"OBJECT\";\n    DirectiveLocation[\"FIELD_DEFINITION\"] = \"FIELD_DEFINITION\";\n    DirectiveLocation[\"ARGUMENT_DEFINITION\"] = \"ARGUMENT_DEFINITION\";\n    DirectiveLocation[\"INTERFACE\"] = \"INTERFACE\";\n    DirectiveLocation[\"UNION\"] = \"UNION\";\n    DirectiveLocation[\"ENUM\"] = \"ENUM\";\n    DirectiveLocation[\"ENUM_VALUE\"] = \"ENUM_VALUE\";\n    DirectiveLocation[\"INPUT_OBJECT\"] = \"INPUT_OBJECT\";\n    DirectiveLocation[\"INPUT_FIELD_DEFINITION\"] = \"INPUT_FIELD_DEFINITION\";\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nvar MapperKind;\n(function (MapperKind) {\n    MapperKind[\"TYPE\"] = \"MapperKind.TYPE\";\n    MapperKind[\"SCALAR_TYPE\"] = \"MapperKind.SCALAR_TYPE\";\n    MapperKind[\"ENUM_TYPE\"] = \"MapperKind.ENUM_TYPE\";\n    MapperKind[\"COMPOSITE_TYPE\"] = \"MapperKind.COMPOSITE_TYPE\";\n    MapperKind[\"OBJECT_TYPE\"] = \"MapperKind.OBJECT_TYPE\";\n    MapperKind[\"INPUT_OBJECT_TYPE\"] = \"MapperKind.INPUT_OBJECT_TYPE\";\n    MapperKind[\"ABSTRACT_TYPE\"] = \"MapperKind.ABSTRACT_TYPE\";\n    MapperKind[\"UNION_TYPE\"] = \"MapperKind.UNION_TYPE\";\n    MapperKind[\"INTERFACE_TYPE\"] = \"MapperKind.INTERFACE_TYPE\";\n    MapperKind[\"ROOT_OBJECT\"] = \"MapperKind.ROOT_OBJECT\";\n    MapperKind[\"QUERY\"] = \"MapperKind.QUERY\";\n    MapperKind[\"MUTATION\"] = \"MapperKind.MUTATION\";\n    MapperKind[\"SUBSCRIPTION\"] = \"MapperKind.SUBSCRIPTION\";\n    MapperKind[\"DIRECTIVE\"] = \"MapperKind.DIRECTIVE\";\n    MapperKind[\"FIELD\"] = \"MapperKind.FIELD\";\n    MapperKind[\"COMPOSITE_FIELD\"] = \"MapperKind.COMPOSITE_FIELD\";\n    MapperKind[\"OBJECT_FIELD\"] = \"MapperKind.OBJECT_FIELD\";\n    MapperKind[\"ROOT_FIELD\"] = \"MapperKind.ROOT_FIELD\";\n    MapperKind[\"QUERY_ROOT_FIELD\"] = \"MapperKind.QUERY_ROOT_FIELD\";\n    MapperKind[\"MUTATION_ROOT_FIELD\"] = \"MapperKind.MUTATION_ROOT_FIELD\";\n    MapperKind[\"SUBSCRIPTION_ROOT_FIELD\"] = \"MapperKind.SUBSCRIPTION_ROOT_FIELD\";\n    MapperKind[\"INTERFACE_FIELD\"] = \"MapperKind.INTERFACE_FIELD\";\n    MapperKind[\"INPUT_OBJECT_FIELD\"] = \"MapperKind.INPUT_OBJECT_FIELD\";\n    MapperKind[\"ARGUMENT\"] = \"MapperKind.ARGUMENT\";\n    MapperKind[\"ENUM_VALUE\"] = \"MapperKind.ENUM_VALUE\";\n})(MapperKind || (MapperKind = {}));\n\nfunction getObjectTypeFromTypeMap(typeMap, type) {\n    if (type) {\n        const maybeObjectType = typeMap[type.name];\n        if (isObjectType(maybeObjectType)) {\n            return maybeObjectType;\n        }\n    }\n}\n\nfunction createNamedStub(name, type) {\n    let constructor;\n    if (type === 'object') {\n        constructor = GraphQLObjectType;\n    }\n    else if (type === 'interface') {\n        constructor = GraphQLInterfaceType;\n    }\n    else {\n        constructor = GraphQLInputObjectType;\n    }\n    return new constructor({\n        name,\n        fields: {\n            _fake: {\n                type: GraphQLString,\n            },\n        },\n    });\n}\nfunction createStub(node, type) {\n    switch (node.kind) {\n        case Kind.LIST_TYPE:\n            return new GraphQLList(createStub(node.type, type));\n        case Kind.NON_NULL_TYPE:\n            return new GraphQLNonNull(createStub(node.type, type));\n        default:\n            if (type === 'output') {\n                return createNamedStub(node.name.value, 'object');\n            }\n            return createNamedStub(node.name.value, 'input');\n    }\n}\nfunction isNamedStub(type) {\n    if ('getFields' in type) {\n        const fields = type.getFields();\n        // eslint-disable-next-line no-unreachable-loop\n        for (const fieldName in fields) {\n            const field = fields[fieldName];\n            return field.name === '_fake';\n        }\n    }\n    return false;\n}\nfunction getBuiltInForStub(type) {\n    switch (type.name) {\n        case GraphQLInt.name:\n            return GraphQLInt;\n        case GraphQLFloat.name:\n            return GraphQLFloat;\n        case GraphQLString.name:\n            return GraphQLString;\n        case GraphQLBoolean.name:\n            return GraphQLBoolean;\n        case GraphQLID.name:\n            return GraphQLID;\n        default:\n            return type;\n    }\n}\n\nfunction rewireTypes(originalTypeMap, directives) {\n    const referenceTypeMap = Object.create(null);\n    for (const typeName in originalTypeMap) {\n        referenceTypeMap[typeName] = originalTypeMap[typeName];\n    }\n    const newTypeMap = Object.create(null);\n    for (const typeName in referenceTypeMap) {\n        const namedType = referenceTypeMap[typeName];\n        if (namedType == null || typeName.startsWith('__')) {\n            continue;\n        }\n        const newName = namedType.name;\n        if (newName.startsWith('__')) {\n            continue;\n        }\n        if (newTypeMap[newName] != null) {\n            throw new Error(`Duplicate schema type name ${newName}`);\n        }\n        newTypeMap[newName] = namedType;\n    }\n    for (const typeName in newTypeMap) {\n        newTypeMap[typeName] = rewireNamedType(newTypeMap[typeName]);\n    }\n    const newDirectives = directives.map(directive => rewireDirective(directive));\n    return {\n        typeMap: newTypeMap,\n        directives: newDirectives,\n    };\n    function rewireDirective(directive) {\n        if (isSpecifiedDirective(directive)) {\n            return directive;\n        }\n        const directiveConfig = directive.toConfig();\n        directiveConfig.args = rewireArgs(directiveConfig.args);\n        return new GraphQLDirective(directiveConfig);\n    }\n    function rewireArgs(args) {\n        const rewiredArgs = {};\n        for (const argName in args) {\n            const arg = args[argName];\n            const rewiredArgType = rewireType(arg.type);\n            if (rewiredArgType != null) {\n                arg.type = rewiredArgType;\n                rewiredArgs[argName] = arg;\n            }\n        }\n        return rewiredArgs;\n    }\n    function rewireNamedType(type) {\n        if (isObjectType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireFields(config.fields),\n                interfaces: () => rewireNamedTypes(config.interfaces),\n            };\n            return new GraphQLObjectType(newConfig);\n        }\n        else if (isInterfaceType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireFields(config.fields),\n            };\n            if ('interfaces' in newConfig) {\n                newConfig.interfaces = () => rewireNamedTypes(config.interfaces);\n            }\n            return new GraphQLInterfaceType(newConfig);\n        }\n        else if (isUnionType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                types: () => rewireNamedTypes(config.types),\n            };\n            return new GraphQLUnionType(newConfig);\n        }\n        else if (isInputObjectType(type)) {\n            const config = type.toConfig();\n            const newConfig = {\n                ...config,\n                fields: () => rewireInputFields(config.fields),\n            };\n            return new GraphQLInputObjectType(newConfig);\n        }\n        else if (isEnumType(type)) {\n            const enumConfig = type.toConfig();\n            return new GraphQLEnumType(enumConfig);\n        }\n        else if (isScalarType(type)) {\n            if (isSpecifiedScalarType(type)) {\n                return type;\n            }\n            const scalarConfig = type.toConfig();\n            return new GraphQLScalarType(scalarConfig);\n        }\n        throw new Error(`Unexpected schema type: ${type}`);\n    }\n    function rewireFields(fields) {\n        const rewiredFields = {};\n        for (const fieldName in fields) {\n            const field = fields[fieldName];\n            const rewiredFieldType = rewireType(field.type);\n            if (rewiredFieldType != null && field.args) {\n                field.type = rewiredFieldType;\n                field.args = rewireArgs(field.args);\n                rewiredFields[fieldName] = field;\n            }\n        }\n        return rewiredFields;\n    }\n    function rewireInputFields(fields) {\n        const rewiredFields = {};\n        for (const fieldName in fields) {\n            const field = fields[fieldName];\n            const rewiredFieldType = rewireType(field.type);\n            if (rewiredFieldType != null) {\n                field.type = rewiredFieldType;\n                rewiredFields[fieldName] = field;\n            }\n        }\n        return rewiredFields;\n    }\n    function rewireNamedTypes(namedTypes) {\n        const rewiredTypes = [];\n        for (const namedType of namedTypes) {\n            const rewiredType = rewireType(namedType);\n            if (rewiredType != null) {\n                rewiredTypes.push(rewiredType);\n            }\n        }\n        return rewiredTypes;\n    }\n    function rewireType(type) {\n        if (isListType(type)) {\n            const rewiredType = rewireType(type.ofType);\n            return rewiredType != null ? new GraphQLList(rewiredType) : null;\n        }\n        else if (isNonNullType(type)) {\n            const rewiredType = rewireType(type.ofType);\n            return rewiredType != null ? new GraphQLNonNull(rewiredType) : null;\n        }\n        else if (isNamedType(type)) {\n            let rewiredType = referenceTypeMap[type.name];\n            if (rewiredType === undefined) {\n                rewiredType = isNamedStub(type) ? getBuiltInForStub(type) : rewireNamedType(type);\n                newTypeMap[rewiredType.name] = referenceTypeMap[type.name] = rewiredType;\n            }\n            return rewiredType != null ? newTypeMap[rewiredType.name] : null;\n        }\n        return null;\n    }\n}\n\nfunction transformInputValue(type, value, inputLeafValueTransformer = null, inputObjectValueTransformer = null) {\n    if (value == null) {\n        return value;\n    }\n    const nullableType = getNullableType(type);\n    if (isLeafType(nullableType)) {\n        return inputLeafValueTransformer != null ? inputLeafValueTransformer(nullableType, value) : value;\n    }\n    else if (isListType(nullableType)) {\n        return value.map((listMember) => transformInputValue(nullableType.ofType, listMember, inputLeafValueTransformer, inputObjectValueTransformer));\n    }\n    else if (isInputObjectType(nullableType)) {\n        const fields = nullableType.getFields();\n        const newValue = {};\n        for (const key in value) {\n            const field = fields[key];\n            if (field != null) {\n                newValue[key] = transformInputValue(field.type, value[key], inputLeafValueTransformer, inputObjectValueTransformer);\n            }\n        }\n        return inputObjectValueTransformer != null ? inputObjectValueTransformer(nullableType, newValue) : newValue;\n    }\n    // unreachable, no other possible return value\n}\nfunction serializeInputValue(type, value) {\n    return transformInputValue(type, value, (t, v) => {\n        try {\n            return t.serialize(v);\n        }\n        catch (_a) {\n            return v;\n        }\n    });\n}\nfunction parseInputValue(type, value) {\n    return transformInputValue(type, value, (t, v) => {\n        try {\n            return t.parseValue(v);\n        }\n        catch (_a) {\n            return v;\n        }\n    });\n}\nfunction parseInputValueLiteral(type, value) {\n    return transformInputValue(type, value, (t, v) => t.parseLiteral(v, {}));\n}\n\nfunction mapSchema(schema, schemaMapper = {}) {\n    const newTypeMap = mapArguments(mapFields(mapTypes(mapDefaultValues(mapEnumValues(mapTypes(mapDefaultValues(schema.getTypeMap(), schema, serializeInputValue), schema, schemaMapper, type => isLeafType(type)), schema, schemaMapper), schema, parseInputValue), schema, schemaMapper, type => !isLeafType(type)), schema, schemaMapper), schema, schemaMapper);\n    const originalDirectives = schema.getDirectives();\n    const newDirectives = mapDirectives(originalDirectives, schema, schemaMapper);\n    const { typeMap, directives } = rewireTypes(newTypeMap, newDirectives);\n    return new GraphQLSchema({\n        ...schema.toConfig(),\n        query: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getQueryType())),\n        mutation: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getMutationType())),\n        subscription: getObjectTypeFromTypeMap(typeMap, getObjectTypeFromTypeMap(newTypeMap, schema.getSubscriptionType())),\n        types: Object.values(typeMap),\n        directives,\n    });\n}\nfunction mapTypes(originalTypeMap, schema, schemaMapper, testFn = () => true) {\n    const newTypeMap = {};\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__')) {\n            const originalType = originalTypeMap[typeName];\n            if (originalType == null || !testFn(originalType)) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const typeMapper = getTypeMapper(schema, schemaMapper, typeName);\n            if (typeMapper == null) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const maybeNewType = typeMapper(originalType, schema);\n            if (maybeNewType === undefined) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            newTypeMap[typeName] = maybeNewType;\n        }\n    }\n    return newTypeMap;\n}\nfunction mapEnumValues(originalTypeMap, schema, schemaMapper) {\n    const enumValueMapper = getEnumValueMapper(schemaMapper);\n    if (!enumValueMapper) {\n        return originalTypeMap;\n    }\n    return mapTypes(originalTypeMap, schema, {\n        [MapperKind.ENUM_TYPE]: type => {\n            const config = type.toConfig();\n            const originalEnumValueConfigMap = config.values;\n            const newEnumValueConfigMap = {};\n            for (const externalValue in originalEnumValueConfigMap) {\n                const originalEnumValueConfig = originalEnumValueConfigMap[externalValue];\n                const mappedEnumValue = enumValueMapper(originalEnumValueConfig, type.name, schema, externalValue);\n                if (mappedEnumValue === undefined) {\n                    newEnumValueConfigMap[externalValue] = originalEnumValueConfig;\n                }\n                else if (Array.isArray(mappedEnumValue)) {\n                    const [newExternalValue, newEnumValueConfig] = mappedEnumValue;\n                    newEnumValueConfigMap[newExternalValue] =\n                        newEnumValueConfig === undefined ? originalEnumValueConfig : newEnumValueConfig;\n                }\n                else if (mappedEnumValue !== null) {\n                    newEnumValueConfigMap[externalValue] = mappedEnumValue;\n                }\n            }\n            return correctASTNodes(new GraphQLEnumType({\n                ...config,\n                values: newEnumValueConfigMap,\n            }));\n        },\n    }, type => isEnumType(type));\n}\nfunction mapDefaultValues(originalTypeMap, schema, fn) {\n    const newTypeMap = mapArguments(originalTypeMap, schema, {\n        [MapperKind.ARGUMENT]: argumentConfig => {\n            if (argumentConfig.defaultValue === undefined) {\n                return argumentConfig;\n            }\n            const maybeNewType = getNewType(originalTypeMap, argumentConfig.type);\n            if (maybeNewType != null) {\n                return {\n                    ...argumentConfig,\n                    defaultValue: fn(maybeNewType, argumentConfig.defaultValue),\n                };\n            }\n        },\n    });\n    return mapFields(newTypeMap, schema, {\n        [MapperKind.INPUT_OBJECT_FIELD]: inputFieldConfig => {\n            if (inputFieldConfig.defaultValue === undefined) {\n                return inputFieldConfig;\n            }\n            const maybeNewType = getNewType(newTypeMap, inputFieldConfig.type);\n            if (maybeNewType != null) {\n                return {\n                    ...inputFieldConfig,\n                    defaultValue: fn(maybeNewType, inputFieldConfig.defaultValue),\n                };\n            }\n        },\n    });\n}\nfunction getNewType(newTypeMap, type) {\n    if (isListType(type)) {\n        const newType = getNewType(newTypeMap, type.ofType);\n        return newType != null ? new GraphQLList(newType) : null;\n    }\n    else if (isNonNullType(type)) {\n        const newType = getNewType(newTypeMap, type.ofType);\n        return newType != null ? new GraphQLNonNull(newType) : null;\n    }\n    else if (isNamedType(type)) {\n        const newType = newTypeMap[type.name];\n        return newType != null ? newType : null;\n    }\n    return null;\n}\nfunction mapFields(originalTypeMap, schema, schemaMapper) {\n    const newTypeMap = {};\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__')) {\n            const originalType = originalTypeMap[typeName];\n            if (!isObjectType(originalType) && !isInterfaceType(originalType) && !isInputObjectType(originalType)) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const fieldMapper = getFieldMapper(schema, schemaMapper, typeName);\n            if (fieldMapper == null) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const config = originalType.toConfig();\n            const originalFieldConfigMap = config.fields;\n            const newFieldConfigMap = {};\n            for (const fieldName in originalFieldConfigMap) {\n                const originalFieldConfig = originalFieldConfigMap[fieldName];\n                const mappedField = fieldMapper(originalFieldConfig, fieldName, typeName, schema);\n                if (mappedField === undefined) {\n                    newFieldConfigMap[fieldName] = originalFieldConfig;\n                }\n                else if (Array.isArray(mappedField)) {\n                    const [newFieldName, newFieldConfig] = mappedField;\n                    if (newFieldConfig.astNode != null) {\n                        newFieldConfig.astNode = {\n                            ...newFieldConfig.astNode,\n                            name: {\n                                ...newFieldConfig.astNode.name,\n                                value: newFieldName,\n                            },\n                        };\n                    }\n                    newFieldConfigMap[newFieldName] = newFieldConfig === undefined ? originalFieldConfig : newFieldConfig;\n                }\n                else if (mappedField !== null) {\n                    newFieldConfigMap[fieldName] = mappedField;\n                }\n            }\n            if (isObjectType(originalType)) {\n                newTypeMap[typeName] = correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n            else if (isInterfaceType(originalType)) {\n                newTypeMap[typeName] = correctASTNodes(new GraphQLInterfaceType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n            else {\n                newTypeMap[typeName] = correctASTNodes(new GraphQLInputObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        }\n    }\n    return newTypeMap;\n}\nfunction mapArguments(originalTypeMap, schema, schemaMapper) {\n    const newTypeMap = {};\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__')) {\n            const originalType = originalTypeMap[typeName];\n            if (!isObjectType(originalType) && !isInterfaceType(originalType)) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const argumentMapper = getArgumentMapper(schemaMapper);\n            if (argumentMapper == null) {\n                newTypeMap[typeName] = originalType;\n                continue;\n            }\n            const config = originalType.toConfig();\n            const originalFieldConfigMap = config.fields;\n            const newFieldConfigMap = {};\n            for (const fieldName in originalFieldConfigMap) {\n                const originalFieldConfig = originalFieldConfigMap[fieldName];\n                const originalArgumentConfigMap = originalFieldConfig.args;\n                if (originalArgumentConfigMap == null) {\n                    newFieldConfigMap[fieldName] = originalFieldConfig;\n                    continue;\n                }\n                const argumentNames = Object.keys(originalArgumentConfigMap);\n                if (!argumentNames.length) {\n                    newFieldConfigMap[fieldName] = originalFieldConfig;\n                    continue;\n                }\n                const newArgumentConfigMap = {};\n                for (const argumentName of argumentNames) {\n                    const originalArgumentConfig = originalArgumentConfigMap[argumentName];\n                    const mappedArgument = argumentMapper(originalArgumentConfig, fieldName, typeName, schema);\n                    if (mappedArgument === undefined) {\n                        newArgumentConfigMap[argumentName] = originalArgumentConfig;\n                    }\n                    else if (Array.isArray(mappedArgument)) {\n                        const [newArgumentName, newArgumentConfig] = mappedArgument;\n                        newArgumentConfigMap[newArgumentName] = newArgumentConfig;\n                    }\n                    else if (mappedArgument !== null) {\n                        newArgumentConfigMap[argumentName] = mappedArgument;\n                    }\n                }\n                newFieldConfigMap[fieldName] = {\n                    ...originalFieldConfig,\n                    args: newArgumentConfigMap,\n                };\n            }\n            if (isObjectType(originalType)) {\n                newTypeMap[typeName] = new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                });\n            }\n            else if (isInterfaceType(originalType)) {\n                newTypeMap[typeName] = new GraphQLInterfaceType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                });\n            }\n            else {\n                newTypeMap[typeName] = new GraphQLInputObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                });\n            }\n        }\n    }\n    return newTypeMap;\n}\nfunction mapDirectives(originalDirectives, schema, schemaMapper) {\n    const directiveMapper = getDirectiveMapper(schemaMapper);\n    if (directiveMapper == null) {\n        return originalDirectives.slice();\n    }\n    const newDirectives = [];\n    for (const directive of originalDirectives) {\n        const mappedDirective = directiveMapper(directive, schema);\n        if (mappedDirective === undefined) {\n            newDirectives.push(directive);\n        }\n        else if (mappedDirective !== null) {\n            newDirectives.push(mappedDirective);\n        }\n    }\n    return newDirectives;\n}\nfunction getTypeSpecifiers(schema, typeName) {\n    var _a, _b, _c;\n    const type = schema.getType(typeName);\n    const specifiers = [MapperKind.TYPE];\n    if (isObjectType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.OBJECT_TYPE);\n        if (typeName === ((_a = schema.getQueryType()) === null || _a === void 0 ? void 0 : _a.name)) {\n            specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.QUERY);\n        }\n        else if (typeName === ((_b = schema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name)) {\n            specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.MUTATION);\n        }\n        else if (typeName === ((_c = schema.getSubscriptionType()) === null || _c === void 0 ? void 0 : _c.name)) {\n            specifiers.push(MapperKind.ROOT_OBJECT, MapperKind.SUBSCRIPTION);\n        }\n    }\n    else if (isInputObjectType(type)) {\n        specifiers.push(MapperKind.INPUT_OBJECT_TYPE);\n    }\n    else if (isInterfaceType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.INTERFACE_TYPE);\n    }\n    else if (isUnionType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_TYPE, MapperKind.ABSTRACT_TYPE, MapperKind.UNION_TYPE);\n    }\n    else if (isEnumType(type)) {\n        specifiers.push(MapperKind.ENUM_TYPE);\n    }\n    else if (isScalarType(type)) {\n        specifiers.push(MapperKind.SCALAR_TYPE);\n    }\n    return specifiers;\n}\nfunction getTypeMapper(schema, schemaMapper, typeName) {\n    const specifiers = getTypeSpecifiers(schema, typeName);\n    let typeMapper;\n    const stack = [...specifiers];\n    while (!typeMapper && stack.length > 0) {\n        // It is safe to use the ! operator here as we check the length.\n        const next = stack.pop();\n        typeMapper = schemaMapper[next];\n    }\n    return typeMapper != null ? typeMapper : null;\n}\nfunction getFieldSpecifiers(schema, typeName) {\n    var _a, _b, _c;\n    const type = schema.getType(typeName);\n    const specifiers = [MapperKind.FIELD];\n    if (isObjectType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.OBJECT_FIELD);\n        if (typeName === ((_a = schema.getQueryType()) === null || _a === void 0 ? void 0 : _a.name)) {\n            specifiers.push(MapperKind.ROOT_FIELD, MapperKind.QUERY_ROOT_FIELD);\n        }\n        else if (typeName === ((_b = schema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name)) {\n            specifiers.push(MapperKind.ROOT_FIELD, MapperKind.MUTATION_ROOT_FIELD);\n        }\n        else if (typeName === ((_c = schema.getSubscriptionType()) === null || _c === void 0 ? void 0 : _c.name)) {\n            specifiers.push(MapperKind.ROOT_FIELD, MapperKind.SUBSCRIPTION_ROOT_FIELD);\n        }\n    }\n    else if (isInterfaceType(type)) {\n        specifiers.push(MapperKind.COMPOSITE_FIELD, MapperKind.INTERFACE_FIELD);\n    }\n    else if (isInputObjectType(type)) {\n        specifiers.push(MapperKind.INPUT_OBJECT_FIELD);\n    }\n    return specifiers;\n}\nfunction getFieldMapper(schema, schemaMapper, typeName) {\n    const specifiers = getFieldSpecifiers(schema, typeName);\n    let fieldMapper;\n    const stack = [...specifiers];\n    while (!fieldMapper && stack.length > 0) {\n        // It is safe to use the ! operator here as we check the length.\n        const next = stack.pop();\n        // TODO: fix this as unknown cast\n        fieldMapper = schemaMapper[next];\n    }\n    return fieldMapper !== null && fieldMapper !== void 0 ? fieldMapper : null;\n}\nfunction getArgumentMapper(schemaMapper) {\n    const argumentMapper = schemaMapper[MapperKind.ARGUMENT];\n    return argumentMapper != null ? argumentMapper : null;\n}\nfunction getDirectiveMapper(schemaMapper) {\n    const directiveMapper = schemaMapper[MapperKind.DIRECTIVE];\n    return directiveMapper != null ? directiveMapper : null;\n}\nfunction getEnumValueMapper(schemaMapper) {\n    const enumValueMapper = schemaMapper[MapperKind.ENUM_VALUE];\n    return enumValueMapper != null ? enumValueMapper : null;\n}\nfunction correctASTNodes(type) {\n    if (isObjectType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const fields = [];\n            for (const fieldName in config.fields) {\n                const fieldConfig = config.fields[fieldName];\n                if (fieldConfig.astNode != null) {\n                    fields.push(fieldConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                kind: Kind.OBJECT_TYPE_DEFINITION,\n                fields,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                kind: Kind.OBJECT_TYPE_EXTENSION,\n                fields: undefined,\n            }));\n        }\n        return new GraphQLObjectType(config);\n    }\n    else if (isInterfaceType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const fields = [];\n            for (const fieldName in config.fields) {\n                const fieldConfig = config.fields[fieldName];\n                if (fieldConfig.astNode != null) {\n                    fields.push(fieldConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                kind: Kind.INTERFACE_TYPE_DEFINITION,\n                fields,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                kind: Kind.INTERFACE_TYPE_EXTENSION,\n                fields: undefined,\n            }));\n        }\n        return new GraphQLInterfaceType(config);\n    }\n    else if (isInputObjectType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const fields = [];\n            for (const fieldName in config.fields) {\n                const fieldConfig = config.fields[fieldName];\n                if (fieldConfig.astNode != null) {\n                    fields.push(fieldConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n                fields,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n                fields: undefined,\n            }));\n        }\n        return new GraphQLInputObjectType(config);\n    }\n    else if (isEnumType(type)) {\n        const config = type.toConfig();\n        if (config.astNode != null) {\n            const values = [];\n            for (const enumKey in config.values) {\n                const enumValueConfig = config.values[enumKey];\n                if (enumValueConfig.astNode != null) {\n                    values.push(enumValueConfig.astNode);\n                }\n            }\n            config.astNode = {\n                ...config.astNode,\n                values,\n            };\n        }\n        if (config.extensionASTNodes != null) {\n            config.extensionASTNodes = config.extensionASTNodes.map(node => ({\n                ...node,\n                values: undefined,\n            }));\n        }\n        return new GraphQLEnumType(config);\n    }\n    else {\n        return type;\n    }\n}\n\nfunction filterSchema({ schema, typeFilter = () => true, fieldFilter = undefined, rootFieldFilter = undefined, objectFieldFilter = undefined, interfaceFieldFilter = undefined, inputObjectFieldFilter = undefined, argumentFilter = undefined, }) {\n    const filteredSchema = mapSchema(schema, {\n        [MapperKind.QUERY]: (type) => filterRootFields(type, 'Query', rootFieldFilter, argumentFilter),\n        [MapperKind.MUTATION]: (type) => filterRootFields(type, 'Mutation', rootFieldFilter, argumentFilter),\n        [MapperKind.SUBSCRIPTION]: (type) => filterRootFields(type, 'Subscription', rootFieldFilter, argumentFilter),\n        [MapperKind.OBJECT_TYPE]: (type) => typeFilter(type.name, type)\n            ? filterElementFields(GraphQLObjectType, type, objectFieldFilter || fieldFilter, argumentFilter)\n            : null,\n        [MapperKind.INTERFACE_TYPE]: (type) => typeFilter(type.name, type)\n            ? filterElementFields(GraphQLInterfaceType, type, interfaceFieldFilter || fieldFilter, argumentFilter)\n            : null,\n        [MapperKind.INPUT_OBJECT_TYPE]: (type) => typeFilter(type.name, type)\n            ? filterElementFields(GraphQLInputObjectType, type, inputObjectFieldFilter || fieldFilter)\n            : null,\n        [MapperKind.UNION_TYPE]: (type) => (typeFilter(type.name, type) ? undefined : null),\n        [MapperKind.ENUM_TYPE]: (type) => (typeFilter(type.name, type) ? undefined : null),\n        [MapperKind.SCALAR_TYPE]: (type) => (typeFilter(type.name, type) ? undefined : null),\n    });\n    return filteredSchema;\n}\nfunction filterRootFields(type, operation, rootFieldFilter, argumentFilter) {\n    if (rootFieldFilter || argumentFilter) {\n        const config = type.toConfig();\n        for (const fieldName in config.fields) {\n            const field = config.fields[fieldName];\n            if (rootFieldFilter && !rootFieldFilter(operation, fieldName, config.fields[fieldName])) {\n                delete config.fields[fieldName];\n            }\n            else if (argumentFilter && field.args) {\n                for (const argName in field.args) {\n                    if (!argumentFilter(operation, fieldName, argName, field.args[argName])) {\n                        delete field.args[argName];\n                    }\n                }\n            }\n        }\n        return new GraphQLObjectType(config);\n    }\n    return type;\n}\nfunction filterElementFields(ElementConstructor, type, fieldFilter, argumentFilter) {\n    if (fieldFilter || argumentFilter) {\n        const config = type.toConfig();\n        for (const fieldName in config.fields) {\n            const field = config.fields[fieldName];\n            if (fieldFilter && !fieldFilter(type.name, fieldName, config.fields[fieldName])) {\n                delete config.fields[fieldName];\n            }\n            else if (argumentFilter && 'args' in field) {\n                for (const argName in field.args) {\n                    if (!argumentFilter(type.name, fieldName, argName, field.args[argName])) {\n                        delete field.args[argName];\n                    }\n                }\n            }\n        }\n        return new ElementConstructor(config);\n    }\n}\n\n// Update any references to named schema types that disagree with the named\n// types found in schema.getTypeMap().\n//\n// healSchema and its callers (visitSchema/visitSchemaDirectives) all modify the schema in place.\n// Therefore, private variables (such as the stored implementation map and the proper root types)\n// are not updated.\n//\n// If this causes issues, the schema could be more aggressively healed as follows:\n//\n// healSchema(schema);\n// const config = schema.toConfig()\n// const healedSchema = new GraphQLSchema({\n//   ...config,\n//   query: schema.getType('<desired new root query type name>'),\n//   mutation: schema.getType('<desired new root mutation type name>'),\n//   subscription: schema.getType('<desired new root subscription type name>'),\n// });\n//\n// One can then also -- if necessary --  assign the correct private variables to the initial schema\n// as follows:\n// Object.assign(schema, healedSchema);\n//\n// These steps are not taken automatically to preserve backwards compatibility with graphql-tools v4.\n// See https://github.com/ardatan/graphql-tools/issues/1462\n//\n// They were briefly taken in v5, but can now be phased out as they were only required when other\n// areas of the codebase were using healSchema and visitSchema more extensively.\n//\nfunction healSchema(schema) {\n    healTypes(schema.getTypeMap(), schema.getDirectives());\n    return schema;\n}\nfunction healTypes(originalTypeMap, directives) {\n    const actualNamedTypeMap = Object.create(null);\n    // If any of the .name properties of the GraphQLNamedType objects in\n    // schema.getTypeMap() have changed, the keys of the type map need to\n    // be updated accordingly.\n    for (const typeName in originalTypeMap) {\n        const namedType = originalTypeMap[typeName];\n        if (namedType == null || typeName.startsWith('__')) {\n            continue;\n        }\n        const actualName = namedType.name;\n        if (actualName.startsWith('__')) {\n            continue;\n        }\n        if (actualName in actualNamedTypeMap) {\n            throw new Error(`Duplicate schema type name ${actualName}`);\n        }\n        actualNamedTypeMap[actualName] = namedType;\n        // Note: we are deliberately leaving namedType in the schema by its\n        // original name (which might be different from actualName), so that\n        // references by that name can be healed.\n    }\n    // Now add back every named type by its actual name.\n    for (const typeName in actualNamedTypeMap) {\n        const namedType = actualNamedTypeMap[typeName];\n        originalTypeMap[typeName] = namedType;\n    }\n    // Directive declaration argument types can refer to named types.\n    for (const decl of directives) {\n        decl.args = decl.args.filter(arg => {\n            arg.type = healType(arg.type);\n            return arg.type !== null;\n        });\n    }\n    for (const typeName in originalTypeMap) {\n        const namedType = originalTypeMap[typeName];\n        // Heal all named types, except for dangling references, kept only to redirect.\n        if (!typeName.startsWith('__') && typeName in actualNamedTypeMap) {\n            if (namedType != null) {\n                healNamedType(namedType);\n            }\n        }\n    }\n    for (const typeName in originalTypeMap) {\n        if (!typeName.startsWith('__') && !(typeName in actualNamedTypeMap)) {\n            delete originalTypeMap[typeName];\n        }\n    }\n    function healNamedType(type) {\n        if (isObjectType(type)) {\n            healFields(type);\n            healInterfaces(type);\n            return;\n        }\n        else if (isInterfaceType(type)) {\n            healFields(type);\n            if ('getInterfaces' in type) {\n                healInterfaces(type);\n            }\n            return;\n        }\n        else if (isUnionType(type)) {\n            healUnderlyingTypes(type);\n            return;\n        }\n        else if (isInputObjectType(type)) {\n            healInputFields(type);\n            return;\n        }\n        else if (isLeafType(type)) {\n            return;\n        }\n        throw new Error(`Unexpected schema type: ${type}`);\n    }\n    function healFields(type) {\n        const fieldMap = type.getFields();\n        for (const [key, field] of Object.entries(fieldMap)) {\n            field.args\n                .map(arg => {\n                arg.type = healType(arg.type);\n                return arg.type === null ? null : arg;\n            })\n                .filter(Boolean);\n            field.type = healType(field.type);\n            if (field.type === null) {\n                delete fieldMap[key];\n            }\n        }\n    }\n    function healInterfaces(type) {\n        if ('getInterfaces' in type) {\n            const interfaces = type.getInterfaces();\n            interfaces.push(...interfaces\n                .splice(0)\n                .map(iface => healType(iface))\n                .filter(Boolean));\n        }\n    }\n    function healInputFields(type) {\n        const fieldMap = type.getFields();\n        for (const [key, field] of Object.entries(fieldMap)) {\n            field.type = healType(field.type);\n            if (field.type === null) {\n                delete fieldMap[key];\n            }\n        }\n    }\n    function healUnderlyingTypes(type) {\n        const types = type.getTypes();\n        types.push(...types\n            .splice(0)\n            .map(t => healType(t))\n            .filter(Boolean));\n    }\n    function healType(type) {\n        // Unwrap the two known wrapper types\n        if (isListType(type)) {\n            const healedType = healType(type.ofType);\n            return healedType != null ? new GraphQLList(healedType) : null;\n        }\n        else if (isNonNullType(type)) {\n            const healedType = healType(type.ofType);\n            return healedType != null ? new GraphQLNonNull(healedType) : null;\n        }\n        else if (isNamedType(type)) {\n            // If a type annotation on a field or an argument or a union member is\n            // any `GraphQLNamedType` with a `name`, then it must end up identical\n            // to `schema.getType(name)`, since `schema.getTypeMap()` is the source\n            // of truth for all named schema types.\n            // Note that new types can still be simply added by adding a field, as\n            // the official type will be undefined, not null.\n            const officialType = originalTypeMap[type.name];\n            if (officialType && type !== officialType) {\n                return officialType;\n            }\n        }\n        return type;\n    }\n}\n\nfunction getResolversFromSchema(schema) {\n    var _a, _b;\n    const resolvers = Object.create(null);\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        if (!typeName.startsWith('__')) {\n            const type = typeMap[typeName];\n            if (isScalarType(type)) {\n                if (!isSpecifiedScalarType(type)) {\n                    const config = type.toConfig();\n                    delete config.astNode; // avoid AST duplication elsewhere\n                    resolvers[typeName] = new GraphQLScalarType(config);\n                }\n            }\n            else if (isEnumType(type)) {\n                resolvers[typeName] = {};\n                const values = type.getValues();\n                for (const value of values) {\n                    resolvers[typeName][value.name] = value.value;\n                }\n            }\n            else if (isInterfaceType(type)) {\n                if (type.resolveType != null) {\n                    resolvers[typeName] = {\n                        __resolveType: type.resolveType,\n                    };\n                }\n            }\n            else if (isUnionType(type)) {\n                if (type.resolveType != null) {\n                    resolvers[typeName] = {\n                        __resolveType: type.resolveType,\n                    };\n                }\n            }\n            else if (isObjectType(type)) {\n                resolvers[typeName] = {};\n                if (type.isTypeOf != null) {\n                    resolvers[typeName].__isTypeOf = type.isTypeOf;\n                }\n                const fields = type.getFields();\n                for (const fieldName in fields) {\n                    const field = fields[fieldName];\n                    if (field.subscribe != null) {\n                        resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};\n                        resolvers[typeName][fieldName].subscribe = field.subscribe;\n                    }\n                    if (field.resolve != null &&\n                        ((_a = field.resolve) === null || _a === void 0 ? void 0 : _a.name) !== 'defaultFieldResolver' &&\n                        ((_b = field.resolve) === null || _b === void 0 ? void 0 : _b.name) !== 'defaultMergedResolver') {\n                        resolvers[typeName][fieldName] = resolvers[typeName][fieldName] || {};\n                        resolvers[typeName][fieldName].resolve = field.resolve;\n                    }\n                }\n            }\n        }\n    }\n    return resolvers;\n}\n\nfunction forEachField(schema, fn) {\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        // TODO: maybe have an option to include these?\n        if (!getNamedType(type).name.startsWith('__') && isObjectType(type)) {\n            const fields = type.getFields();\n            for (const fieldName in fields) {\n                const field = fields[fieldName];\n                fn(field, typeName, fieldName);\n            }\n        }\n    }\n}\n\nfunction forEachDefaultValue(schema, fn) {\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        if (!getNamedType(type).name.startsWith('__')) {\n            if (isObjectType(type)) {\n                const fields = type.getFields();\n                for (const fieldName in fields) {\n                    const field = fields[fieldName];\n                    for (const arg of field.args) {\n                        arg.defaultValue = fn(arg.type, arg.defaultValue);\n                    }\n                }\n            }\n            else if (isInputObjectType(type)) {\n                const fields = type.getFields();\n                for (const fieldName in fields) {\n                    const field = fields[fieldName];\n                    field.defaultValue = fn(field.type, field.defaultValue);\n                }\n            }\n        }\n    }\n}\n\n// addTypes uses toConfig to create a new schema with a new or replaced\nfunction addTypes(schema, newTypesOrDirectives) {\n    const config = schema.toConfig();\n    const originalTypeMap = {};\n    for (const type of config.types) {\n        originalTypeMap[type.name] = type;\n    }\n    const originalDirectiveMap = {};\n    for (const directive of config.directives) {\n        originalDirectiveMap[directive.name] = directive;\n    }\n    for (const newTypeOrDirective of newTypesOrDirectives) {\n        if (isNamedType(newTypeOrDirective)) {\n            originalTypeMap[newTypeOrDirective.name] = newTypeOrDirective;\n        }\n        else if (isDirective(newTypeOrDirective)) {\n            originalDirectiveMap[newTypeOrDirective.name] = newTypeOrDirective;\n        }\n    }\n    const { typeMap, directives } = rewireTypes(originalTypeMap, Object.values(originalDirectiveMap));\n    return new GraphQLSchema({\n        ...config,\n        query: getObjectTypeFromTypeMap(typeMap, schema.getQueryType()),\n        mutation: getObjectTypeFromTypeMap(typeMap, schema.getMutationType()),\n        subscription: getObjectTypeFromTypeMap(typeMap, schema.getSubscriptionType()),\n        types: Object.values(typeMap),\n        directives,\n    });\n}\n\n/**\n * Prunes the provided schema, removing unused and empty types\n * @param schema The schema to prune\n * @param options Additional options for removing unused types from the schema\n */\nfunction pruneSchema(schema, options = {}) {\n    const { skipEmptyCompositeTypePruning, skipEmptyUnionPruning, skipPruning, skipUnimplementedInterfacesPruning, skipUnusedTypesPruning, } = options;\n    let prunedTypes = []; // Pruned types during mapping\n    let prunedSchema = schema;\n    do {\n        let visited = visitSchema(prunedSchema);\n        // Custom pruning  was defined, so we need to pre-emptively revisit the schema accounting for this\n        if (skipPruning) {\n            const revisit = [];\n            for (const typeName in prunedSchema.getTypeMap()) {\n                if (typeName.startsWith('__')) {\n                    continue;\n                }\n                const type = prunedSchema.getType(typeName);\n                // if we want to skip pruning for this type, add it to the list of types to revisit\n                if (type && skipPruning(type)) {\n                    revisit.push(typeName);\n                }\n            }\n            visited = visitQueue(revisit, prunedSchema, visited); // visit again\n        }\n        prunedTypes = [];\n        prunedSchema = mapSchema(prunedSchema, {\n            [MapperKind.TYPE]: type => {\n                if (!visited.has(type.name) && !isSpecifiedScalarType(type)) {\n                    if (isUnionType(type) ||\n                        isInputObjectType(type) ||\n                        isInterfaceType(type) ||\n                        isObjectType(type) ||\n                        isScalarType(type)) {\n                        // skipUnusedTypesPruning: skip pruning unused types\n                        if (skipUnusedTypesPruning) {\n                            return type;\n                        }\n                        // skipEmptyUnionPruning: skip pruning empty unions\n                        if (isUnionType(type) && skipEmptyUnionPruning && !Object.keys(type.getTypes()).length) {\n                            return type;\n                        }\n                        if (isInputObjectType(type) || isInterfaceType(type) || isObjectType(type)) {\n                            // skipEmptyCompositeTypePruning: skip pruning object types or interfaces with no fields\n                            if (skipEmptyCompositeTypePruning && !Object.keys(type.getFields()).length) {\n                                return type;\n                            }\n                        }\n                        // skipUnimplementedInterfacesPruning: skip pruning interfaces that are not implemented by any other types\n                        if (isInterfaceType(type) && skipUnimplementedInterfacesPruning) {\n                            return type;\n                        }\n                    }\n                    prunedTypes.push(type.name);\n                    visited.delete(type.name);\n                    return null;\n                }\n                return type;\n            },\n        });\n    } while (prunedTypes.length); // Might have empty types and need to prune again\n    return prunedSchema;\n}\nfunction visitSchema(schema) {\n    const queue = []; // queue of nodes to visit\n    // Grab the root types and start there\n    for (const type of getRootTypes(schema)) {\n        queue.push(type.name);\n    }\n    return visitQueue(queue, schema);\n}\nfunction visitQueue(queue, schema, visited = new Set()) {\n    // Interfaces encountered that are field return types need to be revisited to add their implementations\n    const revisit = new Map();\n    // Navigate all types starting with pre-queued types (root types)\n    while (queue.length) {\n        const typeName = queue.pop();\n        // Skip types we already visited unless it is an interface type that needs revisiting\n        if (visited.has(typeName) && revisit[typeName] !== true) {\n            continue;\n        }\n        const type = schema.getType(typeName);\n        if (type) {\n            // Get types for union\n            if (isUnionType(type)) {\n                queue.push(...type.getTypes().map(type => type.name));\n            }\n            // If it is an interface and it is a returned type, grab all implementations so we can use proper __typename in fragments\n            if (isInterfaceType(type) && revisit[typeName] === true) {\n                queue.push(...getImplementingTypes(type.name, schema));\n                // No need to revisit this interface again\n                revisit[typeName] = false;\n            }\n            // Visit interfaces this type is implementing if they haven't been visited yet\n            if ('getInterfaces' in type) {\n                // Only pushes to queue to visit but not return types\n                queue.push(...type.getInterfaces().map(iface => iface.name));\n            }\n            // If the type has files visit those field types\n            if ('getFields' in type) {\n                const fields = type.getFields();\n                const entries = Object.entries(fields);\n                if (!entries.length) {\n                    continue;\n                }\n                for (const [, field] of entries) {\n                    if (isObjectType(type)) {\n                        // Visit arg types\n                        queue.push(...field.args.map(arg => getNamedType(arg.type).name));\n                    }\n                    const namedType = getNamedType(field.type);\n                    queue.push(namedType.name);\n                    // Interfaces returned on fields need to be revisited to add their implementations\n                    if (isInterfaceType(namedType) && !(namedType.name in revisit)) {\n                        revisit[namedType.name] = true;\n                    }\n                }\n            }\n            visited.add(typeName); // Mark as visited (and therefore it is used and should be kept)\n        }\n    }\n    return visited;\n}\n\nfunction mergeDeep(sources, respectPrototype = false) {\n    const target = sources[0] || {};\n    const output = {};\n    if (respectPrototype) {\n        Object.setPrototypeOf(output, Object.create(Object.getPrototypeOf(target)));\n    }\n    for (const source of sources) {\n        if (isObject(target) && isObject(source)) {\n            if (respectPrototype) {\n                const outputPrototype = Object.getPrototypeOf(output);\n                const sourcePrototype = Object.getPrototypeOf(source);\n                if (sourcePrototype) {\n                    for (const key of Object.getOwnPropertyNames(sourcePrototype)) {\n                        const descriptor = Object.getOwnPropertyDescriptor(sourcePrototype, key);\n                        if (isSome(descriptor)) {\n                            Object.defineProperty(outputPrototype, key, descriptor);\n                        }\n                    }\n                }\n            }\n            for (const key in source) {\n                if (isObject(source[key])) {\n                    if (!(key in output)) {\n                        Object.assign(output, { [key]: source[key] });\n                    }\n                    else {\n                        output[key] = mergeDeep([output[key], source[key]], respectPrototype);\n                    }\n                }\n                else {\n                    Object.assign(output, { [key]: source[key] });\n                }\n            }\n        }\n    }\n    return output;\n}\nfunction isObject(item) {\n    return item && typeof item === 'object' && !Array.isArray(item);\n}\n\nfunction parseSelectionSet(selectionSet, options) {\n    const query = parse(selectionSet, options).definitions[0];\n    return query.selectionSet;\n}\n\n/**\n * Get the key under which the result of this resolver will be placed in the response JSON. Basically, just\n * resolves aliases.\n * @param info The info argument to the resolver.\n */\nfunction getResponseKeyFromInfo(info) {\n    return info.fieldNodes[0].alias != null ? info.fieldNodes[0].alias.value : info.fieldName;\n}\n\nfunction appendObjectFields(schema, typeName, additionalFields) {\n    if (schema.getType(typeName) == null) {\n        return addTypes(schema, [\n            new GraphQLObjectType({\n                name: typeName,\n                fields: additionalFields,\n            }),\n        ]);\n    }\n    return mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    newFieldConfigMap[fieldName] = originalFieldConfigMap[fieldName];\n                }\n                for (const fieldName in additionalFields) {\n                    newFieldConfigMap[fieldName] = additionalFields[fieldName];\n                }\n                return correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n}\nfunction removeObjectFields(schema, typeName, testFn) {\n    const removedFields = {};\n    const newSchema = mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        removedFields[fieldName] = originalFieldConfig;\n                    }\n                    else {\n                        newFieldConfigMap[fieldName] = originalFieldConfig;\n                    }\n                }\n                return correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n    return [newSchema, removedFields];\n}\nfunction selectObjectFields(schema, typeName, testFn) {\n    const selectedFields = {};\n    mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        selectedFields[fieldName] = originalFieldConfig;\n                    }\n                }\n            }\n            return undefined;\n        },\n    });\n    return selectedFields;\n}\nfunction modifyObjectFields(schema, typeName, testFn, newFields) {\n    const removedFields = {};\n    const newSchema = mapSchema(schema, {\n        [MapperKind.OBJECT_TYPE]: type => {\n            if (type.name === typeName) {\n                const config = type.toConfig();\n                const originalFieldConfigMap = config.fields;\n                const newFieldConfigMap = {};\n                for (const fieldName in originalFieldConfigMap) {\n                    const originalFieldConfig = originalFieldConfigMap[fieldName];\n                    if (testFn(fieldName, originalFieldConfig)) {\n                        removedFields[fieldName] = originalFieldConfig;\n                    }\n                    else {\n                        newFieldConfigMap[fieldName] = originalFieldConfig;\n                    }\n                }\n                for (const fieldName in newFields) {\n                    const fieldConfig = newFields[fieldName];\n                    newFieldConfigMap[fieldName] = fieldConfig;\n                }\n                return correctASTNodes(new GraphQLObjectType({\n                    ...config,\n                    fields: newFieldConfigMap,\n                }));\n            }\n        },\n    });\n    return [newSchema, removedFields];\n}\n\nfunction renameType(type, newTypeName) {\n    if (isObjectType(type)) {\n        return new GraphQLObjectType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isInterfaceType(type)) {\n        return new GraphQLInterfaceType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isUnionType(type)) {\n        return new GraphQLUnionType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isInputObjectType(type)) {\n        return new GraphQLInputObjectType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isEnumType(type)) {\n        return new GraphQLEnumType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    else if (isScalarType(type)) {\n        return new GraphQLScalarType({\n            ...type.toConfig(),\n            name: newTypeName,\n            astNode: type.astNode == null\n                ? type.astNode\n                : {\n                    ...type.astNode,\n                    name: {\n                        ...type.astNode.name,\n                        value: newTypeName,\n                    },\n                },\n            extensionASTNodes: type.extensionASTNodes == null\n                ? type.extensionASTNodes\n                : type.extensionASTNodes.map(node => ({\n                    ...node,\n                    name: {\n                        ...node.name,\n                        value: newTypeName,\n                    },\n                })),\n        });\n    }\n    throw new Error(`Unknown type ${type}.`);\n}\n\n/**\n * Given an AsyncIterable and a callback function, return an AsyncIterator\n * which produces values mapped via calling the callback function.\n */\nfunction mapAsyncIterator(iterator, callback, rejectCallback) {\n    let $return;\n    let abruptClose;\n    if (typeof iterator.return === 'function') {\n        $return = iterator.return;\n        abruptClose = (error) => {\n            const rethrow = () => Promise.reject(error);\n            return $return.call(iterator).then(rethrow, rethrow);\n        };\n    }\n    function mapResult(result) {\n        return result.done ? result : asyncMapValue(result.value, callback).then(iteratorResult, abruptClose);\n    }\n    let mapReject;\n    if (rejectCallback) {\n        // Capture rejectCallback to ensure it cannot be null.\n        const reject = rejectCallback;\n        mapReject = (error) => asyncMapValue(error, reject).then(iteratorResult, abruptClose);\n    }\n    return {\n        next() {\n            return iterator.next().then(mapResult, mapReject);\n        },\n        return() {\n            return $return\n                ? $return.call(iterator).then(mapResult, mapReject)\n                : Promise.resolve({ value: undefined, done: true });\n        },\n        throw(error) {\n            if (typeof iterator.throw === 'function') {\n                return iterator.throw(error).then(mapResult, mapReject);\n            }\n            return Promise.reject(error).catch(abruptClose);\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\nfunction asyncMapValue(value, callback) {\n    return new Promise(resolve => resolve(callback(value)));\n}\nfunction iteratorResult(value) {\n    return { value, done: false };\n}\n\nfunction updateArgument(argumentNodes, variableDefinitionsMap, variableValues, argName, varName, type, value) {\n    argumentNodes[argName] = {\n        kind: Kind.ARGUMENT,\n        name: {\n            kind: Kind.NAME,\n            value: argName,\n        },\n        value: {\n            kind: Kind.VARIABLE,\n            name: {\n                kind: Kind.NAME,\n                value: varName,\n            },\n        },\n    };\n    variableDefinitionsMap[varName] = {\n        kind: Kind.VARIABLE_DEFINITION,\n        variable: {\n            kind: Kind.VARIABLE,\n            name: {\n                kind: Kind.NAME,\n                value: varName,\n            },\n        },\n        type: astFromType(type),\n    };\n    if (value !== undefined) {\n        variableValues[varName] = value;\n        return;\n    }\n    // including the variable in the map with value of `undefined`\n    // will actually be translated by graphql-js into `null`\n    // see https://github.com/graphql/graphql-js/issues/2533\n    if (varName in variableValues) {\n        delete variableValues[varName];\n    }\n}\nfunction createVariableNameGenerator(variableDefinitionMap) {\n    let varCounter = 0;\n    return (argName) => {\n        let varName;\n        do {\n            varName = `_v${(varCounter++).toString()}_${argName}`;\n        } while (varName in variableDefinitionMap);\n        return varName;\n    };\n}\n\nfunction implementsAbstractType(schema, typeA, typeB) {\n    if (typeB == null || typeA == null) {\n        return false;\n    }\n    else if (typeA === typeB) {\n        return true;\n    }\n    else if (isCompositeType(typeA) && isCompositeType(typeB)) {\n        return doTypesOverlap(schema, typeA, typeB);\n    }\n    return false;\n}\n\nfunction observableToAsyncIterable(observable) {\n    const pullQueue = [];\n    const pushQueue = [];\n    let listening = true;\n    const pushValue = (value) => {\n        if (pullQueue.length !== 0) {\n            // It is safe to use the ! operator here as we check the length.\n            pullQueue.shift()({ value, done: false });\n        }\n        else {\n            pushQueue.push({ value, done: false });\n        }\n    };\n    const pushError = (error) => {\n        if (pullQueue.length !== 0) {\n            // It is safe to use the ! operator here as we check the length.\n            pullQueue.shift()({ value: { errors: [error] }, done: false });\n        }\n        else {\n            pushQueue.push({ value: { errors: [error] }, done: false });\n        }\n    };\n    const pushDone = () => {\n        if (pullQueue.length !== 0) {\n            // It is safe to use the ! operator here as we check the length.\n            pullQueue.shift()({ done: true });\n        }\n        else {\n            pushQueue.push({ done: true });\n        }\n    };\n    const pullValue = () => new Promise(resolve => {\n        if (pushQueue.length !== 0) {\n            const element = pushQueue.shift();\n            // either {value: {errors: [...]}} or {value: ...}\n            resolve(element);\n        }\n        else {\n            pullQueue.push(resolve);\n        }\n    });\n    const subscription = observable.subscribe({\n        next(value) {\n            pushValue(value);\n        },\n        error(err) {\n            pushError(err);\n        },\n        complete() {\n            pushDone();\n        },\n    });\n    const emptyQueue = () => {\n        if (listening) {\n            listening = false;\n            subscription.unsubscribe();\n            for (const resolve of pullQueue) {\n                resolve({ value: undefined, done: true });\n            }\n            pullQueue.length = 0;\n            pushQueue.length = 0;\n        }\n    };\n    return {\n        next() {\n            // return is a defined method, so it is safe to call it.\n            return listening ? pullValue() : this.return();\n        },\n        return() {\n            emptyQueue();\n            return Promise.resolve({ value: undefined, done: true });\n        },\n        throw(error) {\n            emptyQueue();\n            return Promise.reject(error);\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\n\nfunction getOperationASTFromDocument(documentNode, operationName) {\n    const doc = getOperationAST(documentNode, operationName);\n    if (!doc) {\n        throw new Error(`Cannot infer operation ${operationName || ''}`);\n    }\n    return doc;\n}\nconst getOperationASTFromRequest = memoize1(function getOperationASTFromRequest(request) {\n    return getOperationASTFromDocument(request.document, request.operationName);\n});\n\n// Taken from GraphQL-JS v16 for backwards compat\nfunction collectFields(schema, fragments, variableValues, runtimeType, selectionSet, fields, visitedFragmentNames) {\n    for (const selection of selectionSet.selections) {\n        switch (selection.kind) {\n            case Kind.FIELD: {\n                if (!shouldIncludeNode(variableValues, selection)) {\n                    continue;\n                }\n                const name = getFieldEntryKey(selection);\n                const fieldList = fields.get(name);\n                if (fieldList !== undefined) {\n                    fieldList.push(selection);\n                }\n                else {\n                    fields.set(name, [selection]);\n                }\n                break;\n            }\n            case Kind.INLINE_FRAGMENT: {\n                if (!shouldIncludeNode(variableValues, selection) ||\n                    !doesFragmentConditionMatch(schema, selection, runtimeType)) {\n                    continue;\n                }\n                collectFields(schema, fragments, variableValues, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n                break;\n            }\n            case Kind.FRAGMENT_SPREAD: {\n                const fragName = selection.name.value;\n                if (visitedFragmentNames.has(fragName) || !shouldIncludeNode(variableValues, selection)) {\n                    continue;\n                }\n                visitedFragmentNames.add(fragName);\n                const fragment = fragments[fragName];\n                if (!fragment || !doesFragmentConditionMatch(schema, fragment, runtimeType)) {\n                    continue;\n                }\n                collectFields(schema, fragments, variableValues, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n                break;\n            }\n        }\n    }\n    return fields;\n}\n/**\n * Determines if a field should be included based on the `@include` and `@skip`\n * directives, where `@skip` has higher precedence than `@include`.\n */\nfunction shouldIncludeNode(variableValues, node) {\n    const skip = getDirectiveValues(GraphQLSkipDirective, node, variableValues);\n    if ((skip === null || skip === void 0 ? void 0 : skip['if']) === true) {\n        return false;\n    }\n    const include = getDirectiveValues(GraphQLIncludeDirective, node, variableValues);\n    if ((include === null || include === void 0 ? void 0 : include['if']) === false) {\n        return false;\n    }\n    return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\nfunction doesFragmentConditionMatch(schema, fragment, type) {\n    const typeConditionNode = fragment.typeCondition;\n    if (!typeConditionNode) {\n        return true;\n    }\n    const conditionalType = typeFromAST(schema, typeConditionNode);\n    if (conditionalType === type) {\n        return true;\n    }\n    if (isAbstractType(conditionalType)) {\n        const possibleTypes = schema.getPossibleTypes(conditionalType);\n        return possibleTypes.includes(type);\n    }\n    return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\nfunction getFieldEntryKey(node) {\n    return node.alias ? node.alias.value : node.name.value;\n}\nconst collectSubFields = memoize5(function collectSubFields(schema, fragments, variableValues, type, fieldNodes) {\n    const subFieldNodes = new Map();\n    const visitedFragmentNames = new Set();\n    for (const fieldNode of fieldNodes) {\n        if (fieldNode.selectionSet) {\n            collectFields(schema, fragments, variableValues, type, fieldNode.selectionSet, subFieldNodes, visitedFragmentNames);\n        }\n    }\n    return subFieldNodes;\n});\n\nfunction visitData(data, enter, leave) {\n    if (Array.isArray(data)) {\n        return data.map(value => visitData(value, enter, leave));\n    }\n    else if (typeof data === 'object') {\n        const newData = enter != null ? enter(data) : data;\n        if (newData != null) {\n            for (const key in newData) {\n                const value = newData[key];\n                Object.defineProperty(newData, key, {\n                    value: visitData(value, enter, leave),\n                });\n            }\n        }\n        return leave != null ? leave(newData) : newData;\n    }\n    return data;\n}\nfunction visitErrors(errors, visitor) {\n    return errors.map(error => visitor(error));\n}\nfunction visitResult(result, request, schema, resultVisitorMap, errorVisitorMap) {\n    const fragments = request.document.definitions.reduce((acc, def) => {\n        if (def.kind === Kind.FRAGMENT_DEFINITION) {\n            acc[def.name.value] = def;\n        }\n        return acc;\n    }, {});\n    const variableValues = request.variables || {};\n    const errorInfo = {\n        segmentInfoMap: new Map(),\n        unpathedErrors: new Set(),\n    };\n    const data = result.data;\n    const errors = result.errors;\n    const visitingErrors = errors != null && errorVisitorMap != null;\n    const operationDocumentNode = getOperationASTFromRequest(request);\n    if (data != null && operationDocumentNode != null) {\n        result.data = visitRoot(data, operationDocumentNode, schema, fragments, variableValues, resultVisitorMap, visitingErrors ? errors : undefined, errorInfo);\n    }\n    if (errors != null && errorVisitorMap) {\n        result.errors = visitErrorsByType(errors, errorVisitorMap, errorInfo);\n    }\n    return result;\n}\nfunction visitErrorsByType(errors, errorVisitorMap, errorInfo) {\n    const segmentInfoMap = errorInfo.segmentInfoMap;\n    const unpathedErrors = errorInfo.unpathedErrors;\n    const unpathedErrorVisitor = errorVisitorMap['__unpathed'];\n    return errors.map(originalError => {\n        const pathSegmentsInfo = segmentInfoMap.get(originalError);\n        const newError = pathSegmentsInfo == null\n            ? originalError\n            : pathSegmentsInfo.reduceRight((acc, segmentInfo) => {\n                const typeName = segmentInfo.type.name;\n                const typeVisitorMap = errorVisitorMap[typeName];\n                if (typeVisitorMap == null) {\n                    return acc;\n                }\n                const errorVisitor = typeVisitorMap[segmentInfo.fieldName];\n                return errorVisitor == null ? acc : errorVisitor(acc, segmentInfo.pathIndex);\n            }, originalError);\n        if (unpathedErrorVisitor && unpathedErrors.has(originalError)) {\n            return unpathedErrorVisitor(newError);\n        }\n        return newError;\n    });\n}\nfunction getOperationRootType(schema, operationDef) {\n    switch (operationDef.operation) {\n        case 'query':\n            return schema.getQueryType();\n        case 'mutation':\n            return schema.getMutationType();\n        case 'subscription':\n            return schema.getSubscriptionType();\n    }\n}\nfunction visitRoot(root, operation, schema, fragments, variableValues, resultVisitorMap, errors, errorInfo) {\n    const operationRootType = getOperationRootType(schema, operation);\n    const collectedFields = collectFields(schema, fragments, variableValues, operationRootType, operation.selectionSet, new Map(), new Set());\n    return visitObjectValue(root, operationRootType, collectedFields, schema, fragments, variableValues, resultVisitorMap, 0, errors, errorInfo);\n}\nfunction visitObjectValue(object, type, fieldNodeMap, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {\n    var _a;\n    const fieldMap = type.getFields();\n    const typeVisitorMap = resultVisitorMap === null || resultVisitorMap === void 0 ? void 0 : resultVisitorMap[type.name];\n    const enterObject = typeVisitorMap === null || typeVisitorMap === void 0 ? void 0 : typeVisitorMap.__enter;\n    const newObject = enterObject != null ? enterObject(object) : object;\n    let sortedErrors;\n    let errorMap = null;\n    if (errors != null) {\n        sortedErrors = sortErrorsByPathSegment(errors, pathIndex);\n        errorMap = sortedErrors.errorMap;\n        for (const error of sortedErrors.unpathedErrors) {\n            errorInfo.unpathedErrors.add(error);\n        }\n    }\n    for (const [responseKey, subFieldNodes] of fieldNodeMap) {\n        const fieldName = subFieldNodes[0].name.value;\n        const fieldType = fieldName === '__typename' ? TypeNameMetaFieldDef.type : (_a = fieldMap[fieldName]) === null || _a === void 0 ? void 0 : _a.type;\n        const newPathIndex = pathIndex + 1;\n        let fieldErrors;\n        if (errorMap) {\n            fieldErrors = errorMap[responseKey];\n            if (fieldErrors != null) {\n                delete errorMap[responseKey];\n            }\n            addPathSegmentInfo(type, fieldName, newPathIndex, fieldErrors, errorInfo);\n        }\n        const newValue = visitFieldValue(object[responseKey], fieldType, subFieldNodes, schema, fragments, variableValues, resultVisitorMap, newPathIndex, fieldErrors, errorInfo);\n        updateObject(newObject, responseKey, newValue, typeVisitorMap, fieldName);\n    }\n    const oldTypename = newObject.__typename;\n    if (oldTypename != null) {\n        updateObject(newObject, '__typename', oldTypename, typeVisitorMap, '__typename');\n    }\n    if (errorMap) {\n        for (const errorsKey in errorMap) {\n            const errors = errorMap[errorsKey];\n            for (const error of errors) {\n                errorInfo.unpathedErrors.add(error);\n            }\n        }\n    }\n    const leaveObject = typeVisitorMap === null || typeVisitorMap === void 0 ? void 0 : typeVisitorMap.__leave;\n    return leaveObject != null ? leaveObject(newObject) : newObject;\n}\nfunction updateObject(object, responseKey, newValue, typeVisitorMap, fieldName) {\n    if (typeVisitorMap == null) {\n        object[responseKey] = newValue;\n        return;\n    }\n    const fieldVisitor = typeVisitorMap[fieldName];\n    if (fieldVisitor == null) {\n        object[responseKey] = newValue;\n        return;\n    }\n    const visitedValue = fieldVisitor(newValue);\n    if (visitedValue === undefined) {\n        delete object[responseKey];\n        return;\n    }\n    object[responseKey] = visitedValue;\n}\nfunction visitListValue(list, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {\n    return list.map(listMember => visitFieldValue(listMember, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex + 1, errors, errorInfo));\n}\nfunction visitFieldValue(value, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors = [], errorInfo) {\n    if (value == null) {\n        return value;\n    }\n    const nullableType = getNullableType(returnType);\n    if (isListType(nullableType)) {\n        return visitListValue(value, nullableType.ofType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    else if (isAbstractType(nullableType)) {\n        const finalType = schema.getType(value.__typename);\n        const collectedFields = collectSubFields(schema, fragments, variableValues, finalType, fieldNodes);\n        return visitObjectValue(value, finalType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    else if (isObjectType(nullableType)) {\n        const collectedFields = collectSubFields(schema, fragments, variableValues, nullableType, fieldNodes);\n        return visitObjectValue(value, nullableType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    const typeVisitorMap = resultVisitorMap === null || resultVisitorMap === void 0 ? void 0 : resultVisitorMap[nullableType.name];\n    if (typeVisitorMap == null) {\n        return value;\n    }\n    const visitedValue = typeVisitorMap(value);\n    return visitedValue === undefined ? value : visitedValue;\n}\nfunction sortErrorsByPathSegment(errors, pathIndex) {\n    var _a;\n    const errorMap = Object.create(null);\n    const unpathedErrors = new Set();\n    for (const error of errors) {\n        const pathSegment = (_a = error.path) === null || _a === void 0 ? void 0 : _a[pathIndex];\n        if (pathSegment == null) {\n            unpathedErrors.add(error);\n            continue;\n        }\n        if (pathSegment in errorMap) {\n            errorMap[pathSegment].push(error);\n        }\n        else {\n            errorMap[pathSegment] = [error];\n        }\n    }\n    return {\n        errorMap,\n        unpathedErrors,\n    };\n}\nfunction addPathSegmentInfo(type, fieldName, pathIndex, errors = [], errorInfo) {\n    for (const error of errors) {\n        const segmentInfo = {\n            type,\n            fieldName,\n            pathIndex,\n        };\n        const pathSegmentsInfo = errorInfo.segmentInfoMap.get(error);\n        if (pathSegmentsInfo == null) {\n            errorInfo.segmentInfoMap.set(error, [segmentInfo]);\n        }\n        else {\n            pathSegmentsInfo.push(segmentInfo);\n        }\n    }\n}\n\nfunction valueMatchesCriteria(value, criteria) {\n    if (value == null) {\n        return value === criteria;\n    }\n    else if (Array.isArray(value)) {\n        return Array.isArray(criteria) && value.every((val, index) => valueMatchesCriteria(val, criteria[index]));\n    }\n    else if (typeof value === 'object') {\n        return (typeof criteria === 'object' &&\n            criteria &&\n            Object.keys(criteria).every(propertyName => valueMatchesCriteria(value[propertyName], criteria[propertyName])));\n    }\n    else if (criteria instanceof RegExp) {\n        return criteria.test(value);\n    }\n    return value === criteria;\n}\n\nfunction isAsyncIterable(value) {\n    return (typeof value === 'object' &&\n        value != null &&\n        Symbol.asyncIterator in value &&\n        typeof value[Symbol.asyncIterator] === 'function');\n}\n\nfunction isDocumentNode(object) {\n    return object && typeof object === 'object' && 'kind' in object && object.kind === Kind.DOCUMENT;\n}\n\nasync function defaultAsyncIteratorReturn(value) {\n    return { value, done: true };\n}\nconst proxyMethodFactory = memoize2(function proxyMethodFactory(target, targetMethod) {\n    return function proxyMethod(...args) {\n        return Reflect.apply(targetMethod, target, args);\n    };\n});\nfunction getAsyncIteratorWithCancel(asyncIterator, onCancel) {\n    return new Proxy(asyncIterator, {\n        has(asyncIterator, prop) {\n            if (prop === 'return') {\n                return true;\n            }\n            return Reflect.has(asyncIterator, prop);\n        },\n        get(asyncIterator, prop, receiver) {\n            const existingPropValue = Reflect.get(asyncIterator, prop, receiver);\n            if (prop === 'return') {\n                const existingReturn = existingPropValue || defaultAsyncIteratorReturn;\n                return async function returnWithCancel(value) {\n                    const returnValue = await onCancel(value);\n                    return Reflect.apply(existingReturn, asyncIterator, [returnValue]);\n                };\n            }\n            else if (typeof existingPropValue === 'function') {\n                return proxyMethodFactory(asyncIterator, existingPropValue);\n            }\n            return existingPropValue;\n        },\n    });\n}\nfunction getAsyncIterableWithCancel(asyncIterable, onCancel) {\n    return new Proxy(asyncIterable, {\n        get(asyncIterable, prop, receiver) {\n            const existingPropValue = Reflect.get(asyncIterable, prop, receiver);\n            if (Symbol.asyncIterator === prop) {\n                return function asyncIteratorFactory() {\n                    const asyncIterator = Reflect.apply(existingPropValue, asyncIterable, []);\n                    return getAsyncIteratorWithCancel(asyncIterator, onCancel);\n                };\n            }\n            else if (typeof existingPropValue === 'function') {\n                return proxyMethodFactory(asyncIterable, existingPropValue);\n            }\n            return existingPropValue;\n        },\n    });\n}\n\nfunction buildFixedSchema(schema, options) {\n    const document = getDocumentNodeFromSchema(schema);\n    return buildASTSchema(document, {\n        ...(options || {}),\n    });\n}\nfunction fixSchemaAst(schema, options) {\n    // eslint-disable-next-line no-undef-init\n    let schemaWithValidAst = undefined;\n    if (!schema.astNode || !schema.extensionASTNodes) {\n        schemaWithValidAst = buildFixedSchema(schema, options);\n    }\n    if (!schema.astNode && (schemaWithValidAst === null || schemaWithValidAst === void 0 ? void 0 : schemaWithValidAst.astNode)) {\n        schema.astNode = schemaWithValidAst.astNode;\n    }\n    if (!schema.extensionASTNodes && (schemaWithValidAst === null || schemaWithValidAst === void 0 ? void 0 : schemaWithValidAst.astNode)) {\n        schema.extensionASTNodes = schemaWithValidAst.extensionASTNodes;\n    }\n    return schema;\n}\n\nexport { AggregateErrorImpl as AggregateError, DirectiveLocation, MapperKind, addTypes, appendObjectFields, asArray, assertSome, astFromArg, astFromDirective, astFromEnumType, astFromEnumValue, astFromField, astFromInputField, astFromInputObjectType, astFromInterfaceType, astFromObjectType, astFromScalarType, astFromSchema, astFromUnionType, astFromValueUntyped, buildOperationNodeForField, checkValidationErrors, collectComment, collectFields, collectSubFields, compareNodes, compareStrings, correctASTNodes, createDefaultRules, createGraphQLError, createNamedStub, createStub, createVariableNameGenerator, dedentBlockStringValue, filterSchema, fixSchemaAst, forEachDefaultValue, forEachField, getArgumentValues, getAsyncIterableWithCancel, getAsyncIteratorWithCancel, getBlockStringIndentation, getBuiltInForStub, getComment, getDefinedRootType, getDeprecatableDirectiveNodes, getDescription, getDirective, getDirectiveInExtensions, getDirectiveNodes, getDirectives, getDirectivesInExtensions, getDocumentNodeFromSchema, getFieldsWithDirectives, getImplementingTypes, getLeadingCommentBlock, getOperationASTFromDocument, getOperationASTFromRequest, getResolversFromSchema, getResponseKeyFromInfo, getRootTypeMap, getRootTypeNames, getRootTypes, healSchema, healTypes, implementsAbstractType, inspect, isAggregateError, isAsyncIterable, isDescribable, isDocumentNode, isDocumentString, isNamedStub, isSome, isValidPath, makeDeprecatedDirective, makeDirectiveNode, makeDirectiveNodes, mapAsyncIterator, mapSchema, memoize1, memoize2, memoize2of4, memoize3, memoize4, memoize5, mergeDeep, modifyObjectFields, nodeToString, observableToAsyncIterable, parseGraphQLJSON, parseGraphQLSDL, parseInputValue, parseInputValueLiteral, parseSelectionSet, printComment, printSchemaWithDirectives, printWithComments, pruneSchema, pushComment, relocatedError, removeObjectFields, renameType, resetComments, rewireTypes, selectObjectFields, serializeInputValue, transformCommentsToDescriptions, transformInputValue, updateArgument, validateGraphQlDocuments, valueMatchesCriteria, visitData, visitErrors, visitResult, getAsyncIterableWithCancel as withCancel };\n", "import lodashGet from 'lodash.get';\nimport JsonPointer from 'json-pointer';\nimport dayjs from 'dayjs';\n\nconst defaultOptions = {\n    delimiter: ['{', '}'],\n};\n\nconst uppercase = value => value.toUpperCase();\n\nconst lowercase = value => value.toLowerCase();\n\nconst titlecase = value => value.replace(/\\w\\S*/g, s => s.charAt(0).toUpperCase() + s.substr(1).toLowerCase());\n\nconst defaultModifiers = [\n    {\n        key: 'uppercase',\n        transform: uppercase,\n    },\n    {\n        key: 'lowercase',\n        transform: lowercase,\n    },\n    {\n        key: 'title',\n        transform: titlecase,\n    },\n];\n\nclass Interpolator {\n    constructor(options = defaultOptions) {\n        this.options = options;\n        this.modifiers = [];\n        this.aliases = [];\n        this.registerBuiltInModifiers();\n    }\n    registerBuiltInModifiers() {\n        defaultModifiers.forEach(modifier => this.registerModifier(modifier.key, modifier.transform));\n        return this;\n    }\n    get delimiter() {\n        return this.options.delimiter;\n    }\n    delimiterStart() {\n        return this.options.delimiter[0];\n    }\n    delimiterEnd() {\n        return this.options.delimiter[1];\n    }\n    registerModifier(key, transform) {\n        if (!key) {\n            return new Error('Modifiers must have a key');\n        }\n        if (typeof transform !== 'function') {\n            return new Error('Modifiers must have a transformer. Transformers must be a function that returns a value.');\n        }\n        this.modifiers.push({ key: key.toLowerCase(), transform });\n        return this;\n    }\n    parseRules(str) {\n        const regex = `${this.delimiterStart()}([^}]+)${this.delimiterEnd()}`;\n        const execRegex = new RegExp(regex, 'gi');\n        const matches = str.match(execRegex);\n        // const parsableMatches = matches.map((match) => ({ key: removeDelimiter(match), replaceWith: match }));\n        return matches ? this.extractRules(matches) : [];\n    }\n    extractRules(matches) {\n        return matches.map(match => {\n            const alternativeText = this.getAlternativeText(match);\n            const modifiers = this.getModifiers(match);\n            return {\n                key: this.getKeyFromMatch(match),\n                replace: match,\n                modifiers,\n                alternativeText,\n            };\n        });\n    }\n    getKeyFromMatch(match) {\n        const removeReservedSymbols = [':', '|'];\n        return this.removeDelimiter(removeReservedSymbols.reduce((val, sym) => (val.indexOf(sym) > 0 ? this.removeAfter(val, sym) : val), match));\n    }\n    removeDelimiter(val) {\n        return val.replace(new RegExp(this.delimiterStart(), 'g'), '').replace(new RegExp(this.delimiterEnd(), 'g'), '');\n    }\n    removeAfter(str, val) {\n        return str.substring(0, str.indexOf(val));\n    }\n    extractAfter(str, val) {\n        return str.substring(str.indexOf(val) + 1);\n    }\n    getAlternativeText(str) {\n        if (str.indexOf(':') > 0) {\n            const altText = this.removeDelimiter(this.extractAfter(str, ':'));\n            if (altText.indexOf('|') > 0) {\n                return this.removeAfter(altText, '|');\n            }\n            return altText;\n        }\n        return '';\n    }\n    getModifiers(str) {\n        if (str.indexOf('|') > 0) {\n            const strModifiers = this.removeDelimiter(this.extractAfter(str, '|')).split(',');\n            return strModifiers.map(modifier => this.getModifier(modifier.toLowerCase()));\n        }\n        return [];\n    }\n    parse(str = '', data = {}) {\n        const rules = this.parseRules(str);\n        if (rules && rules.length > 0) {\n            return this.parseFromRules(str, data, rules);\n        }\n        return str;\n    }\n    parseFromRules(str, data, rules) {\n        return rules.reduce((reducedStr, rule) => this.applyRule(reducedStr, rule, data), str);\n    }\n    applyRule(str, rule, data = {}) {\n        const dataToReplace = this.applyData(rule.key, data);\n        if (dataToReplace) {\n            return str.replace(rule.replace, this.applyModifiers(rule.modifiers, dataToReplace, data));\n        }\n        else if (rule.alternativeText) {\n            return str.replace(rule.replace, this.applyModifiers(rule.modifiers, rule.alternativeText, data));\n        }\n        const defaultModifier = this.applyModifiers(rule.modifiers, rule.key, data);\n        if (defaultModifier === rule.key) {\n            return str.replace(rule.replace, '');\n        }\n        return str.replace(rule.replace, defaultModifier);\n    }\n    getFromAlias(key) {\n        return this.aliases.find(alias => alias.key.toLowerCase() === key.toLowerCase());\n    }\n    applyData(key, data) {\n        const [prop, ptr] = key.split('#');\n        const propData = lodashGet(data, prop);\n        if (ptr) {\n            try {\n                return JsonPointer.get(propData, ptr);\n            }\n            catch (e) {\n                if (e.message.startsWith('Invalid reference')) {\n                    return undefined;\n                }\n                throw e;\n            }\n        }\n        return propData;\n    }\n    getModifier(key) {\n        return this.modifiers.find(modifier => modifier.key === key);\n    }\n    applyModifiers(modifiers, str, rawData) {\n        try {\n            const transformers = modifiers.map(modifier => modifier && modifier.transform);\n            return transformers.reduce((str, transform) => (transform ? transform(str, rawData) : str), str);\n        }\n        catch (e) {\n            console.error(`An error occurred while applying modifiers to ${str}`, modifiers, e);\n            return str;\n        }\n    }\n    addAlias(key, ref) {\n        if (typeof ref === 'function') {\n            this.aliases.push({ key, ref: ref() });\n        }\n        else {\n            this.aliases.push({ key, ref });\n        }\n        return this;\n    }\n    removeAlias(key) {\n        this.aliases = this.aliases.filter(alias => alias.key !== key);\n        return this;\n    }\n}\n\nfunction getInterpolationKeys(...interpolationStrings) {\n    return interpolationStrings.reduce((keys, str) => [...keys, ...(str ? stringInterpolator.parseRules(str).map((match) => match.key) : [])], []);\n}\nfunction parseInterpolationStrings(interpolationStrings, argTypeMap) {\n    const interpolationKeys = getInterpolationKeys(...interpolationStrings);\n    const args = {};\n    const contextVariables = {};\n    for (const interpolationKey of interpolationKeys) {\n        const interpolationKeyParts = interpolationKey.split('.');\n        const varName = interpolationKeyParts[interpolationKeyParts.length - 1];\n        const initialObject = interpolationKeyParts[0];\n        const argType = argTypeMap && varName in argTypeMap ? argTypeMap[varName] : interpolationKeyParts.length > 2 ? 'JSON' : 'ID';\n        switch (initialObject) {\n            case 'args':\n                args[varName] = {\n                    type: argType,\n                };\n                break;\n            case 'context':\n                contextVariables[varName] = `Scalars['${argType}']`;\n                break;\n        }\n    }\n    return {\n        args,\n        contextVariables,\n    };\n}\nfunction getInterpolatedStringFactory(nonInterpolatedString) {\n    return resolverData => stringInterpolator.parse(nonInterpolatedString, resolverData);\n}\nfunction getInterpolatedHeadersFactory(nonInterpolatedHeaders = {}) {\n    return resolverData => {\n        const headers = {};\n        for (const headerName in nonInterpolatedHeaders) {\n            const headerValue = nonInterpolatedHeaders[headerName];\n            if (headerValue) {\n                headers[headerName.toLowerCase()] = stringInterpolator.parse(headerValue, resolverData);\n            }\n        }\n        return headers;\n    };\n}\n\nconst hashCode = (s) => s.split('').reduce((a, b) => ((a << 5) - a + b.charCodeAt(0)) | 0, 0);\nfunction hashObject(value) {\n    return hashCode(JSON.stringify(value)).toString();\n}\nconst stringInterpolator = new Interpolator({\n    delimiter: ['{', '}'],\n});\nstringInterpolator.addAlias('typeName', 'info.parentType.name');\nstringInterpolator.addAlias('type', 'info.parentType.name');\nstringInterpolator.addAlias('parentType', 'info.parentType.name');\nstringInterpolator.addAlias('fieldName', 'info.fieldName');\nstringInterpolator.registerModifier('date', (formatStr) => dayjs(new Date()).format(formatStr));\nstringInterpolator.registerModifier('hash', (value) => hashObject(value));\nstringInterpolator.registerModifier('base64', (value) => {\n    if (globalThis.Buffer.from) {\n        return globalThis.Buffer.from(value).toString('base64');\n    }\n    else {\n        return btoa(value);\n    }\n});\n\nexport { Interpolator, getInterpolatedHeadersFactory, getInterpolatedStringFactory, getInterpolationKeys, hashObject, parseInterpolationStrings, stringInterpolator };\n", "import { Kind, isAbstractType, isInterfaceType, TypeInfo, visit, visitWithTypeInfo, getNamedType, isObjectType, versionInfo, TypeNameMetaFieldDef, responsePathAsArray, GraphQLError, locatedError, getNullableType, isCompositeType, isListType, typeFromAST, defaultFieldResolver, validate } from 'graphql';\nimport { memoize2, implementsAbstractType, getRootTypeNames, getDefinedRootType, createVariableNameGenerator, updateArgument, serializeInputValue, inspect, collectFields, relocatedError, AggregateError, getResponseKeyFromInfo, isAsyncIterable, mapAsyncIterator, getOperationASTFromRequest, memoize1 } from '@graphql-tools/utils';\nimport { Executor } from 'graphql-executor';\nimport { ValueOrPromise } from 'value-or-promise';\nimport { getBatchingExecutor } from '@graphql-tools/batch-execute';\n\nfunction applySchemaTransforms(originalWrappingSchema, subschemaConfig, transformedSchema) {\n    const schemaTransforms = subschemaConfig.transforms;\n    if (schemaTransforms == null) {\n        return originalWrappingSchema;\n    }\n    return schemaTransforms.reduce((schema, transform) => transform.transformSchema != null\n        ? transform.transformSchema(schema, subschemaConfig, transformedSchema)\n        : schema, originalWrappingSchema);\n}\n\nfunction isSubschema(value) {\n    return Boolean(value.transformedSchema);\n}\nclass Subschema {\n    constructor(config) {\n        var _a;\n        this.schema = config.schema;\n        this.executor = config.executor;\n        this.batch = config.batch;\n        this.batchingOptions = config.batchingOptions;\n        this.createProxyingResolver = config.createProxyingResolver;\n        this.transforms = (_a = config.transforms) !== null && _a !== void 0 ? _a : [];\n        this.transformedSchema = applySchemaTransforms(this.schema, config);\n        this.merge = config.merge;\n    }\n}\n\nfunction getDocumentMetadata(document) {\n    const operations = [];\n    const fragments = [];\n    const fragmentNames = new Set();\n    for (let i = 0; i < document.definitions.length; i++) {\n        const def = document.definitions[i];\n        if (def.kind === Kind.FRAGMENT_DEFINITION) {\n            fragments.push(def);\n            fragmentNames.add(def.name.value);\n        }\n        else if (def.kind === Kind.OPERATION_DEFINITION) {\n            operations.push(def);\n        }\n    }\n    return {\n        operations,\n        fragments,\n        fragmentNames,\n    };\n}\n\nfunction prepareGatewayDocument(originalDocument, transformedSchema, returnType, infoSchema) {\n    const wrappedConcreteTypesDocument = wrapConcreteTypes(returnType, transformedSchema, originalDocument);\n    if (infoSchema == null) {\n        return wrappedConcreteTypesDocument;\n    }\n    const { possibleTypesMap, reversePossibleTypesMap, interfaceExtensionsMap, fieldNodesByType, fieldNodesByField, dynamicSelectionSetsByField, } = getSchemaMetaData(infoSchema, transformedSchema);\n    const { operations, fragments, fragmentNames } = getDocumentMetadata(wrappedConcreteTypesDocument);\n    const { expandedFragments, fragmentReplacements } = getExpandedFragments(fragments, fragmentNames, possibleTypesMap);\n    const typeInfo = new TypeInfo(transformedSchema);\n    const expandedDocument = {\n        kind: Kind.DOCUMENT,\n        definitions: [...operations, ...fragments, ...expandedFragments],\n    };\n    const visitorKeyMap = {\n        Document: ['definitions'],\n        OperationDefinition: ['selectionSet'],\n        SelectionSet: ['selections'],\n        Field: ['selectionSet'],\n        InlineFragment: ['selectionSet'],\n        FragmentDefinition: ['selectionSet'],\n    };\n    return visit(expandedDocument, visitWithTypeInfo(typeInfo, {\n        [Kind.SELECTION_SET]: node => visitSelectionSet(node, fragmentReplacements, transformedSchema, typeInfo, possibleTypesMap, reversePossibleTypesMap, interfaceExtensionsMap, fieldNodesByType, fieldNodesByField, dynamicSelectionSetsByField),\n    }), \n    // visitorKeys argument usage a la https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/src/batching/merge-queries.js\n    // empty keys cannot be removed only because of typescript errors\n    // will hopefully be fixed in future version of graphql-js to be optional\n    visitorKeyMap);\n}\nfunction visitSelectionSet(node, fragmentReplacements, schema, typeInfo, possibleTypesMap, reversePossibleTypesMap, interfaceExtensionsMap, fieldNodesByType, fieldNodesByField, dynamicSelectionSetsByField) {\n    var _a, _b;\n    const newSelections = new Set();\n    const maybeType = typeInfo.getParentType();\n    if (maybeType != null) {\n        const parentType = getNamedType(maybeType);\n        const parentTypeName = parentType.name;\n        const fieldNodes = fieldNodesByType[parentTypeName];\n        if (fieldNodes) {\n            for (const fieldNode of fieldNodes) {\n                newSelections.add(fieldNode);\n            }\n        }\n        const interfaceExtensions = interfaceExtensionsMap[parentType.name];\n        const interfaceExtensionFields = [];\n        for (const selection of node.selections) {\n            if (selection.kind === Kind.INLINE_FRAGMENT) {\n                if (selection.typeCondition != null) {\n                    const possibleTypes = possibleTypesMap[selection.typeCondition.name.value];\n                    if (possibleTypes == null) {\n                        newSelections.add(selection);\n                        continue;\n                    }\n                    for (const possibleTypeName of possibleTypes) {\n                        const maybePossibleType = schema.getType(possibleTypeName);\n                        if (maybePossibleType != null && implementsAbstractType(schema, parentType, maybePossibleType)) {\n                            newSelections.add(generateInlineFragment(possibleTypeName, selection.selectionSet));\n                        }\n                    }\n                }\n            }\n            else if (selection.kind === Kind.FRAGMENT_SPREAD) {\n                const fragmentName = selection.name.value;\n                if (!fragmentReplacements[fragmentName]) {\n                    newSelections.add(selection);\n                    continue;\n                }\n                for (const replacement of fragmentReplacements[fragmentName]) {\n                    const typeName = replacement.typeName;\n                    const maybeReplacementType = schema.getType(typeName);\n                    if (maybeReplacementType != null && implementsAbstractType(schema, parentType, maybeType)) {\n                        newSelections.add({\n                            kind: Kind.FRAGMENT_SPREAD,\n                            name: {\n                                kind: Kind.NAME,\n                                value: replacement.fragmentName,\n                            },\n                        });\n                    }\n                }\n            }\n            else {\n                const fieldName = selection.name.value;\n                const fieldNodes = (_a = fieldNodesByField[parentTypeName]) === null || _a === void 0 ? void 0 : _a[fieldName];\n                if (fieldNodes != null) {\n                    for (const fieldNode of fieldNodes) {\n                        newSelections.add(fieldNode);\n                    }\n                }\n                const dynamicSelectionSets = (_b = dynamicSelectionSetsByField[parentTypeName]) === null || _b === void 0 ? void 0 : _b[fieldName];\n                if (dynamicSelectionSets != null) {\n                    for (const selectionSetFn of dynamicSelectionSets) {\n                        const selectionSet = selectionSetFn(selection);\n                        if (selectionSet != null) {\n                            for (const selection of selectionSet.selections) {\n                                newSelections.add(selection);\n                            }\n                        }\n                    }\n                }\n                if (interfaceExtensions === null || interfaceExtensions === void 0 ? void 0 : interfaceExtensions[fieldName]) {\n                    interfaceExtensionFields.push(selection);\n                }\n                else {\n                    newSelections.add(selection);\n                }\n            }\n        }\n        if (reversePossibleTypesMap[parentType.name]) {\n            newSelections.add({\n                kind: Kind.FIELD,\n                name: {\n                    kind: Kind.NAME,\n                    value: '__typename',\n                },\n            });\n        }\n        if (interfaceExtensionFields.length) {\n            const possibleTypes = possibleTypesMap[parentType.name];\n            if (possibleTypes != null) {\n                for (const possibleType of possibleTypes) {\n                    newSelections.add(generateInlineFragment(possibleType, {\n                        kind: Kind.SELECTION_SET,\n                        selections: interfaceExtensionFields,\n                    }));\n                }\n            }\n        }\n        return {\n            ...node,\n            selections: Array.from(newSelections),\n        };\n    }\n    return node;\n}\nfunction generateInlineFragment(typeName, selectionSet) {\n    return {\n        kind: Kind.INLINE_FRAGMENT,\n        typeCondition: {\n            kind: Kind.NAMED_TYPE,\n            name: {\n                kind: Kind.NAME,\n                value: typeName,\n            },\n        },\n        selectionSet,\n    };\n}\nconst getSchemaMetaData = memoize2((sourceSchema, targetSchema) => {\n    var _a, _b, _c, _d;\n    const typeMap = sourceSchema.getTypeMap();\n    const targetTypeMap = targetSchema.getTypeMap();\n    const possibleTypesMap = Object.create(null);\n    const interfaceExtensionsMap = Object.create(null);\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        if (isAbstractType(type)) {\n            const targetType = targetTypeMap[typeName];\n            if (isInterfaceType(type) && isInterfaceType(targetType)) {\n                const targetTypeFields = targetType.getFields();\n                const sourceTypeFields = type.getFields();\n                const extensionFields = Object.create(null);\n                let isExtensionFieldsEmpty = true;\n                for (const fieldName in sourceTypeFields) {\n                    if (!targetTypeFields[fieldName]) {\n                        extensionFields[fieldName] = true;\n                        isExtensionFieldsEmpty = false;\n                    }\n                }\n                if (!isExtensionFieldsEmpty) {\n                    interfaceExtensionsMap[typeName] = extensionFields;\n                }\n            }\n            if (interfaceExtensionsMap[typeName] || !isAbstractType(targetType)) {\n                const implementations = sourceSchema.getPossibleTypes(type);\n                possibleTypesMap[typeName] = [];\n                for (const impl of implementations) {\n                    if (targetTypeMap[impl.name]) {\n                        possibleTypesMap[typeName].push(impl.name);\n                    }\n                }\n            }\n        }\n    }\n    const stitchingInfo = (_a = sourceSchema.extensions) === null || _a === void 0 ? void 0 : _a['stitchingInfo'];\n    return {\n        possibleTypesMap,\n        reversePossibleTypesMap: reversePossibleTypesMap(possibleTypesMap),\n        interfaceExtensionsMap,\n        fieldNodesByType: (_b = stitchingInfo === null || stitchingInfo === void 0 ? void 0 : stitchingInfo.fieldNodesByType) !== null && _b !== void 0 ? _b : {},\n        fieldNodesByField: (_c = stitchingInfo === null || stitchingInfo === void 0 ? void 0 : stitchingInfo.fieldNodesByField) !== null && _c !== void 0 ? _c : {},\n        dynamicSelectionSetsByField: (_d = stitchingInfo === null || stitchingInfo === void 0 ? void 0 : stitchingInfo.dynamicSelectionSetsByField) !== null && _d !== void 0 ? _d : {},\n    };\n});\nfunction reversePossibleTypesMap(possibleTypesMap) {\n    const result = Object.create(null);\n    for (const typeName in possibleTypesMap) {\n        const toTypeNames = possibleTypesMap[typeName];\n        for (const toTypeName of toTypeNames) {\n            if (!result[toTypeName]) {\n                result[toTypeName] = [];\n            }\n            result[toTypeName].push(typeName);\n        }\n    }\n    return result;\n}\nfunction getExpandedFragments(fragments, fragmentNames, possibleTypesMap) {\n    let fragmentCounter = 0;\n    function generateFragmentName(typeName) {\n        let fragmentName;\n        do {\n            fragmentName = `_${typeName}_Fragment${fragmentCounter.toString()}`;\n            fragmentCounter++;\n        } while (fragmentNames.has(fragmentName));\n        return fragmentName;\n    }\n    const expandedFragments = [];\n    const fragmentReplacements = Object.create(null);\n    for (const fragment of fragments) {\n        const possibleTypes = possibleTypesMap[fragment.typeCondition.name.value];\n        if (possibleTypes != null) {\n            const fragmentName = fragment.name.value;\n            fragmentReplacements[fragmentName] = [];\n            for (const possibleTypeName of possibleTypes) {\n                const name = generateFragmentName(possibleTypeName);\n                fragmentNames.add(name);\n                expandedFragments.push({\n                    kind: Kind.FRAGMENT_DEFINITION,\n                    name: {\n                        kind: Kind.NAME,\n                        value: name,\n                    },\n                    typeCondition: {\n                        kind: Kind.NAMED_TYPE,\n                        name: {\n                            kind: Kind.NAME,\n                            value: possibleTypeName,\n                        },\n                    },\n                    selectionSet: fragment.selectionSet,\n                });\n                fragmentReplacements[fragmentName].push({\n                    fragmentName: name,\n                    typeName: possibleTypeName,\n                });\n            }\n        }\n    }\n    return {\n        expandedFragments,\n        fragmentReplacements,\n    };\n}\nfunction wrapConcreteTypes(returnType, targetSchema, document) {\n    const namedType = getNamedType(returnType);\n    if (!isObjectType(namedType)) {\n        return document;\n    }\n    const rootTypeNames = getRootTypeNames(targetSchema);\n    const typeInfo = new TypeInfo(targetSchema);\n    const visitorKeys = {\n        Document: ['definitions'],\n        OperationDefinition: ['selectionSet'],\n        SelectionSet: ['selections'],\n        InlineFragment: ['selectionSet'],\n        FragmentDefinition: ['selectionSet'],\n    };\n    return visit(document, visitWithTypeInfo(typeInfo, {\n        [Kind.FRAGMENT_DEFINITION]: (node) => {\n            const typeName = node.typeCondition.name.value;\n            if (!rootTypeNames.has(typeName)) {\n                return false;\n            }\n        },\n        [Kind.FIELD]: (node) => {\n            const type = typeInfo.getType();\n            if (type != null && isAbstractType(getNamedType(type))) {\n                return {\n                    ...node,\n                    selectionSet: {\n                        kind: Kind.SELECTION_SET,\n                        selections: [\n                            {\n                                kind: Kind.INLINE_FRAGMENT,\n                                typeCondition: {\n                                    kind: Kind.NAMED_TYPE,\n                                    name: {\n                                        kind: Kind.NAME,\n                                        value: namedType.name,\n                                    },\n                                },\n                                selectionSet: node.selectionSet,\n                            },\n                        ],\n                    },\n                };\n            }\n        },\n    }), \n    // visitorKeys argument usage a la https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/src/batching/merge-queries.js\n    // empty keys cannot be removed only because of typescript errors\n    // will hopefully be fixed in future version of graphql-js to be optional\n    visitorKeys);\n}\n\nfunction finalizeGatewayDocument(targetSchema, fragments, operations) {\n    var _a;\n    let usedVariables = [];\n    let usedFragments = [];\n    const newOperations = [];\n    let newFragments = [];\n    const validFragments = [];\n    const validFragmentsWithType = Object.create(null);\n    for (const fragment of fragments) {\n        const typeName = fragment.typeCondition.name.value;\n        const type = targetSchema.getType(typeName);\n        if (type != null) {\n            validFragments.push(fragment);\n            validFragmentsWithType[fragment.name.value] = type;\n        }\n    }\n    let fragmentSet = Object.create(null);\n    for (const operation of operations) {\n        const type = getDefinedRootType(targetSchema, operation.operation);\n        const { selectionSet, usedFragments: operationUsedFragments, usedVariables: operationUsedVariables, } = finalizeSelectionSet(targetSchema, type, validFragmentsWithType, operation.selectionSet);\n        usedFragments = union(usedFragments, operationUsedFragments);\n        const { usedVariables: collectedUsedVariables, newFragments: collectedNewFragments, fragmentSet: collectedFragmentSet, } = collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments);\n        const operationOrFragmentVariables = union(operationUsedVariables, collectedUsedVariables);\n        usedVariables = union(usedVariables, operationOrFragmentVariables);\n        newFragments = collectedNewFragments;\n        fragmentSet = collectedFragmentSet;\n        const variableDefinitions = ((_a = operation.variableDefinitions) !== null && _a !== void 0 ? _a : []).filter((variable) => operationOrFragmentVariables.indexOf(variable.variable.name.value) !== -1);\n        newOperations.push({\n            kind: Kind.OPERATION_DEFINITION,\n            operation: operation.operation,\n            name: operation.name,\n            directives: operation.directives,\n            variableDefinitions,\n            selectionSet,\n        });\n    }\n    const newDocument = {\n        kind: Kind.DOCUMENT,\n        definitions: [...newOperations, ...newFragments],\n    };\n    return {\n        usedVariables,\n        newDocument,\n    };\n}\nfunction finalizeGatewayRequest(originalRequest, delegationContext) {\n    let { document, variables } = originalRequest;\n    let { operations, fragments } = getDocumentMetadata(document);\n    const { targetSchema, args } = delegationContext;\n    if (args) {\n        const requestWithNewVariables = addVariablesToRootFields(targetSchema, operations, args);\n        operations = requestWithNewVariables.newOperations;\n        variables = Object.assign({}, variables !== null && variables !== void 0 ? variables : {}, requestWithNewVariables.newVariables);\n    }\n    const { usedVariables, newDocument } = finalizeGatewayDocument(targetSchema, fragments, operations);\n    const newVariables = {};\n    if (variables != null) {\n        for (const variableName of usedVariables) {\n            const variableValue = variables[variableName];\n            if (variableValue !== undefined) {\n                newVariables[variableName] = variableValue;\n            }\n        }\n    }\n    return {\n        ...originalRequest,\n        document: newDocument,\n        variables: newVariables,\n    };\n}\nfunction addVariablesToRootFields(targetSchema, operations, args) {\n    const newVariables = Object.create(null);\n    const newOperations = operations.map((operation) => {\n        var _a, _b;\n        const variableDefinitionMap = ((_a = operation.variableDefinitions) !== null && _a !== void 0 ? _a : []).reduce((prev, def) => ({\n            ...prev,\n            [def.variable.name.value]: def,\n        }), {});\n        const type = getDefinedRootType(targetSchema, operation.operation);\n        const newSelections = [];\n        for (const selection of operation.selectionSet.selections) {\n            if (selection.kind === Kind.FIELD) {\n                const argumentNodes = (_b = selection.arguments) !== null && _b !== void 0 ? _b : [];\n                const argumentNodeMap = argumentNodes.reduce((prev, argument) => ({\n                    ...prev,\n                    [argument.name.value]: argument,\n                }), {});\n                const targetField = type.getFields()[selection.name.value];\n                // excludes __typename\n                if (targetField != null) {\n                    updateArguments(targetField, argumentNodeMap, variableDefinitionMap, newVariables, args);\n                }\n                newSelections.push({\n                    ...selection,\n                    arguments: Object.values(argumentNodeMap),\n                });\n            }\n            else {\n                newSelections.push(selection);\n            }\n        }\n        const newSelectionSet = {\n            kind: Kind.SELECTION_SET,\n            selections: newSelections,\n        };\n        return {\n            ...operation,\n            variableDefinitions: Object.values(variableDefinitionMap),\n            selectionSet: newSelectionSet,\n        };\n    });\n    return {\n        newOperations,\n        newVariables,\n    };\n}\nfunction updateArguments(targetField, argumentNodeMap, variableDefinitionMap, variableValues, newArgs) {\n    const generateVariableName = createVariableNameGenerator(variableDefinitionMap);\n    for (const argument of targetField.args) {\n        const argName = argument.name;\n        const argType = argument.type;\n        if (argName in newArgs) {\n            updateArgument(argumentNodeMap, variableDefinitionMap, variableValues, argName, generateVariableName(argName), argType, serializeInputValue(argType, newArgs[argName]));\n        }\n    }\n}\nfunction collectFragmentVariables(targetSchema, fragmentSet, validFragments, validFragmentsWithType, usedFragments) {\n    let remainingFragments = usedFragments.slice();\n    let usedVariables = [];\n    const newFragments = [];\n    while (remainingFragments.length !== 0) {\n        const nextFragmentName = remainingFragments.pop();\n        const fragment = validFragments.find(fr => fr.name.value === nextFragmentName);\n        if (fragment != null) {\n            const name = nextFragmentName;\n            const typeName = fragment.typeCondition.name.value;\n            const type = targetSchema.getType(typeName);\n            if (type == null) {\n                throw new Error(`Fragment reference type \"${typeName}\", but the type is not contained within the target schema.`);\n            }\n            const { selectionSet, usedFragments: fragmentUsedFragments, usedVariables: fragmentUsedVariables, } = finalizeSelectionSet(targetSchema, type, validFragmentsWithType, fragment.selectionSet);\n            remainingFragments = union(remainingFragments, fragmentUsedFragments);\n            usedVariables = union(usedVariables, fragmentUsedVariables);\n            if (name && !(name in fragmentSet)) {\n                fragmentSet[name] = true;\n                newFragments.push({\n                    kind: Kind.FRAGMENT_DEFINITION,\n                    name: {\n                        kind: Kind.NAME,\n                        value: name,\n                    },\n                    typeCondition: fragment.typeCondition,\n                    selectionSet,\n                });\n            }\n        }\n    }\n    return {\n        usedVariables,\n        newFragments,\n        fragmentSet,\n    };\n}\nconst filteredSelectionSetVisitorKeys = {\n    SelectionSet: ['selections'],\n    Field: ['selectionSet'],\n    InlineFragment: ['selectionSet'],\n    FragmentDefinition: ['selectionSet'],\n};\nconst variablesVisitorKeys = {\n    SelectionSet: ['selections'],\n    Field: ['arguments', 'directives', 'selectionSet'],\n    Argument: ['value'],\n    InlineFragment: ['directives', 'selectionSet'],\n    FragmentSpread: ['directives'],\n    FragmentDefinition: ['selectionSet'],\n    ObjectValue: ['fields'],\n    ObjectField: ['name', 'value'],\n    Directive: ['arguments'],\n    ListValue: ['values'],\n};\nfunction finalizeSelectionSet(schema, type, validFragments, selectionSet) {\n    const usedFragments = [];\n    const usedVariables = [];\n    const typeInfo = versionInfo.major < 16 ? new TypeInfo(schema, undefined, type) : new TypeInfo(schema, type);\n    const filteredSelectionSet = visit(selectionSet, visitWithTypeInfo(typeInfo, {\n        [Kind.FIELD]: {\n            enter: node => {\n                const parentType = typeInfo.getParentType();\n                if (isObjectType(parentType) || isInterfaceType(parentType)) {\n                    const fields = parentType.getFields();\n                    const field = node.name.value === '__typename' ? TypeNameMetaFieldDef : fields[node.name.value];\n                    if (!field) {\n                        return null;\n                    }\n                    const args = field.args != null ? field.args : [];\n                    const argsMap = Object.create(null);\n                    for (const arg of args) {\n                        argsMap[arg.name] = arg;\n                    }\n                    if (node.arguments != null) {\n                        const newArgs = [];\n                        for (const arg of node.arguments) {\n                            if (arg.name.value in argsMap) {\n                                newArgs.push(arg);\n                            }\n                        }\n                        if (newArgs.length !== node.arguments.length) {\n                            return {\n                                ...node,\n                                arguments: newArgs,\n                            };\n                        }\n                    }\n                }\n            },\n            leave: node => {\n                const type = typeInfo.getType();\n                if (type == null) {\n                    throw new Error(`No type was found for field node ${inspect(node)}.`);\n                }\n                const namedType = getNamedType(type);\n                if (!schema.getType(namedType.name) == null) {\n                    return null;\n                }\n                if (isObjectType(namedType) || isInterfaceType(namedType)) {\n                    const selections = node.selectionSet != null ? node.selectionSet.selections : null;\n                    if (selections == null || selections.length === 0) {\n                        return null;\n                    }\n                }\n            },\n        },\n        [Kind.FRAGMENT_SPREAD]: {\n            enter: node => {\n                if (!(node.name.value in validFragments)) {\n                    return null;\n                }\n                const parentType = typeInfo.getParentType();\n                const innerType = validFragments[node.name.value];\n                if (!implementsAbstractType(schema, parentType, innerType)) {\n                    return null;\n                }\n                usedFragments.push(node.name.value);\n            },\n        },\n        [Kind.INLINE_FRAGMENT]: {\n            enter: node => {\n                if (node.typeCondition != null) {\n                    const parentType = typeInfo.getParentType();\n                    const innerType = schema.getType(node.typeCondition.name.value);\n                    if (!implementsAbstractType(schema, parentType, innerType)) {\n                        return null;\n                    }\n                }\n            },\n        },\n        [Kind.SELECTION_SET]: {\n            leave: node => {\n                const parentType = typeInfo.getParentType();\n                if (parentType != null && isAbstractType(parentType)) {\n                    const selections = node.selections.concat([\n                        {\n                            kind: Kind.FIELD,\n                            name: {\n                                kind: Kind.NAME,\n                                value: '__typename',\n                            },\n                        },\n                    ]);\n                    return {\n                        ...node,\n                        selections,\n                    };\n                }\n            },\n        },\n    }), \n    // visitorKeys argument usage a la https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/src/batching/merge-queries.js\n    // empty keys cannot be removed only because of typescript errors\n    // will hopefully be fixed in future version of graphql-js to be optional\n    filteredSelectionSetVisitorKeys);\n    visit(filteredSelectionSet, {\n        [Kind.VARIABLE]: variableNode => {\n            usedVariables.push(variableNode.name.value);\n        },\n    }, \n    // visitorKeys argument usage a la https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/src/batching/merge-queries.js\n    // empty keys cannot be removed only because of typescript errors\n    // will hopefully be fixed in future version of graphql-js to be optional\n    variablesVisitorKeys);\n    return {\n        selectionSet: filteredSelectionSet,\n        usedFragments,\n        usedVariables,\n    };\n}\nfunction union(...arrays) {\n    const cache = Object.create(null);\n    const result = [];\n    for (const array of arrays) {\n        for (const item of array) {\n            if (!(item in cache)) {\n                cache[item] = true;\n                result.push(item);\n            }\n        }\n    }\n    return result;\n}\n\nconst UNPATHED_ERRORS_SYMBOL = Symbol('subschemaErrors');\nconst OBJECT_SUBSCHEMA_SYMBOL = Symbol('initialSubschema');\nconst FIELD_SUBSCHEMA_MAP_SYMBOL = Symbol('subschemaMap');\n\nfunction isExternalObject(data) {\n    return data[UNPATHED_ERRORS_SYMBOL] !== undefined;\n}\nfunction annotateExternalObject(object, errors, subschema, subschemaMap) {\n    Object.defineProperties(object, {\n        [OBJECT_SUBSCHEMA_SYMBOL]: { value: subschema },\n        [FIELD_SUBSCHEMA_MAP_SYMBOL]: { value: subschemaMap },\n        [UNPATHED_ERRORS_SYMBOL]: { value: errors },\n    });\n    return object;\n}\nfunction getSubschema(object, responseKey) {\n    var _a;\n    return (_a = object[FIELD_SUBSCHEMA_MAP_SYMBOL][responseKey]) !== null && _a !== void 0 ? _a : object[OBJECT_SUBSCHEMA_SYMBOL];\n}\nfunction getUnpathedErrors(object) {\n    return object[UNPATHED_ERRORS_SYMBOL];\n}\nconst EMPTY_ARRAY = [];\nconst EMPTY_OBJECT = Object.create(null);\nasync function mergeFields(mergedTypeInfo, object, sourceSubschema, context, info) {\n    var _a;\n    const delegationMaps = mergedTypeInfo.delegationPlanBuilder(info.schema, sourceSubschema, info.variableValues != null && Object.keys(info.variableValues).length > 0 ? info.variableValues : EMPTY_OBJECT, info.fragments != null && Object.keys(info.fragments).length > 0 ? info.fragments : EMPTY_OBJECT, ((_a = info.fieldNodes) === null || _a === void 0 ? void 0 : _a.length) ? info.fieldNodes : EMPTY_ARRAY);\n    for (const delegationMap of delegationMaps) {\n        await executeDelegationStage(mergedTypeInfo, delegationMap, object, context, info);\n    }\n    return object;\n}\nasync function executeDelegationStage(mergedTypeInfo, delegationMap, object, context, info) {\n    const combinedErrors = object[UNPATHED_ERRORS_SYMBOL];\n    const path = responsePathAsArray(info.path);\n    const combinedFieldSubschemaMap = object[FIELD_SUBSCHEMA_MAP_SYMBOL];\n    await Promise.all([...delegationMap.entries()].map(async ([subschema, selectionSet]) => {\n        var _a;\n        const schema = subschema.transformedSchema || info.schema;\n        const type = schema.getType(object.__typename);\n        const resolver = mergedTypeInfo.resolvers.get(subschema);\n        if (resolver) {\n            let source;\n            try {\n                source = await resolver(object, context, info, subschema, selectionSet, undefined, type);\n            }\n            catch (error) {\n                source = error;\n            }\n            if (source instanceof Error || source == null) {\n                const fieldNodeResponseKeyMap = collectFields(schema, EMPTY_OBJECT, EMPTY_OBJECT, type, selectionSet, new Map(), new Set());\n                const nullResult = {};\n                for (const [responseKey, fieldNodes] of fieldNodeResponseKeyMap) {\n                    const combinedPath = [...path, responseKey];\n                    if (source instanceof GraphQLError) {\n                        nullResult[responseKey] = relocatedError(source, combinedPath);\n                    }\n                    else if (source instanceof Error) {\n                        nullResult[responseKey] = locatedError(source, fieldNodes, combinedPath);\n                    }\n                    else {\n                        nullResult[responseKey] = null;\n                    }\n                }\n                source = nullResult;\n            }\n            else {\n                if (source[UNPATHED_ERRORS_SYMBOL]) {\n                    combinedErrors.push(...source[UNPATHED_ERRORS_SYMBOL]);\n                }\n            }\n            const objectSubschema = source[OBJECT_SUBSCHEMA_SYMBOL];\n            const fieldSubschemaMap = source[FIELD_SUBSCHEMA_MAP_SYMBOL];\n            for (const responseKey in source) {\n                object[responseKey] = source[responseKey];\n                combinedFieldSubschemaMap[responseKey] = (_a = fieldSubschemaMap === null || fieldSubschemaMap === void 0 ? void 0 : fieldSubschemaMap[responseKey]) !== null && _a !== void 0 ? _a : objectSubschema;\n            }\n        }\n    }));\n}\n\nfunction resolveExternalValue(result, unpathedErrors, subschema, context, info, returnType = getReturnType(info), skipTypeMerging) {\n    const type = getNullableType(returnType);\n    if (result instanceof Error) {\n        return result;\n    }\n    if (result == null) {\n        return reportUnpathedErrorsViaNull(unpathedErrors);\n    }\n    if ('parseValue' in type) {\n        return type.parseValue(result);\n    }\n    else if (isCompositeType(type)) {\n        return resolveExternalObject(type, result, unpathedErrors, subschema, context, info, skipTypeMerging);\n    }\n    else if (isListType(type)) {\n        return resolveExternalList(type, result, unpathedErrors, subschema, context, info, skipTypeMerging);\n    }\n}\nfunction resolveExternalObject(type, object, unpathedErrors, subschema, context, info, skipTypeMerging) {\n    var _a;\n    // if we have already resolved this object, for example, when the identical object appears twice\n    // in a list, see https://github.com/ardatan/graphql-tools/issues/2304\n    if (!isExternalObject(object)) {\n        annotateExternalObject(object, unpathedErrors, subschema, Object.create(null));\n    }\n    if (skipTypeMerging || info == null) {\n        return object;\n    }\n    const stitchingInfo = (_a = info.schema.extensions) === null || _a === void 0 ? void 0 : _a['stitchingInfo'];\n    if (stitchingInfo == null) {\n        return object;\n    }\n    const typeName = isAbstractType(type) ? object.__typename : type.name;\n    const mergedTypeInfo = stitchingInfo.mergedTypes[typeName];\n    let targetSubschemas;\n    // Within the stitching context, delegation to a stitched GraphQLSchema or SubschemaConfig\n    // will be redirected to the appropriate Subschema object, from which merge targets can be queried.\n    if (mergedTypeInfo != null) {\n        targetSubschemas = mergedTypeInfo.targetSubschemas.get(subschema);\n    }\n    // If there are no merge targets from the subschema, return.\n    if (!targetSubschemas || !targetSubschemas.length) {\n        return object;\n    }\n    return mergeFields(mergedTypeInfo, object, subschema, context, info);\n}\nfunction resolveExternalList(type, list, unpathedErrors, subschema, context, info, skipTypeMerging) {\n    return list.map(listMember => resolveExternalListMember(getNullableType(type.ofType), listMember, unpathedErrors, subschema, context, info, skipTypeMerging));\n}\nfunction resolveExternalListMember(type, listMember, unpathedErrors, subschema, context, info, skipTypeMerging) {\n    if (listMember instanceof Error) {\n        return listMember;\n    }\n    if (listMember == null) {\n        return reportUnpathedErrorsViaNull(unpathedErrors);\n    }\n    if ('parseValue' in type) {\n        return type.parseValue(listMember);\n    }\n    else if (isCompositeType(type)) {\n        return resolveExternalObject(type, listMember, unpathedErrors, subschema, context, info, skipTypeMerging);\n    }\n    else if (isListType(type)) {\n        return resolveExternalList(type, listMember, unpathedErrors, subschema, context, info, skipTypeMerging);\n    }\n}\nconst reportedErrors = new WeakMap();\nfunction reportUnpathedErrorsViaNull(unpathedErrors) {\n    if (unpathedErrors.length) {\n        const unreportedErrors = [];\n        for (const error of unpathedErrors) {\n            if (!reportedErrors.has(error)) {\n                unreportedErrors.push(error);\n                reportedErrors.set(error, true);\n            }\n        }\n        if (unreportedErrors.length) {\n            if (unreportedErrors.length === 1) {\n                return unreportedErrors[0];\n            }\n            const combinedError = new AggregateError(unreportedErrors, unreportedErrors.map(error => error.message).join(', \\n'));\n            // We cast path as any for GraphQL.js 14 compat\n            // locatedError path argument must be defined, but it is just forwarded to a constructor that allows a undefined value\n            // https://github.com/graphql/graphql-js/blob/b4bff0ba9c15c9d7245dd68556e754c41f263289/src/error/locatedError.js#L25\n            // https://github.com/graphql/graphql-js/blob/b4bff0ba9c15c9d7245dd68556e754c41f263289/src/error/GraphQLError.js#L19\n            return locatedError(combinedError, undefined, unreportedErrors[0].path);\n        }\n    }\n    return null;\n}\nfunction getReturnType(info) {\n    if (info == null) {\n        throw new Error(`Return type cannot be inferred without a source schema.`);\n    }\n    return info.returnType;\n}\n\nfunction checkResultAndHandleErrors(result, delegationContext) {\n    const { context, info, fieldName: responseKey = getResponseKey(info), subschema, returnType = getReturnType$1(info), skipTypeMerging, onLocatedError, } = delegationContext;\n    const { data, unpathedErrors } = mergeDataAndErrors(result.data == null ? undefined : result.data[responseKey], result.errors == null ? [] : result.errors, info != null && info.path ? responsePathAsArray(info.path) : undefined, onLocatedError);\n    return resolveExternalValue(data, unpathedErrors, subschema, context, info, returnType, skipTypeMerging);\n}\nfunction mergeDataAndErrors(data, errors, path, onLocatedError, index = 1) {\n    var _a;\n    if (data == null) {\n        if (!errors.length) {\n            return { data: null, unpathedErrors: [] };\n        }\n        if (errors.length === 1) {\n            const error = onLocatedError ? onLocatedError(errors[0]) : errors[0];\n            const newPath = path === undefined ? error.path : !error.path ? path : path.concat(error.path.slice(1));\n            return { data: relocatedError(errors[0], newPath), unpathedErrors: [] };\n        }\n        // We cast path as any for GraphQL.js 14 compat\n        // locatedError path argument must be defined, but it is just forwarded to a constructor that allows a undefined value\n        // https://github.com/graphql/graphql-js/blob/b4bff0ba9c15c9d7245dd68556e754c41f263289/src/error/locatedError.js#L25\n        // https://github.com/graphql/graphql-js/blob/b4bff0ba9c15c9d7245dd68556e754c41f263289/src/error/GraphQLError.js#L19\n        const combinedError = new AggregateError(errors, errors.map(error => error.message).join(', \\n'));\n        const newError = locatedError(combinedError, undefined, path);\n        return { data: newError, unpathedErrors: [] };\n    }\n    if (!errors.length) {\n        return { data, unpathedErrors: [] };\n    }\n    const unpathedErrors = [];\n    const errorMap = new Map();\n    for (const error of errors) {\n        const pathSegment = (_a = error.path) === null || _a === void 0 ? void 0 : _a[index];\n        if (pathSegment != null) {\n            let pathSegmentErrors = errorMap.get(pathSegment);\n            if (pathSegmentErrors === undefined) {\n                pathSegmentErrors = [error];\n                errorMap.set(pathSegment, pathSegmentErrors);\n            }\n            else {\n                pathSegmentErrors.push(error);\n            }\n        }\n        else {\n            unpathedErrors.push(error);\n        }\n    }\n    for (const [pathSegment, pathSegmentErrors] of errorMap) {\n        if (data[pathSegment] !== undefined) {\n            const { data: newData, unpathedErrors: newErrors } = mergeDataAndErrors(data[pathSegment], pathSegmentErrors, path, onLocatedError, index + 1);\n            data[pathSegment] = newData;\n            unpathedErrors.push(...newErrors);\n        }\n        else {\n            unpathedErrors.push(...pathSegmentErrors);\n        }\n    }\n    return { data, unpathedErrors };\n}\nfunction getResponseKey(info) {\n    if (info == null) {\n        throw new Error(`Data cannot be extracted from result without an explicit key or source schema.`);\n    }\n    return getResponseKeyFromInfo(info);\n}\nfunction getReturnType$1(info) {\n    if (info == null) {\n        throw new Error(`Return type cannot be inferred without a source schema.`);\n    }\n    return info.returnType;\n}\n\nclass Transformer {\n    constructor(context) {\n        this.transformations = [];\n        this.delegationContext = context;\n        const transforms = context.transforms;\n        const delegationTransforms = transforms.slice().reverse();\n        for (const transform of delegationTransforms) {\n            this.addTransform(transform, {});\n        }\n    }\n    addTransform(transform, context = {}) {\n        this.transformations.push({ transform, context });\n    }\n    transformRequest(originalRequest) {\n        var _a;\n        let request = {\n            ...originalRequest,\n            document: prepareGatewayDocument(originalRequest.document, this.delegationContext.transformedSchema, this.delegationContext.returnType, (_a = this.delegationContext.info) === null || _a === void 0 ? void 0 : _a.schema),\n        };\n        for (const transformation of this.transformations) {\n            if (transformation.transform.transformRequest) {\n                request = transformation.transform.transformRequest(request, this.delegationContext, transformation.context);\n            }\n        }\n        return finalizeGatewayRequest(request, this.delegationContext);\n    }\n    transformResult(originalResult) {\n        let result = originalResult;\n        // from right to left\n        for (let i = this.transformations.length - 1; i >= 0; i--) {\n            const transformation = this.transformations[i];\n            if (transformation.transform.transformResult) {\n                result = transformation.transform.transformResult(result, this.delegationContext, transformation.context);\n            }\n        }\n        return checkResultAndHandleErrors(result, this.delegationContext);\n    }\n}\n\nfunction getDelegatingOperation(parentType, schema) {\n    if (parentType === schema.getMutationType()) {\n        return 'mutation';\n    }\n    else if (parentType === schema.getSubscriptionType()) {\n        return 'subscription';\n    }\n    return 'query';\n}\nfunction createRequest({ sourceSchema, sourceParentType, sourceFieldName, fragments, variableDefinitions, variableValues, targetRootValue, targetOperationName, targetOperation, targetFieldName, selectionSet, fieldNodes, context, info, }) {\n    var _a, _b;\n    let newSelectionSet;\n    const argumentNodeMap = Object.create(null);\n    if (selectionSet != null) {\n        newSelectionSet = selectionSet;\n    }\n    else {\n        const selections = [];\n        for (const fieldNode of fieldNodes || []) {\n            if (fieldNode.selectionSet) {\n                for (const selection of fieldNode.selectionSet.selections) {\n                    selections.push(selection);\n                }\n            }\n        }\n        newSelectionSet = selections.length\n            ? {\n                kind: Kind.SELECTION_SET,\n                selections,\n            }\n            : undefined;\n        const args = (_a = fieldNodes === null || fieldNodes === void 0 ? void 0 : fieldNodes[0]) === null || _a === void 0 ? void 0 : _a.arguments;\n        if (args) {\n            for (const argNode of args) {\n                argumentNodeMap[argNode.name.value] = argNode;\n            }\n        }\n    }\n    const newVariables = Object.create(null);\n    const variableDefinitionMap = Object.create(null);\n    if (sourceSchema != null && variableDefinitions != null) {\n        for (const def of variableDefinitions) {\n            const varName = def.variable.name.value;\n            variableDefinitionMap[varName] = def;\n            const varType = typeFromAST(sourceSchema, def.type);\n            const serializedValue = serializeInputValue(varType, variableValues === null || variableValues === void 0 ? void 0 : variableValues[varName]);\n            if (serializedValue !== undefined) {\n                newVariables[varName] = serializedValue;\n            }\n        }\n    }\n    if (sourceParentType != null && sourceFieldName != null) {\n        updateArgumentsWithDefaults(sourceParentType, sourceFieldName, argumentNodeMap, variableDefinitionMap, newVariables);\n    }\n    const rootFieldName = targetFieldName !== null && targetFieldName !== void 0 ? targetFieldName : (_b = fieldNodes === null || fieldNodes === void 0 ? void 0 : fieldNodes[0]) === null || _b === void 0 ? void 0 : _b.name.value;\n    if (rootFieldName === undefined) {\n        throw new Error(`Either \"targetFieldName\" or a non empty \"fieldNodes\" array must be provided.`);\n    }\n    const rootfieldNode = {\n        kind: Kind.FIELD,\n        arguments: Object.values(argumentNodeMap),\n        name: {\n            kind: Kind.NAME,\n            value: rootFieldName,\n        },\n        selectionSet: newSelectionSet,\n    };\n    const operationName = targetOperationName\n        ? {\n            kind: Kind.NAME,\n            value: targetOperationName,\n        }\n        : undefined;\n    const operationDefinition = {\n        kind: Kind.OPERATION_DEFINITION,\n        name: operationName,\n        operation: targetOperation,\n        variableDefinitions: Object.values(variableDefinitionMap),\n        selectionSet: {\n            kind: Kind.SELECTION_SET,\n            selections: [rootfieldNode],\n        },\n    };\n    const definitions = [operationDefinition];\n    if (fragments != null) {\n        for (const fragmentName in fragments) {\n            const fragment = fragments[fragmentName];\n            definitions.push(fragment);\n        }\n    }\n    const document = {\n        kind: Kind.DOCUMENT,\n        definitions,\n    };\n    return {\n        document,\n        variables: newVariables,\n        rootValue: targetRootValue,\n        operationName: targetOperationName,\n        context,\n        info,\n        operationType: targetOperation,\n    };\n}\nfunction updateArgumentsWithDefaults(sourceParentType, sourceFieldName, argumentNodeMap, variableDefinitionMap, variableValues) {\n    const generateVariableName = createVariableNameGenerator(variableDefinitionMap);\n    const sourceField = sourceParentType.getFields()[sourceFieldName];\n    for (const argument of sourceField.args) {\n        const argName = argument.name;\n        const sourceArgType = argument.type;\n        if (argumentNodeMap[argName] === undefined) {\n            const defaultValue = argument.defaultValue;\n            if (defaultValue !== undefined) {\n                updateArgument(argumentNodeMap, variableDefinitionMap, variableValues, argName, generateVariableName(argName), sourceArgType, serializeInputValue(sourceArgType, defaultValue));\n            }\n        }\n    }\n}\n\n/**\n * Resolver that knows how to:\n * a) handle aliases for proxied schemas\n * b) handle errors from proxied schemas\n * c) handle external to internal enum conversion\n */\nfunction defaultMergedResolver(parent, args, context, info) {\n    if (!parent) {\n        return null;\n    }\n    const responseKey = getResponseKeyFromInfo(info);\n    // check to see if parent is not a proxied result, i.e. if parent resolver was manually overwritten\n    // See https://github.com/ardatan/graphql-tools/issues/967\n    if (!isExternalObject(parent)) {\n        return defaultFieldResolver(parent, args, context, info);\n    }\n    const data = parent[responseKey];\n    const unpathedErrors = getUnpathedErrors(parent);\n    const subschema = getSubschema(parent, responseKey);\n    return resolveExternalValue(data, unpathedErrors, subschema, context, info);\n}\n\nfunction isSubschemaConfig(value) {\n    return Boolean(value === null || value === void 0 ? void 0 : value.schema);\n}\nfunction cloneSubschemaConfig(subschemaConfig) {\n    var _a, _b;\n    const newSubschemaConfig = {\n        ...subschemaConfig,\n        transforms: subschemaConfig.transforms != null ? [...subschemaConfig.transforms] : undefined,\n    };\n    if (newSubschemaConfig.merge != null) {\n        newSubschemaConfig.merge = { ...subschemaConfig.merge };\n        for (const typeName in newSubschemaConfig.merge) {\n            const mergedTypeConfig = (newSubschemaConfig.merge[typeName] = { ...((_b = (_a = subschemaConfig.merge) === null || _a === void 0 ? void 0 : _a[typeName]) !== null && _b !== void 0 ? _b : {}) });\n            if (mergedTypeConfig.entryPoints != null) {\n                mergedTypeConfig.entryPoints = mergedTypeConfig.entryPoints.map(entryPoint => ({ ...entryPoint }));\n            }\n            if (mergedTypeConfig.fields != null) {\n                const fields = (mergedTypeConfig.fields = { ...mergedTypeConfig.fields });\n                for (const fieldName in fields) {\n                    fields[fieldName] = { ...fields[fieldName] };\n                }\n            }\n        }\n    }\n    return newSubschemaConfig;\n}\n\nfunction delegateToSchema(options) {\n    var _a, _b;\n    const { info, schema, rootValue = (_a = schema.rootValue) !== null && _a !== void 0 ? _a : info.rootValue, operationName = (_b = info.operation.name) === null || _b === void 0 ? void 0 : _b.value, operation = getDelegatingOperation(info.parentType, info.schema), fieldName = info.fieldName, selectionSet, fieldNodes = info.fieldNodes, context, } = options;\n    const request = createRequest({\n        sourceSchema: info.schema,\n        sourceParentType: info.parentType,\n        sourceFieldName: info.fieldName,\n        fragments: info.fragments,\n        variableDefinitions: info.operation.variableDefinitions,\n        variableValues: info.variableValues,\n        targetRootValue: rootValue,\n        targetOperationName: operationName,\n        targetOperation: operation,\n        targetFieldName: fieldName,\n        selectionSet,\n        fieldNodes,\n        context,\n        info,\n    });\n    return delegateRequest({\n        ...options,\n        request,\n    });\n}\nfunction getDelegationReturnType(targetSchema, operation, fieldName) {\n    const rootType = getDefinedRootType(targetSchema, operation);\n    return rootType.getFields()[fieldName].type;\n}\nfunction delegateRequest(options) {\n    const delegationContext = getDelegationContext(options);\n    const transformer = new Transformer(delegationContext);\n    const processedRequest = transformer.transformRequest(options.request);\n    if (options.validateRequest) {\n        validateRequest(delegationContext, processedRequest.document);\n    }\n    const executor = getExecutor(delegationContext);\n    return new ValueOrPromise(() => executor(processedRequest))\n        .then(originalResult => {\n        if (isAsyncIterable(originalResult)) {\n            const iterator = originalResult[Symbol.asyncIterator]();\n            // \"subscribe\" to the subscription result and map the result through the transforms\n            return mapAsyncIterator(iterator, result => transformer.transformResult(result));\n        }\n        return transformer.transformResult(originalResult);\n    })\n        .resolve();\n}\nfunction getDelegationContext({ request, schema, fieldName, returnType, args, info, transforms = [], transformedSchema, skipTypeMerging = false, }) {\n    var _a, _b, _c, _d;\n    const operationDefinition = getOperationASTFromRequest(request);\n    let targetFieldName;\n    if (fieldName == null) {\n        targetFieldName = operationDefinition.selectionSet.selections[0].name.value;\n    }\n    else {\n        targetFieldName = fieldName;\n    }\n    const stitchingInfo = (_a = info === null || info === void 0 ? void 0 : info.schema.extensions) === null || _a === void 0 ? void 0 : _a['stitchingInfo'];\n    const subschemaOrSubschemaConfig = (_b = stitchingInfo === null || stitchingInfo === void 0 ? void 0 : stitchingInfo.subschemaMap.get(schema)) !== null && _b !== void 0 ? _b : schema;\n    const operation = operationDefinition.operation;\n    if (isSubschemaConfig(subschemaOrSubschemaConfig)) {\n        const targetSchema = subschemaOrSubschemaConfig.schema;\n        return {\n            subschema: schema,\n            subschemaConfig: subschemaOrSubschemaConfig,\n            targetSchema,\n            operation,\n            fieldName: targetFieldName,\n            args,\n            context: request.context,\n            info,\n            returnType: (_c = returnType !== null && returnType !== void 0 ? returnType : info === null || info === void 0 ? void 0 : info.returnType) !== null && _c !== void 0 ? _c : getDelegationReturnType(targetSchema, operation, targetFieldName),\n            transforms: subschemaOrSubschemaConfig.transforms != null\n                ? subschemaOrSubschemaConfig.transforms.concat(transforms)\n                : transforms,\n            transformedSchema: transformedSchema !== null && transformedSchema !== void 0 ? transformedSchema : (subschemaOrSubschemaConfig instanceof Subschema ? subschemaOrSubschemaConfig.transformedSchema : targetSchema),\n            skipTypeMerging,\n        };\n    }\n    return {\n        subschema: schema,\n        subschemaConfig: undefined,\n        targetSchema: subschemaOrSubschemaConfig,\n        operation,\n        fieldName: targetFieldName,\n        args,\n        context: request.context,\n        info,\n        returnType: (_d = returnType !== null && returnType !== void 0 ? returnType : info === null || info === void 0 ? void 0 : info.returnType) !== null && _d !== void 0 ? _d : getDelegationReturnType(subschemaOrSubschemaConfig, operation, targetFieldName),\n        transforms,\n        transformedSchema: transformedSchema !== null && transformedSchema !== void 0 ? transformedSchema : subschemaOrSubschemaConfig,\n        skipTypeMerging,\n    };\n}\nfunction validateRequest(delegationContext, document) {\n    const errors = validate(delegationContext.targetSchema, document);\n    if (errors.length > 0) {\n        if (errors.length > 1) {\n            const combinedError = new AggregateError(errors, errors.map(error => error.message).join(', \\n'));\n            throw combinedError;\n        }\n        const error = errors[0];\n        throw error.originalError || error;\n    }\n}\nconst GLOBAL_CONTEXT = {};\nfunction getExecutor(delegationContext) {\n    const { subschemaConfig, targetSchema, context } = delegationContext;\n    let executor = (subschemaConfig === null || subschemaConfig === void 0 ? void 0 : subschemaConfig.executor) || createDefaultExecutor(targetSchema);\n    if (subschemaConfig === null || subschemaConfig === void 0 ? void 0 : subschemaConfig.batch) {\n        const batchingOptions = subschemaConfig === null || subschemaConfig === void 0 ? void 0 : subschemaConfig.batchingOptions;\n        executor = getBatchingExecutor(context !== null && context !== void 0 ? context : GLOBAL_CONTEXT, executor, batchingOptions === null || batchingOptions === void 0 ? void 0 : batchingOptions.dataLoaderOptions, batchingOptions === null || batchingOptions === void 0 ? void 0 : batchingOptions.extensionsReducer);\n    }\n    return executor;\n}\nconst createDefaultExecutor = memoize1(function createDefaultExecutor(schema) {\n    const executorInstance = new Executor({ schema });\n    return function defaultExecutor(request) {\n        const executionArgs = {\n            document: request.document,\n            rootValue: request.rootValue,\n            contextValue: request.context,\n            variableValues: request.variables,\n            operationName: request.operationName,\n        };\n        return executorInstance.execute(executionArgs);\n    };\n});\n\nexport { Subschema, Transformer, annotateExternalObject, applySchemaTransforms, cloneSubschemaConfig, createDefaultExecutor, createRequest, defaultMergedResolver, delegateRequest, delegateToSchema, getDelegatingOperation, getSubschema, getUnpathedErrors, isExternalObject, isSubschema, isSubschemaConfig, mergeFields, resolveExternalValue };\n", "/** Operate on GraphQL type definitions and schema. */\nexport {\n  /** Directives for defer/stream support */\n  GraphQLDeferDirective,\n  GraphQLStreamDirective,\n} from './type/index.mjs';\n/** Optimized schema for execution  */\n\nexport { toExecutorSchema } from './executorSchema/index.mjs';\n/** Execute GraphQL queries. */\n\nexport {\n  Executor,\n  defaultFieldResolver,\n  defaultTypeResolver,\n  execute,\n  executeSync,\n} from './execution/index.mjs';\n/** Operate on GraphQL errors. */\n\nexport { isGraphQLError } from './error/index.mjs';\n", "import {\n  DirectiveLocation,\n  GraphQLBoolean,\n  GraphQLDirective,\n  GraphQLInt,\n  GraphQLString,\n} from 'graphql';\n/**\n * Used to conditionally defer fragments.\n */\n\nexport const GraphQLDeferDirective = new GraphQLDirective({\n  name: 'defer',\n  description:\n    'Directs the executor to defer this fragment when the `if` argument is true or undefined.',\n  locations: [\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: GraphQLBoolean,\n      description: 'Deferred when true or undefined.',\n    },\n    label: {\n      type: GraphQLString,\n      description: 'Unique name',\n    },\n  },\n});\n/**\n * Used to conditionally stream list fields.\n */\n\nexport const GraphQLStreamDirective = new GraphQLDirective({\n  name: 'stream',\n  description:\n    'Directs the executor to stream plural fields when the `if` argument is true or undefined.',\n  locations: [DirectiveLocation.FIELD],\n  args: {\n    if: {\n      type: GraphQLBoolean,\n      description: 'Stream when true or undefined.',\n    },\n    label: {\n      type: GraphQLString,\n      description: 'Unique name',\n    },\n    initialCount: {\n      defaultValue: 0,\n      type: GraphQLInt,\n      description: 'Number of items to return immediately',\n    },\n    maxChunkSize: {\n      defaultValue: 1,\n      type: GraphQLInt,\n      description: 'Maximum number of items to return within each payload',\n    },\n    maxInterval: {\n      type: GraphQLInt,\n      description:\n        'Maximum time in ms to wait to collect items for each payload, will wait indefinitely if undefined',\n    },\n    inParallel: {\n      defaultValue: false,\n      type: GraphQLBoolean,\n      description: 'Stream items non-sequentially on completion if true',\n    },\n  },\n});\n", "import { TypeNameMetaFieldDef } from 'graphql';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { memoize1 } from '../jsutils/memoize1.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  introspectionTypes,\n} from '../type/introspection.mjs';\nimport { getPossibleInputTypes } from './getPossibleInputTypes.mjs';\nimport { TypeTree } from './typeTree.mjs';\n\nfunction is(x, type) {\n  if (Object.prototype.toString.call(x) === `[object ${type}]`) {\n    return true;\n  }\n\n  const prototype = Object.getPrototypeOf(x);\n\n  if (prototype == null) {\n    return false;\n  }\n\n  return is(prototype, type);\n}\n\nfunction _isScalarType(type) {\n  return is(type, 'GraphQLScalarType');\n}\n\nfunction _isObjectType(type) {\n  return is(type, 'GraphQLObjectType');\n}\n\nfunction _isInterfaceType(type) {\n  return is(type, 'GraphQLInterfaceType');\n}\n\nfunction _isUnionType(type) {\n  return is(type, 'GraphQLUnionType');\n}\n\nfunction _isEnumType(type) {\n  return is(type, 'GraphQLEnumType');\n}\n\nfunction _isInputObjectType(type) {\n  return is(type, 'GraphQLInputObjectType');\n} // type predicate uses GraphQLList<any> for compatibility with graphql-js v15 and earlier\n\nfunction _isListType(type) {\n  return Object.prototype.toString.call(type) === '[object GraphQLList]';\n}\n\nfunction _isNonNullType(type) {\n  return Object.prototype.toString.call(type) === '[object GraphQLNonNull]';\n}\n\nfunction _toExecutorSchema(schema) {\n  const listTypes = new Set();\n  const nonNullTypes = new Set();\n  const namedTypes = new Map();\n  const inputTypes = new Set();\n  const leafTypes = new Set();\n  const scalarTypes = new Set();\n  const enumTypes = new Set();\n  const abstractTypes = new Set();\n  const interfaceTypes = new Set();\n  const unionTypes = new Set();\n  const objectTypes = new Set();\n  const inputObjectTypes = new Set();\n  const typeTree = new TypeTree(_isListType, _isNonNullType);\n  const subTypesMap = new Map();\n  const possibleTypesMap = new Map();\n\n  function addOutputType(type) {\n    typeTree.add(type);\n  }\n\n  function addInputType(type) {\n    inputTypes.add(type);\n    typeTree.add(type);\n  }\n\n  function processType(type) {\n    if (_isListType(type) && !listTypes.has(type)) {\n      listTypes.add(type);\n      processType(type.ofType);\n    } else if (_isNonNullType(type) && !nonNullTypes.has(type)) {\n      nonNullTypes.add(type);\n      processType(type.ofType);\n    } else if (_isScalarType(type) && !namedTypes.get(type.name)) {\n      namedTypes.set(type.name, type);\n      leafTypes.add(type);\n      scalarTypes.add(type);\n    } else if (_isObjectType(type) && !namedTypes.get(type.name)) {\n      namedTypes.set(type.name, type);\n      objectTypes.add(type);\n      addOutputType(type);\n\n      for (const iface of Object.values(type.getInterfaces())) {\n        processType(iface);\n        let subTypes = subTypesMap.get(iface);\n\n        if (!subTypes) {\n          subTypes = new Set();\n          subTypesMap.set(iface, subTypes);\n        }\n\n        subTypes.add(type);\n        let possibleTypes = possibleTypesMap.get(iface);\n\n        if (!possibleTypes) {\n          possibleTypes = [];\n          possibleTypesMap.set(iface, possibleTypes);\n        }\n\n        possibleTypes.push(type);\n      }\n\n      for (const field of Object.values(type.getFields())) {\n        processType(field.type);\n\n        for (const arg of field.args) {\n          addInputType(arg.type);\n          processType(arg.type);\n        }\n      }\n    } else if (_isInterfaceType(type) && !namedTypes.get(type.name)) {\n      namedTypes.set(type.name, type);\n      abstractTypes.add(type);\n      interfaceTypes.add(type);\n      addOutputType(type); // NOTE: pre-v15 compatibility\n\n      if ('getInterfaces' in type) {\n        for (const iface of Object.values(type.getInterfaces())) {\n          processType(iface);\n          let subTypes = subTypesMap.get(iface);\n\n          if (!subTypes) {\n            subTypes = new Set();\n            subTypesMap.set(iface, subTypes);\n          }\n\n          subTypes.add(type);\n        }\n      }\n\n      for (const field of Object.values(type.getFields())) {\n        processType(field.type); // TODO: add test\n\n        /* c8 ignore next 4 */\n\n        for (const arg of field.args) {\n          addInputType(arg.type);\n          processType(arg.type);\n        }\n      }\n    } else if (_isUnionType(type) && !namedTypes.get(type.name)) {\n      namedTypes.set(type.name, type);\n      abstractTypes.add(type);\n      unionTypes.add(type);\n      addOutputType(type);\n      let subTypes = subTypesMap.get(type);\n\n      if (!subTypes) {\n        subTypes = new Set();\n        subTypesMap.set(type, subTypes);\n      }\n\n      let possibleTypes = possibleTypesMap.get(type);\n\n      if (!possibleTypes) {\n        possibleTypes = [];\n        possibleTypesMap.set(type, possibleTypes);\n      }\n\n      for (const possibleType of type.getTypes()) {\n        processType(possibleType);\n        subTypes.add(possibleType);\n        possibleTypes.push(possibleType);\n      }\n    } else if (_isEnumType(type) && !namedTypes.get(type.name)) {\n      namedTypes.set(type.name, type);\n      leafTypes.add(type);\n      enumTypes.add(type);\n    } else if (_isInputObjectType(type) && !namedTypes.get(type.name)) {\n      namedTypes.set(type.name, type);\n      inputObjectTypes.add(type);\n\n      for (const field of Object.values(type.getFields())) {\n        addInputType(field.type);\n        processType(field.type);\n      }\n    }\n  }\n\n  for (const type of Object.values(schema.getTypeMap())) {\n    if (!type.name.startsWith('__')) {\n      processType(type);\n    }\n  }\n\n  for (const directive of schema.getDirectives()) {\n    for (const arg of directive.args) {\n      addInputType(arg.type);\n      processType(arg.type);\n    }\n  } // add all possible input types to schema\n  // as variables can add non-null wrappers to input types defined in schema\n\n  for (const inputType of inputTypes.values()) {\n    const possibleInputTypes = getPossibleInputTypes(\n      _isListType,\n      _isNonNullType,\n      inputType,\n    );\n\n    for (const possibleInputType of possibleInputTypes) {\n      const typeString = possibleInputType.toString();\n\n      if (!typeTree.has(typeString)) {\n        addInputType(possibleInputType);\n        processType(possibleInputType);\n      }\n    }\n  }\n\n  for (const type of introspectionTypes) {\n    processType(type);\n  }\n\n  for (const fieldDef of [\n    SchemaMetaFieldDef,\n    TypeMetaFieldDef,\n    TypeNameMetaFieldDef,\n  ]) {\n    processType(fieldDef.type);\n\n    for (const arg of fieldDef.args) {\n      addInputType(arg.type);\n      processType(arg.type);\n    }\n  }\n\n  const queryType = schema.getQueryType();\n  const mutationType = schema.getMutationType();\n  const subscriptionType = schema.getSubscriptionType();\n\n  function isListType(type) {\n    return listTypes.has(type);\n  }\n\n  function isNonNullType(type) {\n    return nonNullTypes.has(type);\n  }\n\n  function isNamedType(type) {\n    return namedTypes.get(type.name) !== undefined;\n  }\n\n  function isInputType(type) {\n    return inputTypes.has(type);\n  }\n\n  function isLeafType(type) {\n    return leafTypes.has(type);\n  }\n\n  function isScalarType(type) {\n    return scalarTypes.has(type);\n  }\n\n  function isEnumType(type) {\n    return enumTypes.has(type);\n  }\n\n  function isAbstractType(type) {\n    return abstractTypes.has(type);\n  }\n\n  function isInterfaceType(type) {\n    return interfaceTypes.has(type);\n  }\n\n  function isUnionType(type) {\n    return unionTypes.has(type);\n  }\n\n  function isObjectType(type) {\n    return objectTypes.has(type);\n  }\n\n  function isInputObjectType(type) {\n    return inputObjectTypes.has(type);\n  }\n\n  function getDirectives() {\n    return schema.getDirectives();\n  }\n\n  function getDirective(directiveName) {\n    var _schema$getDirective;\n\n    // cast necessary pre v15 to convert null to undefined\n    return (_schema$getDirective = schema.getDirective(directiveName)) !==\n      null && _schema$getDirective !== void 0\n      ? _schema$getDirective\n      : undefined;\n  }\n\n  function getNamedTypes() {\n    return Array.from(namedTypes.values());\n  }\n\n  function getNamedType(typeName) {\n    return namedTypes.get(typeName);\n  }\n\n  function getType(typeNode) {\n    return typeTree.get(typeNode);\n  }\n\n  function getRootType(operation) {\n    if (operation === 'query') {\n      return queryType !== null && queryType !== void 0 ? queryType : undefined;\n    } else if (operation === 'mutation') {\n      return mutationType !== null && mutationType !== void 0\n        ? mutationType\n        : undefined;\n    } else if (operation === 'subscription') {\n      return subscriptionType !== null && subscriptionType !== void 0\n        ? subscriptionType\n        : undefined;\n    }\n    /* c8 ignore next 3 */\n    // Not reachable. All possible operation types have been considered.\n\n    false ||\n      invariant(false, 'Unexpected operation type: ' + inspect(operation));\n  }\n\n  function getPossibleTypes(abstractType) {\n    var _possibleTypesMap$get;\n\n    // TODO: add test\n    return (_possibleTypesMap$get = possibleTypesMap.get(abstractType)) !==\n      /* c8 ignore next */\n      null && _possibleTypesMap$get !== void 0\n      ? _possibleTypesMap$get\n      : [];\n  }\n\n  function isSubType(abstractType, maybeSubType) {\n    var _subTypesMap$get$has, _subTypesMap$get;\n\n    return (_subTypesMap$get$has =\n      (_subTypesMap$get = subTypesMap.get(abstractType)) === null ||\n      _subTypesMap$get === void 0\n        ? void 0\n        : _subTypesMap$get.has(maybeSubType)) !==\n      /* c8 ignore start */\n      null && _subTypesMap$get$has !== void 0\n      ? _subTypesMap$get$has // TODO: add test\n      : false;\n    /* c8 ignore stop */\n  }\n\n  return {\n    description: schema.description,\n    isListType,\n    isNonNullType,\n    isNamedType,\n    isInputType,\n    isLeafType,\n    isScalarType,\n    isEnumType,\n    isAbstractType,\n    isInterfaceType,\n    isUnionType,\n    isObjectType,\n    isInputObjectType,\n    getDirectives,\n    getDirective,\n    getNamedTypes,\n    getNamedType,\n    getType,\n    getRootType,\n    getPossibleTypes,\n    isSubType,\n  };\n}\n\nexport const toExecutorSchema = memoize1(_toExecutorSchema);\n", "const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n", "export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n", "/**\n * Memoizes the provided one-argument function.\n */\nexport function memoize1(fn) {\n  let cache0;\n  return function memoized(a1) {\n    if (cache0 === undefined) {\n      cache0 = new WeakMap();\n    }\n\n    let fnResult = cache0.get(a1);\n\n    if (fnResult === undefined) {\n      fnResult = fn(a1);\n      cache0.set(a1, fnResult);\n    }\n\n    return fnResult;\n  };\n}\n", "import {\n  GraphQLBoolean,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n  TypeKind,\n  __DirectiveLocation,\n  __EnumValue,\n  __TypeKind,\n  astFromValue,\n  print,\n} from 'graphql';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nexport const __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: GraphQLString,\n      resolve: (executorSchema) => executorSchema.description,\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),\n      resolve: (executorSchema) => executorSchema.getNamedTypes(),\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new GraphQLNonNull(__Type),\n      resolve: (executorSchema) => executorSchema.getRootType('query'),\n    },\n    mutationType: {\n      description:\n        'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: (executorSchema) => executorSchema.getRootType('mutation'),\n    },\n    subscriptionType: {\n      description:\n        'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: (executorSchema) => executorSchema.getRootType('subscription'),\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__Directive)),\n      ),\n      resolve: (executorSchema) => executorSchema.getDirectives(),\n    },\n  }),\n});\nexport const __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description:\n    \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (directive) => directive.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (directive) => directive.description,\n    },\n    isRepeatable: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (directive) => directive.isRepeatable,\n    },\n    locations: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__DirectiveLocation)),\n      ),\n      resolve: (directive) => directive.locations,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n  }),\n});\nexport const __Type = new GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new GraphQLNonNull(__TypeKind),\n\n      resolve(type, _args, _context, { executorSchema }) {\n        if (executorSchema.isScalarType(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if (executorSchema.isObjectType(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if (executorSchema.isInterfaceType(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if (executorSchema.isUnionType(type)) {\n          return TypeKind.UNION;\n        }\n\n        if (executorSchema.isEnumType(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if (executorSchema.isInputObjectType(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if (executorSchema.isListType(type)) {\n          return TypeKind.LIST;\n        }\n\n        if (executorSchema.isNonNullType(type)) {\n          return TypeKind.NON_NULL;\n        }\n        /* c8 ignore next 3 */\n        // Not reachable, all possible types have been considered)\n\n        false || invariant(false, `Unexpected type: \"${inspect(type)}\".`);\n      },\n    },\n    name: {\n      type: GraphQLString,\n      resolve: (type) => ('name' in type ? type.name : undefined),\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (\n        type, // FIXME: add test case\n      ) =>\n        /* c8 ignore next */\n        'description' in type ? type.description : undefined,\n    },\n    specifiedByURL: {\n      type: GraphQLString,\n      resolve: (obj) =>\n        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,\n    },\n    fields: {\n      type: new GraphQLList(new GraphQLNonNull(__Field)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }, _context, { executorSchema }) {\n        if (\n          executorSchema.isObjectType(type) ||\n          executorSchema.isInterfaceType(type)\n        ) {\n          const fields = Object.values(type.getFields());\n          return includeDeprecated\n            ? fields\n            : fields.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    interfaces: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if ('getInterfaces' in type) {\n          return type.getInterfaces();\n        }\n      },\n    },\n    possibleTypes: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, { executorSchema }) {\n        if (executorSchema.isAbstractType(type)) {\n          return executorSchema.getPossibleTypes(type);\n        }\n      },\n    },\n    enumValues: {\n      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }, _context, { executorSchema }) {\n        if (executorSchema.isEnumType(type)) {\n          const values = type.getValues();\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    inputFields: {\n      type: new GraphQLList(new GraphQLNonNull(__InputValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }, _context, { executorSchema }) {\n        if (executorSchema.isInputObjectType(type)) {\n          const values = Object.values(type.getFields());\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    ofType: {\n      type: __Type,\n      resolve: (type) => ('ofType' in type ? type.ofType : undefined),\n    },\n  }),\n});\nexport const __Field = new GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (field) => field.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (field) => field.description,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (field) => field.type,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (field) => field.deprecationReason,\n    },\n  }),\n});\nexport const __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (inputValue) => inputValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (inputValue) => inputValue.description,\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (inputValue) => inputValue.type,\n    },\n    defaultValue: {\n      type: GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const { type, defaultValue } = inputValue;\n        const valueAST = astFromValue(defaultValue, type);\n        return valueAST ? print(valueAST) : null;\n      },\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (obj) => obj.deprecationReason,\n    },\n  }),\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport const SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, { executorSchema }) => executorSchema,\n  isDeprecated: false,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nconst nameArgument = {\n  name: 'name',\n  description: undefined,\n  type: new GraphQLNonNull(GraphQLString),\n  defaultValue: undefined,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [nameArgument],\n  resolve: (_source, { name }, _context, { executorSchema }) =>\n    executorSchema.getNamedType(name),\n  isDeprecated: false,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const DirectiveMetaFieldDef = {\n  name: '__directive',\n  type: __Directive,\n  description: 'Request the directive information of a single directive.',\n  args: [nameArgument],\n  resolve: (_source, { name }, _context, { executorSchema }) =>\n    executorSchema.getDirective(name),\n  isDeprecated: false,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const introspectionTypes = Object.freeze([\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n]);\n", "import { GraphQLList, GraphQLNonNull } from 'graphql';\n\nfunction getInputTypeInfo(isListType, isNonNullType, type, wrapper) {\n  if (!isListType(type) && !isNonNullType(type)) {\n    return {\n      nonNullListWrappers: [],\n      nonNull: isNonNullType(wrapper),\n      namedType: type,\n    };\n  }\n\n  const inputTypeInfo = getInputTypeInfo(\n    isListType,\n    isNonNullType,\n    type.ofType,\n    type,\n  );\n\n  if (isNonNullType(type)) {\n    return inputTypeInfo;\n  }\n\n  inputTypeInfo.nonNullListWrappers.push(isNonNullType(wrapper));\n  return inputTypeInfo;\n}\n\nfunction getPossibleSequences(nonNullListWrappers) {\n  if (!nonNullListWrappers.length) {\n    return [[]];\n  }\n\n  const nonNull = nonNullListWrappers.pop();\n\n  if (nonNull) {\n    return getPossibleSequences(nonNullListWrappers).map((sequence) => [\n      true,\n      ...sequence,\n    ]);\n  }\n\n  return [\n    ...getPossibleSequences(nonNullListWrappers).map((sequence) => [\n      true,\n      ...sequence,\n    ]),\n    ...getPossibleSequences(nonNullListWrappers).map((sequence) => [\n      false,\n      ...sequence,\n    ]),\n  ];\n}\n\nfunction inputTypesFromSequences(sequences, inputType) {\n  return sequences.map((sequence) =>\n    sequence.reduce((acc, nonNull) => {\n      let wrapped = new GraphQLList(acc);\n\n      if (nonNull) {\n        wrapped = new GraphQLNonNull(wrapped);\n      }\n\n      return wrapped;\n    }, inputType),\n  );\n}\n\nexport function getPossibleInputTypes(isListType, isNonNullType, type) {\n  // See: https://github.com/yaacovCR/graphql-executor/issues/174\n  // Unwrap any non-null modifier to the outermost type because a variable\n  // on the outermost type can be nullable if a default value is supplied.\n  // Non-null versions will then be allowed by the algorithm below as at all\n  // levels.\n  const nullableOuterType = isNonNullType(type) ? type.ofType : type;\n  const { nonNullListWrappers, nonNull, namedType } = getInputTypeInfo(\n    isListType,\n    isNonNullType,\n    nullableOuterType,\n  );\n  const sequences = getPossibleSequences(nonNullListWrappers);\n  const wrapped = new GraphQLNonNull(namedType);\n\n  if (nonNull) {\n    return inputTypesFromSequences(sequences, wrapped);\n  }\n\n  return [\n    ...inputTypesFromSequences(sequences, namedType),\n    ...inputTypesFromSequences(sequences, wrapped),\n  ];\n}\n", "import { Kind } from 'graphql';\n\n/**\n * @internal\n */\nexport class TypeTree {\n  constructor(isListType, isNonNullType) {\n    this._isListType = isListType;\n    this._isNonNullType = isNonNullType;\n    this._rootNode = {\n      [Kind.NAMED_TYPE]: new Map(),\n    };\n    this._typeStrings = new Set();\n  }\n\n  add(type) {\n    this._add(type, this._rootNode);\n\n    this._typeStrings.add(type.toString());\n  }\n\n  get(typeNode) {\n    return this._get(typeNode, this._rootNode);\n  }\n\n  has(typeString) {\n    return this._typeStrings.has(typeString);\n  }\n\n  _get(typeNode, node) {\n    switch (typeNode.kind) {\n      case Kind.LIST_TYPE: {\n        const listNode = node[Kind.LIST_TYPE]; // this never happens because the ExecutorSchema adds all possible types\n\n        /* c8 ignore next 3 */\n\n        if (!listNode) {\n          return;\n        }\n\n        return this._get(typeNode.type, listNode);\n      }\n\n      case Kind.NON_NULL_TYPE: {\n        const nonNullNode = node[Kind.NON_NULL_TYPE]; // this never happens because the ExecutorSchema adds all possible types\n\n        /* c8 ignore next 3 */\n\n        if (!nonNullNode) {\n          return;\n        }\n\n        return this._get(typeNode.type, nonNullNode);\n      }\n\n      case Kind.NAMED_TYPE:\n        return node[Kind.NAMED_TYPE].get(typeNode.name.value);\n    }\n  }\n\n  _add(originalType, node, type = originalType) {\n    if (this._isListType(type)) {\n      let listTypeNode = node[Kind.LIST_TYPE];\n\n      if (!listTypeNode) {\n        listTypeNode = node[Kind.LIST_TYPE] = {\n          [Kind.NAMED_TYPE]: new Map(),\n        };\n      }\n\n      this._add(originalType, listTypeNode, type.ofType);\n    } else if (this._isNonNullType(type)) {\n      let nonNullTypeNode = node[Kind.NON_NULL_TYPE];\n\n      if (!nonNullTypeNode) {\n        nonNullTypeNode = node[Kind.NON_NULL_TYPE] = {\n          [Kind.NAMED_TYPE]: new Map(),\n        };\n      }\n\n      this._add(originalType, nonNullTypeNode, type.ofType);\n    } else {\n      node[Kind.NAMED_TYPE].set(type.name, originalType);\n    }\n  }\n}\n", "export { pathToArray as responsePathAsArray } from '../jsutils/Path.mjs';\nexport {\n  Executor,\n  defaultFieldResolver,\n  defaultTypeResolver,\n} from './executor.mjs';\nexport { execute, executeSync } from './execute.mjs';\n", "/**\n * Given a Path and a key, return a new Path containing the new key.\n */\nexport function addPath(prev, key, typename) {\n  return {\n    prev,\n    key,\n    typename,\n  };\n}\n/**\n * Given a Path, return an Array of the path keys.\n */\n\nexport function pathToArray(path) {\n  const flattened = [];\n  let curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n", "function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nimport {\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLError,\n  Kind,\n  TypeNameMetaFieldDef,\n  locatedError,\n} from 'graphql';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { memoize1 } from '../jsutils/memoize1.mjs';\nimport { memoize1and1 } from '../jsutils/memoize1and1.mjs';\nimport { memoize2 } from '../jsutils/memoize2.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { isPromise } from '../jsutils/isPromise.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { promiseReduce } from '../jsutils/promiseReduce.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { resolveAfterAll } from '../jsutils/resolveAfterAll.mjs';\nimport { toError } from '../jsutils/toError.mjs';\nimport {\n  GraphQLDeferDirective,\n  GraphQLStreamDirective,\n} from '../type/directives.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  DirectiveMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { toExecutorSchema } from '../executorSchema/toExecutorSchema.mjs';\nimport {\n  getVariableValues,\n  getArgumentValues,\n  getDirectiveValues,\n} from './values.mjs';\nimport { Publisher } from './publisher.mjs';\nimport { Bundler } from './bundler.mjs';\nimport { getSequentialBundler } from './getSequentialBundler.mjs';\nimport { mapAsyncIterable } from './mapAsyncIterable.mjs';\nimport { flattenAsyncIterable } from './flattenAsyncIterable.mjs';\n/**\n * Terminology\n *\n * \"Definitions\" are the generic name for top-level statements in the document.\n * Examples of this include:\n * 1) Operations (such as a query)\n * 2) Fragments\n *\n * \"Operations\" are a generic name for requests in the document.\n * Examples of this include:\n * 1) query,\n * 2) mutation\n *\n * \"Selections\" are the definitions that can appear legally and at\n * single level of the query. These include:\n * 1) field references e.g `a`\n * 2) fragment \"spreads\" e.g. `...c`\n * 3) inline fragment \"spreads\" e.g. `...on Type { a }`\n */\n\n/**\n * Data that must be available at all points during query execution.\n */\n\n/**\n * Executor class responsible for implementing the Execution section of the GraphQL spec.\n *\n * This class is exported only to assist people in implementing their own executors\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\nexport class Executor {\n  /**\n   * A memoized method that looks up the field context given a parent type\n   * and an array of field nodes.\n   */\n\n  /**\n   * A memoized method that retrieves a value completer given a return type.\n   */\n\n  /**\n   * Creates a field list, memoizing so that functions operating on the\n   * field list can be memoized.\n   */\n\n  /**\n   * Appends to a field list, memoizing so that functions operating on the\n   * field list can be memoized.\n   */\n  constructor(executorArgs) {\n    _defineProperty(\n      this,\n      'splitDefinitions',\n      memoize1((document) => this._splitDefinitions(document)),\n    );\n\n    _defineProperty(\n      this,\n      'selectOperation',\n      memoize1and1((operations, operationName) =>\n        this._selectOperation(operations, operationName),\n      ),\n    );\n\n    _defineProperty(\n      this,\n      'getFieldContext',\n      memoize2((parentType, fieldNodes) =>\n        this._getFieldContext(parentType, fieldNodes),\n      ),\n    );\n\n    _defineProperty(\n      this,\n      'getValueCompleter',\n      memoize1((returnType) => this._getValueCompleter(returnType)),\n    );\n\n    _defineProperty(\n      this,\n      'createFieldList',\n      memoize1((node) => [node]),\n    );\n\n    _defineProperty(\n      this,\n      'updateFieldList',\n      memoize2((fieldList, node) => [...fieldList, node]),\n    );\n\n    _defineProperty(\n      this,\n      'buildFieldResolver',\n      (resolverKey, defaultResolver) =>\n        (exeContext, fieldContext, source, info) => {\n          var _fieldDef$resolverKey;\n\n          const { fieldDef, initialFieldNode } = fieldContext;\n          const resolveFn =\n            (_fieldDef$resolverKey = fieldDef[resolverKey]) !== null &&\n            _fieldDef$resolverKey !== void 0\n              ? _fieldDef$resolverKey\n              : defaultResolver;\n          const { contextValue, variableValues } = exeContext; // Build a JS object of arguments from the field.arguments AST, using the\n          // variables scope to fulfill any variable references.\n\n          const args = exeContext.getArgumentValues(\n            fieldDef,\n            initialFieldNode,\n            variableValues,\n          ); // The resolve function's optional third argument is a context value that\n          // is provided to every resolve function within an execution. It is commonly\n          // used to represent an authenticated user, or request-specific caches.\n\n          return resolveFn(source, args, contextValue, info);\n        },\n    );\n\n    _defineProperty(\n      this,\n      'buildRootFieldCollector',\n      (fragments, variableValues, getDeferValues) =>\n        (runtimeType, operation) => {\n          const fields = new Map();\n          const patches = [];\n          this.collectFieldsImpl(\n            fragments,\n            variableValues,\n            getDeferValues,\n            runtimeType,\n            operation.selectionSet,\n            fields,\n            patches,\n            new Set(),\n          );\n          return {\n            fields,\n            patches,\n          };\n        },\n    );\n\n    _defineProperty(\n      this,\n      'buildSubFieldCollector',\n      (fragments, variableValues, getDeferValues) =>\n        memoize2((returnType, fieldNodes) => {\n          const subFieldNodes = new Map();\n          const visitedFragmentNames = new Set();\n          const subPatches = [];\n          const subFieldsAndPatches = {\n            fields: subFieldNodes,\n            patches: subPatches,\n          };\n\n          for (const node of fieldNodes) {\n            if (node.selectionSet) {\n              this.collectFieldsImpl(\n                fragments,\n                variableValues,\n                getDeferValues,\n                returnType,\n                node.selectionSet,\n                subFieldNodes,\n                subPatches,\n                visitedFragmentNames,\n              );\n            }\n          }\n\n          return subFieldsAndPatches;\n        }),\n    );\n\n    const { schema, executorSchema } = executorArgs; // Schema must be provided.\n\n    schema || devAssert(false, 'Must provide schema.');\n    this._schema = schema;\n    this._executorSchema =\n      executorSchema !== null && executorSchema !== void 0\n        ? executorSchema\n        : toExecutorSchema(schema);\n  }\n  /**\n   * Implements the \"Executing requests\" section of the spec.\n   *\n   * If the client-provided arguments to this function do not result in a\n   * compliant subscription, a GraphQL Response (ExecutionResult) with\n   * descriptive errors and no data will be returned.\n   */\n\n  execute(args) {\n    const exeContext = this.buildExecutionContext(args); // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n\n    if (!('fragments' in exeContext)) {\n      return {\n        errors: exeContext,\n      };\n    }\n\n    const { operation, forceQueryAlgorithm } = exeContext;\n\n    if (forceQueryAlgorithm) {\n      return this.executeQueryImpl(exeContext);\n    }\n\n    switch (operation.operation) {\n      case 'query':\n        return this.executeQueryImpl(exeContext);\n\n      case 'mutation':\n        return this.executeMutationImpl(exeContext);\n\n      default:\n        return this.executeSubscriptionImpl(exeContext);\n    }\n  }\n  /**\n   * Implements the \"CreateSourceEventStream\" algorithm described in the\n   * GraphQL specification, resolving the subscription source event stream.\n   *\n   * Returns a Promise which resolves to either an AsyncIterable (if successful)\n   * or an ExecutionResult (error). The promise will be rejected if the schema or\n   * other arguments to this function are invalid, or if the resolved event stream\n   * is not an async iterable.\n   *\n   * If the client-provided arguments to this function do not result in a\n   * compliant subscription, a GraphQL Response (ExecutionResult) with\n   * descriptive errors and no data will be returned.\n   *\n   * If the the source stream could not be created due to faulty subscription\n   * resolver logic or underlying systems, the promise will resolve to a single\n   * ExecutionResult containing `errors` and no `data`.\n   *\n   * If the operation succeeded, the promise resolves to the AsyncIterable for the\n   * event stream returned by the resolver.\n   *\n   * A Source Event Stream represents a sequence of events, each of which triggers\n   * a GraphQL execution for that event.\n   *\n   * This may be useful when hosting the stateful subscription service in a\n   * different process or machine than the stateless GraphQL execution engine,\n   * or otherwise separating these two steps. For more on this, see the\n   * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n   */\n\n  async createSourceEventStream(args) {\n    const exeContext = this.buildExecutionContext(args); // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n\n    if (!('fragments' in exeContext)) {\n      return {\n        errors: exeContext,\n      };\n    }\n\n    return this.createSourceEventStreamImpl(exeContext);\n  }\n  /**\n   * Implements the ExecuteQuery algorithm described in the GraphQL\n   * specification. This algorithm is used to execute query operations\n   * and to implement the ExecuteSubscriptionEvent algorithm.\n   *\n   * If errors are encountered while executing a GraphQL field, only that\n   * field and its descendants will be omitted, and sibling fields will still\n   * be executed. An execution which encounters errors will still result in a\n   * resolved Promise.\n   *\n   * Errors from sub-fields of a NonNull type may propagate to the top level,\n   * at which point we still log the error and null the parent field, which\n   * in this case is the entire response.\n   */\n\n  executeQueryImpl(exeContext) {\n    return this.executeOperationImpl(\n      exeContext,\n      this.executeFields.bind(this),\n      this.buildResponse.bind(this),\n    );\n  }\n  /**\n   * Implements the ExecuteMutation algorithm described in the Graphql\n   * specification.\n   */\n\n  executeMutationImpl(exeContext) {\n    return this.executeOperationImpl(\n      exeContext,\n      this.executeFieldsSerially.bind(this),\n      this.buildResponse.bind(this),\n    );\n  }\n  /**\n   * Implements the Execute algorithm described in the GraphQL specification\n   * using the provided root fields executor and response builder.\n   */\n\n  executeOperationImpl(exeContext, rootFieldsExecutor, responseBuilder) {\n    let data;\n\n    try {\n      const { rootValue, rootResponseNode } = exeContext;\n      const {\n        rootType,\n        fieldsAndPatches: { fields, patches },\n      } = this.getRootContext(exeContext);\n      const path = undefined;\n      data = rootFieldsExecutor(\n        exeContext,\n        rootType,\n        rootValue,\n        path,\n        fields,\n        rootResponseNode,\n      );\n      this.addPatches(\n        exeContext,\n        patches,\n        rootType,\n        rootValue,\n        path,\n        rootResponseNode,\n      );\n    } catch (error) {\n      exeContext.rootResponseNode.errors.push(error);\n      data = null;\n    }\n\n    if (isPromise(data)) {\n      return data.then(\n        (resolvedData) => responseBuilder(exeContext, resolvedData),\n        (error) => {\n          exeContext.rootResponseNode.errors.push(error);\n          return responseBuilder(exeContext, null);\n        },\n      );\n    }\n\n    return responseBuilder(exeContext, data);\n  }\n  /**\n   * Given a completed execution context and data, build the `{ errors, data }`\n   * response defined by the \"Response\" section of the GraphQL specification.\n   */\n\n  buildResponse(exeContext, data) {\n    const rootResponseNode = exeContext.rootResponseNode;\n    const errors = rootResponseNode.errors;\n    const initialResult =\n      errors.length === 0\n        ? {\n            data,\n          }\n        : {\n            errors,\n            data,\n          };\n\n    if (this.hasNext(exeContext.state)) {\n      const publisher = exeContext.publisher;\n      publisher.emit([rootResponseNode], { ...initialResult, hasNext: true });\n      return publisher.subscribe();\n    }\n\n    return initialResult;\n  }\n  /**\n   * Essential assertions before executing to provide developer feedback for\n   * improper use of the GraphQL library.\n   */\n\n  assertValidExecutionArguments(document, rawVariableValues) {\n    document || devAssert(false, 'Must provide document.'); // Variables, if provided, must be an object.\n\n    rawVariableValues == null ||\n      isObjectLike(rawVariableValues) ||\n      devAssert(\n        false,\n        'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.',\n      );\n  }\n\n  _splitDefinitions(document) {\n    const operations = [];\n    const fragments = Object.create(null);\n\n    for (const definition of document.definitions) {\n      switch (definition.kind) {\n        case Kind.OPERATION_DEFINITION:\n          operations.push(definition);\n          break;\n\n        case Kind.FRAGMENT_DEFINITION:\n          fragments[definition.name.value] = definition;\n          break;\n\n        default: // ignore non-executable definitions\n      }\n    }\n\n    return {\n      operations,\n      fragments,\n    };\n  }\n\n  _selectOperation(operations, operationName) {\n    let operation;\n\n    for (const possibleOperation of operations) {\n      var _possibleOperation$na;\n\n      if (operationName == null) {\n        if (operation !== undefined) {\n          return [\n            new GraphQLError(\n              'Must provide operation name if query contains multiple operations.',\n            ),\n          ];\n        }\n\n        operation = possibleOperation;\n      } else if (\n        ((_possibleOperation$na = possibleOperation.name) === null ||\n        _possibleOperation$na === void 0\n          ? void 0\n          : _possibleOperation$na.value) === operationName\n      ) {\n        operation = possibleOperation;\n      }\n    }\n\n    if (!operation) {\n      if (operationName != null) {\n        return [\n          new GraphQLError(`Unknown operation named \"${operationName}\".`),\n        ];\n      }\n\n      return [new GraphQLError('Must provide an operation.')];\n    }\n\n    return operation;\n  }\n\n  createPublisher(state) {\n    return new Publisher({\n      payloadFromSource: (result, hasNext) => {\n        const { responseContext, data, path, atIndex, atIndices, label } =\n          result;\n        const errors = [];\n\n        for (const responseNode of responseContext.responseNodes) {\n          errors.push(...responseNode.errors);\n        }\n\n        const value = {\n          data,\n          path: path ? pathToArray(path) : [],\n          hasNext,\n        };\n\n        if (atIndex != null) {\n          value.atIndex = atIndex;\n        } else if (atIndices != null) {\n          value.atIndices = atIndices;\n        }\n\n        if (label != null) {\n          value.label = label;\n        }\n\n        if (errors.length > 0) {\n          value.errors = errors;\n        }\n\n        return value;\n      },\n      onReady: () => state.pendingPushes--,\n      hasNext: () => this.hasNext(state),\n      onStop: () =>\n        Promise.all(\n          Array.from(state.iterators.values()).map((iterator) => {\n            var _iterator$return;\n\n            return (_iterator$return = iterator.return) === null ||\n              _iterator$return === void 0\n              ? void 0\n              : _iterator$return.call(iterator);\n          }),\n        ),\n    });\n  }\n  /**\n   * Constructs a ExecutionContext object from the arguments passed to\n   * execute, which we will pass throughout the other execution methods.\n   *\n   * Returns an array of GraphQLErrors if a valid execution context\n   * cannot be created.\n   */\n\n  buildExecutionContext(args) {\n    var _operation$variableDe;\n\n    const {\n      document,\n      rootValue,\n      contextValue,\n      variableValues: rawVariableValues,\n      operationName,\n      fieldResolver,\n      typeResolver,\n      subscribeFieldResolver,\n      forceQueryAlgorithm,\n      enableIncremental,\n    } = args; // If arguments are missing or incorrectly typed, this is an internal\n    // developer mistake which should throw an error.\n\n    this.assertValidExecutionArguments(document, rawVariableValues);\n    const { operations, fragments } = this.splitDefinitions(document);\n    const operation = this.selectOperation(operations, operationName);\n\n    if ('length' in operation) {\n      return operation;\n    } // See: 'https://github.com/graphql/graphql-js/issues/2203'\n\n    const variableDefinitions =\n      /* c8 ignore next */\n      (_operation$variableDe = operation.variableDefinitions) !== null &&\n      _operation$variableDe !== void 0\n        ? _operation$variableDe\n        : [];\n    const coercedVariableValues = getVariableValues(\n      this._executorSchema,\n      variableDefinitions,\n      rawVariableValues !== null && rawVariableValues !== void 0\n        ? rawVariableValues\n        : {},\n      {\n        maxErrors: 50,\n      },\n    );\n\n    if (coercedVariableValues.errors) {\n      return coercedVariableValues.errors;\n    }\n\n    const enableIncrementalFlagValue =\n      enableIncremental !== null && enableIncremental !== void 0\n        ? enableIncremental\n        : true;\n    const defaultResolveFieldValueFn =\n      fieldResolver !== null && fieldResolver !== void 0\n        ? fieldResolver\n        : defaultFieldResolver;\n    const getDeferValues = enableIncrementalFlagValue\n      ? this.getDeferValues.bind(this)\n      : () => undefined;\n    const coercedVariableValuesValues = coercedVariableValues.coerced;\n    const state = {\n      pendingPushes: 0,\n      pendingStreamResults: 0,\n      iterators: new Set(),\n    };\n    return {\n      fragments,\n      rootValue,\n      contextValue,\n      operation,\n      variableValues: coercedVariableValues.coerced,\n      fieldResolver: defaultResolveFieldValueFn,\n      typeResolver:\n        typeResolver !== null && typeResolver !== void 0\n          ? typeResolver\n          : defaultTypeResolver,\n      forceQueryAlgorithm:\n        forceQueryAlgorithm !== null && forceQueryAlgorithm !== void 0\n          ? forceQueryAlgorithm\n          : false,\n      enableIncremental: enableIncrementalFlagValue,\n      getArgumentValues: memoize2((def, node) =>\n        getArgumentValues(\n          this._executorSchema,\n          def,\n          node,\n          coercedVariableValuesValues,\n        ),\n      ),\n      getDeferValues,\n      getStreamValues: enableIncrementalFlagValue\n        ? this.getStreamValues.bind(this)\n        : () => undefined,\n      rootFieldCollector: this.buildRootFieldCollector(\n        fragments,\n        coercedVariableValuesValues,\n        getDeferValues,\n      ),\n      subFieldCollector: this.buildSubFieldCollector(\n        fragments,\n        coercedVariableValuesValues,\n        getDeferValues,\n      ),\n      resolveField:\n        operation.operation === 'subscription' && !forceQueryAlgorithm\n          ? this.buildFieldResolver(\n              'subscribe',\n              subscribeFieldResolver !== null &&\n                subscribeFieldResolver !== void 0\n                ? subscribeFieldResolver\n                : defaultFieldResolver,\n            )\n          : this.buildFieldResolver('resolve', defaultResolveFieldValueFn),\n      rootResponseNode: {\n        errors: [],\n      },\n      state,\n      publisher: this.createPublisher(state),\n    };\n  }\n  /**\n   * Constructs a perPayload ExecutionContext object from an initial\n   * ExecutionObject and the payload value.\n   */\n\n  buildPerPayloadExecutionContext(exeContext, payload) {\n    const state = {\n      pendingPushes: 0,\n      pendingStreamResults: 0,\n      iterators: new Set(),\n    };\n    return {\n      ...exeContext,\n      rootValue: payload,\n      forceQueryAlgorithm: true,\n      resolveField: this.buildFieldResolver(\n        'resolve',\n        exeContext.fieldResolver,\n      ),\n      rootResponseNode: {\n        errors: [],\n      },\n      state,\n      publisher: this.createPublisher(state),\n    };\n  }\n\n  getRootContext(exeContext) {\n    const { operation, rootFieldCollector } = exeContext;\n\n    const rootType = this._executorSchema.getRootType(operation.operation);\n\n    if (rootType == null) {\n      throw new GraphQLError(\n        `Schema is not configured to execute ${operation.operation} operation.`,\n        operation,\n      );\n    }\n\n    const fieldsAndPatches = rootFieldCollector(rootType, operation);\n    return {\n      rootType,\n      fieldsAndPatches,\n    };\n  }\n  /**\n   * Implements the \"Executing selection sets\" section of the spec\n   * for fields that must be executed serially.\n   */\n\n  executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n    const parentTypeName = parentType.name;\n    return promiseReduce(\n      fields.entries(),\n      (results, [responseName, fieldNodes]) => {\n        const fieldPath = addPath(path, responseName, parentTypeName);\n        const result = this.executeField(\n          exeContext,\n          parentType,\n          sourceValue,\n          fieldNodes,\n          fieldPath,\n          exeContext.rootResponseNode,\n        );\n\n        if (result === undefined) {\n          return results;\n        }\n\n        if (isPromise(result)) {\n          return result.then((resolvedResult) => {\n            results[responseName] = resolvedResult;\n            return results;\n          });\n        }\n\n        results[responseName] = result;\n        return results;\n      },\n      Object.create(null),\n    );\n  }\n  /**\n   * Implements the \"Executing selection sets\" section of the spec\n   * for fields that may be executed in parallel.\n   */\n\n  executeFields(\n    exeContext,\n    parentType,\n    sourceValue,\n    path,\n    fields,\n    responseNode,\n  ) {\n    const results = Object.create(null);\n    const promises = [];\n    const parentTypeName = parentType.name;\n\n    for (const [responseName, fieldNodes] of fields.entries()) {\n      const fieldPath = addPath(path, responseName, parentTypeName);\n      const result = this.executeField(\n        exeContext,\n        parentType,\n        sourceValue,\n        fieldNodes,\n        fieldPath,\n        responseNode,\n      );\n\n      if (result !== undefined) {\n        if (isPromise(result)) {\n          // set key to undefined to preserve key order\n          results[responseName] = undefined;\n          const promise = result.then((resolved) => {\n            results[responseName] = resolved;\n          });\n          promises.push(promise);\n        } else {\n          results[responseName] = result;\n        }\n      }\n    } // If there are no promises, we can just return the object\n\n    if (!promises.length) {\n      return results;\n    } // Otherwise, results will only eventually be a map from field name to the\n    // result of resolving that field, which is possibly a promise. Return a\n    // promise that will return this map after resolution is complete.\n\n    return resolveAfterAll(results, promises);\n  }\n  /**\n   * Implements the \"Executing field\" section of the spec\n   * In particular, this function figures out the value that the field returns by\n   * calling its resolve function, then calls completeValue to complete promises,\n   * serialize scalars, or execute the sub-selection-set for objects.\n   */\n\n  executeField(exeContext, parentType, source, fieldNodes, path, responseNode) {\n    const fieldContext = this.getFieldContext(parentType, fieldNodes);\n\n    if (!fieldContext) {\n      return;\n    }\n\n    const returnType = fieldContext.returnType;\n    const info = this.buildResolveInfo(exeContext, fieldContext, path); // Get the resolved field value, regardless of if its result is normal or abrupt (error).\n    // Then, complete the field\n\n    try {\n      const result = exeContext.resolveField(\n        exeContext,\n        fieldContext,\n        source,\n        info,\n      );\n      let completed;\n      const valueCompleter = this.getValueCompleter(returnType);\n\n      if (isPromise(result)) {\n        completed = result.then((resolved) =>\n          valueCompleter(\n            exeContext,\n            fieldContext,\n            info,\n            path,\n            resolved,\n            responseNode,\n          ),\n        );\n      } else {\n        completed = valueCompleter(\n          exeContext,\n          fieldContext,\n          info,\n          path,\n          result,\n          responseNode,\n        );\n      }\n\n      if (isPromise(completed)) {\n        // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n        // to take a second callback for the error case.\n        return completed.then(undefined, (rawError) =>\n          this.handleRawError(\n            rawError,\n            fieldNodes,\n            path,\n            returnType,\n            responseNode.errors,\n          ),\n        );\n      }\n\n      return completed;\n    } catch (rawError) {\n      return this.handleRawError(\n        rawError,\n        fieldNodes,\n        path,\n        returnType,\n        responseNode.errors,\n      );\n    }\n  }\n\n  buildResolveInfo(exeContext, fieldContext, path) {\n    const { fieldName, fieldNodes, returnType, parentType } = fieldContext;\n    const { _schema: schema, _executorSchema: executorSchema } = this;\n    const { fragments, rootValue, operation, variableValues } = exeContext; // The resolve function's optional fourth argument is a collection of\n    // information about the current execution state.\n\n    return {\n      fieldName,\n      fieldNodes,\n      returnType,\n      parentType,\n      path,\n      schema,\n      executorSchema,\n      fragments,\n      rootValue,\n      operation,\n      variableValues,\n    };\n  }\n\n  toLocatedError(rawError, fieldNodes, path) {\n    return locatedError(toError(rawError), fieldNodes, pathToArray(path));\n  }\n\n  handleRawError(rawError, fieldNodes, path, returnType, errors) {\n    const error = this.toLocatedError(rawError, fieldNodes, path); // If the field type is non-nullable, then it is resolved without any\n    // protection from errors, however it still properly locates the error.\n\n    if (this._executorSchema.isNonNullType(returnType)) {\n      throw error;\n    } // Otherwise, error protection is applied, logging the error and resolving\n    // a null value for this field if one is encountered.\n\n    errors.push(error);\n    return null;\n  }\n\n  buildNullableValueCompleter(valueCompleter) {\n    return (exeContext, fieldContext, info, path, result, responseNode) => {\n      // If result is an Error, throw a located error.\n      if (result instanceof Error) {\n        throw result;\n      } // If result value is null or undefined then return null.\n\n      if (result == null) {\n        return null;\n      }\n\n      return valueCompleter(\n        exeContext,\n        fieldContext,\n        info,\n        path,\n        result,\n        responseNode,\n      );\n    };\n  }\n  /**\n   * Implements the instructions for completeValue as defined in the\n   * \"Field entries\" section of the spec.\n   *\n   * If the field type is Non-Null, then this recursively completes the value\n   * for the inner type. It throws a field error if that completion returns null,\n   * as per the \"Nullability\" section of the spec.\n   *\n   * If the field type is a List, then this recursively completes the value\n   * for the inner type on each item in the list.\n   *\n   * If the field type is a Scalar or Enum, ensures the completed value is a legal\n   * value of the type by calling the `serialize` method of GraphQL type\n   * definition.\n   *\n   * If the field is an abstract type, determine the runtime type of the value\n   * and then complete based on that type\n   *\n   * Otherwise, the field type expects a sub-selection set, and will complete the\n   * value by executing all sub-selections.\n   */\n\n  _getValueCompleter(returnType) {\n    if (this._executorSchema.isNonNullType(returnType)) {\n      return (exeContext, fieldContext, info, path, result, responseNode) => {\n        // If field type is NonNull, complete for inner type, and throw field error\n        // if result is null.\n        const innerValueCompleter = this.getValueCompleter(returnType.ofType);\n        const completed = innerValueCompleter(\n          exeContext,\n          fieldContext,\n          info,\n          path,\n          result,\n          responseNode,\n        );\n\n        if (completed === null) {\n          throw new Error(\n            `Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`,\n          );\n        }\n\n        return completed;\n      };\n    }\n\n    if (this._executorSchema.isListType(returnType)) {\n      return this.buildNullableValueCompleter(\n        (\n          exeContext,\n          fieldContext,\n          info,\n          path,\n          result,\n          responseNode, // If field type is List, complete each item in the list with the inner type\n        ) =>\n          this.completeListValue(\n            exeContext,\n            returnType,\n            fieldContext,\n            info,\n            path,\n            result,\n            responseNode,\n          ),\n      );\n    }\n\n    if (this._executorSchema.isLeafType(returnType)) {\n      return this.buildNullableValueCompleter(\n        (\n          _exeContext,\n          _fieldContext,\n          _info,\n          _path,\n          result,\n          _responseNode, // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n        ) =>\n          // returning null if serialization is not possible.\n          this.completeLeafValue(returnType, result),\n      );\n    }\n\n    if (this._executorSchema.isAbstractType(returnType)) {\n      return this.buildNullableValueCompleter(\n        (\n          exeContext,\n          fieldContext,\n          info,\n          path,\n          result,\n          responseNode, // If field type is an abstract type, Interface or Union, determine the\n        ) =>\n          // runtime Object type and complete for that type.\n          this.completeAbstractValue(\n            exeContext,\n            returnType,\n            fieldContext,\n            info,\n            path,\n            result,\n            responseNode,\n          ),\n      );\n    }\n\n    if (this._executorSchema.isObjectType(returnType)) {\n      return this.buildNullableValueCompleter(\n        (\n          exeContext,\n          fieldContext,\n          info,\n          path,\n          result,\n          responseNode, // If field type is Object, execute and complete all sub-selections.\n        ) =>\n          this.completeObjectValue(\n            exeContext,\n            returnType,\n            fieldContext,\n            info,\n            path,\n            result,\n            responseNode,\n          ),\n      );\n    }\n    /* c8 ignore next 6 */\n    // Not reachable. All possible output types have been considered\n\n    false ||\n      invariant(\n        false,\n        'Cannot complete value of unexpected output type: ' +\n          inspect(returnType),\n      );\n  }\n  /**\n   * Complete a list value by completing each item in the list with the\n   * inner type\n   */\n\n  completeListValue(\n    exeContext,\n    returnType,\n    fieldContext,\n    info,\n    path,\n    result,\n    responseNode,\n  ) {\n    const itemType = returnType.ofType;\n    const valueCompleter = this.getValueCompleter(itemType); // This is specified as a simple map, however we're optimizing the path\n    // where the list contains no Promises by avoiding creating another Promise.\n\n    const completedResults = [];\n    const promises = [];\n    const stream = exeContext.getStreamValues(\n      exeContext.variableValues,\n      fieldContext,\n    );\n\n    if (isAsyncIterable(result)) {\n      const iterator = result[Symbol.asyncIterator]();\n      return this.completeAsyncIteratorValue(\n        exeContext,\n        itemType,\n        fieldContext,\n        info,\n        valueCompleter,\n        path,\n        iterator,\n        responseNode,\n        stream,\n        completedResults,\n        promises,\n      );\n    }\n\n    if (!isIterableObject(result)) {\n      throw new GraphQLError(\n        `Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`,\n      );\n    }\n\n    const iterator = result[Symbol.iterator]();\n    this.completeIteratorValue(\n      exeContext,\n      itemType,\n      fieldContext,\n      info,\n      valueCompleter,\n      path,\n      iterator,\n      responseNode,\n      stream,\n      completedResults,\n      promises,\n    );\n    return promises.length\n      ? resolveAfterAll(completedResults, promises)\n      : completedResults;\n  }\n  /**\n   * Returns an object containing the `@stream` arguments if a field should be\n   * streamed based on the experimental flag, stream directive present and\n   * not disabled by the \"if\" argument.\n   */\n\n  getStreamValues(variableValues, fieldContext) {\n    // validation only allows equivalent streams on multiple fields, so it is\n    // safe to only check the first fieldNode for the stream directive\n    const stream = getDirectiveValues(\n      this._executorSchema,\n      GraphQLStreamDirective,\n      fieldContext.initialFieldNode,\n      variableValues,\n    );\n\n    if (!stream) {\n      return;\n    }\n\n    if (stream.if === false) {\n      return;\n    }\n\n    const { initialCount, maxChunkSize, maxInterval, inParallel, label } =\n      stream;\n    typeof initialCount === 'number' ||\n      invariant(false, 'initialCount must be a number');\n    initialCount >= 0 ||\n      invariant(\n        false,\n        'initialCount must be an integer greater than or equal to zero',\n      );\n    typeof maxChunkSize === 'number' ||\n      invariant(false, 'maxChunkSize must be a number');\n    maxChunkSize >= 1 ||\n      invariant(\n        false,\n        'maxChunkSize must be an integer greater than or equal to one',\n      );\n\n    if (maxInterval != null) {\n      typeof maxInterval === 'number' ||\n        invariant(false, 'maxInterval must be a number');\n      maxInterval >= 0 ||\n        invariant(\n          false,\n          'maxInterval must be an integer greater than or equal to zero',\n        );\n    }\n\n    return {\n      initialCount,\n      maxChunkSize,\n      maxInterval,\n      inParallel: inParallel === true,\n      label: typeof label === 'string' ? label : undefined,\n    };\n  }\n  /**\n   * Complete an iterator value by completing each result.\n   */\n\n  completeIteratorValue(\n    exeContext,\n    itemType,\n    fieldContext,\n    info,\n    valueCompleter,\n    path,\n    iterator,\n    responseNode,\n    stream,\n    completedResults,\n    promises,\n  ) {\n    if (stream) {\n      this.completeIteratorValueWithStream(\n        exeContext,\n        itemType,\n        fieldContext,\n        info,\n        valueCompleter,\n        path,\n        iterator,\n        responseNode,\n        stream,\n        completedResults,\n        0,\n        promises,\n      );\n      return;\n    }\n\n    this.completeIteratorValueWithoutStream(\n      exeContext,\n      itemType,\n      fieldContext,\n      info,\n      valueCompleter,\n      path,\n      iterator,\n      responseNode,\n      completedResults,\n      0,\n      promises,\n    );\n  }\n\n  onNewBundleContext(state, context, responseNode) {\n    state.pendingPushes++;\n    state.pendingStreamResults--;\n    context.responseNodes.push(responseNode);\n    return context;\n  }\n\n  onSubsequentResponseNode(state, context, responseNode) {\n    state.pendingStreamResults--;\n    context.responseNodes.push(responseNode);\n  }\n\n  createBundler(\n    exeContext,\n    parentResponseNode,\n    initialCount,\n    maxChunkSize,\n    maxInterval,\n    resultToNewDataContext,\n    indexToNewErrorContext,\n    onSubsequentData,\n    onSubsequentError,\n    dataContextToIncrementalResult,\n    errorContextToIncrementalResult,\n  ) {\n    return new Bundler({\n      initialIndex: initialCount,\n      maxBundleSize: maxChunkSize,\n      maxInterval,\n      createDataBundleContext: (index, result) =>\n        this.onNewBundleContext(\n          exeContext.state,\n          resultToNewDataContext(index, result),\n          result.responseNode,\n        ),\n      createErrorBundleContext: (index, responseNode) =>\n        this.onNewBundleContext(\n          exeContext.state,\n          indexToNewErrorContext(index),\n          responseNode,\n        ),\n      onSubsequentData: (index, result, context) => {\n        this.onSubsequentResponseNode(\n          exeContext.state,\n          context,\n          result.responseNode,\n        );\n        onSubsequentData(index, result, context);\n      },\n      onSubsequentError: (index, responseNode, context) => {\n        this.onSubsequentResponseNode(exeContext.state, context, responseNode);\n        onSubsequentError(index, context);\n      },\n      onDataBundle: (context) =>\n        exeContext.publisher.queue(\n          context.responseNodes,\n          dataContextToIncrementalResult(context),\n          parentResponseNode,\n        ),\n      onErrorBundle: (context) =>\n        exeContext.publisher.queue(\n          context.responseNodes,\n          errorContextToIncrementalResult(context),\n          parentResponseNode,\n        ),\n    });\n  }\n\n  createStreamContext(\n    exeContext,\n    initialCount,\n    maxChunkSize,\n    maxInterval,\n    inParallel,\n    path,\n    label,\n    parentResponseNode,\n  ) {\n    if (maxChunkSize === 1) {\n      const bundler = this.createBundler(\n        exeContext,\n        parentResponseNode,\n        initialCount,\n        maxChunkSize,\n        maxInterval,\n        (index, result) => ({\n          responseNodes: [],\n          parentResponseNode,\n          result: result.data,\n          atIndex: index,\n        }),\n        (index) => ({\n          responseNodes: [],\n          parentResponseNode,\n          atIndex: index,\n        }),\n        /* c8 ignore start */\n        () => {\n          /* with maxBundleSize of 1, this function will never be called */\n        },\n        () => {\n          /* with maxBundleSize of 1, this function will never be called */\n        },\n        /* c8 ignore stop */\n        (context) => ({\n          responseContext: context,\n          data: context.result,\n          path: addPath(path, context.atIndex, undefined),\n          label,\n        }),\n        (context) => ({\n          responseContext: context,\n          data: null,\n          path: addPath(path, context.atIndex, undefined),\n          label,\n        }),\n      );\n      return {\n        initialCount,\n        path,\n        bundler: inParallel\n          ? bundler\n          : getSequentialBundler(initialCount, bundler),\n      };\n    }\n\n    if (inParallel) {\n      return {\n        initialCount,\n        path,\n        bundler: this.createBundler(\n          exeContext,\n          parentResponseNode,\n          initialCount,\n          maxChunkSize,\n          maxInterval,\n          (index, result) => ({\n            responseNodes: [],\n            parentResponseNode,\n            atIndices: [index],\n            results: [result.data],\n          }),\n          (index) => ({\n            responseNodes: [],\n            parentResponseNode,\n            atIndices: [index],\n          }),\n          (index, result, context) => {\n            context.results.push(result.data);\n            context.atIndices.push(index);\n          },\n          (index, context) => {\n            context.atIndices.push(index);\n          },\n          (context) => ({\n            responseContext: context,\n            data: context.results,\n            path,\n            atIndices: context.atIndices,\n            label,\n          }),\n          (context) => ({\n            responseContext: context,\n            data: null,\n            path,\n            atIndices: context.atIndices,\n            label,\n          }),\n        ),\n      };\n    }\n\n    return {\n      initialCount,\n      path,\n      bundler: getSequentialBundler(\n        initialCount,\n        this.createBundler(\n          exeContext,\n          parentResponseNode,\n          initialCount,\n          maxChunkSize,\n          maxInterval,\n          (index, result) => ({\n            responseNodes: [],\n            parentResponseNode,\n            atIndex: index,\n            results: [result.data],\n          }),\n          (index) => ({\n            responseNodes: [],\n            parentResponseNode,\n            atIndex: index,\n          }),\n          (_index, result, context) => {\n            context.results.push(result.data);\n          },\n          /* c8 ignore start */\n          () => {\n            /* with serial bundlers and no data, no additional action is needed */\n          },\n          /* c8 ignore stop */\n          (context) => ({\n            responseContext: context,\n            data: context.results,\n            path,\n            atIndex: context.atIndex,\n            label,\n          }),\n          (context) => ({\n            responseContext: context,\n            data: null,\n            path,\n            atIndex: context.atIndex,\n            label,\n          }),\n        ),\n      ),\n    };\n  }\n  /**\n   * Complete an iterator value by completing each result, possibly adding a new stream.\n   */\n\n  completeIteratorValueWithStream(\n    exeContext,\n    itemType,\n    fieldContext,\n    info,\n    valueCompleter,\n    path,\n    iterator,\n    responseNode,\n    stream,\n    completedResults,\n    _index,\n    promises,\n  ) {\n    const initialCount = stream.initialCount;\n    let index = _index;\n\n    while (true) {\n      if (index >= initialCount) {\n        const { maxChunkSize, maxInterval, inParallel, label } = stream;\n        const streamContext = this.createStreamContext(\n          exeContext,\n          initialCount,\n          maxChunkSize,\n          maxInterval,\n          inParallel,\n          path,\n          label,\n          responseNode,\n        );\n        const nextIndex = this.addIteratorValue(\n          index,\n          iterator,\n          exeContext,\n          itemType,\n          fieldContext,\n          info,\n          valueCompleter,\n          streamContext,\n        );\n        streamContext.bundler.setTotal(nextIndex);\n        break;\n      }\n\n      const iteration = iterator.next();\n\n      if (iteration.done) {\n        return;\n      }\n\n      const itemPath = addPath(path, index, undefined);\n      this.completeListItemValue(\n        completedResults,\n        index,\n        promises,\n        iteration.value,\n        exeContext,\n        itemType,\n        valueCompleter,\n        fieldContext,\n        info,\n        itemPath,\n        responseNode,\n      );\n      index++;\n    }\n  }\n  /**\n   * Complete an iterator value by completing each result.\n   *\n   * Returns the next index.\n   */\n\n  completeIteratorValueWithoutStream(\n    exeContext,\n    itemType,\n    fieldContext,\n    info,\n    valueCompleter,\n    path,\n    iterator,\n    responseNode,\n    completedResults,\n    _index,\n    promises,\n  ) {\n    let index = _index;\n\n    while (true) {\n      const iteration = iterator.next();\n\n      if (iteration.done) {\n        return index;\n      }\n\n      const itemPath = addPath(path, index, undefined);\n      this.completeListItemValue(\n        completedResults,\n        index,\n        promises,\n        iteration.value,\n        exeContext,\n        itemType,\n        valueCompleter,\n        fieldContext,\n        info,\n        itemPath,\n        responseNode,\n      );\n      index++;\n    }\n  }\n  /**\n   * Complete an async iterator value by completing each result.\n   */\n\n  async completeAsyncIteratorValue(\n    exeContext,\n    itemType,\n    fieldContext,\n    info,\n    valueCompleter,\n    path,\n    iterator,\n    responseNode,\n    stream,\n    completedResults,\n    promises,\n  ) {\n    if (stream) {\n      await this.completeAsyncIteratorValueWithStream(\n        exeContext,\n        itemType,\n        fieldContext,\n        info,\n        valueCompleter,\n        path,\n        iterator,\n        responseNode,\n        stream,\n        completedResults,\n        promises,\n      );\n    } else {\n      await this.completeAsyncIteratorValueWithoutStream(\n        exeContext,\n        itemType,\n        fieldContext,\n        info,\n        valueCompleter,\n        path,\n        iterator,\n        responseNode,\n        completedResults,\n        promises,\n      );\n    }\n\n    return promises.length\n      ? resolveAfterAll(completedResults, promises)\n      : completedResults;\n  }\n\n  async completeAsyncIteratorValueWithStream(\n    exeContext,\n    itemType,\n    fieldContext,\n    info,\n    valueCompleter,\n    path,\n    iterator,\n    responseNode,\n    stream,\n    completedResults,\n    promises,\n  ) {\n    const initialCount = stream.initialCount;\n    let index = 0;\n\n    try {\n      while (true) {\n        if (index >= initialCount) {\n          const { maxChunkSize, maxInterval, inParallel, label } = stream;\n          const streamContext = this.createStreamContext(\n            exeContext,\n            initialCount,\n            maxChunkSize,\n            maxInterval,\n            inParallel,\n            path,\n            label,\n            responseNode,\n          ); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n          this.addAsyncIteratorValue(\n            index,\n            iterator,\n            exeContext,\n            itemType,\n            fieldContext,\n            info,\n            valueCompleter,\n            streamContext,\n          );\n          return;\n        } // eslint-disable-next-line no-await-in-loop\n\n        const iteration = await iterator.next();\n\n        if (iteration.done) {\n          break;\n        }\n\n        const itemPath = addPath(path, index, undefined);\n        this.completeListItemValue(\n          completedResults,\n          index,\n          promises,\n          iteration.value,\n          exeContext,\n          itemType,\n          valueCompleter,\n          fieldContext,\n          info,\n          itemPath,\n          responseNode,\n        );\n        index++;\n      }\n    } catch (rawError) {\n      const itemPath = addPath(path, index, undefined);\n      completedResults.push(\n        this.handleRawError(\n          rawError,\n          fieldContext.fieldNodes,\n          itemPath,\n          itemType,\n          responseNode.errors,\n        ),\n      );\n    }\n  }\n\n  async completeAsyncIteratorValueWithoutStream(\n    exeContext,\n    itemType,\n    fieldContext,\n    info,\n    valueCompleter,\n    path,\n    iterator,\n    responseNode,\n    completedResults,\n    promises,\n  ) {\n    let index = 0;\n\n    try {\n      while (true) {\n        // eslint-disable-next-line no-await-in-loop\n        const iteration = await iterator.next();\n\n        if (iteration.done) {\n          break;\n        }\n\n        const itemPath = addPath(path, index, undefined);\n        this.completeListItemValue(\n          completedResults,\n          index,\n          promises,\n          iteration.value,\n          exeContext,\n          itemType,\n          valueCompleter,\n          fieldContext,\n          info,\n          itemPath,\n          responseNode,\n        );\n        index++;\n      }\n    } catch (rawError) {\n      const itemPath = addPath(path, index, undefined);\n      completedResults.push(\n        this.handleRawError(\n          rawError,\n          fieldContext.fieldNodes,\n          itemPath,\n          itemType,\n          responseNode.errors,\n        ),\n      );\n    }\n  }\n\n  completeListItemValue(\n    completedResults,\n    index,\n    promises,\n    item,\n    exeContext,\n    itemType,\n    valueCompleter,\n    fieldContext,\n    info,\n    itemPath,\n    responseNode,\n  ) {\n    try {\n      let completedItem;\n\n      if (isPromise(item)) {\n        completedItem = item.then((resolved) =>\n          valueCompleter(\n            exeContext,\n            fieldContext,\n            info,\n            itemPath,\n            resolved,\n            responseNode,\n          ),\n        );\n      } else {\n        completedItem = valueCompleter(\n          exeContext,\n          fieldContext,\n          info,\n          itemPath,\n          item,\n          responseNode,\n        );\n      }\n\n      completedResults[index] = completedItem;\n\n      if (!isPromise(completedItem)) {\n        return;\n      } // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n\n      const promise = completedItem\n        .then(undefined, (rawError) =>\n          this.handleRawError(\n            rawError,\n            fieldContext.fieldNodes,\n            itemPath,\n            itemType,\n            responseNode.errors,\n          ),\n        )\n        .then((resolved) => {\n          completedResults[index] = resolved;\n        });\n      promises.push(promise);\n    } catch (rawError) {\n      completedResults[index] = this.handleRawError(\n        rawError,\n        fieldContext.fieldNodes,\n        itemPath,\n        itemType,\n        responseNode.errors,\n      );\n    }\n  }\n  /**\n   * Complete a Scalar or Enum by serializing to a valid value, returning\n   * null if serialization is not possible.\n   */\n\n  completeLeafValue(returnType, result) {\n    const serializedResult = returnType.serialize(result);\n\n    if (serializedResult == null) {\n      throw new Error(\n        `Expected \\`${inspect(returnType)}.serialize(${inspect(\n          result,\n        )})\\` to ` +\n          `return non-nullable value, returned: ${inspect(serializedResult)}`,\n      );\n    }\n\n    return serializedResult;\n  }\n  /**\n   * Complete a value of an abstract type by determining the runtime object type\n   * of that value, then complete the value for that type.\n   */\n\n  completeAbstractValue(\n    exeContext,\n    returnType,\n    fieldContext,\n    info,\n    path,\n    result,\n    responseNode,\n  ) {\n    var _returnType$resolveTy;\n\n    const resolveTypeFn =\n      (_returnType$resolveTy = returnType.resolveType) !== null &&\n      _returnType$resolveTy !== void 0\n        ? _returnType$resolveTy\n        : exeContext.typeResolver;\n    const contextValue = exeContext.contextValue;\n    const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n    if (isPromise(runtimeType)) {\n      return runtimeType.then((resolvedRuntimeType) =>\n        this.completeObjectValue(\n          exeContext,\n          this.ensureValidRuntimeType(\n            resolvedRuntimeType,\n            returnType,\n            fieldContext,\n            result,\n          ),\n          fieldContext,\n          info,\n          path,\n          result,\n          responseNode,\n        ),\n      );\n    }\n\n    return this.completeObjectValue(\n      exeContext,\n      this.ensureValidRuntimeType(\n        runtimeType,\n        returnType,\n        fieldContext,\n        result,\n      ),\n      fieldContext,\n      info,\n      path,\n      result,\n      responseNode,\n    );\n  }\n\n  ensureValidRuntimeType(runtimeTypeOrName, returnType, fieldContext, result) {\n    if (runtimeTypeOrName == null) {\n      throw new GraphQLError(\n        `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${fieldContext.parentType.name}.${fieldContext.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`,\n        fieldContext.fieldNodes,\n      );\n    }\n\n    const runtimeTypeName =\n      typeof runtimeTypeOrName === 'object' &&\n      this._executorSchema.isNamedType(runtimeTypeOrName)\n        ? runtimeTypeOrName.name\n        : runtimeTypeOrName;\n\n    if (typeof runtimeTypeName !== 'string') {\n      throw new GraphQLError(\n        `Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${fieldContext.parentType.name}.${fieldContext.fieldName}\" with ` +\n          `value ${inspect(result)}, received \"${inspect(runtimeTypeName)}\".`,\n      );\n    }\n\n    const runtimeType = this._executorSchema.getNamedType(runtimeTypeName);\n\n    if (runtimeType == null) {\n      throw new GraphQLError(\n        `Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`,\n        fieldContext.fieldNodes,\n      );\n    }\n\n    if (!this._executorSchema.isObjectType(runtimeType)) {\n      throw new GraphQLError(\n        `Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`,\n        fieldContext.fieldNodes,\n      );\n    }\n\n    if (!this._executorSchema.isSubType(returnType, runtimeType)) {\n      throw new GraphQLError(\n        `Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`,\n        fieldContext.fieldNodes,\n      );\n    }\n\n    return runtimeType;\n  }\n  /**\n   * Complete an Object value by executing all sub-selections.\n   */\n\n  completeObjectValue(\n    exeContext,\n    returnType,\n    fieldContext,\n    info,\n    path,\n    result,\n    responseNode,\n  ) {\n    // If there is an isTypeOf predicate function, call it with the\n    // current result. If isTypeOf returns false, then raise an error rather\n    // than continuing execution.\n    if (returnType.isTypeOf) {\n      const isTypeOf = returnType.isTypeOf(\n        result,\n        exeContext.contextValue,\n        info,\n      );\n\n      if (isPromise(isTypeOf)) {\n        return isTypeOf.then((resolvedIsTypeOf) => {\n          if (!resolvedIsTypeOf) {\n            throw this.invalidReturnTypeError(\n              returnType,\n              result,\n              fieldContext.fieldNodes,\n            );\n          }\n\n          return this.collectAndExecuteSubfields(\n            exeContext,\n            returnType,\n            fieldContext,\n            path,\n            result,\n            responseNode,\n          );\n        });\n      }\n\n      if (!isTypeOf) {\n        throw this.invalidReturnTypeError(\n          returnType,\n          result,\n          fieldContext.fieldNodes,\n        );\n      }\n    }\n\n    return this.collectAndExecuteSubfields(\n      exeContext,\n      returnType,\n      fieldContext,\n      path,\n      result,\n      responseNode,\n    );\n  }\n\n  invalidReturnTypeError(returnType, result, fieldNodes) {\n    return new GraphQLError(\n      `Expected value of type \"${returnType.name}\" but got: ${inspect(\n        result,\n      )}.`,\n      fieldNodes,\n    );\n  }\n\n  collectAndExecuteSubfields(\n    exeContext,\n    returnType,\n    fieldContext,\n    path,\n    result,\n    responseNode,\n  ) {\n    const { subFieldCollector } = exeContext; // Collect sub-fields to execute to complete this value.\n\n    const { fields: subFieldNodes, patches: subPatches } = subFieldCollector(\n      returnType,\n      fieldContext.fieldNodes,\n    );\n    const subFields = this.executeFields(\n      exeContext,\n      returnType,\n      result,\n      path,\n      subFieldNodes,\n      responseNode,\n    );\n    this.addPatches(\n      exeContext,\n      subPatches,\n      returnType,\n      result,\n      path,\n      responseNode,\n    );\n    return subFields;\n  }\n  /**\n   * This method looks up the field on the given type definition.\n   * It has special casing for the three introspection fields,\n   * __schema, __type and __typename. __typename is special because\n   * it can always be queried as a field, even in situations where no\n   * other fields are allowed, like on a Union. __schema and __type\n   * could get automatically added to the query type, but that would\n   * require mutating type definitions, which would cause issues.\n   *\n   * Returns: the field definition and a class for constructing the info\n   * argument for field resolvers.\n   */\n\n  _getFieldDef(fieldName, parentType) {\n    const fieldDef = parentType.getFields()[fieldName];\n\n    if (fieldDef) {\n      return fieldDef;\n    }\n\n    if (\n      fieldName === SchemaMetaFieldDef.name &&\n      this._executorSchema.getRootType('query') === parentType\n    ) {\n      return SchemaMetaFieldDef;\n    } else if (\n      fieldName === TypeMetaFieldDef.name &&\n      this._executorSchema.getRootType('query') === parentType\n    ) {\n      return TypeMetaFieldDef;\n    } else if (\n      fieldName === DirectiveMetaFieldDef.name &&\n      this._executorSchema.getRootType('query') === parentType\n    ) {\n      return DirectiveMetaFieldDef;\n    } else if (fieldName === TypeNameMetaFieldDef.name) {\n      return TypeNameMetaFieldDef;\n    }\n  }\n\n  _getFieldContext(parentType, fieldNodes) {\n    const initialFieldNode = fieldNodes[0];\n    const fieldName = initialFieldNode.name.value;\n\n    const fieldDef = this._getFieldDef(fieldName, parentType);\n\n    if (!fieldDef) {\n      return;\n    }\n\n    return {\n      fieldDef,\n      initialFieldNode,\n      fieldName: fieldDef.name,\n      fieldNodes,\n      returnType: fieldDef.type,\n      parentType,\n    };\n  }\n  /**\n   * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n   *\n   * Returns a Promise which resolves to either an AsyncIterator (if successful)\n   * or an ExecutionResult (error). The promise will be rejected if the schema or\n   * other arguments to this function are invalid, or if the resolved event stream\n   * is not an async iterable.\n   *\n   * If the client-provided arguments to this function do not result in a\n   * compliant subscription, a GraphQL Response (ExecutionResult) with\n   * descriptive errors and no data will be returned.\n   *\n   * If the source stream could not be created due to faulty subscription\n   * resolver logic or underlying systems, the promise will resolve to a single\n   * ExecutionResult containing `errors` and no `data`.\n   *\n   * If the operation succeeded, the promise resolves to an AsyncIterator, which\n   * yields a stream of ExecutionResults representing the response stream.\n   */\n\n  async executeSubscriptionImpl(exeContext) {\n    return this.executeOperationImpl(\n      exeContext,\n      this.executeRootSubscriptionFields.bind(this),\n      this.buildSubscribeResponse.bind(this),\n    );\n  }\n  /**\n   * Implements the \"Executing selection sets\" section of the spec\n   * for root subscription fields.\n   */\n\n  async executeRootSubscriptionFields(\n    exeContext,\n    parentType,\n    sourceValue,\n    path,\n    fields,\n    responseNode,\n  ) {\n    // TODO: consider allowing multiple root subscription fields\n    const [responseName, fieldNodes] = [...fields.entries()][0];\n    const fieldPath = addPath(path, responseName, parentType.name);\n    return this.executeRootSubscriptionField(\n      exeContext,\n      parentType,\n      sourceValue,\n      fieldNodes,\n      fieldPath,\n      responseNode,\n    );\n  }\n\n  buildCreateSourceEventStreamResponse(exeContext, eventStream) {\n    const { rootResponseNode } = exeContext;\n    const errors = rootResponseNode.errors;\n\n    if (errors.length) {\n      return {\n        errors,\n      };\n    }\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${inspect(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  }\n\n  buildSubscribeResponse(exeContext, _eventStream) {\n    const eventStream = this.buildCreateSourceEventStreamResponse(\n      exeContext,\n      _eventStream,\n    );\n\n    if (!isAsyncIterable(eventStream)) {\n      return eventStream;\n    } // For each payload yielded from a subscription, map it over the normal\n    // GraphQL `execute` function, with `payload` as the rootValue.\n    // This implements the \"MapSourceToResponseEvent\" algorithm described in\n    // the GraphQL specification. The `execute` function provides the\n    // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n    // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n    const mapSourceToResponse = (payload) => {\n      const perPayloadExecutionContext = this.buildPerPayloadExecutionContext(\n        exeContext,\n        payload,\n      );\n      return this.executeQueryImpl(perPayloadExecutionContext);\n    }; // Map every source value to a ExecutionResult value as described above.\n\n    return flattenAsyncIterable(\n      mapAsyncIterable(eventStream, mapSourceToResponse),\n    );\n  }\n\n  async createSourceEventStreamImpl(exeContext) {\n    return this.executeOperationImpl(\n      exeContext,\n      this.executeRootSubscriptionFields.bind(this),\n      this.buildCreateSourceEventStreamResponse.bind(this),\n    );\n  }\n\n  async executeRootSubscriptionField(\n    exeContext,\n    parentType,\n    sourceValue,\n    fieldNodes,\n    fieldPath,\n    responseNode,\n  ) {\n    const fieldContext = this.getFieldContext(parentType, fieldNodes);\n\n    if (!fieldContext) {\n      const fieldName = fieldNodes[0].name.value;\n      responseNode.errors.push(\n        new GraphQLError(\n          `The subscription field \"${fieldName}\" is not defined.`,\n          fieldNodes,\n        ),\n      );\n      return null;\n    }\n\n    const info = this.buildResolveInfo(exeContext, fieldContext, fieldPath);\n\n    try {\n      const eventStream = await exeContext.resolveField(\n        exeContext,\n        fieldContext,\n        sourceValue,\n        info,\n      );\n\n      if (eventStream instanceof Error) {\n        throw eventStream;\n      }\n\n      return eventStream;\n    } catch (rawError) {\n      responseNode.errors.push(\n        this.toLocatedError(rawError, fieldNodes, fieldPath),\n      );\n      return null;\n    }\n  }\n\n  addPatches(\n    exeContext,\n    patches,\n    parentType,\n    source,\n    path,\n    parentResponseNode,\n  ) {\n    const { state, publisher } = exeContext;\n\n    for (const patch of patches) {\n      state.pendingPushes++;\n      const { label, fields: patchFields } = patch;\n      const errors = [];\n      const responseNode = {\n        errors,\n      };\n      const responseContext = {\n        responseNodes: [responseNode],\n        parentResponseNode,\n      };\n      Promise.resolve(source)\n        .then(() =>\n          this.executeFields(\n            exeContext,\n            parentType,\n            source,\n            path,\n            patchFields,\n            responseNode,\n          ),\n        )\n        .then(\n          (data) =>\n            publisher.queue(\n              responseContext.responseNodes,\n              {\n                responseContext,\n                data,\n                path,\n                label,\n              },\n              responseContext.parentResponseNode,\n            ),\n          (error) => {\n            // executeFields will never throw a raw error\n            errors.push(error);\n            publisher.queue(\n              responseContext.responseNodes,\n              {\n                responseContext,\n                data: null,\n                path,\n                label,\n              },\n              responseContext.parentResponseNode,\n            );\n          },\n        );\n    }\n  }\n\n  addIteratorValue(\n    initialIndex,\n    iterator,\n    exeContext,\n    itemType,\n    fieldContext,\n    info,\n    valueCompleter,\n    streamContext,\n  ) {\n    let index = initialIndex;\n    let iteration = iterator.next();\n\n    while (!iteration.done) {\n      this.addValue(\n        iteration.value,\n        exeContext,\n        itemType,\n        fieldContext,\n        info,\n        valueCompleter,\n        index,\n        streamContext,\n      );\n      index++;\n      iteration = iterator.next();\n    }\n\n    return index;\n  }\n\n  async addAsyncIteratorValue(\n    initialIndex,\n    iterator,\n    exeContext,\n    itemType,\n    fieldContext,\n    info,\n    valueCompleter,\n    streamContext,\n  ) {\n    exeContext.state.iterators.add(iterator);\n    let index = initialIndex;\n\n    try {\n      let iteration = await iterator.next();\n\n      while (!iteration.done) {\n        this.addValue(\n          iteration.value,\n          exeContext,\n          itemType,\n          fieldContext,\n          info,\n          valueCompleter,\n          index,\n          streamContext,\n        );\n        index++; // eslint-disable-next-line no-await-in-loop\n\n        iteration = await iterator.next();\n      }\n\n      streamContext.bundler.setTotal(index);\n    } catch (rawError) {\n      exeContext.state.pendingStreamResults++;\n      this.handleRawStreamError(\n        fieldContext,\n        itemType,\n        streamContext,\n        rawError,\n        index,\n      );\n      streamContext.bundler.setTotal(index + 1);\n    }\n\n    this.closeAsyncIterator(exeContext, iterator);\n  }\n\n  handleRawStreamError(fieldContext, itemType, streamContext, rawError, index) {\n    const { path } = streamContext;\n    const itemPath = addPath(path, index, undefined);\n    const error = this.toLocatedError(\n      rawError,\n      fieldContext.fieldNodes,\n      itemPath,\n    );\n\n    if (this._executorSchema.isNonNullType(itemType)) {\n      streamContext.bundler.queueError(index, {\n        errors: [error],\n      });\n    } else {\n      streamContext.bundler.queueData(index, {\n        responseNode: {\n          errors: [error],\n        },\n        data: null,\n      });\n    }\n  }\n\n  addValue(\n    value,\n    exeContext,\n    itemType,\n    fieldContext,\n    info,\n    valueCompleter,\n    index,\n    streamContext,\n  ) {\n    const itemPath = addPath(streamContext.path, index, undefined);\n    const responseNode = {\n      errors: [],\n    };\n    exeContext.state.pendingStreamResults++;\n    Promise.resolve(value)\n      .then((resolved) =>\n        valueCompleter(\n          exeContext,\n          fieldContext,\n          info,\n          itemPath,\n          resolved,\n          responseNode,\n        ),\n      ) // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      .then(\n        (data) =>\n          streamContext.bundler.queueData(index, {\n            responseNode,\n            data,\n          }),\n        (rawError) =>\n          this.handleRawStreamError(\n            fieldContext,\n            itemType,\n            streamContext,\n            rawError,\n            index,\n          ),\n      );\n  }\n\n  closeAsyncIterator(exeContext, iterator) {\n    const { state, publisher } = exeContext;\n    state.iterators.delete(iterator);\n\n    if (!this.hasNext(exeContext.state)) {\n      publisher.stop({\n        hasNext: false,\n      });\n    }\n  }\n\n  hasNext(state) {\n    return (\n      state.pendingPushes > 0 ||\n      state.pendingStreamResults > 0 ||\n      state.iterators.size > 0\n    );\n  }\n  /**\n   * Given an operation, collects all of the root fields and returns them.\n   *\n   * CollectFields requires the \"runtime type\" of an object. For a field that\n   * returns an Interface or Union type, the \"runtime type\" will be the actual\n   * object type returned by that field.\n   */\n\n  collectFieldsImpl(\n    fragments,\n    variableValues,\n    getDeferValues,\n    runtimeType,\n    selectionSet,\n    fields,\n    patches,\n    visitedFragmentNames,\n  ) {\n    for (const selection of selectionSet.selections) {\n      switch (selection.kind) {\n        case Kind.FIELD: {\n          if (!this.shouldIncludeNode(variableValues, selection)) {\n            continue;\n          }\n\n          const name = this.getFieldEntryKey(selection);\n          const fieldList = fields.get(name);\n\n          if (fieldList !== undefined) {\n            fields.set(name, this.updateFieldList(fieldList, selection));\n          } else {\n            fields.set(name, this.createFieldList(selection));\n          }\n\n          break;\n        }\n\n        case Kind.INLINE_FRAGMENT: {\n          if (\n            !this.shouldIncludeNode(variableValues, selection) ||\n            !this.doesFragmentConditionMatch(selection, runtimeType)\n          ) {\n            continue;\n          }\n\n          const defer = getDeferValues(variableValues, selection);\n\n          if (defer) {\n            const patchFields = new Map();\n            this.collectFieldsImpl(\n              fragments,\n              variableValues,\n              getDeferValues,\n              runtimeType,\n              selection.selectionSet,\n              patchFields,\n              patches,\n              visitedFragmentNames,\n            );\n            patches.push({\n              label: defer.label,\n              fields: patchFields,\n            });\n          } else {\n            this.collectFieldsImpl(\n              fragments,\n              variableValues,\n              getDeferValues,\n              runtimeType,\n              selection.selectionSet,\n              fields,\n              patches,\n              visitedFragmentNames,\n            );\n          }\n\n          break;\n        }\n\n        case Kind.FRAGMENT_SPREAD: {\n          const fragName = selection.name.value;\n\n          if (!this.shouldIncludeNode(variableValues, selection)) {\n            continue;\n          }\n\n          const defer = getDeferValues(variableValues, selection);\n\n          if (visitedFragmentNames.has(fragName) && !defer) {\n            continue;\n          }\n\n          const fragment = fragments[fragName];\n\n          if (\n            !fragment ||\n            !this.doesFragmentConditionMatch(fragment, runtimeType)\n          ) {\n            continue;\n          }\n\n          if (defer) {\n            const patchFields = new Map();\n            this.collectFieldsImpl(\n              fragments,\n              variableValues,\n              getDeferValues,\n              runtimeType,\n              fragment.selectionSet,\n              patchFields,\n              patches,\n              visitedFragmentNames,\n            );\n            patches.push({\n              label: defer.label,\n              fields: patchFields,\n            });\n          } else {\n            visitedFragmentNames.add(fragName);\n            this.collectFieldsImpl(\n              fragments,\n              variableValues,\n              getDeferValues,\n              runtimeType,\n              fragment.selectionSet,\n              fields,\n              patches,\n              visitedFragmentNames,\n            );\n          }\n\n          break;\n        }\n      }\n    }\n  }\n  /**\n   * Returns an object containing the `@defer` arguments if a field should be\n   * deferred based on the experimental flag, defer directive present and\n   * not disabled by the \"if\" argument.\n   */\n\n  getDeferValues(variableValues, node) {\n    const defer = getDirectiveValues(\n      this._executorSchema,\n      GraphQLDeferDirective,\n      node,\n      variableValues,\n    );\n\n    if (!defer) {\n      return;\n    }\n\n    if (defer.if === false) {\n      return;\n    }\n\n    return {\n      label: typeof defer.label === 'string' ? defer.label : undefined,\n    };\n  }\n  /**\n   * Determines if a field should be included based on the `@include` and `@skip`\n   * directives, where `@skip` has higher precedence than `@include`.\n   */\n\n  shouldIncludeNode(variableValues, node) {\n    const skip = getDirectiveValues(\n      this._executorSchema,\n      GraphQLSkipDirective,\n      node,\n      variableValues,\n    );\n\n    if ((skip === null || skip === void 0 ? void 0 : skip.if) === true) {\n      return false;\n    }\n\n    const include = getDirectiveValues(\n      this._executorSchema,\n      GraphQLIncludeDirective,\n      node,\n      variableValues,\n    );\n\n    if (\n      (include === null || include === void 0 ? void 0 : include.if) === false\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Determines if a fragment is applicable to the given type.\n   */\n\n  doesFragmentConditionMatch(fragment, type) {\n    const typeConditionNode = fragment.typeCondition;\n\n    if (!typeConditionNode) {\n      return true;\n    }\n\n    const conditionalType = this._executorSchema.getType(typeConditionNode);\n\n    if (conditionalType === type) {\n      return true;\n    }\n\n    if (\n      conditionalType &&\n      this._executorSchema.isAbstractType(conditionalType)\n    ) {\n      return this._executorSchema.isSubType(conditionalType, type);\n    }\n\n    return false;\n  }\n  /**\n   * Implements the logic to compute the key of a given field's entry\n   */\n\n  getFieldEntryKey(node) {\n    return node.alias ? node.alias.value : node.name.value;\n  }\n}\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport const defaultFieldResolver = function (\n  source,\n  args,\n  contextValue,\n  info,\n) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    const property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\nexport const defaultTypeResolver = function (\n  value,\n  contextValue,\n  info,\n  abstractType,\n) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n  const possibleTypes = info.executorSchema.getPossibleTypes(abstractType);\n  const promisedIsTypeOfResults = [];\n\n  for (let i = 0; i < possibleTypes.length; i++) {\n    const type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type.name;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then((isTypeOfResults) => {\n      for (let i = 0; i < isTypeOfResults.length; i++) {\n        if (isTypeOfResults[i]) {\n          return possibleTypes[i].name;\n        }\n      }\n    });\n  }\n};\n", "/**\n * Memoizes the provided two-argument function.\n */\nexport function memoize1and1(fn) {\n  let cache0;\n  return function memoized(a1, a2) {\n    if (cache0 === undefined) {\n      cache0 = new WeakMap();\n    }\n\n    let cache1 = cache0.get(a1);\n\n    if (cache1 === undefined) {\n      cache1 = new Map();\n      cache0.set(a1, cache1);\n    }\n\n    let fnResult = cache1.get(a2);\n\n    if (fnResult === undefined) {\n      fnResult = fn(a1, a2);\n      cache1.set(a2, fnResult);\n    }\n\n    return fnResult;\n  };\n}\n", "/**\n * Memoizes the provided two-argument function.\n */\nexport function memoize2(fn) {\n  let cache0;\n  return function memoized(a1, a2) {\n    if (cache0 === undefined) {\n      cache0 = new WeakMap();\n    }\n\n    let cache1 = cache0.get(a1);\n\n    if (cache1 === undefined) {\n      cache1 = new WeakMap();\n      cache0.set(a1, cache1);\n    }\n\n    let fnResult = cache1.get(a2);\n\n    if (fnResult === undefined) {\n      fnResult = fn(a1, a2);\n      cache1.set(a2, fnResult);\n    }\n\n    return fnResult;\n  };\n}\n", "export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n", "/**\n * Returns true if the value acts like a Promise, i.e. has a \"then\" function,\n * otherwise returns false.\n */\nexport function isPromise(value) {\n  return (\n    typeof (value === null || value === void 0 ? void 0 : value.then) ===\n    'function'\n  );\n}\n", "/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n", "import { isPromise } from './isPromise.mjs';\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\n\nexport function promiseReduce(values, callbackFn, initialValue) {\n  let accumulator = initialValue;\n\n  for (const value of values) {\n    accumulator = isPromise(accumulator)\n      ? accumulator.then((resolved) => callbackFn(resolved, value))\n      : callbackFn(accumulator, value);\n  }\n\n  return accumulator;\n}\n", "/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * implementing a `Symbol.asyncIterator` method.\n */\nexport function isAsyncIterable(maybeAsyncIterable) {\n  return (\n    typeof (maybeAsyncIterable === null || maybeAsyncIterable === void 0\n      ? void 0\n      : maybeAsyncIterable[Symbol.asyncIterator]) === 'function'\n  );\n}\n", "/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and implements the Iterator protocol.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if\n * an object should be iterated-over e.g. Array, Map, Set, Int8Array,\n * TypedArray, etc. but excludes string literals.\n *\n * @example\n * ```ts\n * isIterableObject([ 1, 2, 3 ]) // true\n * isIterableObject(new Map()) // true\n * isIterableObject('ABC') // false\n * isIterableObject({ key: 'value' }) // false\n * isIterableObject({ length: 1, 0: 'Alpha' }) // false\n * ```\n */\nexport function isIterableObject(maybeIterable) {\n  return (\n    typeof maybeIterable === 'object' &&\n    typeof (maybeIterable === null || maybeIterable === void 0\n      ? void 0\n      : maybeIterable[Symbol.iterator]) === 'function'\n  );\n}\n", "export function resolveAfterAll(result, promises) {\n  return new Promise((resolve, reject) => {\n    let rejected = false;\n    let reason;\n    let numPromises = promises.length;\n\n    const onFulfilled = () => {\n      numPromises--;\n\n      if (!numPromises) {\n        if (rejected) {\n          reject(reason);\n        }\n\n        resolve(result);\n      }\n    };\n\n    const onRejected = (_reason) => {\n      if (!rejected) {\n        rejected = true;\n        reason = _reason;\n      }\n\n      numPromises--;\n\n      if (!numPromises) {\n        reject(reason);\n      }\n    };\n\n    for (const promise of promises) {\n      promise.then(onFulfilled, onRejected);\n    }\n  });\n}\n", "import { inspect } from './inspect.mjs';\n/**\n * Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n */\n\nexport function toError(thrownValue) {\n  return thrownValue instanceof Error\n    ? thrownValue\n    : new NonErrorThrown(thrownValue);\n}\n\nclass NonErrorThrown extends Error {\n  constructor(thrownValue) {\n    super('Unexpected error value: ' + inspect(thrownValue));\n    this.name = 'NonErrorThrown';\n    this.thrownValue = thrownValue;\n  }\n}\n", "import { GraphQLError, Kind, print } from 'graphql';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { coerceInputValue } from '../utilities/coerceInputValue.mjs';\nimport { valueFromAST } from '../utilities/valueFromAST.mjs';\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\nexport function getVariableValues(\n  executorSchema,\n  varDefNodes,\n  inputs,\n  options,\n) {\n  const errors = [];\n  const maxErrors =\n    options === null || options === void 0 ? void 0 : options.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(\n      executorSchema,\n      varDefNodes,\n      inputs,\n      (error) => {\n        if (maxErrors != null && errors.length >= maxErrors) {\n          throw new GraphQLError(\n            'Too many errors processing variables, error limit reached. Execution aborted.',\n          );\n        }\n\n        errors.push(error);\n      },\n    );\n\n    if (errors.length === 0) {\n      return {\n        coerced,\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors,\n  };\n}\n\nfunction coerceVariableValues(executorSchema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = executorSchema.getType(varDefNode.type);\n\n    if (!varType || !executorSchema.isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n          varDefNode.type,\n        ),\n      );\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(\n          executorSchema,\n          varDefNode.defaultValue,\n          varType,\n        );\n      } else if (executorSchema.isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(\n          new GraphQLError(\n            `Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`,\n            varDefNode,\n          ),\n        );\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && executorSchema.isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(\n        new GraphQLError(\n          `Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`,\n          varDefNode,\n        ),\n      );\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(\n      executorSchema,\n      value,\n      varType,\n      (path, invalidValue, error) => {\n        let prefix =\n          `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n        if (path.length > 0) {\n          prefix += ` at \"${varName}${printPathArray(path)}\"`;\n        }\n\n        onError(\n          new GraphQLError(\n            prefix + '; ' + error.message,\n            varDefNode,\n            undefined,\n            undefined,\n            undefined,\n            error.originalError,\n          ),\n        );\n      },\n    );\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\n\nexport function getArgumentValues(executorSchema, def, node, variableValues) {\n  var _node$arguments;\n\n  const coercedValues = {}; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n\n  const argumentNodes =\n    (_node$arguments = node.arguments) !== null && _node$arguments !== void 0\n      ? _node$arguments\n      : [];\n  const argNodeMap = keyMap(argumentNodes, (arg) => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (executorSchema.isNonNullType(argType)) {\n        throw new GraphQLError(\n          `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n            'was not provided.',\n          node,\n        );\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (\n        variableValues == null ||\n        !hasOwnProperty(variableValues, variableName)\n      ) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (executorSchema.isNonNullType(argType)) {\n          throw new GraphQLError(\n            `Argument \"${name}\" of required type \"${inspect(argType)}\" ` +\n              `was provided the variable \"$${variableName}\" which was not provided a runtime value.`,\n            valueNode,\n          );\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && executorSchema.isNonNullType(argType)) {\n      throw new GraphQLError(\n        `Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` +\n          'must not be null.',\n        valueNode,\n      );\n    }\n\n    const coercedValue = valueFromAST(\n      executorSchema,\n      valueNode,\n      argType,\n      variableValues,\n    );\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(\n        `Argument \"${name}\" has invalid value ${print(valueNode)}.`,\n        valueNode,\n      );\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(\n  executorSchema,\n  directiveDef,\n  node,\n  variableValues,\n) {\n  var _node$directives;\n\n  const directiveNode =\n    (_node$directives = node.directives) === null || _node$directives === void 0\n      ? void 0\n      : _node$directives.find(\n          (directive) => directive.name.value === directiveDef.name,\n        );\n\n  if (directiveNode) {\n    return getArgumentValues(\n      executorSchema,\n      directiveDef,\n      directiveNode,\n      variableValues,\n    );\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n * ```ts\n * const phoneBook = [\n *   { name: 'Jon', num: '555-1234' },\n *   { name: 'Jenny', num: '867-5309' }\n * ]\n *\n * const entriesByName = keyMap(\n *   phoneBook,\n *   entry => entry.name\n * )\n *\n * // {\n * //   Jon: { name: 'Jon', num: '555-1234' },\n * //   Jenny: { name: 'Jenny', num: '867-5309' }\n * // }\n *\n * const jennyEntry = entriesByName['Jenny']\n *\n * // { name: 'Jenny', num: '857-6309' }\n * ```\n */\nexport function keyMap(list, keyFn) {\n  const result = Object.create(null);\n\n  for (const item of list) {\n    result[keyFn(item)] = item;\n  }\n\n  return result;\n}\n", "/**\n * Build a string describing the path.\n */\nexport function printPathArray(path) {\n  return path\n    .map((key) =>\n      typeof key === 'number' ? '[' + key.toString() + ']' : '.' + key,\n    )\n    .join('');\n}\n", "import { GraphQLError } from 'graphql';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isGraphQLError } from '../error/isGraphQLError.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(\n  executorSchema,\n  inputValue,\n  type,\n  onError = defaultOnError,\n) {\n  return coerceInputValueImpl(\n    executorSchema,\n    inputValue,\n    type,\n    onError,\n    undefined,\n  );\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(executorSchema, inputValue, type, onError, path) {\n  if (executorSchema.isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(\n        executorSchema,\n        inputValue,\n        type.ofType,\n        onError,\n        path,\n      );\n    }\n\n    onError(\n      pathToArray(path),\n      inputValue,\n      new GraphQLError(\n        `Expected non-nullable type \"${inspect(type)}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (executorSchema.isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(\n          executorSchema,\n          itemValue,\n          itemType,\n          onError,\n          itemPath,\n        );\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [\n      coerceInputValueImpl(executorSchema, inputValue, itemType, onError, path),\n    ];\n  }\n\n  if (executorSchema.isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\" to be an object.`),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (executorSchema.isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(\n            pathToArray(path),\n            inputValue,\n            new GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        executorSchema,\n        fieldValue,\n        field.type,\n        onError,\n        addPath(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              didYouMean(suggestions),\n          ),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (executorSchema.isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      // TODO: add test\n\n      /* c8 ignore next 2 */\n      if (isGraphQLError(error)) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Expected type \"${type.name}\". ` + error.message,\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            error,\n          ),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n", "const MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\nexport function didYouMean(firstArg, secondArg) {\n  const [subMessage, suggestionsArg] = secondArg\n    ? [firstArg, secondArg]\n    : [undefined, firstArg];\n  let message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  const suggestions = suggestionsArg.map((x) => `\"${x}\"`);\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  const lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}\n", "import { naturalCompare } from './naturalCompare.mjs';\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\n\nexport function suggestionList(input, options) {\n  const optionsByDistance = Object.create(null);\n  const lexicalDistance = new LexicalDistance(input);\n  const threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (const option of options) {\n    const distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort((a, b) => {\n    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0 ? distanceDiff : naturalCompare(a, b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nclass LexicalDistance {\n  constructor(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n      new Array(input.length + 1).fill(0),\n    ];\n  }\n\n  measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    let a = stringToArray(optionLowerCase);\n    let b = this._inputArray;\n\n    if (a.length < b.length) {\n      const tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    const rows = this._rows;\n\n    for (let j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (let i = 1; i <= aLength; i++) {\n      const upRow = rows[(i - 1) % 3];\n      const currentRow = rows[i % 3];\n      let smallestCell = (currentRow[0] = i);\n\n      for (let j = 1; j <= bLength; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        let currentCell = Math.min(\n          upRow[j] + 1, // delete\n          currentRow[j - 1] + 1, // insert\n          upRow[j - 1] + cost, // substitute\n        );\n\n        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n          // transposition\n          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    const distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  }\n}\n\nfunction stringToArray(str) {\n  const strLength = str.length;\n  const array = new Array(strLength);\n\n  for (let i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n", "/**\n * Returns a number indicating whether a reference string comes before, or after,\n * or is the same as the given string in natural sort order.\n *\n * See: https://en.wikipedia.org/wiki/Natural_sort_order\n *\n */\nexport function naturalCompare(aStr, bStr) {\n  let aIndex = 0;\n  let bIndex = 0;\n\n  while (aIndex < aStr.length && bIndex < bStr.length) {\n    let aChar = aStr.charCodeAt(aIndex);\n    let bChar = bStr.charCodeAt(bIndex);\n\n    if (isDigit(aChar) && isDigit(bChar)) {\n      let aNum = 0;\n\n      do {\n        ++aIndex;\n        aNum = aNum * 10 + aChar - DIGIT_0;\n        aChar = aStr.charCodeAt(aIndex);\n      } while (isDigit(aChar) && aNum > 0);\n\n      let bNum = 0;\n\n      do {\n        ++bIndex;\n        bNum = bNum * 10 + bChar - DIGIT_0;\n        bChar = bStr.charCodeAt(bIndex);\n      } while (isDigit(bChar) && bNum > 0);\n\n      if (aNum < bNum) {\n        return -1;\n      }\n\n      if (aNum > bNum) {\n        return 1;\n      }\n    } else {\n      if (aChar < bChar) {\n        return -1;\n      }\n\n      if (aChar > bChar) {\n        return 1;\n      }\n\n      ++aIndex;\n      ++bIndex;\n    }\n  }\n\n  return aStr.length - bStr.length;\n}\nconst DIGIT_0 = 48;\nconst DIGIT_9 = 57;\n\nfunction isDigit(code) {\n  return !isNaN(code) && DIGIT_0 <= code && code <= DIGIT_9;\n}\n", "export function isGraphQLError(error) {\n  return error.name === 'GraphQLError';\n}\n", "import { Kind } from 'graphql';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Unknown       |\n * | NullValue            | null          |\n *\n */\nexport function valueFromAST(executorSchema, valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && executorSchema.isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n    return variableValue;\n  }\n\n  if (executorSchema.isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(executorSchema, valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (executorSchema.isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (executorSchema.isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(\n            executorSchema,\n            itemNode,\n            itemType,\n            variables,\n          );\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(\n      executorSchema,\n      valueNode,\n      itemType,\n      variables,\n    );\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (executorSchema.isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, (field) => field.name.value);\n\n    for (const field of Object.values(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (executorSchema.isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(\n        executorSchema,\n        fieldNode.value,\n        field.type,\n        variables,\n      );\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  }\n\n  if (executorSchema.isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible input types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return (\n    valueNode.kind === Kind.VARIABLE &&\n    (variables == null || variables[valueNode.name.value] === undefined)\n  );\n}\n", "import { Repeater } from '../jsutils/repeater.mjs';\n\n/**\n * @internal\n */\nexport class Publisher {\n  // This is safe because a promise executor within the constructor will assign this.\n  constructor({\n    payloadFromSource = (source) => source,\n    onReady,\n    hasNext = () => true,\n    onStop,\n  } = {}) {\n    this._payloadFromSource = payloadFromSource;\n    this._onReady = onReady;\n    this._hasNext = hasNext;\n    this._buffer = [];\n    this._stopped = false;\n    this._trigger = new Promise((resolve) => {\n      this._resolve = resolve;\n    });\n    this._pushed = new WeakMap();\n    this._pending = new WeakMap();\n    this._repeater = new Repeater(async (push, stop) => {\n      if (onStop) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        stop.then(onStop);\n      }\n\n      while (true) {\n        // eslint-disable-next-line no-await-in-loop\n        await this._trigger;\n\n        while (this._buffer.length) {\n          // this is safe because we have checked the length;\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const payload = this._buffer.shift(); // eslint-disable-next-line no-await-in-loop\n\n          await push(payload);\n        }\n\n        if (this._stopped) {\n          stop();\n          break;\n        }\n\n        this._trigger = new Promise((resolve) => {\n          this._resolve = resolve;\n        });\n      }\n    });\n  }\n\n  emit(keys, payload) {\n    for (const key of keys) {\n      this._pushed.set(key, true);\n    }\n\n    this._buffer.push(payload);\n\n    for (const key of keys) {\n      const dependents = this._pending.get(key);\n\n      if (dependents) {\n        this._pushMany(dependents);\n      }\n\n      this._pending.delete(key);\n    }\n\n    this._resolve();\n  }\n\n  stop(finalPayload) {\n    if (finalPayload !== undefined) {\n      this._buffer.push(finalPayload);\n    }\n\n    this._stopped = true;\n\n    this._resolve();\n  }\n\n  queue(keys, source, parentKey) {\n    if (this._pushed.get(parentKey)) {\n      this._pushOne({\n        keys,\n        source,\n      });\n\n      return;\n    }\n\n    const dependents = this._pending.get(parentKey);\n\n    if (dependents) {\n      dependents.push({\n        keys,\n        source,\n      });\n      return;\n    }\n\n    this._pending.set(parentKey, [\n      {\n        keys,\n        source,\n      },\n    ]);\n  }\n\n  _pushOne(context) {\n    const hasNext = this._pushOneImpl(context);\n\n    if (!hasNext) {\n      this.stop();\n    }\n  }\n\n  _pushOneImpl({ keys, source }) {\n    var _this$_onReady;\n\n    (_this$_onReady = this._onReady) === null || _this$_onReady === void 0\n      ? void 0\n      : _this$_onReady.call(this);\n\n    const hasNext = this._hasNext();\n\n    const payload = this._payloadFromSource(source, hasNext);\n\n    this.emit(keys, payload);\n    return hasNext;\n  }\n\n  _pushMany(contexts) {\n    let hasNext = false;\n\n    for (const context of contexts) {\n      hasNext = this._pushOneImpl(context);\n    }\n\n    if (!hasNext) {\n      this.stop();\n    }\n  }\n\n  subscribe() {\n    return this._repeater;\n  }\n}\n", "/**\n * Implementation from: https://github.com/repeaterjs/repeater\n */\n\n/**\n * An error subclass which is thrown when there are too many pending push or next operations on a single repeater.\n *\n * @internal\n */\nexport class RepeaterOverflowError extends Error {\n  constructor(message) {\n    super(message);\n    Object.defineProperty(this, 'name', {\n      value: 'RepeaterOverflowError',\n      enumerable: false,\n    });\n    Object.setPrototypeOf(this, this.constructor.prototype);\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n/** BUFFERS **/\n\n/** A special queue interface which allow multiple values to be pushed onto a repeater without having pushes wait or throw overflow errors, passed as the second argument to the repeater constructor. */\n\n/**\n * A buffer which allows you to push a set amount of values to the repeater without pushes waiting or throwing errors.\n *\n * @internal\n */\nexport class FixedBuffer {\n  // capacity\n  // queue\n  constructor(capacity) {\n    if (capacity < 0) {\n      throw new RangeError('Capacity may not be less than 0');\n    }\n\n    this._c = capacity;\n    this._q = [];\n  }\n\n  get empty() {\n    return this._q.length === 0;\n  }\n\n  get full() {\n    return this._q.length >= this._c;\n  }\n\n  add(value) {\n    if (this.full) {\n      throw new Error('Buffer full');\n    } else {\n      this._q.push(value);\n    }\n  }\n\n  remove() {\n    if (this.empty) {\n      throw new Error('Buffer empty');\n    }\n\n    return this._q.shift();\n  }\n} // TODO: Use a circular buffer here.\n\n/**\n * Sliding buffers allow you to push a set amount of values to the repeater without pushes waiting or throwing errors. If the number of values exceeds the capacity set in the constructor, the buffer will discard the earliest values added.\n *\n * @internal\n * */\n\nexport class SlidingBuffer {\n  // capacity\n  // queue\n  constructor(capacity) {\n    if (capacity < 1) {\n      throw new RangeError('Capacity may not be less than 1');\n    }\n\n    this._c = capacity;\n    this._q = [];\n  }\n\n  get empty() {\n    return this._q.length === 0;\n  }\n\n  get full() {\n    return false;\n  }\n\n  add(value) {\n    while (this._q.length >= this._c) {\n      this._q.shift();\n    }\n\n    this._q.push(value);\n  }\n\n  remove() {\n    if (this.empty) {\n      throw new Error('Buffer empty');\n    }\n\n    return this._q.shift();\n  }\n}\n/**\n * Dropping buffers allow you to push a set amount of values to the repeater without the push function waiting or throwing errors. If the number of values exceeds the capacity set in the constructor, the buffer will discard the latest values added.\n *\n * @internal\n * */\n\nexport class DroppingBuffer {\n  // capacity\n  // queue\n  constructor(capacity) {\n    if (capacity < 1) {\n      throw new RangeError('Capacity may not be less than 1');\n    }\n\n    this._c = capacity;\n    this._q = [];\n  }\n\n  get empty() {\n    return this._q.length === 0;\n  }\n\n  get full() {\n    return false;\n  }\n\n  add(value) {\n    if (this._q.length < this._c) {\n      this._q.push(value);\n    }\n  }\n\n  remove() {\n    if (this.empty) {\n      throw new Error('Buffer empty');\n    }\n\n    return this._q.shift();\n  }\n}\n/** Makes sure promise-likes don't cause unhandled rejections. */\n\nfunction swallow(value) {\n  if (value != null && typeof value.then === 'function') {\n    value.then(NOOP, NOOP);\n  }\n}\n/** TYPES **/\n\n/** The type of the first argument passed to the executor callback. */\n\n/** REPEATER STATES **/\n\n/** The following is an enumeration of all possible repeater states. These states are ordered, and a repeater may only advance to higher states. */\n\n/** The initial state of the repeater. */\nconst Initial = 0;\n/** Repeaters advance to this state the first time the next method is called on the repeater. */\n\nconst Started = 1;\n/** Repeaters advance to this state when the stop function is called. */\n\nconst Stopped = 2;\n/** Repeaters advance to this state when there are no values left to be pulled from the repeater. */\n\nconst Done = 3;\n/** Repeaters advance to this state if an error is thrown into the repeater. */\n\nconst Rejected = 4;\n/** The maximum number of push or next operations which may exist on a single repeater. */\n\nexport const MAX_QUEUE_LENGTH = 1024;\n\nconst NOOP = () => undefined;\n/** An interface containing the private data of repeaters, only accessible through a private WeakMap. */\n\n/** A helper function used to mimic the behavior of async generators where the final iteration is consumed. */\nfunction consumeExecution(r) {\n  const err = r.err;\n  const execution = Promise.resolve(r.execution).then((value) => {\n    if (err != null) {\n      throw err;\n    }\n\n    return value;\n  });\n  r.err = undefined;\n  r.execution = execution.then(\n    () => undefined,\n    () => undefined,\n  );\n  return r.pending === undefined ? execution : r.pending.then(() => execution);\n}\n/** A helper function for building iterations from values. Promises are unwrapped, so that iterations never have their value property set to a promise. */\n\nfunction createIteration(r, value) {\n  const done = r.state >= Done;\n  return Promise.resolve(value).then((resolvedValue) => {\n    if (!done && r.state >= Rejected) {\n      return consumeExecution(r).then((finalValue) => ({\n        value: finalValue,\n        done: true,\n      }));\n    }\n\n    return {\n      value: resolvedValue,\n      done,\n    };\n  });\n}\n/**\n * This function is bound and passed to the executor as the stop argument.\n *\n * Advances state to Stopped.\n */\n\nfunction stop(r, err) {\n  if (r.state >= Stopped) {\n    return;\n  }\n\n  r.state = Stopped;\n  r.onnext();\n  r.onstop();\n\n  if (r.err == null) {\n    r.err = err;\n  }\n\n  if (\n    r.pushes.length === 0 &&\n    (typeof r.buffer === 'undefined' || r.buffer.empty)\n  ) {\n    finish(r);\n  } else {\n    for (const p of r.pushes) {\n      p.resolve();\n    }\n  }\n}\n/**\n * The difference between stopping a repeater vs finishing a repeater is that stopping a repeater allows next to continue to drain values from the push queue and buffer, while finishing a repeater will clear all pending values and end iteration immediately. Once, a repeater is finished, all iterations will have the done property set to true.\n *\n * Advances state to Done.\n */\n\nfunction finish(r) {\n  if (r.state >= Done) {\n    return;\n  }\n\n  if (r.state < Stopped) {\n    stop(r);\n  }\n\n  r.state = Done;\n  r.buffer = undefined;\n\n  for (const next of r.nexts) {\n    const execution =\n      r.pending === undefined\n        ? consumeExecution(r)\n        : r.pending.then(() => consumeExecution(r));\n    next.resolve(createIteration(r, execution));\n  }\n\n  r.pushes = [];\n  r.nexts = [];\n}\n/**\n * Called when a promise passed to push rejects, or when a push call is unhandled.\n *\n * Advances state to Rejected.\n */\n\nfunction reject(r) {\n  if (r.state >= Rejected) {\n    return;\n  }\n\n  if (r.state < Done) {\n    finish(r);\n  }\n\n  r.state = Rejected;\n}\n/** This function is bound and passed to the executor as the push argument. */\n\nfunction push(r, value) {\n  swallow(value);\n\n  if (r.pushes.length >= MAX_QUEUE_LENGTH) {\n    throw new RepeaterOverflowError(\n      `No more than ${MAX_QUEUE_LENGTH} pending calls to push are allowed on a single repeater.`,\n    );\n  } else if (r.state >= Stopped) {\n    return Promise.resolve(undefined);\n  }\n\n  let valueP =\n    r.pending === undefined\n      ? Promise.resolve(value)\n      : r.pending.then(() => value);\n  valueP = valueP.catch((err) => {\n    if (r.state < Stopped) {\n      r.err = err;\n    }\n\n    reject(r);\n    return undefined; // void :(\n  });\n  let nextP;\n\n  if (r.nexts.length) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const next = r.nexts.shift();\n    next.resolve(createIteration(r, valueP));\n\n    if (r.nexts.length) {\n      nextP = Promise.resolve(r.nexts[0].value);\n    } else {\n      nextP = new Promise((resolve) => (r.onnext = resolve));\n    }\n  } else if (typeof r.buffer !== 'undefined' && !r.buffer.full) {\n    r.buffer.add(valueP);\n    nextP = Promise.resolve(undefined);\n  } else {\n    nextP = new Promise((resolve) =>\n      r.pushes.push({\n        resolve,\n        value: valueP,\n      }),\n    );\n  } // If an error is thrown into the repeater via the next or throw methods, we give the repeater a chance to handle this by rejecting the promise returned from push. If the push call is not immediately handled we throw the next iteration of the repeater.\n  // To check that the promise returned from push is floating, we modify the then and catch methods of the returned promise so that they flip the floating flag. The push function actually does not return a promise, because modern engines do not call the then and catch methods on native promises. By making next a plain old javascript object, we ensure that the then and catch methods will be called.\n\n  let floating = true;\n  const next = {};\n  const unhandled = nextP.catch((err) => {\n    if (floating) {\n      throw err;\n    }\n\n    return undefined; // void :(\n  });\n\n  next.then = (onfulfilled, onrejected) => {\n    floating = false;\n    return Promise.prototype.then.call(nextP, onfulfilled, onrejected);\n  };\n\n  next.catch = (onrejected) => {\n    floating = false;\n    return Promise.prototype.catch.call(nextP, onrejected);\n  };\n\n  next.finally = nextP.finally.bind(nextP);\n  r.pending = valueP\n    .then(() => unhandled)\n    .catch((err) => {\n      r.err = err;\n      reject(r);\n    });\n  return next;\n}\n/**\n * Creates the stop callable promise which is passed to the executor\n */\n\nfunction createStop(r) {\n  const stop1 = stop.bind(null, r);\n  const stopP = new Promise((resolve) => (r.onstop = resolve));\n  stop1.then = stopP.then.bind(stopP);\n  stop1.catch = stopP.catch.bind(stopP);\n  stop1.finally = stopP.finally.bind(stopP);\n  return stop1;\n}\n/**\n * Calls the executor passed into the constructor. This function is called the first time the next method is called on the repeater.\n *\n * Advances state to Started.\n */\n\nfunction execute(r) {\n  /*\n  if (r.state >= Started) {\n    return;\n  }\n  */\n  r.state = Started;\n  const push1 = push.bind(null, r);\n  const stop1 = createStop(r);\n  r.execution = new Promise((resolve) => resolve(r.executor(push1, stop1))); // TODO: We should consider stopping all repeaters when the executor settles.\n\n  r.execution.catch(() => stop(r));\n}\n\nconst records = new WeakMap();\n/**\n * An error subclass which is thrown when there are too many pending push or next operations on a single repeater.\n * NOTE: While repeaters implement and are assignable to the AsyncGenerator interface, and you can use the types interchangeably, we don't use typescript's implements syntax here because this would make supporting earlier versions of typescript trickier. This is because TypeScript version 3.6 changed the iterator types by adding the TReturn and TNext type parameters.\n *\n * @internal\n */\n\nexport class Repeater {\n  constructor(executor, buffer) {\n    records.set(this, {\n      executor,\n      buffer,\n      err: undefined,\n      state: Initial,\n      pushes: [],\n      nexts: [],\n      pending: undefined,\n      execution: undefined,\n      onnext: NOOP,\n      onstop: NOOP,\n    });\n  }\n\n  next(value) {\n    swallow(value); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    const r = records.get(this);\n\n    if (r === undefined) {\n      throw new Error('WeakMap error');\n    }\n\n    if (r.nexts.length >= MAX_QUEUE_LENGTH) {\n      throw new RepeaterOverflowError(\n        `No more than ${MAX_QUEUE_LENGTH} pending calls to next are allowed on a single repeater.`,\n      );\n    }\n\n    if (r.state <= Initial) {\n      execute(r);\n    }\n\n    r.onnext(value);\n\n    if (typeof r.buffer !== 'undefined' && !r.buffer.empty) {\n      const result = createIteration(r, r.buffer.remove());\n\n      if (r.pushes.length) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const p = r.pushes.shift();\n        r.buffer.add(p.value);\n        r.onnext = p.resolve;\n      }\n\n      return result;\n    } else if (r.pushes.length) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const p = r.pushes.shift();\n      r.onnext = p.resolve;\n      return createIteration(r, p.value);\n    } else if (r.state >= Stopped) {\n      finish(r);\n      return createIteration(r, consumeExecution(r));\n    }\n\n    return new Promise((resolve) =>\n      r.nexts.push({\n        resolve,\n        value,\n      }),\n    );\n  }\n\n  return(value) {\n    swallow(value); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    const r = records.get(this);\n\n    if (r === undefined) {\n      throw new Error('WeakMap error');\n    }\n\n    finish(r); // We override the execution because return should always return the value passed in.\n\n    r.execution = Promise.resolve(r.execution).then(() => value);\n    return createIteration(r, consumeExecution(r));\n  }\n\n  throw(err) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const r = records.get(this);\n\n    if (r === undefined) {\n      throw new Error('WeakMap error');\n    }\n\n    if (\n      r.state <= Initial ||\n      r.state >= Stopped ||\n      (typeof r.buffer !== 'undefined' && !r.buffer.empty)\n    ) {\n      finish(r); // If r.err is already set, that mean the repeater has already produced an error, so we throw that error rather than the error passed in, because doing so might be more informative for the caller.\n\n      if (r.err == null) {\n        r.err = err;\n      }\n\n      return createIteration(r, consumeExecution(r));\n    }\n\n    return this.next(Promise.reject(err));\n  }\n\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n}\n", "/**\n * @internal\n */\nexport class Bundler {\n  constructor({\n    initialIndex,\n    maxBundleSize,\n    maxInterval,\n    createDataBundleContext,\n    createErrorBundleContext,\n    onSubsequentData,\n    onSubsequentError,\n    onDataBundle,\n    onErrorBundle,\n  }) {\n    this._maxBundleSize = maxBundleSize;\n    this._createDataBundleContext = createDataBundleContext;\n    this._createErrorBundleContext = createErrorBundleContext;\n    this._onSubsequentData = onSubsequentData;\n    this._onSubsequentError = onSubsequentError;\n    this._onDataBundle = onDataBundle;\n    this._onErrorBundle = onErrorBundle;\n\n    if (maxInterval != null) {\n      this._timingContext = {\n        maxInterval,\n        timeout: undefined,\n        lastTime: Date.now(),\n      };\n    }\n\n    this._currentBundleSize = 0;\n    this._count = initialIndex;\n  }\n\n  queueData(index, result) {\n    const context = this._updateDataContext(index, result);\n\n    this._currentBundleSize++;\n    this._count++;\n\n    if (this._count === this._total) {\n      this._onDataBundle(context);\n\n      if (this._timingContext) {\n        this._clearCurrentTimer(this._timingContext);\n      }\n\n      return;\n    }\n\n    if (this._currentBundleSize === this._maxBundleSize) {\n      this._onDataBundle(context);\n\n      this._currentContext = undefined;\n\n      if (this._timingContext) {\n        this._restartTimer(this._timingContext);\n      }\n\n      return;\n    }\n\n    if (\n      this._timingContext &&\n      Date.now() - this._timingContext.lastTime >\n        this._timingContext.maxInterval\n    ) {\n      this._onDataBundle(context);\n\n      this._currentContext = undefined; // timer kicked off without bundle, no need to clear\n\n      this._startNewTimer(this._timingContext);\n    }\n  }\n\n  queueError(index, result) {\n    const context = this._updateErrorContext(index, result);\n\n    this._currentBundleSize++;\n    this._count++;\n\n    if (this._count === this._total) {\n      this._onErrorBundle(context);\n\n      if (this._timingContext) {\n        this._clearCurrentTimer(this._timingContext);\n      }\n\n      return;\n    }\n\n    if (this._currentBundleSize === this._maxBundleSize) {\n      this._onErrorBundle(context);\n\n      this._currentContext = undefined;\n\n      if (this._timingContext) {\n        this._restartTimer(this._timingContext);\n      }\n    }\n\n    if (\n      this._timingContext &&\n      Date.now() - this._timingContext.lastTime >\n        this._timingContext.maxInterval\n    ) {\n      this._onErrorBundle(context);\n\n      this._currentContext = undefined; // timer kicked off without bundle, no need to clear\n\n      this._startNewTimer(this._timingContext);\n    }\n  }\n\n  setTotal(total) {\n    if (this._count < total) {\n      this._total = total;\n      return;\n    }\n\n    if (this._currentContext) {\n      this._onBundle(this._currentContext);\n\n      if (this._timingContext) {\n        this._clearCurrentTimer(this._timingContext);\n      }\n    }\n  }\n\n  _clearCurrentTimer(timingContext) {\n    const timeout = timingContext.timeout;\n\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n  }\n\n  _startNewTimer(timingContext) {\n    timingContext.timeout = setTimeout(\n      () => this._flushCurrentBundle(timingContext),\n      timingContext.maxInterval,\n    );\n    timingContext.lastTime = Date.now();\n  }\n\n  _flushCurrentBundle(timingContext) {\n    if (this._currentContext) {\n      this._onBundle(this._currentContext);\n\n      this._currentContext = undefined;\n\n      this._restartTimer(timingContext);\n\n      this._startNewTimer(timingContext);\n    }\n  }\n\n  _restartTimer(timingContext) {\n    this._clearCurrentTimer(timingContext);\n\n    this._startNewTimer(timingContext);\n  }\n\n  _updateDataContext(index, result) {\n    if (this._currentContext === undefined) {\n      return this._getNewDataContext(index, result);\n    } else if (!this._currentContext.isData) {\n      this._onErrorBundle(this._currentContext.context);\n\n      return this._getNewDataContext(index, result);\n    }\n\n    this._onSubsequentData(index, result, this._currentContext.context);\n\n    return this._currentContext.context;\n  }\n\n  _getNewDataContext(index, result) {\n    this._currentBundleSize = 0;\n\n    const context = this._createDataBundleContext(index, result);\n\n    this._currentContext = {\n      isData: true,\n      context,\n    };\n\n    if (this._timingContext) {\n      const timingContext = this._timingContext;\n      timingContext.timeout = setTimeout(\n        () => this._flushCurrentBundle(timingContext),\n        timingContext.maxInterval,\n      );\n    }\n\n    return context;\n  }\n\n  _updateErrorContext(index, result) {\n    if (this._currentContext === undefined) {\n      return this._getNewErrorContext(index, result);\n    } else if (this._currentContext.isData) {\n      this._onDataBundle(this._currentContext.context);\n\n      return this._getNewErrorContext(index, result);\n    }\n\n    this._onSubsequentError(index, result, this._currentContext.context);\n\n    return this._currentContext.context;\n  }\n\n  _getNewErrorContext(index, result) {\n    this._currentBundleSize = 0;\n\n    const context = this._createErrorBundleContext(index, result);\n\n    this._currentContext = {\n      isData: false,\n      context,\n    };\n\n    if (this._timingContext) {\n      const timingContext = this._timingContext;\n      timingContext.timeout = setTimeout(\n        () => this._flushCurrentBundle(timingContext),\n        timingContext.maxInterval,\n      );\n    }\n\n    return context;\n  }\n\n  _onBundle(bundleContext) {\n    if (bundleContext.isData) {\n      this._onDataBundle(bundleContext.context);\n\n      return;\n    }\n\n    this._onErrorBundle(bundleContext.context);\n  }\n}\n", "export function getSequentialBundler(initialIndex, bundler) {\n  const dataResultMap = new Map();\n  const errorResultMap = new Map();\n  let count = initialIndex;\n  return {\n    queueData: (index, result) => {\n      if (count !== index) {\n        dataResultMap.set(index, result);\n        return;\n      }\n\n      bundler.queueData(index, result);\n      count++;\n      processPending();\n    },\n    queueError: (index, result) => {\n      if (count !== index) {\n        errorResultMap.set(index, result);\n        return;\n      }\n\n      bundler.queueError(index, result);\n      count++;\n      processPending();\n    },\n    setTotal: (total) => bundler.setTotal(total),\n  };\n\n  function processPending() {\n    while (true) {\n      const dataResult = dataResultMap.get(count);\n\n      if (dataResult !== undefined) {\n        dataResultMap.delete(count);\n        bundler.queueData(count, dataResult);\n        count++;\n        continue;\n      }\n\n      const errorResult = errorResultMap.get(count);\n\n      if (errorResult !== undefined) {\n        errorResultMap.delete(count);\n        bundler.queueError(count, errorResult);\n        count++;\n        continue;\n      }\n\n      break;\n    }\n  }\n}\n", "import { isPromise } from '../jsutils/isPromise.mjs';\nimport { Repeater } from '../jsutils/repeater.mjs';\n/**\n * Given an AsyncIterable and a callback function, return an AsyncGenerator\n * which produces values mapped via calling the callback function.\n */\n\nexport function mapAsyncIterable(iterable, fn) {\n  return new Repeater(async (push, stop) => {\n    const iter = iterable[Symbol.asyncIterator]();\n    let finalIteration; // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n    stop.then(() => {\n      finalIteration = typeof iter.return === 'function' ? iter.return() : true;\n    }); // eslint-disable-next-line no-unmodified-loop-condition\n\n    while (!finalIteration) {\n      // eslint-disable-next-line no-await-in-loop\n      const iteration = await iter.next();\n\n      if (iteration.done) {\n        stop();\n        break;\n      } // eslint-disable-next-line no-await-in-loop\n\n      await push(fn(iteration.value));\n    }\n\n    if (isPromise(finalIteration)) {\n      await finalIteration;\n    }\n  });\n}\n", "import { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { Repeater } from '../jsutils/repeater.mjs';\nimport { isPromise } from '../jsutils/isPromise.mjs';\n/**\n * Given an AsyncIterable that could potentially yield other async iterators,\n * flatten all yielded results into a single AsyncIterable\n */\n\nexport function flattenAsyncIterable(iterable) {\n  return new Repeater(async (push, stop) => {\n    const iter = iterable[Symbol.asyncIterator]();\n    let childIterator;\n    let finalIteration; // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n    stop.then(() => {\n      const childReturned =\n        childIterator &&\n        typeof childIterator.return === 'function' &&\n        childIterator.return();\n      const returned = typeof iter.return === 'function' && iter.return();\n\n      if (isPromise(childReturned)) {\n        finalIteration = isPromise(returned)\n          ? Promise.all([childReturned, returned])\n          : true;\n      } else if (isPromise(returned)) {\n        finalIteration = returned;\n      } else {\n        finalIteration = true;\n      }\n    }); // eslint-disable-next-line no-unmodified-loop-condition\n\n    while (!finalIteration) {\n      // eslint-disable-next-line no-await-in-loop\n      const iteration = await iter.next();\n\n      if (iteration.done) {\n        stop();\n        break;\n      }\n\n      const value = iteration.value;\n\n      if (isAsyncIterable(value)) {\n        childIterator = value[Symbol.asyncIterator](); // eslint-disable-next-line no-await-in-loop\n\n        await pushChildIterations(childIterator, push, finalIteration); // eslint-disable-next-line require-atomic-updates\n\n        childIterator = undefined;\n        continue;\n      } // eslint-disable-next-line no-await-in-loop\n\n      await push(value);\n    }\n\n    if (isPromise(finalIteration)) {\n      await finalIteration;\n    }\n  });\n}\n\nasync function pushChildIterations(iter, push, finalIteration) {\n  // eslint-disable-next-line no-unmodified-loop-condition\n  while (!finalIteration) {\n    // eslint-disable-next-line no-await-in-loop\n    const iteration = await iter.next();\n\n    if (iteration.done) {\n      return;\n    } // eslint-disable-next-line no-await-in-loop\n\n    await push(iteration.value);\n  }\n}\n", null, null, "import DataLoader from 'dataloader';\nimport { getOperationASTFromRequest, relocatedError, memoize2of4 } from '@graphql-tools/utils';\nimport { Kind, visit, GraphQLError } from 'graphql';\n\n// adapted from https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/src/batching/merge-queries.js\nfunction createPrefix(index) {\n    return `_${index}_`;\n}\nfunction parseKey(prefixedKey) {\n    const match = /^_([\\d]+)_(.*)$/.exec(prefixedKey);\n    if (match && match.length === 3 && !isNaN(Number(match[1])) && match[2]) {\n        return { index: Number(match[1]), originalKey: match[2] };\n    }\n    throw new Error(`Key ${prefixedKey} is not correctly prefixed`);\n}\n\n// adapted from https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/src/batching/merge-queries.js\n/**\n * Merge multiple queries into a single query in such a way that query results\n * can be split and transformed as if they were obtained by running original queries.\n *\n * Merging algorithm involves several transformations:\n *  1. Replace top-level fragment spreads with inline fragments (... on Query {})\n *  2. Add unique aliases to all top-level query fields (including those on inline fragments)\n *  3. Prefix all variable definitions and variable usages\n *  4. Prefix names (and spreads) of fragments\n *\n * i.e transform:\n *   [\n *     `query Foo($id: ID!) { foo, bar(id: $id), ...FooQuery }\n *     fragment FooQuery on Query { baz }`,\n *\n *    `query Bar($id: ID!) { foo: baz, bar(id: $id), ... on Query { baz } }`\n *   ]\n * to:\n *   query (\n *     $graphqlTools1_id: ID!\n *     $graphqlTools2_id: ID!\n *   ) {\n *     graphqlTools1_foo: foo,\n *     graphqlTools1_bar: bar(id: $graphqlTools1_id)\n *     ... on Query {\n *       graphqlTools1__baz: baz\n *     }\n *     graphqlTools1__foo: baz\n *     graphqlTools1__bar: bar(id: $graphqlTools1__id)\n *     ... on Query {\n *       graphqlTools1__baz: baz\n *     }\n *   }\n */\nfunction mergeRequests(requests, extensionsReducer) {\n    var _a, _b, _c, _d, _e;\n    const mergedVariables = Object.create(null);\n    const mergedVariableDefinitions = [];\n    const mergedSelections = [];\n    const mergedFragmentDefinitions = [];\n    let mergedExtensions = Object.create(null);\n    for (const index in requests) {\n        const request = requests[index];\n        const prefixedRequests = prefixRequest(createPrefix(index), request);\n        for (const def of prefixedRequests.document.definitions) {\n            if (isOperationDefinition(def)) {\n                mergedSelections.push(...def.selectionSet.selections);\n                if (def.variableDefinitions) {\n                    mergedVariableDefinitions.push(...def.variableDefinitions);\n                }\n            }\n            if (isFragmentDefinition(def)) {\n                mergedFragmentDefinitions.push(def);\n            }\n        }\n        Object.assign(mergedVariables, prefixedRequests.variables);\n        mergedExtensions = extensionsReducer(mergedExtensions, request);\n    }\n    const firstRequest = requests[0];\n    const operationType = (_a = firstRequest.operationType) !== null && _a !== void 0 ? _a : getOperationASTFromRequest(firstRequest).operation;\n    const mergedOperationDefinition = {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: operationType,\n        variableDefinitions: mergedVariableDefinitions,\n        selectionSet: {\n            kind: Kind.SELECTION_SET,\n            selections: mergedSelections,\n        },\n    };\n    const operationName = (_b = firstRequest.operationName) !== null && _b !== void 0 ? _b : (_e = (_d = (_c = firstRequest.info) === null || _c === void 0 ? void 0 : _c.operation) === null || _d === void 0 ? void 0 : _d.name) === null || _e === void 0 ? void 0 : _e.value;\n    if (operationName) {\n        mergedOperationDefinition.name = {\n            kind: Kind.NAME,\n            value: operationName,\n        };\n    }\n    return {\n        document: {\n            kind: Kind.DOCUMENT,\n            definitions: [mergedOperationDefinition, ...mergedFragmentDefinitions],\n        },\n        variables: mergedVariables,\n        extensions: mergedExtensions,\n        context: requests[0].context,\n        info: requests[0].info,\n        operationType,\n    };\n}\nfunction prefixRequest(prefix, request) {\n    var _a;\n    const executionVariables = (_a = request.variables) !== null && _a !== void 0 ? _a : {};\n    function prefixNode(node) {\n        return prefixNodeName(node, prefix);\n    }\n    let prefixedDocument = aliasTopLevelFields(prefix, request.document);\n    const executionVariableNames = Object.keys(executionVariables);\n    const hasFragmentDefinitions = request.document.definitions.some(def => isFragmentDefinition(def));\n    const fragmentSpreadImpl = {};\n    if (executionVariableNames.length > 0 || hasFragmentDefinitions) {\n        prefixedDocument = visit(prefixedDocument, {\n            [Kind.VARIABLE]: prefixNode,\n            [Kind.FRAGMENT_DEFINITION]: prefixNode,\n            [Kind.FRAGMENT_SPREAD]: node => {\n                node = prefixNodeName(node, prefix);\n                fragmentSpreadImpl[node.name.value] = true;\n                return node;\n            },\n        });\n    }\n    const prefixedVariables = {};\n    for (const variableName of executionVariableNames) {\n        prefixedVariables[prefix + variableName] = executionVariables[variableName];\n    }\n    if (hasFragmentDefinitions) {\n        prefixedDocument = {\n            ...prefixedDocument,\n            definitions: prefixedDocument.definitions.filter(def => {\n                return !isFragmentDefinition(def) || fragmentSpreadImpl[def.name.value];\n            }),\n        };\n    }\n    return {\n        document: prefixedDocument,\n        variables: prefixedVariables,\n    };\n}\n/**\n * Adds prefixed aliases to top-level fields of the query.\n *\n * @see aliasFieldsInSelection for implementation details\n */\nfunction aliasTopLevelFields(prefix, document) {\n    const transformer = {\n        [Kind.OPERATION_DEFINITION]: (def) => {\n            const { selections } = def.selectionSet;\n            return {\n                ...def,\n                selectionSet: {\n                    ...def.selectionSet,\n                    selections: aliasFieldsInSelection(prefix, selections, document),\n                },\n            };\n        },\n    };\n    return visit(document, transformer, {\n        [Kind.DOCUMENT]: [`definitions`],\n    });\n}\n/**\n * Add aliases to fields of the selection, including top-level fields of inline fragments.\n * Fragment spreads are converted to inline fragments and their top-level fields are also aliased.\n *\n * Note that this method is shallow. It adds aliases only to the top-level fields and doesn't\n * descend to field sub-selections.\n *\n * For example, transforms:\n *   {\n *     foo\n *     ... on Query { foo }\n *     ...FragmentWithBarField\n *   }\n * To:\n *   {\n *     graphqlTools1_foo: foo\n *     ... on Query { graphqlTools1_foo: foo }\n *     ... on Query { graphqlTools1_bar: bar }\n *   }\n */\nfunction aliasFieldsInSelection(prefix, selections, document) {\n    return selections.map(selection => {\n        switch (selection.kind) {\n            case Kind.INLINE_FRAGMENT:\n                return aliasFieldsInInlineFragment(prefix, selection, document);\n            case Kind.FRAGMENT_SPREAD: {\n                const inlineFragment = inlineFragmentSpread(selection, document);\n                return aliasFieldsInInlineFragment(prefix, inlineFragment, document);\n            }\n            case Kind.FIELD:\n            default:\n                return aliasField(selection, prefix);\n        }\n    });\n}\n/**\n * Add aliases to top-level fields of the inline fragment.\n * Returns new inline fragment node.\n *\n * For Example, transforms:\n *   ... on Query { foo, ... on Query { bar: foo } }\n * To\n *   ... on Query { graphqlTools1_foo: foo, ... on Query { graphqlTools1_bar: foo } }\n */\nfunction aliasFieldsInInlineFragment(prefix, fragment, document) {\n    const { selections } = fragment.selectionSet;\n    return {\n        ...fragment,\n        selectionSet: {\n            ...fragment.selectionSet,\n            selections: aliasFieldsInSelection(prefix, selections, document),\n        },\n    };\n}\n/**\n * Replaces fragment spread with inline fragment\n *\n * Example:\n *   query { ...Spread }\n *   fragment Spread on Query { bar }\n *\n * Transforms to:\n *   query { ... on Query { bar } }\n */\nfunction inlineFragmentSpread(spread, document) {\n    const fragment = document.definitions.find(def => isFragmentDefinition(def) && def.name.value === spread.name.value);\n    if (!fragment) {\n        throw new Error(`Fragment ${spread.name.value} does not exist`);\n    }\n    const { typeCondition, selectionSet } = fragment;\n    return {\n        kind: Kind.INLINE_FRAGMENT,\n        typeCondition,\n        selectionSet,\n        directives: spread.directives,\n    };\n}\nfunction prefixNodeName(namedNode, prefix) {\n    return {\n        ...namedNode,\n        name: {\n            ...namedNode.name,\n            value: prefix + namedNode.name.value,\n        },\n    };\n}\n/**\n * Returns a new FieldNode with prefixed alias\n *\n * Example. Given prefix === \"graphqlTools1_\" transforms:\n *   { foo } -> { graphqlTools1_foo: foo }\n *   { foo: bar } -> { graphqlTools1_foo: bar }\n */\nfunction aliasField(field, aliasPrefix) {\n    const aliasNode = field.alias ? field.alias : field.name;\n    return {\n        ...field,\n        alias: {\n            ...aliasNode,\n            value: aliasPrefix + aliasNode.value,\n        },\n    };\n}\nfunction isOperationDefinition(def) {\n    return def.kind === Kind.OPERATION_DEFINITION;\n}\nfunction isFragmentDefinition(def) {\n    return def.kind === Kind.FRAGMENT_DEFINITION;\n}\n\n// adapted from https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-source-graphql/src/batching/merge-queries.js\n/**\n * Split and transform result of the query produced by the `merge` function\n */\nfunction splitResult({ data, errors }, numResults) {\n    const splitResults = [];\n    for (let i = 0; i < numResults; i++) {\n        splitResults.push({});\n    }\n    if (data) {\n        for (const prefixedKey in data) {\n            const { index, originalKey } = parseKey(prefixedKey);\n            const result = splitResults[index];\n            if (result == null) {\n                continue;\n            }\n            if (result.data == null) {\n                result.data = { [originalKey]: data[prefixedKey] };\n            }\n            else {\n                result.data[originalKey] = data[prefixedKey];\n            }\n        }\n    }\n    if (errors) {\n        for (const error of errors) {\n            if (error.path) {\n                const parsedKey = parseKey(error.path[0]);\n                const { index, originalKey } = parsedKey;\n                const newError = relocatedError(error, [originalKey, ...error.path.slice(1)]);\n                const resultErrors = (splitResults[index].errors = (splitResults[index].errors || []));\n                resultErrors.push(newError);\n            }\n            else {\n                splitResults.forEach(result => {\n                    const resultErrors = (result.errors = (result.errors || []));\n                    resultErrors.push(new GraphQLError(error.message));\n                });\n            }\n        }\n    }\n    return splitResults;\n}\n\nfunction createBatchingExecutor(executor, dataLoaderOptions, extensionsReducer = defaultExtensionsReducer) {\n    const loadFn = createLoadFn(executor, extensionsReducer);\n    const loader = new DataLoader(loadFn, dataLoaderOptions);\n    return function batchingExecutor(request) {\n        const operationAst = getOperationASTFromRequest(request);\n        return operationAst.operation === 'subscription' ? executor(request) : loader.load(request);\n    };\n}\nfunction createLoadFn(executor, extensionsReducer) {\n    return async function batchExecuteLoadFn(requests) {\n        const execBatches = [];\n        let index = 0;\n        const request = requests[index];\n        let currentBatch = [request];\n        execBatches.push(currentBatch);\n        const operationAst = getOperationASTFromRequest(request);\n        const operationType = operationAst.operation;\n        if (operationType == null) {\n            throw new Error('could not identify operation type of document');\n        }\n        while (++index < requests.length) {\n            const currentRequest = requests[index];\n            const currentOperationAST = getOperationASTFromRequest(currentRequest);\n            const currentOperationType = currentOperationAST.operation;\n            if (operationType === currentOperationType) {\n                currentBatch.push(currentRequest);\n            }\n            else {\n                currentBatch = [currentRequest];\n                execBatches.push(currentBatch);\n            }\n        }\n        const results = await Promise.all(execBatches.map(async (execBatch) => {\n            const mergedRequests = mergeRequests(execBatch, extensionsReducer);\n            const resultBatches = (await executor(mergedRequests));\n            return splitResult(resultBatches, execBatch.length);\n        }));\n        return results.flat();\n    };\n}\nfunction defaultExtensionsReducer(mergedExtensions, request) {\n    const newExtensions = request.extensions;\n    if (newExtensions != null) {\n        Object.assign(mergedExtensions, newExtensions);\n    }\n    return mergedExtensions;\n}\n\nconst getBatchingExecutor = memoize2of4(function getBatchingExecutor(_context, executor, dataLoaderOptions, extensionsReducer) {\n    return createBatchingExecutor(executor, dataLoaderOptions, extensionsReducer);\n});\n\nexport { createBatchingExecutor, getBatchingExecutor };\n", "import { GraphQLList, getNamedType } from 'graphql';\nimport DataLoader from 'dataloader';\nimport { delegateToSchema } from '@graphql-tools/delegate';\nimport { memoize3, relocatedError } from '@graphql-tools/utils';\n\nfunction createBatchFn(options) {\n    var _a, _b;\n    const argsFromKeys = (_a = options.argsFromKeys) !== null && _a !== void 0 ? _a : ((keys) => ({ ids: keys }));\n    const fieldName = (_b = options.fieldName) !== null && _b !== void 0 ? _b : options.info.fieldName;\n    const { valuesFromResults, lazyOptionsFn } = options;\n    return async function batchFn(keys) {\n        const results = await delegateToSchema({\n            returnType: new GraphQLList(getNamedType(options.info.returnType)),\n            onLocatedError: originalError => {\n                if (originalError.path == null) {\n                    return originalError;\n                }\n                const [pathFieldName, pathNumber] = originalError.path;\n                if (pathFieldName !== fieldName) {\n                    return originalError;\n                }\n                const pathNumberType = typeof pathNumber;\n                if (pathNumberType !== 'number') {\n                    return originalError;\n                }\n                return relocatedError(originalError, originalError.path.slice(0, 0).concat(originalError.path.slice(2)));\n            },\n            args: argsFromKeys(keys),\n            ...(lazyOptionsFn == null ? options : lazyOptionsFn(options)),\n        });\n        if (results instanceof Error) {\n            return keys.map(() => results);\n        }\n        const values = valuesFromResults == null ? results : valuesFromResults(results, keys);\n        return Array.isArray(values) ? values : keys.map(() => values);\n    };\n}\nfunction defaultCacheKeyFn(key) {\n    if (typeof key === 'object') {\n        return JSON.stringify(key);\n    }\n    return key;\n}\nconst getLoadersMap = memoize3(function getLoadersMap(_context, _fieldNodes, _schema) {\n    return new Map();\n});\nconst GLOBAL_CONTEXT = {};\nfunction getLoader(options) {\n    const { schema, fieldName, context, info, dataLoaderOptions } = options;\n    const targetFieldName = fieldName !== null && fieldName !== void 0 ? fieldName : info.fieldName;\n    const loaders = getLoadersMap(context !== null && context !== void 0 ? context : GLOBAL_CONTEXT, info.fieldNodes, schema);\n    let loader = loaders.get(targetFieldName);\n    if (loader === undefined) {\n        const batchFn = createBatchFn(options);\n        loader = new DataLoader(batchFn, {\n            // Prevents the keys to be passed with the same structure\n            cacheKeyFn: defaultCacheKeyFn,\n            ...dataLoaderOptions,\n        });\n        loaders.set(targetFieldName, loader);\n    }\n    return loader;\n}\n\nfunction batchDelegateToSchema(options) {\n    const key = options.key;\n    if (key == null) {\n        return null;\n    }\n    else if (Array.isArray(key) && !key.length) {\n        return [];\n    }\n    const loader = getLoader(options);\n    return Array.isArray(key) ? loader.loadMany(key) : loader.load(key);\n}\n\nfunction createBatchDelegateFn(optionsOrArgsFromKeys, lazyOptionsFn, dataLoaderOptions, valuesFromResults) {\n    return typeof optionsOrArgsFromKeys === 'function'\n        ? createBatchDelegateFnImpl({\n            argsFromKeys: optionsOrArgsFromKeys,\n            lazyOptionsFn,\n            dataLoaderOptions,\n            valuesFromResults,\n        })\n        : createBatchDelegateFnImpl(optionsOrArgsFromKeys);\n}\nfunction createBatchDelegateFnImpl(options) {\n    return batchDelegateOptions => {\n        const loader = getLoader({\n            ...options,\n            ...batchDelegateOptions,\n        });\n        return loader.load(batchDelegateOptions.key);\n    };\n}\n\nexport { batchDelegateToSchema, createBatchDelegateFn };\n", "import { GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, isSpecifiedScalarType, isScalarType, visit, Kind, TypeInfo, visitWithTypeInfo, isObjectType, isInterfaceType, typeFromAST, isInputType, isLeafType, valueFromAST, GraphQLNonNull, getNullableType, BREAK, parse, getIntrospectionQuery, buildClientSchema } from 'graphql';\nimport { getRootTypeMap, getResponseKeyFromInfo, mapSchema, MapperKind, renameType, visitData, transformInputValue, visitResult, createVariableNameGenerator, updateArgument, relocatedError, getArgumentValues, valueMatchesCriteria, getDirectives, pruneSchema, selectObjectFields, appendObjectFields, modifyObjectFields, removeObjectFields, isAsyncIterable } from '@graphql-tools/utils';\nimport { applySchemaTransforms, delegateToSchema, isExternalObject, getUnpathedErrors, getSubschema, resolveExternalValue, defaultMergedResolver } from '@graphql-tools/delegate';\nimport { ValueOrPromise } from 'value-or-promise';\n\nfunction generateProxyingResolvers(subschemaConfig) {\n    var _a;\n    const targetSchema = subschemaConfig.schema;\n    const createProxyingResolver = (_a = subschemaConfig.createProxyingResolver) !== null && _a !== void 0 ? _a : defaultCreateProxyingResolver;\n    const transformedSchema = applySchemaTransforms(targetSchema, subschemaConfig);\n    const rootTypeMap = getRootTypeMap(targetSchema);\n    const resolvers = {};\n    for (const [operation, rootType] of rootTypeMap.entries()) {\n        const typeName = rootType.name;\n        const fields = rootType.getFields();\n        resolvers[typeName] = {};\n        for (const fieldName in fields) {\n            const proxyingResolver = createProxyingResolver({\n                subschemaConfig,\n                transformedSchema,\n                operation,\n                fieldName,\n            });\n            const finalResolver = createPossiblyNestedProxyingResolver(subschemaConfig, proxyingResolver);\n            if (operation === 'subscription') {\n                resolvers[typeName][fieldName] = {\n                    subscribe: finalResolver,\n                    resolve: identical,\n                };\n            }\n            else {\n                resolvers[typeName][fieldName] = {\n                    resolve: finalResolver,\n                };\n            }\n        }\n    }\n    return resolvers;\n}\nfunction identical(value) {\n    return value;\n}\nfunction createPossiblyNestedProxyingResolver(subschemaConfig, proxyingResolver) {\n    return function possiblyNestedProxyingResolver(parent, args, context, info) {\n        if (parent != null) {\n            const responseKey = getResponseKeyFromInfo(info);\n            // Check to see if the parent contains a proxied result\n            if (isExternalObject(parent)) {\n                const unpathedErrors = getUnpathedErrors(parent);\n                const subschema = getSubschema(parent, responseKey);\n                // If there is a proxied result from this subschema, return it\n                // This can happen even for a root field when the root type ia\n                // also nested as a field within a different type.\n                if (subschemaConfig === subschema && parent[responseKey] !== undefined) {\n                    return resolveExternalValue(parent[responseKey], unpathedErrors, subschema, context, info);\n                }\n            }\n        }\n        return proxyingResolver(parent, args, context, info);\n    };\n}\nfunction defaultCreateProxyingResolver({ subschemaConfig, operation, transformedSchema, }) {\n    return function proxyingResolver(_parent, _args, context, info) {\n        return delegateToSchema({\n            schema: subschemaConfig,\n            operation,\n            context,\n            info,\n            transformedSchema,\n        });\n    };\n}\n\nfunction wrapSchema(subschemaConfig) {\n    const targetSchema = subschemaConfig.schema;\n    const proxyingResolvers = generateProxyingResolvers(subschemaConfig);\n    const schema = createWrappingSchema(targetSchema, proxyingResolvers);\n    const transformedSchema = applySchemaTransforms(schema, subschemaConfig);\n    return applySchemaTransforms(schema, subschemaConfig, transformedSchema);\n}\nfunction createWrappingSchema(schema, proxyingResolvers) {\n    return mapSchema(schema, {\n        [MapperKind.ROOT_OBJECT]: type => {\n            var _a;\n            const config = type.toConfig();\n            const fieldConfigMap = config.fields;\n            for (const fieldName in fieldConfigMap) {\n                const field = fieldConfigMap[fieldName];\n                if (field == null) {\n                    continue;\n                }\n                fieldConfigMap[fieldName] = {\n                    ...field,\n                    ...(_a = proxyingResolvers[type.name]) === null || _a === void 0 ? void 0 : _a[fieldName],\n                };\n            }\n            return new GraphQLObjectType(config);\n        },\n        [MapperKind.OBJECT_TYPE]: type => {\n            const config = type.toConfig();\n            config.isTypeOf = undefined;\n            for (const fieldName in config.fields) {\n                const field = config.fields[fieldName];\n                if (field == null) {\n                    continue;\n                }\n                field.resolve = defaultMergedResolver;\n                field.subscribe = undefined;\n            }\n            return new GraphQLObjectType(config);\n        },\n        [MapperKind.INTERFACE_TYPE]: type => {\n            const config = type.toConfig();\n            delete config.resolveType;\n            return new GraphQLInterfaceType(config);\n        },\n        [MapperKind.UNION_TYPE]: type => {\n            const config = type.toConfig();\n            delete config.resolveType;\n            return new GraphQLUnionType(config);\n        },\n    });\n}\n\nclass RenameTypes {\n    constructor(renamer, options) {\n        this.renamer = renamer;\n        this.map = Object.create(null);\n        this.reverseMap = Object.create(null);\n        const { renameBuiltins = false, renameScalars = true } = options != null ? options : {};\n        this.renameBuiltins = renameBuiltins;\n        this.renameScalars = renameScalars;\n    }\n    transformSchema(originalWrappingSchema, _subschemaConfig, _transformedSchema) {\n        return mapSchema(originalWrappingSchema, {\n            [MapperKind.TYPE]: (type) => {\n                if (isSpecifiedScalarType(type) && !this.renameBuiltins) {\n                    return undefined;\n                }\n                if (isScalarType(type) && !this.renameScalars) {\n                    return undefined;\n                }\n                const oldName = type.name;\n                const newName = this.renamer(oldName);\n                if (newName !== undefined && newName !== oldName) {\n                    this.map[oldName] = newName;\n                    this.reverseMap[newName] = oldName;\n                    return renameType(type, newName);\n                }\n            },\n            [MapperKind.ROOT_OBJECT]() {\n                return undefined;\n            },\n        });\n    }\n    transformRequest(originalRequest, _delegationContext, _transformationContext) {\n        const document = visit(originalRequest.document, {\n            [Kind.NAMED_TYPE]: (node) => {\n                const name = node.name.value;\n                if (name in this.reverseMap) {\n                    return {\n                        ...node,\n                        name: {\n                            kind: Kind.NAME,\n                            value: this.reverseMap[name],\n                        },\n                    };\n                }\n            },\n        });\n        return {\n            ...originalRequest,\n            document,\n        };\n    }\n    transformResult(originalResult, _delegationContext, _transformationContext) {\n        return {\n            ...originalResult,\n            data: visitData(originalResult.data, object => {\n                const typeName = object === null || object === void 0 ? void 0 : object.__typename;\n                if (typeName != null && typeName in this.map) {\n                    object.__typename = this.map[typeName];\n                }\n                return object;\n            }),\n        };\n    }\n}\n\nclass FilterTypes {\n    constructor(filter) {\n        this.filter = filter;\n    }\n    transformSchema(originalWrappingSchema, _subschemaConfig, _transformedSchema) {\n        return mapSchema(originalWrappingSchema, {\n            [MapperKind.TYPE]: (type) => {\n                if (this.filter(type)) {\n                    return undefined;\n                }\n                return null;\n            },\n        });\n    }\n}\n\nclass RenameRootTypes {\n    constructor(renamer) {\n        this.renamer = renamer;\n        this.map = Object.create(null);\n        this.reverseMap = Object.create(null);\n    }\n    transformSchema(originalWrappingSchema, _subschemaConfig, _transformedSchema) {\n        return mapSchema(originalWrappingSchema, {\n            [MapperKind.ROOT_OBJECT]: type => {\n                const oldName = type.name;\n                const newName = this.renamer(oldName);\n                if (newName !== undefined && newName !== oldName) {\n                    this.map[oldName] = newName;\n                    this.reverseMap[newName] = oldName;\n                    return renameType(type, newName);\n                }\n            },\n        });\n    }\n    transformRequest(originalRequest, _delegationContext, _transformationContext) {\n        const document = visit(originalRequest.document, {\n            [Kind.NAMED_TYPE]: (node) => {\n                const name = node.name.value;\n                if (name in this.reverseMap) {\n                    return {\n                        ...node,\n                        name: {\n                            kind: Kind.NAME,\n                            value: this.reverseMap[name],\n                        },\n                    };\n                }\n            },\n        });\n        return {\n            ...originalRequest,\n            document,\n        };\n    }\n    transformResult(originalResult, _delegationContext, _transformationContext) {\n        return {\n            ...originalResult,\n            data: visitData(originalResult.data, object => {\n                const typeName = object === null || object === void 0 ? void 0 : object.__typename;\n                if (typeName != null && typeName in this.map) {\n                    object.__typename = this.map[typeName];\n                }\n                return object;\n            }),\n        };\n    }\n}\n\nclass TransformCompositeFields {\n    constructor(fieldTransformer, fieldNodeTransformer, dataTransformer, errorsTransformer) {\n        this.fieldTransformer = fieldTransformer;\n        this.fieldNodeTransformer = fieldNodeTransformer;\n        this.dataTransformer = dataTransformer;\n        this.errorsTransformer = errorsTransformer;\n        this.mapping = {};\n    }\n    _getTypeInfo() {\n        const typeInfo = this.typeInfo;\n        if (typeInfo === undefined) {\n            throw new Error(`The TransformCompositeFields transform's  \"transformRequest\" and \"transformResult\" methods cannot be used without first calling \"transformSchema\".`);\n        }\n        return typeInfo;\n    }\n    transformSchema(originalWrappingSchema, _subschemaConfig, _transformedSchema) {\n        var _a;\n        this.transformedSchema = mapSchema(originalWrappingSchema, {\n            [MapperKind.COMPOSITE_FIELD]: (fieldConfig, fieldName, typeName) => {\n                const transformedField = this.fieldTransformer(typeName, fieldName, fieldConfig);\n                if (Array.isArray(transformedField)) {\n                    const newFieldName = transformedField[0];\n                    if (newFieldName !== fieldName) {\n                        if (!(typeName in this.mapping)) {\n                            this.mapping[typeName] = {};\n                        }\n                        this.mapping[typeName][newFieldName] = fieldName;\n                    }\n                }\n                return transformedField;\n            },\n        });\n        this.typeInfo = new TypeInfo(this.transformedSchema);\n        this.subscriptionTypeName = (_a = originalWrappingSchema.getSubscriptionType()) === null || _a === void 0 ? void 0 : _a.name;\n        return this.transformedSchema;\n    }\n    transformRequest(originalRequest, _delegationContext, transformationContext) {\n        const document = originalRequest.document;\n        return {\n            ...originalRequest,\n            document: this.transformDocument(document, transformationContext),\n        };\n    }\n    transformResult(result, _delegationContext, transformationContext) {\n        const dataTransformer = this.dataTransformer;\n        if (dataTransformer != null) {\n            result.data = visitData(result.data, value => dataTransformer(value, transformationContext));\n        }\n        if (this.errorsTransformer != null && Array.isArray(result.errors)) {\n            result.errors = this.errorsTransformer(result.errors, transformationContext);\n        }\n        return result;\n    }\n    transformDocument(document, transformationContext) {\n        const fragments = Object.create(null);\n        for (const def of document.definitions) {\n            if (def.kind === Kind.FRAGMENT_DEFINITION) {\n                fragments[def.name.value] = def;\n            }\n        }\n        return visit(document, visitWithTypeInfo(this._getTypeInfo(), {\n            [Kind.SELECTION_SET]: {\n                leave: node => this.transformSelectionSet(node, this._getTypeInfo(), fragments, transformationContext),\n            },\n        }));\n    }\n    transformSelectionSet(node, typeInfo, fragments, transformationContext) {\n        var _a, _b;\n        const parentType = typeInfo.getParentType();\n        if (parentType == null) {\n            return undefined;\n        }\n        const parentTypeName = parentType.name;\n        let newSelections = [];\n        for (const selection of node.selections) {\n            if (selection.kind !== Kind.FIELD) {\n                newSelections.push(selection);\n                continue;\n            }\n            const newName = selection.name.value;\n            // See https://github.com/ardatan/graphql-tools/issues/2282\n            if ((this.dataTransformer != null || this.errorsTransformer != null) &&\n                (this.subscriptionTypeName == null || parentTypeName !== this.subscriptionTypeName)) {\n                newSelections.push({\n                    kind: Kind.FIELD,\n                    name: {\n                        kind: Kind.NAME,\n                        value: '__typename',\n                    },\n                });\n            }\n            let transformedSelection;\n            if (this.fieldNodeTransformer == null) {\n                transformedSelection = selection;\n            }\n            else {\n                transformedSelection = this.fieldNodeTransformer(parentTypeName, newName, selection, fragments, transformationContext);\n                transformedSelection = transformedSelection === undefined ? selection : transformedSelection;\n            }\n            if (transformedSelection == null) {\n                continue;\n            }\n            else if (Array.isArray(transformedSelection)) {\n                newSelections = newSelections.concat(transformedSelection);\n                continue;\n            }\n            else if (transformedSelection.kind !== Kind.FIELD) {\n                newSelections.push(transformedSelection);\n                continue;\n            }\n            const typeMapping = this.mapping[parentTypeName];\n            if (typeMapping == null) {\n                newSelections.push(transformedSelection);\n                continue;\n            }\n            const oldName = this.mapping[parentTypeName][newName];\n            if (oldName == null) {\n                newSelections.push(transformedSelection);\n                continue;\n            }\n            newSelections.push({\n                ...transformedSelection,\n                name: {\n                    kind: Kind.NAME,\n                    value: oldName,\n                },\n                alias: {\n                    kind: Kind.NAME,\n                    value: (_b = (_a = transformedSelection.alias) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : newName,\n                },\n            });\n        }\n        return {\n            ...node,\n            selections: newSelections,\n        };\n    }\n}\n\nclass TransformObjectFields {\n    constructor(objectFieldTransformer, fieldNodeTransformer) {\n        this.objectFieldTransformer = objectFieldTransformer;\n        this.fieldNodeTransformer = fieldNodeTransformer;\n    }\n    _getTransformer() {\n        const transformer = this.transformer;\n        if (transformer === undefined) {\n            throw new Error(`The TransformObjectFields transform's  \"transformRequest\" and \"transformResult\" methods cannot be used without first calling \"transformSchema\".`);\n        }\n        return transformer;\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        const compositeToObjectFieldTransformer = (typeName, fieldName, fieldConfig) => {\n            if (isObjectType(originalWrappingSchema.getType(typeName))) {\n                return this.objectFieldTransformer(typeName, fieldName, fieldConfig);\n            }\n            return undefined;\n        };\n        this.transformer = new TransformCompositeFields(compositeToObjectFieldTransformer, this.fieldNodeTransformer);\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this._getTransformer().transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n    transformResult(originalResult, delegationContext, transformationContext) {\n        return this._getTransformer().transformResult(originalResult, delegationContext, transformationContext);\n    }\n}\n\nclass TransformRootFields {\n    constructor(rootFieldTransformer, fieldNodeTransformer) {\n        this.rootFieldTransformer = rootFieldTransformer;\n        this.fieldNodeTransformer = fieldNodeTransformer;\n    }\n    _getTransformer() {\n        const transformer = this.transformer;\n        if (transformer === undefined) {\n            throw new Error(`The TransformRootFields transform's  \"transformRequest\" and \"transformResult\" methods cannot be used without first calling \"transformSchema\".`);\n        }\n        return transformer;\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        const rootToObjectFieldTransformer = (typeName, fieldName, fieldConfig) => {\n            var _a, _b, _c;\n            if (typeName === ((_a = originalWrappingSchema.getQueryType()) === null || _a === void 0 ? void 0 : _a.name)) {\n                return this.rootFieldTransformer('Query', fieldName, fieldConfig);\n            }\n            if (typeName === ((_b = originalWrappingSchema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name)) {\n                return this.rootFieldTransformer('Mutation', fieldName, fieldConfig);\n            }\n            if (typeName === ((_c = originalWrappingSchema.getSubscriptionType()) === null || _c === void 0 ? void 0 : _c.name)) {\n                return this.rootFieldTransformer('Subscription', fieldName, fieldConfig);\n            }\n            return undefined;\n        };\n        this.transformer = new TransformObjectFields(rootToObjectFieldTransformer, this.fieldNodeTransformer);\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this._getTransformer().transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n    transformResult(originalResult, delegationContext, transformationContext) {\n        return this._getTransformer().transformResult(originalResult, delegationContext, transformationContext);\n    }\n}\n\nclass RenameRootFields {\n    constructor(renamer) {\n        this.transformer = new TransformRootFields((operation, fieldName, fieldConfig) => [renamer(operation, fieldName, fieldConfig), fieldConfig]);\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this.transformer.transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n}\n\nclass FilterRootFields {\n    constructor(filter) {\n        this.transformer = new TransformRootFields((operation, fieldName, fieldConfig) => {\n            if (filter(operation, fieldName, fieldConfig)) {\n                return undefined;\n            }\n            return null;\n        });\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n}\n\nclass RenameObjectFields {\n    constructor(renamer) {\n        this.transformer = new TransformObjectFields((typeName, fieldName, fieldConfig) => [\n            renamer(typeName, fieldName, fieldConfig),\n            fieldConfig,\n        ]);\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this.transformer.transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n}\n\nclass RenameObjectFieldArguments {\n    constructor(renamer) {\n        this.renamer = renamer;\n        this.transformer = new TransformObjectFields((typeName, fieldName, fieldConfig) => {\n            const argsConfig = Object.fromEntries(Object.entries(fieldConfig.args || []).map(([argName, conf]) => {\n                const newName = renamer(typeName, fieldName, argName);\n                if (newName !== undefined && newName !== argName) {\n                    if (newName != null) {\n                        return [newName, conf];\n                    }\n                }\n                return [argName, conf];\n            }));\n            return [fieldName, { ...fieldConfig, args: argsConfig }];\n        }, (typeName, fieldName, inputFieldNode) => {\n            if (!(typeName in this.reverseMap)) {\n                return inputFieldNode;\n            }\n            if (!(fieldName in this.reverseMap[typeName])) {\n                return inputFieldNode;\n            }\n            const fieldNameMap = this.reverseMap[typeName][fieldName];\n            return {\n                ...inputFieldNode,\n                arguments: (inputFieldNode.arguments || []).map(argNode => {\n                    return argNode.name.value in fieldNameMap\n                        ? {\n                            ...argNode,\n                            name: {\n                                ...argNode.name,\n                                value: fieldNameMap[argNode.name.value],\n                            },\n                        }\n                        : argNode;\n                }),\n            };\n        });\n        this.reverseMap = Object.create(null);\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        mapSchema(originalWrappingSchema, {\n            [MapperKind.OBJECT_FIELD]: (fieldConfig, fieldName, typeName) => {\n                Object.entries(fieldConfig.args || {}).forEach(([argName]) => {\n                    const newName = this.renamer(typeName, fieldName, argName);\n                    if (newName !== undefined && newName !== fieldName) {\n                        if (this.reverseMap[typeName] == null) {\n                            this.reverseMap[typeName] = Object.create(null);\n                        }\n                        if (this.reverseMap[typeName][fieldName] == null) {\n                            this.reverseMap[typeName][fieldName] = Object.create(null);\n                        }\n                        this.reverseMap[typeName][fieldName][newName] = argName;\n                    }\n                });\n                return undefined;\n            },\n            [MapperKind.ROOT_OBJECT]() {\n                return undefined;\n            },\n        });\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this.transformer.transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n}\n\nclass FilterObjectFields {\n    constructor(filter) {\n        this.transformer = new TransformObjectFields((typeName, fieldName, fieldConfig) => filter(typeName, fieldName, fieldConfig) ? undefined : null);\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n}\n\nclass TransformInterfaceFields {\n    constructor(interfaceFieldTransformer, fieldNodeTransformer) {\n        this.interfaceFieldTransformer = interfaceFieldTransformer;\n        this.fieldNodeTransformer = fieldNodeTransformer;\n    }\n    _getTransformer() {\n        const transformer = this.transformer;\n        if (transformer === undefined) {\n            throw new Error(`The TransformInterfaceFields transform's  \"transformRequest\" and \"transformResult\" methods cannot be used without first calling \"transformSchema\".`);\n        }\n        return transformer;\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        const compositeToObjectFieldTransformer = (typeName, fieldName, fieldConfig) => {\n            if (isInterfaceType(originalWrappingSchema.getType(typeName))) {\n                return this.interfaceFieldTransformer(typeName, fieldName, fieldConfig);\n            }\n            return undefined;\n        };\n        this.transformer = new TransformCompositeFields(compositeToObjectFieldTransformer, this.fieldNodeTransformer);\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this._getTransformer().transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n    transformResult(originalResult, delegationContext, transformationContext) {\n        return this._getTransformer().transformResult(originalResult, delegationContext, transformationContext);\n    }\n}\n\nclass RenameInterfaceFields {\n    constructor(renamer) {\n        this.transformer = new TransformInterfaceFields((typeName, fieldName, fieldConfig) => [\n            renamer(typeName, fieldName, fieldConfig),\n            fieldConfig,\n        ]);\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this.transformer.transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n}\n\nclass FilterInterfaceFields {\n    constructor(filter) {\n        this.transformer = new TransformInterfaceFields((typeName, fieldName, fieldConfig) => filter(typeName, fieldName, fieldConfig) ? undefined : null);\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n}\n\nclass TransformInputObjectFields {\n    constructor(inputFieldTransformer, inputFieldNodeTransformer, inputObjectNodeTransformer) {\n        this.inputFieldTransformer = inputFieldTransformer;\n        this.inputFieldNodeTransformer = inputFieldNodeTransformer;\n        this.inputObjectNodeTransformer = inputObjectNodeTransformer;\n        this.mapping = {};\n    }\n    _getTransformedSchema() {\n        const transformedSchema = this.transformedSchema;\n        if (transformedSchema === undefined) {\n            throw new Error(`The TransformInputObjectFields transform's  \"transformRequest\" and \"transformResult\" methods cannot be used without first calling \"transformSchema\".`);\n        }\n        return transformedSchema;\n    }\n    transformSchema(originalWrappingSchema, _subschemaConfig, _transformedSchema) {\n        this.transformedSchema = mapSchema(originalWrappingSchema, {\n            [MapperKind.INPUT_OBJECT_FIELD]: (inputFieldConfig, fieldName, typeName) => {\n                const transformedInputField = this.inputFieldTransformer(typeName, fieldName, inputFieldConfig);\n                if (Array.isArray(transformedInputField)) {\n                    const newFieldName = transformedInputField[0];\n                    if (newFieldName !== fieldName) {\n                        if (!(typeName in this.mapping)) {\n                            this.mapping[typeName] = {};\n                        }\n                        this.mapping[typeName][newFieldName] = fieldName;\n                    }\n                }\n                return transformedInputField;\n            },\n        });\n        return this.transformedSchema;\n    }\n    transformRequest(originalRequest, delegationContext, _transformationContext) {\n        var _a;\n        const variableValues = (_a = originalRequest.variables) !== null && _a !== void 0 ? _a : {};\n        const fragments = Object.create(null);\n        const operations = [];\n        for (const def of originalRequest.document.definitions) {\n            if (def.kind === Kind.OPERATION_DEFINITION) {\n                operations.push(def);\n            }\n            else if (def.kind === Kind.FRAGMENT_DEFINITION) {\n                fragments[def.name.value] = def;\n            }\n        }\n        for (const def of operations) {\n            const variableDefs = def.variableDefinitions;\n            if (variableDefs != null) {\n                for (const variableDef of variableDefs) {\n                    const varName = variableDef.variable.name.value;\n                    // Cast to NamedTypeNode required until upcomming graphql releases will have TypeNode paramter\n                    const varType = typeFromAST(delegationContext.transformedSchema, variableDef.type);\n                    if (!isInputType(varType)) {\n                        continue;\n                    }\n                    variableValues[varName] = transformInputValue(varType, variableValues[varName], undefined, (type, originalValue) => {\n                        var _a;\n                        const newValue = Object.create(null);\n                        const fields = type.getFields();\n                        for (const key in originalValue) {\n                            const field = fields[key];\n                            if (field != null) {\n                                const newFieldName = (_a = this.mapping[type.name]) === null || _a === void 0 ? void 0 : _a[field.name];\n                                if (newFieldName != null) {\n                                    newValue[newFieldName] = originalValue[field.name];\n                                }\n                                else {\n                                    newValue[field.name] = originalValue[field.name];\n                                }\n                            }\n                        }\n                        return newValue;\n                    });\n                }\n            }\n        }\n        for (const def of originalRequest.document.definitions.filter(def => def.kind === Kind.FRAGMENT_DEFINITION)) {\n            fragments[def.name.value] = def;\n        }\n        const document = this.transformDocument(originalRequest.document, this.mapping, this.inputFieldNodeTransformer, this.inputObjectNodeTransformer, originalRequest, delegationContext);\n        return {\n            ...originalRequest,\n            document,\n            variables: variableValues,\n        };\n    }\n    transformDocument(document, mapping, inputFieldNodeTransformer, inputObjectNodeTransformer, request, delegationContext) {\n        const typeInfo = new TypeInfo(this._getTransformedSchema());\n        const newDocument = visit(document, visitWithTypeInfo(typeInfo, {\n            [Kind.OBJECT]: {\n                leave: (node) => {\n                    // The casting is kind of legit here as we are in a visitor\n                    const parentType = typeInfo.getInputType();\n                    if (parentType != null) {\n                        const parentTypeName = parentType.name;\n                        const newInputFields = [];\n                        for (const inputField of node.fields) {\n                            const newName = inputField.name.value;\n                            const transformedInputField = inputFieldNodeTransformer != null\n                                ? inputFieldNodeTransformer(parentTypeName, newName, inputField, request, delegationContext)\n                                : inputField;\n                            if (Array.isArray(transformedInputField)) {\n                                for (const individualTransformedInputField of transformedInputField) {\n                                    const typeMapping = mapping[parentTypeName];\n                                    if (typeMapping == null) {\n                                        newInputFields.push(individualTransformedInputField);\n                                        continue;\n                                    }\n                                    const oldName = typeMapping[newName];\n                                    if (oldName == null) {\n                                        newInputFields.push(individualTransformedInputField);\n                                        continue;\n                                    }\n                                    newInputFields.push({\n                                        ...individualTransformedInputField,\n                                        name: {\n                                            ...individualTransformedInputField.name,\n                                            value: oldName,\n                                        },\n                                    });\n                                }\n                                continue;\n                            }\n                            const typeMapping = mapping[parentTypeName];\n                            if (typeMapping == null) {\n                                newInputFields.push(transformedInputField);\n                                continue;\n                            }\n                            const oldName = typeMapping[newName];\n                            if (oldName == null) {\n                                newInputFields.push(transformedInputField);\n                                continue;\n                            }\n                            newInputFields.push({\n                                ...transformedInputField,\n                                name: {\n                                    ...transformedInputField.name,\n                                    value: oldName,\n                                },\n                            });\n                        }\n                        const newNode = {\n                            ...node,\n                            fields: newInputFields,\n                        };\n                        return inputObjectNodeTransformer != null\n                            ? inputObjectNodeTransformer(parentTypeName, newNode, request, delegationContext)\n                            : newNode;\n                    }\n                },\n            },\n        }));\n        return newDocument;\n    }\n}\n\nclass RenameInputObjectFields {\n    constructor(renamer) {\n        this.renamer = renamer;\n        this.transformer = new TransformInputObjectFields((typeName, inputFieldName, inputFieldConfig) => {\n            const newName = renamer(typeName, inputFieldName, inputFieldConfig);\n            if (newName !== undefined && newName !== inputFieldName) {\n                const value = renamer(typeName, inputFieldName, inputFieldConfig);\n                if (value != null) {\n                    return [value, inputFieldConfig];\n                }\n            }\n        }, (typeName, inputFieldName, inputFieldNode) => {\n            if (!(typeName in this.reverseMap)) {\n                return inputFieldNode;\n            }\n            const inputFieldNameMap = this.reverseMap[typeName];\n            if (!(inputFieldName in inputFieldNameMap)) {\n                return inputFieldNode;\n            }\n            return {\n                ...inputFieldNode,\n                name: {\n                    ...inputFieldNode.name,\n                    value: inputFieldNameMap[inputFieldName],\n                },\n            };\n        });\n        this.reverseMap = Object.create(null);\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        mapSchema(originalWrappingSchema, {\n            [MapperKind.INPUT_OBJECT_FIELD]: (inputFieldConfig, fieldName, typeName) => {\n                const newName = this.renamer(typeName, fieldName, inputFieldConfig);\n                if (newName !== undefined && newName !== fieldName) {\n                    if (this.reverseMap[typeName] == null) {\n                        this.reverseMap[typeName] = Object.create(null);\n                    }\n                    this.reverseMap[typeName][newName] = fieldName;\n                }\n                return undefined;\n            },\n            [MapperKind.ROOT_OBJECT]() {\n                return undefined;\n            },\n        });\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this.transformer.transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n}\n\nclass FilterInputObjectFields {\n    constructor(filter, inputObjectNodeTransformer) {\n        this.transformer = new TransformInputObjectFields((typeName, fieldName, inputFieldConfig) => filter(typeName, fieldName, inputFieldConfig) ? undefined : null, undefined, inputObjectNodeTransformer);\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this.transformer.transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n}\n\nclass MapLeafValues {\n    constructor(inputValueTransformer, outputValueTransformer) {\n        this.inputValueTransformer = inputValueTransformer;\n        this.outputValueTransformer = outputValueTransformer;\n        this.resultVisitorMap = Object.create(null);\n    }\n    _getTypeInfo() {\n        const typeInfo = this.typeInfo;\n        if (typeInfo === undefined) {\n            throw new Error(`The MapLeafValues transform's  \"transformRequest\" and \"transformResult\" methods cannot be used without first calling \"transformSchema\".`);\n        }\n        return typeInfo;\n    }\n    _getOriginalWrappingSchema() {\n        const originalWrappingSchema = this.originalWrappingSchema;\n        if (originalWrappingSchema === undefined) {\n            throw new Error(`The MapLeafValues transform's  \"transformRequest\" and \"transformResult\" methods cannot be used without first calling \"transformSchema\".`);\n        }\n        return originalWrappingSchema;\n    }\n    transformSchema(originalWrappingSchema, _subschemaConfig, _transformedSchema) {\n        this.originalWrappingSchema = originalWrappingSchema;\n        const typeMap = originalWrappingSchema.getTypeMap();\n        for (const typeName in typeMap) {\n            const type = typeMap[typeName];\n            if (!typeName.startsWith('__')) {\n                if (isLeafType(type)) {\n                    this.resultVisitorMap[typeName] = (value) => this.outputValueTransformer(typeName, value);\n                }\n            }\n        }\n        this.typeInfo = new TypeInfo(originalWrappingSchema);\n        return originalWrappingSchema;\n    }\n    transformRequest(originalRequest, _delegationContext, transformationContext) {\n        var _a;\n        const document = originalRequest.document;\n        const variableValues = (_a = originalRequest.variables) !== null && _a !== void 0 ? _a : {};\n        const operations = document.definitions.filter(def => def.kind === Kind.OPERATION_DEFINITION);\n        const fragments = document.definitions.filter(def => def.kind === Kind.FRAGMENT_DEFINITION);\n        const newOperations = this.transformOperations(operations, variableValues);\n        const transformedRequest = {\n            ...originalRequest,\n            document: {\n                ...document,\n                definitions: [...newOperations, ...fragments],\n            },\n            variables: variableValues,\n        };\n        transformationContext.transformedRequest = transformedRequest;\n        return transformedRequest;\n    }\n    transformResult(originalResult, _delegationContext, transformationContext) {\n        return visitResult(originalResult, transformationContext.transformedRequest, this._getOriginalWrappingSchema(), this.resultVisitorMap);\n    }\n    transformOperations(operations, variableValues) {\n        return operations.map((operation) => {\n            var _a;\n            const variableDefinitionMap = ((_a = operation.variableDefinitions) !== null && _a !== void 0 ? _a : []).reduce((prev, def) => ({\n                ...prev,\n                [def.variable.name.value]: def,\n            }), {});\n            const newOperation = visit(operation, visitWithTypeInfo(this._getTypeInfo(), {\n                [Kind.FIELD]: node => this.transformFieldNode(node, variableDefinitionMap, variableValues),\n            }));\n            return {\n                ...newOperation,\n                variableDefinitions: Object.values(variableDefinitionMap),\n            };\n        });\n    }\n    transformFieldNode(field, variableDefinitionMap, variableValues) {\n        const targetField = this._getTypeInfo().getFieldDef();\n        if (!targetField) {\n            return;\n        }\n        const generateVariableName = createVariableNameGenerator(variableDefinitionMap);\n        if (!targetField.name.startsWith('__')) {\n            const argumentNodes = field.arguments;\n            if (argumentNodes != null) {\n                const argumentNodeMap = argumentNodes.reduce((prev, argument) => ({\n                    ...prev,\n                    [argument.name.value]: argument,\n                }), Object.create(null));\n                for (const argument of targetField.args) {\n                    const argName = argument.name;\n                    const argType = argument.type;\n                    const argumentNode = argumentNodeMap[argName];\n                    const argValue = argumentNode === null || argumentNode === void 0 ? void 0 : argumentNode.value;\n                    let value;\n                    if (argValue != null) {\n                        value = valueFromAST(argValue, argType, variableValues);\n                    }\n                    updateArgument(argumentNodeMap, variableDefinitionMap, variableValues, argName, generateVariableName(argName), argType, transformInputValue(argType, value, (t, v) => {\n                        const newValue = this.inputValueTransformer(t.name, v);\n                        return newValue === undefined ? v : newValue;\n                    }));\n                }\n                return {\n                    ...field,\n                    arguments: Object.values(argumentNodeMap),\n                };\n            }\n        }\n    }\n}\n\nclass TransformEnumValues {\n    constructor(enumValueTransformer, inputValueTransformer, outputValueTransformer) {\n        this.enumValueTransformer = enumValueTransformer;\n        this.mapping = Object.create(null);\n        this.reverseMapping = Object.create(null);\n        this.transformer = new MapLeafValues(generateValueTransformer(inputValueTransformer, this.reverseMapping), generateValueTransformer(outputValueTransformer, this.mapping));\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        const mappingSchema = this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n        this.transformedSchema = mapSchema(mappingSchema, {\n            [MapperKind.ENUM_VALUE]: (valueConfig, typeName, _schema, externalValue) => this.transformEnumValue(typeName, externalValue, valueConfig),\n        });\n        return this.transformedSchema;\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this.transformer.transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n    transformResult(originalResult, delegationContext, transformationContext) {\n        return this.transformer.transformResult(originalResult, delegationContext, transformationContext);\n    }\n    transformEnumValue(typeName, externalValue, enumValueConfig) {\n        const transformedEnumValue = this.enumValueTransformer(typeName, externalValue, enumValueConfig);\n        if (Array.isArray(transformedEnumValue)) {\n            const newExternalValue = transformedEnumValue[0];\n            if (newExternalValue !== externalValue) {\n                if (!(typeName in this.mapping)) {\n                    this.mapping[typeName] = Object.create(null);\n                    this.reverseMapping[typeName] = Object.create(null);\n                }\n                this.mapping[typeName][externalValue] = newExternalValue;\n                this.reverseMapping[typeName][newExternalValue] = externalValue;\n            }\n        }\n        return transformedEnumValue;\n    }\n}\nfunction mapEnumValues(typeName, value, mapping) {\n    var _a;\n    const newExternalValue = (_a = mapping[typeName]) === null || _a === void 0 ? void 0 : _a[value];\n    return newExternalValue != null ? newExternalValue : value;\n}\nfunction generateValueTransformer(valueTransformer, mapping) {\n    if (valueTransformer == null) {\n        return (typeName, value) => mapEnumValues(typeName, value, mapping);\n    }\n    else {\n        return (typeName, value) => mapEnumValues(typeName, valueTransformer(typeName, value), mapping);\n    }\n}\n\nclass TransformQuery {\n    constructor({ path, queryTransformer, resultTransformer = result => result, errorPathTransformer = errorPath => [...errorPath], fragments = {}, }) {\n        this.path = path;\n        this.queryTransformer = queryTransformer;\n        this.resultTransformer = resultTransformer;\n        this.errorPathTransformer = errorPathTransformer;\n        this.fragments = fragments;\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        const pathLength = this.path.length;\n        let index = 0;\n        const document = visit(originalRequest.document, {\n            [Kind.FIELD]: {\n                enter: node => {\n                    if (index === pathLength || node.name.value !== this.path[index]) {\n                        return false;\n                    }\n                    index++;\n                    if (index === pathLength) {\n                        const selectionSet = this.queryTransformer(node.selectionSet, this.fragments, delegationContext, transformationContext);\n                        return {\n                            ...node,\n                            selectionSet,\n                        };\n                    }\n                },\n                leave: () => {\n                    index--;\n                },\n            },\n        });\n        return {\n            ...originalRequest,\n            document,\n        };\n    }\n    transformResult(originalResult, delegationContext, transformationContext) {\n        const data = this.transformData(originalResult.data, delegationContext, transformationContext);\n        const errors = originalResult.errors;\n        return {\n            data,\n            errors: errors != null ? this.transformErrors(errors) : undefined,\n        };\n    }\n    transformData(data, delegationContext, transformationContext) {\n        const leafIndex = this.path.length - 1;\n        let index = 0;\n        let newData = data;\n        if (newData) {\n            let next = this.path[index];\n            while (index < leafIndex) {\n                if (data[next]) {\n                    newData = newData[next];\n                }\n                else {\n                    break;\n                }\n                index++;\n                next = this.path[index];\n            }\n            newData[next] = this.resultTransformer(newData[next], delegationContext, transformationContext);\n        }\n        return data;\n    }\n    transformErrors(errors) {\n        return errors.map(error => {\n            const path = error.path;\n            if (path == null) {\n                return error;\n            }\n            let match = true;\n            let index = 0;\n            while (index < this.path.length) {\n                if (path[index] !== this.path[index]) {\n                    match = false;\n                    break;\n                }\n                index++;\n            }\n            const newPath = match ? path.slice(0, index).concat(this.errorPathTransformer(path.slice(index))) : path;\n            return relocatedError(error, newPath);\n        });\n    }\n}\n\nclass FilterObjectFieldDirectives {\n    constructor(filter) {\n        this.filter = filter;\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        const transformer = new TransformObjectFields((_typeName, _fieldName, fieldConfig) => {\n            var _a, _b, _c, _d;\n            const keepDirectives = (_c = (_b = (_a = fieldConfig.astNode) === null || _a === void 0 ? void 0 : _a.directives) === null || _b === void 0 ? void 0 : _b.filter(dir => {\n                const directiveDef = originalWrappingSchema.getDirective(dir.name.value);\n                const directiveValue = directiveDef ? getArgumentValues(directiveDef, dir) : undefined;\n                return this.filter(dir.name.value, directiveValue);\n            })) !== null && _c !== void 0 ? _c : [];\n            if (((_d = fieldConfig.astNode) === null || _d === void 0 ? void 0 : _d.directives) != null &&\n                keepDirectives.length !== fieldConfig.astNode.directives.length) {\n                fieldConfig = {\n                    ...fieldConfig,\n                    astNode: {\n                        ...fieldConfig.astNode,\n                        directives: keepDirectives,\n                    },\n                };\n                return fieldConfig;\n            }\n        });\n        return transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n}\n\nclass RemoveObjectFieldDirectives {\n    constructor(directiveName, args = {}) {\n        this.transformer = new FilterObjectFieldDirectives((dirName, dirValue) => {\n            return !(valueMatchesCriteria(dirName, directiveName) && valueMatchesCriteria(dirValue, args));\n        });\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n}\n\nclass RemoveObjectFieldsWithDirective {\n    constructor(directiveName, args = {}) {\n        this.directiveName = directiveName;\n        this.args = args;\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        const transformer = new FilterObjectFields((_typeName, _fieldName, fieldConfig) => {\n            const directives = getDirectives(originalWrappingSchema, fieldConfig);\n            return !directives.some(directive => valueMatchesCriteria(directive.name, this.directiveName) && valueMatchesCriteria(directive.args, this.args));\n        });\n        return transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n}\n\nclass RemoveObjectFieldDeprecations {\n    constructor(reason) {\n        const args = { reason };\n        this.removeDirectives = new FilterObjectFieldDirectives((dirName, dirValue) => {\n            return !(dirName === 'deprecated' && valueMatchesCriteria(dirValue, args));\n        });\n        this.removeDeprecations = new TransformObjectFields((_typeName, _fieldName, fieldConfig) => {\n            if (fieldConfig.deprecationReason && valueMatchesCriteria(fieldConfig.deprecationReason, reason)) {\n                fieldConfig = { ...fieldConfig };\n                delete fieldConfig.deprecationReason;\n            }\n            return fieldConfig;\n        });\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        return this.removeDeprecations.transformSchema(this.removeDirectives.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema), subschemaConfig, transformedSchema);\n    }\n}\n\nclass RemoveObjectFieldsWithDeprecation {\n    constructor(reason) {\n        this.transformer = new FilterObjectFields((_typeName, _fieldName, fieldConfig) => {\n            if (fieldConfig.deprecationReason) {\n                return !valueMatchesCriteria(fieldConfig.deprecationReason, reason);\n            }\n            return true;\n        });\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n}\n\nclass PruneTypes {\n    constructor(options = {}) {\n        this.options = options;\n    }\n    transformSchema(originalWrappingSchema, _subschemaConfig, _transformedSchema) {\n        return pruneSchema(originalWrappingSchema, this.options);\n    }\n}\n\nclass MapFields {\n    constructor(fieldNodeTransformerMap, objectValueTransformerMap, errorsTransformer) {\n        this.fieldNodeTransformerMap = fieldNodeTransformerMap;\n        this.objectValueTransformerMap = objectValueTransformerMap;\n        this.errorsTransformer = errorsTransformer;\n    }\n    _getTransformer() {\n        const transformer = this.transformer;\n        if (transformer === undefined) {\n            throw new Error(`The MapFields transform's  \"transformRequest\" and \"transformResult\" methods cannot be used without first calling \"transformSchema\".`);\n        }\n        return transformer;\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        var _a;\n        const subscriptionTypeName = (_a = originalWrappingSchema.getSubscriptionType()) === null || _a === void 0 ? void 0 : _a.name;\n        const objectValueTransformerMap = this.objectValueTransformerMap;\n        this.transformer = new TransformCompositeFields(() => undefined, (typeName, fieldName, fieldNode, fragments, transformationContext) => {\n            const typeTransformers = this.fieldNodeTransformerMap[typeName];\n            if (typeTransformers == null) {\n                return undefined;\n            }\n            const fieldNodeTransformer = typeTransformers[fieldName];\n            if (fieldNodeTransformer == null) {\n                return undefined;\n            }\n            return fieldNodeTransformer(fieldNode, fragments, transformationContext);\n        }, objectValueTransformerMap != null\n            ? (data, transformationContext) => {\n                if (data == null) {\n                    return data;\n                }\n                let typeName = data.__typename;\n                if (typeName == null) {\n                    // see https://github.com/ardatan/graphql-tools/issues/2282\n                    typeName = subscriptionTypeName;\n                    if (typeName == null) {\n                        return data;\n                    }\n                }\n                const transformer = objectValueTransformerMap[typeName];\n                if (transformer == null) {\n                    return data;\n                }\n                return transformer(data, transformationContext);\n            }\n            : undefined, this.errorsTransformer != null ? this.errorsTransformer : undefined);\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this._getTransformer().transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n    transformResult(originalResult, delegationContext, transformationContext) {\n        return this._getTransformer().transformResult(originalResult, delegationContext, transformationContext);\n    }\n}\n\nclass WrapFields {\n    constructor(outerTypeName, wrappingFieldNames, wrappingTypeNames, fieldNames, prefix = 'gqtld') {\n        this.outerTypeName = outerTypeName;\n        this.wrappingFieldNames = wrappingFieldNames;\n        this.wrappingTypeNames = wrappingTypeNames;\n        this.numWraps = wrappingFieldNames.length;\n        this.fieldNames = fieldNames;\n        const remainingWrappingFieldNames = this.wrappingFieldNames.slice();\n        const outerMostWrappingFieldName = remainingWrappingFieldNames.shift();\n        if (outerMostWrappingFieldName == null) {\n            throw new Error(`Cannot wrap fields, no wrapping field name provided.`);\n        }\n        this.transformer = new MapFields({\n            [outerTypeName]: {\n                [outerMostWrappingFieldName]: (fieldNode, fragments, transformationContext) => hoistFieldNodes({\n                    fieldNode,\n                    path: remainingWrappingFieldNames,\n                    fieldNames,\n                    fragments,\n                    transformationContext: transformationContext,\n                    prefix,\n                }),\n            },\n        }, {\n            [outerTypeName]: (value, context) => dehoistValue(value, context),\n        }, (errors, context) => dehoistErrors(errors, context));\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        var _a, _b, _c, _d;\n        const fieldNames = this.fieldNames;\n        const targetFieldConfigMap = selectObjectFields(originalWrappingSchema, this.outerTypeName, !fieldNames ? () => true : fieldName => fieldNames.includes(fieldName));\n        const newTargetFieldConfigMap = Object.create(null);\n        for (const fieldName in targetFieldConfigMap) {\n            const field = targetFieldConfigMap[fieldName];\n            const newField = {\n                ...field,\n                resolve: defaultMergedResolver,\n            };\n            newTargetFieldConfigMap[fieldName] = newField;\n        }\n        let wrapIndex = this.numWraps - 1;\n        let wrappingTypeName = this.wrappingTypeNames[wrapIndex];\n        let wrappingFieldName = this.wrappingFieldNames[wrapIndex];\n        let newSchema = appendObjectFields(originalWrappingSchema, wrappingTypeName, newTargetFieldConfigMap);\n        for (wrapIndex--; wrapIndex > -1; wrapIndex--) {\n            const nextWrappingTypeName = this.wrappingTypeNames[wrapIndex];\n            newSchema = appendObjectFields(newSchema, nextWrappingTypeName, {\n                [wrappingFieldName]: {\n                    type: new GraphQLNonNull(newSchema.getType(wrappingTypeName)),\n                    resolve: defaultMergedResolver,\n                },\n            });\n            wrappingTypeName = nextWrappingTypeName;\n            wrappingFieldName = this.wrappingFieldNames[wrapIndex];\n        }\n        const wrappingRootField = this.outerTypeName === ((_a = originalWrappingSchema.getQueryType()) === null || _a === void 0 ? void 0 : _a.name) ||\n            this.outerTypeName === ((_b = originalWrappingSchema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name);\n        let resolve;\n        if (transformedSchema) {\n            if (wrappingRootField) {\n                const targetSchema = subschemaConfig.schema;\n                const operation = this.outerTypeName === ((_c = targetSchema.getQueryType()) === null || _c === void 0 ? void 0 : _c.name) ? 'query' : 'mutation';\n                const createProxyingResolver = (_d = subschemaConfig.createProxyingResolver) !== null && _d !== void 0 ? _d : defaultCreateProxyingResolver;\n                resolve = createProxyingResolver({\n                    subschemaConfig,\n                    transformedSchema,\n                    operation: operation,\n                    fieldName: wrappingFieldName,\n                });\n            }\n            else {\n                resolve = defaultMergedResolver;\n            }\n        }\n        [newSchema] = modifyObjectFields(newSchema, this.outerTypeName, fieldName => !!newTargetFieldConfigMap[fieldName], {\n            [wrappingFieldName]: {\n                type: new GraphQLNonNull(newSchema.getType(wrappingTypeName)),\n                resolve,\n            },\n        });\n        return this.transformer.transformSchema(newSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        transformationContext.nextIndex = 0;\n        transformationContext.paths = Object.create(null);\n        return this.transformer.transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n    transformResult(originalResult, delegationContext, transformationContext) {\n        return this.transformer.transformResult(originalResult, delegationContext, transformationContext);\n    }\n}\nfunction collectFields(selectionSet, fragments, fields = [], visitedFragmentNames = {}) {\n    if (selectionSet != null) {\n        for (const selection of selectionSet.selections) {\n            switch (selection.kind) {\n                case Kind.FIELD:\n                    fields.push(selection);\n                    break;\n                case Kind.INLINE_FRAGMENT:\n                    collectFields(selection.selectionSet, fragments, fields, visitedFragmentNames);\n                    break;\n                case Kind.FRAGMENT_SPREAD: {\n                    const fragmentName = selection.name.value;\n                    if (!visitedFragmentNames[fragmentName]) {\n                        visitedFragmentNames[fragmentName] = true;\n                        collectFields(fragments[fragmentName].selectionSet, fragments, fields, visitedFragmentNames);\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    return fields;\n}\nfunction aliasFieldNode(fieldNode, str) {\n    return {\n        ...fieldNode,\n        alias: {\n            kind: Kind.NAME,\n            value: str,\n        },\n    };\n}\nfunction hoistFieldNodes({ fieldNode, fieldNames, path, fragments, transformationContext, prefix, index = 0, wrappingPath = [], }) {\n    const alias = fieldNode.alias != null ? fieldNode.alias.value : fieldNode.name.value;\n    let newFieldNodes = [];\n    if (index < path.length) {\n        const pathSegment = path[index];\n        for (const possibleFieldNode of collectFields(fieldNode.selectionSet, fragments)) {\n            if (possibleFieldNode.name.value === pathSegment) {\n                const newWrappingPath = wrappingPath.concat([alias]);\n                newFieldNodes = newFieldNodes.concat(hoistFieldNodes({\n                    fieldNode: possibleFieldNode,\n                    fieldNames,\n                    path,\n                    fragments,\n                    transformationContext,\n                    prefix,\n                    index: index + 1,\n                    wrappingPath: newWrappingPath,\n                }));\n            }\n        }\n    }\n    else {\n        for (const possibleFieldNode of collectFields(fieldNode.selectionSet, fragments)) {\n            if (!fieldNames || fieldNames.includes(possibleFieldNode.name.value)) {\n                const nextIndex = transformationContext.nextIndex;\n                transformationContext.nextIndex++;\n                const indexingAlias = `__${prefix}${nextIndex}__`;\n                transformationContext.paths[indexingAlias] = {\n                    pathToField: wrappingPath.concat([alias]),\n                    alias: possibleFieldNode.alias != null ? possibleFieldNode.alias.value : possibleFieldNode.name.value,\n                };\n                newFieldNodes.push(aliasFieldNode(possibleFieldNode, indexingAlias));\n            }\n        }\n    }\n    return newFieldNodes;\n}\nfunction dehoistValue(originalValue, context) {\n    if (originalValue == null) {\n        return originalValue;\n    }\n    const newValue = Object.create(null);\n    for (const alias in originalValue) {\n        let obj = newValue;\n        const path = context.paths[alias];\n        if (path == null) {\n            newValue[alias] = originalValue[alias];\n            continue;\n        }\n        const pathToField = path.pathToField;\n        const fieldAlias = path.alias;\n        for (const key of pathToField) {\n            obj = obj[key] = obj[key] || Object.create(null);\n        }\n        obj[fieldAlias] = originalValue[alias];\n    }\n    return newValue;\n}\nfunction dehoistErrors(errors, context) {\n    if (errors === undefined) {\n        return undefined;\n    }\n    return errors.map(error => {\n        const originalPath = error.path;\n        if (originalPath == null) {\n            return error;\n        }\n        let newPath = [];\n        for (const pathSegment of originalPath) {\n            if (typeof pathSegment !== 'string') {\n                newPath.push(pathSegment);\n                continue;\n            }\n            const path = context.paths[pathSegment];\n            if (path == null) {\n                newPath.push(pathSegment);\n                continue;\n            }\n            newPath = newPath.concat(path.pathToField, [path.alias]);\n        }\n        return relocatedError(error, newPath);\n    });\n}\n\nclass WrapType {\n    constructor(outerTypeName, innerTypeName, fieldName) {\n        this.transformer = new WrapFields(outerTypeName, [fieldName], [innerTypeName]);\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        return this.transformer.transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this.transformer.transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n    transformResult(originalResult, delegationContext, transformationContext) {\n        return this.transformer.transformResult(originalResult, delegationContext, transformationContext);\n    }\n}\n\nclass HoistField {\n    constructor(typeName, pathConfig, newFieldName, alias = '__gqtlw__') {\n        this.typeName = typeName;\n        this.newFieldName = newFieldName;\n        const path = pathConfig.map(segment => (typeof segment === 'string' ? segment : segment.fieldName));\n        this.argFilters = pathConfig.map((segment, index) => {\n            if (typeof segment === 'string' || segment.argFilter == null) {\n                return index === pathConfig.length - 1 ? () => true : () => false;\n            }\n            return segment.argFilter;\n        });\n        const pathToField = path.slice();\n        const oldFieldName = pathToField.pop();\n        if (oldFieldName == null) {\n            throw new Error(`Cannot hoist field to ${newFieldName} on type ${typeName}, no path provided.`);\n        }\n        this.oldFieldName = oldFieldName;\n        this.pathToField = pathToField;\n        const argLevels = Object.create(null);\n        this.transformer = new MapFields({\n            [typeName]: {\n                [newFieldName]: fieldNode => wrapFieldNode(renameFieldNode(fieldNode, oldFieldName), pathToField, alias, argLevels),\n            },\n        }, {\n            [typeName]: value => unwrapValue(value, alias),\n        }, errors => (errors != null ? unwrapErrors(errors, alias) : undefined));\n        this.argLevels = argLevels;\n    }\n    transformSchema(originalWrappingSchema, subschemaConfig, transformedSchema) {\n        var _a, _b, _c, _d;\n        const argsMap = Object.create(null);\n        const innerType = this.pathToField.reduce((acc, pathSegment, index) => {\n            const field = acc.getFields()[pathSegment];\n            for (const arg of field.args) {\n                if (this.argFilters[index](arg)) {\n                    argsMap[arg.name] = arg;\n                    this.argLevels[arg.name] = index;\n                }\n            }\n            return getNullableType(field.type);\n        }, originalWrappingSchema.getType(this.typeName));\n        let [newSchema, targetFieldConfigMap] = removeObjectFields(originalWrappingSchema, innerType.name, fieldName => fieldName === this.oldFieldName);\n        const targetField = targetFieldConfigMap[this.oldFieldName];\n        let resolve;\n        if (transformedSchema) {\n            const hoistingToRootField = this.typeName === ((_a = originalWrappingSchema.getQueryType()) === null || _a === void 0 ? void 0 : _a.name) ||\n                this.typeName === ((_b = originalWrappingSchema.getMutationType()) === null || _b === void 0 ? void 0 : _b.name);\n            if (hoistingToRootField) {\n                const targetSchema = subschemaConfig.schema;\n                const operation = this.typeName === ((_c = targetSchema.getQueryType()) === null || _c === void 0 ? void 0 : _c.name) ? 'query' : 'mutation';\n                const createProxyingResolver = (_d = subschemaConfig.createProxyingResolver) !== null && _d !== void 0 ? _d : defaultCreateProxyingResolver;\n                resolve = createProxyingResolver({\n                    subschemaConfig,\n                    transformedSchema,\n                    operation: operation,\n                    fieldName: this.newFieldName,\n                });\n            }\n            else {\n                resolve = defaultMergedResolver;\n            }\n        }\n        const newTargetField = {\n            ...targetField,\n            resolve: resolve,\n        };\n        const level = this.pathToField.length;\n        const args = targetField.args;\n        if (args != null) {\n            for (const argName in args) {\n                const argConfig = args[argName];\n                if (argConfig == null) {\n                    continue;\n                }\n                const arg = {\n                    ...argConfig,\n                    name: argName,\n                    description: argConfig.description,\n                    defaultValue: argConfig.defaultValue,\n                    extensions: argConfig.extensions,\n                    astNode: argConfig.astNode,\n                };\n                if (this.argFilters[level](arg)) {\n                    argsMap[argName] = arg;\n                    this.argLevels[arg.name] = level;\n                }\n            }\n        }\n        newTargetField.args = argsMap;\n        newSchema = appendObjectFields(newSchema, this.typeName, {\n            [this.newFieldName]: newTargetField,\n        });\n        return this.transformer.transformSchema(newSchema, subschemaConfig, transformedSchema);\n    }\n    transformRequest(originalRequest, delegationContext, transformationContext) {\n        return this.transformer.transformRequest(originalRequest, delegationContext, transformationContext);\n    }\n    transformResult(originalResult, delegationContext, transformationContext) {\n        return this.transformer.transformResult(originalResult, delegationContext, transformationContext);\n    }\n}\nfunction wrapFieldNode(fieldNode, path, alias, argLevels) {\n    return path.reduceRight((acc, fieldName, index) => ({\n        kind: Kind.FIELD,\n        alias: {\n            kind: Kind.NAME,\n            value: alias,\n        },\n        name: {\n            kind: Kind.NAME,\n            value: fieldName,\n        },\n        selectionSet: {\n            kind: Kind.SELECTION_SET,\n            selections: [acc],\n        },\n        arguments: fieldNode.arguments != null\n            ? fieldNode.arguments.filter(arg => argLevels[arg.name.value] === index)\n            : undefined,\n    }), {\n        ...fieldNode,\n        arguments: fieldNode.arguments != null\n            ? fieldNode.arguments.filter(arg => argLevels[arg.name.value] === path.length)\n            : undefined,\n    });\n}\nfunction renameFieldNode(fieldNode, name) {\n    return {\n        ...fieldNode,\n        alias: {\n            kind: Kind.NAME,\n            value: fieldNode.alias != null ? fieldNode.alias.value : fieldNode.name.value,\n        },\n        name: {\n            kind: Kind.NAME,\n            value: name,\n        },\n    };\n}\nfunction unwrapValue(originalValue, alias) {\n    let newValue = originalValue;\n    let object = newValue[alias];\n    while (object != null) {\n        newValue = object;\n        object = newValue[alias];\n    }\n    delete originalValue[alias];\n    Object.assign(originalValue, newValue);\n    return originalValue;\n}\nfunction unwrapErrors(errors, alias) {\n    if (errors === undefined) {\n        return undefined;\n    }\n    return errors.map(error => {\n        const originalPath = error.path;\n        if (originalPath == null) {\n            return error;\n        }\n        const newPath = originalPath.filter(pathSegment => pathSegment !== alias);\n        return relocatedError(error, newPath);\n    });\n}\n\nclass WrapQuery {\n    constructor(path, wrapper, extractor) {\n        this.path = path;\n        this.wrapper = wrapper;\n        this.extractor = extractor;\n    }\n    transformRequest(originalRequest, _delegationContext, _transformationContext) {\n        const fieldPath = [];\n        const ourPath = JSON.stringify(this.path);\n        const document = visit(originalRequest.document, {\n            [Kind.FIELD]: {\n                enter: (node) => {\n                    fieldPath.push(node.name.value);\n                    if (node.selectionSet != null && ourPath === JSON.stringify(fieldPath)) {\n                        const wrapResult = this.wrapper(node.selectionSet);\n                        // Selection can be either a single selection or a selection set. If it's just one selection,\n                        // let's wrap it in a selection set. Otherwise, keep it as is.\n                        const selectionSet = wrapResult != null && wrapResult.kind === Kind.SELECTION_SET\n                            ? wrapResult\n                            : {\n                                kind: Kind.SELECTION_SET,\n                                selections: [wrapResult],\n                            };\n                        return {\n                            ...node,\n                            selectionSet,\n                        };\n                    }\n                },\n                leave: () => {\n                    fieldPath.pop();\n                },\n            },\n        });\n        return {\n            ...originalRequest,\n            document,\n        };\n    }\n    transformResult(originalResult, _delegationContext, _transformationContext) {\n        const rootData = originalResult.data;\n        if (rootData != null) {\n            let data = rootData;\n            const path = [...this.path];\n            while (path.length > 1) {\n                const next = path.shift();\n                if (data[next]) {\n                    data = data[next];\n                }\n            }\n            data[path[0]] = this.extractor(data[path[0]]);\n        }\n        return {\n            data: rootData,\n            errors: originalResult.errors,\n        };\n    }\n}\n\nclass ExtractField {\n    constructor({ from, to }) {\n        this.from = from;\n        this.to = to;\n    }\n    transformRequest(originalRequest, _delegationContext, _transformationContext) {\n        let fromSelection;\n        const ourPathFrom = JSON.stringify(this.from);\n        const ourPathTo = JSON.stringify(this.to);\n        let fieldPath = [];\n        visit(originalRequest.document, {\n            [Kind.FIELD]: {\n                enter: (node) => {\n                    fieldPath.push(node.name.value);\n                    if (ourPathFrom === JSON.stringify(fieldPath)) {\n                        fromSelection = node.selectionSet;\n                        return BREAK;\n                    }\n                },\n                leave: () => {\n                    fieldPath.pop();\n                },\n            },\n        });\n        fieldPath = [];\n        const document = visit(originalRequest.document, {\n            [Kind.FIELD]: {\n                enter: (node) => {\n                    fieldPath.push(node.name.value);\n                    if (ourPathTo === JSON.stringify(fieldPath) && fromSelection != null) {\n                        return {\n                            ...node,\n                            selectionSet: fromSelection,\n                        };\n                    }\n                },\n                leave: () => {\n                    fieldPath.pop();\n                },\n            },\n        });\n        return {\n            ...originalRequest,\n            document,\n        };\n    }\n}\n\nfunction getSchemaFromIntrospection(introspectionResult, options) {\n    var _a;\n    if ((_a = introspectionResult === null || introspectionResult === void 0 ? void 0 : introspectionResult.data) === null || _a === void 0 ? void 0 : _a.__schema) {\n        return buildClientSchema(introspectionResult.data, options);\n    }\n    throw new Error('Could not obtain introspection result, received: ' + JSON.stringify(introspectionResult));\n}\nfunction introspectSchema(executor, context, options) {\n    const parsedIntrospectionQuery = parse(getIntrospectionQuery(options), options);\n    return new ValueOrPromise(() => executor({\n        document: parsedIntrospectionQuery,\n        context,\n    }))\n        .then(introspection => {\n        if (isAsyncIterable(introspection)) {\n            const iterator = introspection[Symbol.asyncIterator]();\n            return iterator.next().then(({ value }) => value);\n        }\n        return introspection;\n    })\n        .then(introspection => getSchemaFromIntrospection(introspection, options))\n        .resolve();\n}\n\nexport { ExtractField, FilterInputObjectFields, FilterInterfaceFields, FilterObjectFieldDirectives, FilterObjectFields, FilterRootFields, FilterTypes, HoistField, MapFields, MapLeafValues, PruneTypes as PruneSchema, RemoveObjectFieldDeprecations, RemoveObjectFieldDirectives, RemoveObjectFieldsWithDeprecation, RemoveObjectFieldsWithDirective, RenameInputObjectFields, RenameInterfaceFields, RenameObjectFieldArguments, RenameObjectFields, RenameRootFields, RenameRootTypes, RenameTypes, TransformCompositeFields, TransformEnumValues, TransformInputObjectFields, TransformInterfaceFields, TransformObjectFields, TransformQuery, TransformRootFields, WrapFields, WrapQuery, WrapType, defaultCreateProxyingResolver, generateProxyingResolvers, introspectSchema, wrapSchema };\n", "import { TypeInfo, ValidationContext, visitInParallel, visit, visitWithTypeInfo, GraphQLError, isListType, getNamedType, GraphQLInputObjectType, GraphQLNonNull } from 'graphql';\nimport { getArgumentValues } from '@graphql-tools/utils';\n\nconst symbolExtendedValidationRules = Symbol('extendedValidationContext');\nconst useExtendedValidation = (options) => {\n    let schemaTypeInfo;\n    function getTypeInfo() {\n        return schemaTypeInfo;\n    }\n    return {\n        onSchemaChange({ schema }) {\n            schemaTypeInfo = new TypeInfo(schema);\n        },\n        onContextBuilding({ context, extendContext }) {\n            // We initialize the validationRules context in onContextBuilding as onExecute is already too late!\n            let validationRulesContext = context[symbolExtendedValidationRules];\n            if (validationRulesContext === undefined) {\n                validationRulesContext = {\n                    rules: [],\n                    didRun: false,\n                };\n                extendContext({\n                    [symbolExtendedValidationRules]: validationRulesContext,\n                });\n            }\n            validationRulesContext.rules.push(...options.rules);\n        },\n        onSubscribe: buildHandler('subscribe', getTypeInfo, options.onValidationFailed),\n        onExecute: buildHandler('execute', getTypeInfo, options.onValidationFailed),\n    };\n};\nfunction buildHandler(name, getTypeInfo, onValidationFailed) {\n    return function handler({ args, setResultAndStopExecution, }) {\n        var _a;\n        // We hook into onExecute/onSubscribe even though this is a validation pattern. The reasoning behind\n        // it is that hooking right after validation and before execution has started is the\n        // same as hooking into the validation step. The benefit of this approach is that\n        // we may use execution context in the validation rules.\n        const validationRulesContext = args.contextValue[symbolExtendedValidationRules];\n        if (validationRulesContext === undefined) {\n            throw new Error('Plugin has not been properly set up. ' +\n                `The 'contextFactory' function is not invoked and the result has not been passed to '${name}'.`);\n        }\n        // we only want to run the extended execution once.\n        if (validationRulesContext.didRun === false) {\n            validationRulesContext.didRun = true;\n            if (validationRulesContext.rules.length !== 0) {\n                const errors = [];\n                // We replicate the default validation step manually before execution starts.\n                const typeInfo = (_a = getTypeInfo()) !== null && _a !== void 0 ? _a : new TypeInfo(args.schema);\n                const validationContext = new ValidationContext(args.schema, args.document, typeInfo, e => {\n                    errors.push(e);\n                });\n                const visitor = visitInParallel(validationRulesContext.rules.map(rule => rule(validationContext, args)));\n                visit(args.document, visitWithTypeInfo(typeInfo, visitor));\n                if (errors.length > 0) {\n                    let result = {\n                        data: null,\n                        errors,\n                    };\n                    if (onValidationFailed) {\n                        onValidationFailed({ args, result, setResult: newResult => (result = newResult) });\n                    }\n                    setResultAndStopExecution(result);\n                }\n            }\n        }\n    };\n}\n\nfunction getDirectiveFromAstNode(astNode, names) {\n    const directives = astNode.directives || [];\n    const namesArr = Array.isArray(names) ? names : [names];\n    const authDirective = directives.find(d => namesArr.includes(d.name.value));\n    return authDirective || null;\n}\n\nconst ONE_OF_DIRECTIVE_SDL = /* GraphQL */ `\n  directive @oneOf on INPUT_OBJECT | FIELD_DEFINITION\n`;\nconst OneOfInputObjectsRule = (validationContext, executionArgs) => {\n    return {\n        Field: node => {\n            var _a, _b;\n            if ((_a = node.arguments) === null || _a === void 0 ? void 0 : _a.length) {\n                const fieldType = validationContext.getFieldDef();\n                if (!fieldType) {\n                    return;\n                }\n                const values = getArgumentValues(fieldType, node, executionArgs.variableValues || undefined);\n                const isOneOfFieldType = ((_b = fieldType.extensions) === null || _b === void 0 ? void 0 : _b.oneOf) || (fieldType.astNode && getDirectiveFromAstNode(fieldType.astNode, 'oneOf'));\n                if (isOneOfFieldType) {\n                    if (Object.keys(values).length !== 1) {\n                        validationContext.reportError(new GraphQLError(`Exactly one key must be specified for input for field \"${fieldType.type.toString()}.${node.name.value}\"`, [node]));\n                    }\n                }\n                for (const arg of node.arguments) {\n                    const argType = fieldType.args.find(typeArg => typeArg.name === arg.name.value);\n                    if (argType) {\n                        traverseVariables(validationContext, arg, argType.type, values[arg.name.value]);\n                    }\n                }\n            }\n        },\n    };\n};\nfunction getNonNullType(ttype) {\n    if (ttype instanceof GraphQLNonNull) {\n        return ttype.ofType;\n    }\n    return ttype;\n}\nfunction traverseVariables(validationContext, arg, graphqlType, currentValue) {\n    var _a;\n    // if the current value is empty we don't need to traverse deeper\n    // if it shouldn't be empty, the \"original\" validation phase should complain.\n    if (currentValue == null) {\n        return;\n    }\n    const unwrappedType = getNonNullType(graphqlType);\n    if (isListType(unwrappedType)) {\n        if (!Array.isArray(currentValue)) {\n            // because of graphql type coercion a single object should be treated as an array of one object\n            currentValue = [currentValue];\n        }\n        currentValue.forEach(value => {\n            traverseVariables(validationContext, arg, unwrappedType.ofType, value);\n        });\n        return;\n    }\n    if (typeof currentValue !== 'object' || currentValue == null) {\n        // in case the value is not an object, the \"original\" validation phase should complain.\n        return;\n    }\n    const inputType = getNamedType(graphqlType);\n    const isOneOfInputType = ((_a = inputType.extensions) === null || _a === void 0 ? void 0 : _a.oneOf) || (inputType.astNode && getDirectiveFromAstNode(inputType.astNode, 'oneOf'));\n    if (isOneOfInputType) {\n        if (Object.keys(currentValue).length !== 1) {\n            validationContext.reportError(new GraphQLError(`Exactly one key must be specified for input type \"${inputType.name}\"`, [arg]));\n        }\n    }\n    if (inputType instanceof GraphQLInputObjectType) {\n        for (const [name, fieldConfig] of Object.entries(inputType.getFields())) {\n            traverseVariables(validationContext, arg, fieldConfig.type, currentValue[name]);\n        }\n    }\n}\n\nexport { ONE_OF_DIRECTIVE_SDL, OneOfInputObjectsRule, getDirectiveFromAstNode, useExtendedValidation };\n", "import { path, fs } from '@graphql-mesh/cross-helpers';\nimport { writeFile } from '@graphql-mesh/utils';\nimport { diff, CriticalityLevel } from '@graphql-inspector/core';\nimport { getDocumentNodeFromSchema, AggregateError } from '@graphql-tools/utils';\nimport { buildASTSchema } from 'graphql';\n\nclass ReadonlyStoreError extends Error {\n}\nclass ValidationError extends Error {\n}\nclass InMemoryStoreStorageAdapter {\n    constructor() {\n        this.data = new Map();\n    }\n    async read(key, options) {\n        return this.data.get(key);\n    }\n    async write(key, data, options) {\n        this.data.set(key, data);\n    }\n    async delete(key) {\n        this.data.delete(key);\n    }\n    clear() {\n        this.data.clear();\n    }\n}\nclass FsStoreStorageAdapter {\n    constructor(options) {\n        this.options = options;\n    }\n    getAbsolutePath(jsFileName) {\n        return path.isAbsolute(jsFileName) ? jsFileName : path.join(this.options.cwd, jsFileName);\n    }\n    async read(key, options) {\n        let absoluteModulePath = this.getAbsolutePath(key);\n        if (this.options.fileType !== 'ts') {\n            absoluteModulePath += '.' + this.options.fileType;\n        }\n        try {\n            const importedData = await this.options.importFn(absoluteModulePath).then(m => m.default || m);\n            if (this.options.fileType === 'json') {\n                return await options.fromJSON(importedData, key);\n            }\n            return importedData;\n        }\n        catch (e) {\n            if (e.message.startsWith('Cannot find module')) {\n                return undefined;\n            }\n            throw e;\n        }\n    }\n    async write(key, data, options) {\n        const asString = this.options.fileType === 'json'\n            ? JSON.stringify(await options.toJSON(data, key))\n            : `// @ts-nocheck\\n` + (await options.codify(data, key));\n        const modulePath = this.getAbsolutePath(key);\n        const filePath = modulePath + '.' + this.options.fileType;\n        await writeFile(filePath, asString);\n        await this.options.importFn(this.options.fileType !== 'ts' ? filePath : modulePath);\n    }\n    async delete(key) {\n        const filePath = this.getAbsolutePath(key) + '.' + this.options.fileType;\n        return fs.promises.unlink(filePath);\n    }\n}\nvar PredefinedProxyOptionsName;\n(function (PredefinedProxyOptionsName) {\n    PredefinedProxyOptionsName[\"JsonWithoutValidation\"] = \"JsonWithoutValidation\";\n    PredefinedProxyOptionsName[\"StringWithoutValidation\"] = \"StringWithoutValidation\";\n    PredefinedProxyOptionsName[\"GraphQLSchemaWithDiffing\"] = \"GraphQLSchemaWithDiffing\";\n})(PredefinedProxyOptionsName || (PredefinedProxyOptionsName = {}));\nconst PredefinedProxyOptions = {\n    JsonWithoutValidation: {\n        codify: v => `export default ${JSON.stringify(v, null, 2)}`,\n        fromJSON: v => v,\n        toJSON: v => v,\n        validate: () => null,\n    },\n    StringWithoutValidation: {\n        codify: v => `export default ${JSON.stringify(v, null, 2)}`,\n        fromJSON: v => v,\n        toJSON: v => v,\n        validate: () => null,\n    },\n    GraphQLSchemaWithDiffing: {\n        codify: schema => `\nimport { buildASTSchema } from 'graphql';\n\nconst schemaAST = ${JSON.stringify(getDocumentNodeFromSchema(schema), null, 2)};\n\nexport default buildASTSchema(schemaAST, {\n  assumeValid: true,\n  assumeValidSDL: true\n});\n    `.trim(),\n        fromJSON: schemaAST => buildASTSchema(schemaAST, { assumeValid: true, assumeValidSDL: true }),\n        toJSON: schema => getDocumentNodeFromSchema(schema),\n        validate: async (oldSchema, newSchema) => {\n            const changes = await diff(oldSchema, newSchema);\n            const errors = [];\n            for (const change of changes) {\n                if (change.criticality.level === CriticalityLevel.Breaking ||\n                    change.criticality.level === CriticalityLevel.Dangerous) {\n                    errors.push(change.message);\n                }\n            }\n            if (errors.length) {\n                throw new AggregateError(errors);\n            }\n        },\n    },\n};\nclass MeshStore {\n    constructor(identifier, storage, flags) {\n        this.identifier = identifier;\n        this.storage = storage;\n        this.flags = flags;\n    }\n    child(childIdentifier, flags) {\n        return new MeshStore(path.join(this.identifier, childIdentifier), this.storage, {\n            ...this.flags,\n            ...flags,\n        });\n    }\n    proxy(id, options) {\n        const path$1 = path.join(this.identifier, id);\n        let value;\n        let isValueCached = false;\n        const ensureValueCached = async () => {\n            if (!isValueCached) {\n                value = await this.storage.read(path$1, options);\n                isValueCached = true;\n            }\n        };\n        const doValidation = async (newValue) => {\n            await ensureValueCached();\n            if (value && newValue) {\n                try {\n                    await options.validate(value, newValue, id);\n                }\n                catch (e) {\n                    throw new ValidationError(`Validation failed for \"${id}\" under \"${this.identifier}\": ${e.message}`);\n                }\n            }\n        };\n        const proxy = {\n            getWithSet: async (setterFn) => {\n                await ensureValueCached();\n                if (this.flags.validate || !value) {\n                    const newValue = await setterFn();\n                    if (this.flags.validate && this.flags.readonly) {\n                        await doValidation(newValue);\n                    }\n                    if (!this.flags.readonly) {\n                        await proxy.set(newValue);\n                    }\n                }\n                return value;\n            },\n            get: async () => {\n                await ensureValueCached();\n                return value;\n            },\n            set: async (newValue) => {\n                if (this.flags.readonly) {\n                    throw new ReadonlyStoreError(`Unable to set value for \"${id}\" under \"${this.identifier}\" because the store is in read-only mode.`);\n                }\n                if (this.flags.validate) {\n                    await doValidation(newValue);\n                }\n                value = newValue;\n                isValueCached = true;\n                await this.storage.write(path$1, value, options);\n            },\n            delete: () => this.storage.delete(path$1),\n        };\n        return proxy;\n    }\n}\n\nexport { FsStoreStorageAdapter, InMemoryStoreStorageAdapter, MeshStore, PredefinedProxyOptions, PredefinedProxyOptionsName, ReadonlyStoreError, ValidationError };\n", "import { __awaiter } from 'tslib';\nimport { Kind, TypeInfo, visit, visitWithTypeInfo, GraphQLError, getNamedType, isWrappingType, isListType, isNonNullType, isInterfaceType, isEnumType, isUnionType, isInputObjectType, isObjectType, isScalarType, parse, extendSchema, print, validate as validate$1, printType } from 'graphql';\nimport inspect from 'object-inspect';\nimport { DepGraph } from 'dependency-graph';\n\nfunction keyMap(list, keyFn) {\n    return list.reduce((map, item) => {\n        map[keyFn(item)] = item;\n        return map;\n    }, Object.create(null));\n}\nfunction isEqual(a, b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length !== b.length)\n            return false;\n        for (var index = 0; index < a.length; index++) {\n            if (a[index] !== b[index]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return a === b || (!a && !b);\n}\nfunction isNotEqual(a, b) {\n    return !isEqual(a, b);\n}\nfunction isVoid(a) {\n    return typeof a === 'undefined' || a === null;\n}\nfunction diffArrays(a, b) {\n    return a.filter((c) => !b.some((d) => d === c));\n}\nfunction compareLists(oldList, newList, callbacks) {\n    const oldMap = keyMap(oldList, ({ name }) => name);\n    const newMap = keyMap(newList, ({ name }) => name);\n    const added = [];\n    const removed = [];\n    const mutual = [];\n    for (const oldItem of oldList) {\n        const newItem = newMap[oldItem.name];\n        if (newItem === undefined) {\n            removed.push(oldItem);\n        }\n        else {\n            mutual.push({\n                newVersion: newItem,\n                oldVersion: oldItem,\n            });\n        }\n    }\n    for (const newItem of newList) {\n        if (oldMap[newItem.name] === undefined) {\n            added.push(newItem);\n        }\n    }\n    if (callbacks) {\n        if (callbacks.onAdded) {\n            added.forEach(callbacks.onAdded);\n        }\n        if (callbacks.onRemoved) {\n            removed.forEach(callbacks.onRemoved);\n        }\n        if (callbacks.onMutual) {\n            mutual.forEach(callbacks.onMutual);\n        }\n    }\n    return {\n        added,\n        removed,\n        mutual,\n    };\n}\n\nfunction isDeprecated(fieldOrEnumValue) {\n    var _a, _b;\n    if ('isDeprecated' in fieldOrEnumValue) {\n        return fieldOrEnumValue['isDeprecated'];\n    }\n    if (fieldOrEnumValue.deprecationReason != null) {\n        return true;\n    }\n    if ((_b = (_a = fieldOrEnumValue.astNode) === null || _a === void 0 ? void 0 : _a.directives) === null || _b === void 0 ? void 0 : _b.some((directive) => directive.name.value === 'deprecated')) {\n        return true;\n    }\n    return false;\n}\n\nfunction safeChangeForField(oldType, newType) {\n    if (!isWrappingType(oldType) && !isWrappingType(newType)) {\n        return oldType.toString() === newType.toString();\n    }\n    if (isNonNullType(newType)) {\n        const ofType = isNonNullType(oldType) ? oldType.ofType : oldType;\n        return safeChangeForField(ofType, newType.ofType);\n    }\n    if (isListType(oldType)) {\n        return ((isListType(newType) &&\n            safeChangeForField(oldType.ofType, newType.ofType)) ||\n            (isNonNullType(newType) && safeChangeForField(oldType, newType.ofType)));\n    }\n    return false;\n}\nfunction safeChangeForInputValue(oldType, newType) {\n    if (!isWrappingType(oldType) && !isWrappingType(newType)) {\n        return oldType.toString() === newType.toString();\n    }\n    if (isListType(oldType) && isListType(newType)) {\n        return safeChangeForInputValue(oldType.ofType, newType.ofType);\n    }\n    if (isNonNullType(oldType)) {\n        const ofType = isNonNullType(newType) ? newType : newType;\n        return safeChangeForInputValue(oldType.ofType, ofType);\n    }\n    return false;\n}\nfunction getKind(type) {\n    const node = type.astNode;\n    return (node && node.kind) || '';\n}\nfunction getTypePrefix(type) {\n    const kind = getKind(type);\n    const kindsMap = {\n        [Kind.SCALAR_TYPE_DEFINITION]: 'scalar',\n        [Kind.OBJECT_TYPE_DEFINITION]: 'type',\n        [Kind.INTERFACE_TYPE_DEFINITION]: 'interface',\n        [Kind.UNION_TYPE_DEFINITION]: 'union',\n        [Kind.ENUM_TYPE_DEFINITION]: 'enum',\n        [Kind.INPUT_OBJECT_TYPE_DEFINITION]: 'input',\n    };\n    return kindsMap[kind.toString()];\n}\nfunction isPrimitive(type) {\n    return (['String', 'Int', 'Float', 'Boolean', 'ID'].indexOf(typeof type === 'string' ? type : type.name) !== -1);\n}\nfunction isForIntrospection(type) {\n    return ([\n        '__Schema',\n        '__Type',\n        '__TypeKind',\n        '__Field',\n        '__InputValue',\n        '__EnumValue',\n        '__Directive',\n        '__DirectiveLocation',\n    ].indexOf(typeof type === 'string' ? type : type.name) !== -1);\n}\nfunction findDeprecatedUsages(schema, ast) {\n    const errors = [];\n    const typeInfo = new TypeInfo(schema);\n    visit(ast, visitWithTypeInfo(typeInfo, {\n        Argument(node) {\n            const argument = typeInfo.getArgument();\n            if (argument) {\n                const reason = argument.deprecationReason;\n                if (reason) {\n                    const fieldDef = typeInfo.getFieldDef();\n                    if (fieldDef) {\n                        errors.push(new GraphQLError(`The argument '${argument === null || argument === void 0 ? void 0 : argument.name}' of '${fieldDef.name}' is deprecated. ${reason}`, [node]));\n                    }\n                }\n            }\n        },\n        Field(node) {\n            const fieldDef = typeInfo.getFieldDef();\n            if (fieldDef && isDeprecated(fieldDef)) {\n                const parentType = typeInfo.getParentType();\n                if (parentType) {\n                    const reason = fieldDef.deprecationReason;\n                    errors.push(new GraphQLError(`The field '${parentType.name}.${fieldDef.name}' is deprecated.${reason ? ' ' + reason : ''}`, [node]));\n                }\n            }\n        },\n        EnumValue(node) {\n            const enumVal = typeInfo.getEnumValue();\n            if (enumVal && isDeprecated(enumVal)) {\n                const type = getNamedType(typeInfo.getInputType());\n                if (type) {\n                    const reason = enumVal.deprecationReason;\n                    errors.push(new GraphQLError(`The enum value '${type.name}.${enumVal.name}' is deprecated.${reason ? ' ' + reason : ''}`, [node]));\n                }\n            }\n        },\n    }));\n    return errors;\n}\nfunction removeFieldIfDirectives(node, directiveNames) {\n    if (node.directives) {\n        if (node.directives.some((d) => directiveNames.indexOf(d.name.value) !== -1)) {\n            return null;\n        }\n    }\n    return node;\n}\nfunction removeDirectives(node, directiveNames) {\n    if (node.directives) {\n        return Object.assign(Object.assign({}, node), { directives: node.directives.filter((d) => directiveNames.indexOf(d.name.value) === -1) });\n    }\n    return node;\n}\n\nvar ChangeType;\n(function (ChangeType) {\n    // Argument\n    ChangeType[\"FieldArgumentDescriptionChanged\"] = \"FIELD_ARGUMENT_DESCRIPTION_CHANGED\";\n    ChangeType[\"FieldArgumentDefaultChanged\"] = \"FIELD_ARGUMENT_DEFAULT_CHANGED\";\n    ChangeType[\"FieldArgumentTypeChanged\"] = \"FIELD_ARGUMENT_TYPE_CHANGED\";\n    // Directive\n    ChangeType[\"DirectiveRemoved\"] = \"DIRECTIVE_REMOVED\";\n    ChangeType[\"DirectiveAdded\"] = \"DIRECTIVE_ADDED\";\n    ChangeType[\"DirectiveDescriptionChanged\"] = \"DIRECTIVE_DESCRIPTION_CHANGED\";\n    ChangeType[\"DirectiveLocationAdded\"] = \"DIRECTIVE_LOCATION_ADDED\";\n    ChangeType[\"DirectiveLocationRemoved\"] = \"DIRECTIVE_LOCATION_REMOVED\";\n    ChangeType[\"DirectiveArgumentAdded\"] = \"DIRECTIVE_ARGUMENT_ADDED\";\n    ChangeType[\"DirectiveArgumentRemoved\"] = \"DIRECTIVE_ARGUMENT_REMOVED\";\n    ChangeType[\"DirectiveArgumentDescriptionChanged\"] = \"DIRECTIVE_ARGUMENT_DESCRIPTION_CHANGED\";\n    ChangeType[\"DirectiveArgumentDefaultValueChanged\"] = \"DIRECTIVE_ARGUMENT_DEFAULT_VALUE_CHANGED\";\n    ChangeType[\"DirectiveArgumentTypeChanged\"] = \"DIRECTIVE_ARGUMENT_TYPE_CHANGED\";\n    // Enum\n    ChangeType[\"EnumValueRemoved\"] = \"ENUM_VALUE_REMOVED\";\n    ChangeType[\"EnumValueAdded\"] = \"ENUM_VALUE_ADDED\";\n    ChangeType[\"EnumValueDescriptionChanged\"] = \"ENUM_VALUE_DESCRIPTION_CHANGED\";\n    ChangeType[\"EnumValueDeprecationReasonChanged\"] = \"ENUM_VALUE_DEPRECATION_REASON_CHANGED\";\n    ChangeType[\"EnumValueDeprecationReasonAdded\"] = \"ENUM_VALUE_DEPRECATION_REASON_ADDED\";\n    ChangeType[\"EnumValueDeprecationReasonRemoved\"] = \"ENUM_VALUE_DEPRECATION_REASON_REMOVED\";\n    // Field\n    ChangeType[\"FieldRemoved\"] = \"FIELD_REMOVED\";\n    ChangeType[\"FieldAdded\"] = \"FIELD_ADDED\";\n    ChangeType[\"FieldDescriptionChanged\"] = \"FIELD_DESCRIPTION_CHANGED\";\n    ChangeType[\"FieldDescriptionAdded\"] = \"FIELD_DESCRIPTION_ADDED\";\n    ChangeType[\"FieldDescriptionRemoved\"] = \"FIELD_DESCRIPTION_REMOVED\";\n    ChangeType[\"FieldDeprecationAdded\"] = \"FIELD_DEPRECATION_ADDED\";\n    ChangeType[\"FieldDeprecationRemoved\"] = \"FIELD_DEPRECATION_REMOVED\";\n    ChangeType[\"FieldDeprecationReasonChanged\"] = \"FIELD_DEPRECATION_REASON_CHANGED\";\n    ChangeType[\"FieldDeprecationReasonAdded\"] = \"FIELD_DEPRECATION_REASON_ADDED\";\n    ChangeType[\"FieldDeprecationReasonRemoved\"] = \"FIELD_DEPRECATION_REASON_REMOVED\";\n    ChangeType[\"FieldTypeChanged\"] = \"FIELD_TYPE_CHANGED\";\n    ChangeType[\"FieldArgumentAdded\"] = \"FIELD_ARGUMENT_ADDED\";\n    ChangeType[\"FieldArgumentRemoved\"] = \"FIELD_ARGUMENT_REMOVED\";\n    // Input\n    ChangeType[\"InputFieldRemoved\"] = \"INPUT_FIELD_REMOVED\";\n    ChangeType[\"InputFieldAdded\"] = \"INPUT_FIELD_ADDED\";\n    ChangeType[\"InputFieldDescriptionAdded\"] = \"INPUT_FIELD_DESCRIPTION_ADDED\";\n    ChangeType[\"InputFieldDescriptionRemoved\"] = \"INPUT_FIELD_DESCRIPTION_REMOVED\";\n    ChangeType[\"InputFieldDescriptionChanged\"] = \"INPUT_FIELD_DESCRIPTION_CHANGED\";\n    ChangeType[\"InputFieldDefaultValueChanged\"] = \"INPUT_FIELD_DEFAULT_VALUE_CHANGED\";\n    ChangeType[\"InputFieldTypeChanged\"] = \"INPUT_FIELD_TYPE_CHANGED\";\n    // Type\n    ChangeType[\"ObjectTypeInterfaceAdded\"] = \"OBJECT_TYPE_INTERFACE_ADDED\";\n    ChangeType[\"ObjectTypeInterfaceRemoved\"] = \"OBJECT_TYPE_INTERFACE_REMOVED\";\n    // Schema\n    ChangeType[\"SchemaQueryTypeChanged\"] = \"SCHEMA_QUERY_TYPE_CHANGED\";\n    ChangeType[\"SchemaMutationTypeChanged\"] = \"SCHEMA_MUTATION_TYPE_CHANGED\";\n    ChangeType[\"SchemaSubscriptionTypeChanged\"] = \"SCHEMA_SUBSCRIPTION_TYPE_CHANGED\";\n    // Type\n    ChangeType[\"TypeRemoved\"] = \"TYPE_REMOVED\";\n    ChangeType[\"TypeAdded\"] = \"TYPE_ADDED\";\n    ChangeType[\"TypeKindChanged\"] = \"TYPE_KIND_CHANGED\";\n    ChangeType[\"TypeDescriptionChanged\"] = \"TYPE_DESCRIPTION_CHANGED\";\n    // TODO\n    ChangeType[\"TypeDescriptionRemoved\"] = \"TYPE_DESCRIPTION_REMOVED\";\n    // TODO\n    ChangeType[\"TypeDescriptionAdded\"] = \"TYPE_DESCRIPTION_ADDED\";\n    // Union\n    ChangeType[\"UnionMemberRemoved\"] = \"UNION_MEMBER_REMOVED\";\n    ChangeType[\"UnionMemberAdded\"] = \"UNION_MEMBER_ADDED\";\n})(ChangeType || (ChangeType = {}));\nvar CriticalityLevel;\n(function (CriticalityLevel) {\n    CriticalityLevel[\"Breaking\"] = \"BREAKING\";\n    CriticalityLevel[\"NonBreaking\"] = \"NON_BREAKING\";\n    CriticalityLevel[\"Dangerous\"] = \"DANGEROUS\";\n})(CriticalityLevel || (CriticalityLevel = {}));\n\nfunction schemaQueryTypeChanged(oldSchema, newSchema) {\n    const oldName = (oldSchema.getQueryType() || {}).name || 'unknown';\n    const newName = (newSchema.getQueryType() || {}).name || 'unknown';\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.SchemaQueryTypeChanged,\n        message: `Schema query root has changed from '${oldName}' to '${newName}'`,\n    };\n}\nfunction schemaMutationTypeChanged(oldSchema, newSchema) {\n    const oldName = (oldSchema.getMutationType() || {}).name || 'unknown';\n    const newName = (newSchema.getMutationType() || {}).name || 'unknown';\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.SchemaMutationTypeChanged,\n        message: `Schema mutation root has changed from '${oldName}' to '${newName}'`,\n    };\n}\nfunction schemaSubscriptionTypeChanged(oldSchema, newSchema) {\n    const oldName = (oldSchema.getSubscriptionType() || {}).name || 'unknown';\n    const newName = (newSchema.getSubscriptionType() || {}).name || 'unknown';\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.SchemaSubscriptionTypeChanged,\n        message: `Schema subscription root has changed from '${oldName}' to '${newName}'`,\n    };\n}\n\nfunction typeRemoved(type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.TypeRemoved,\n        message: `Type '${type.name}' was removed`,\n        path: type.name,\n    };\n}\nfunction typeAdded(type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.TypeAdded,\n        message: `Type '${type.name}' was added`,\n        path: type.name,\n    };\n}\nfunction typeKindChanged(oldType, newType) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: `Changing the kind of a type is a breaking change because it can cause existing queries to error. For example, turning an object type to a scalar type would break queries that define a selection set for this type.`,\n        },\n        type: ChangeType.TypeKindChanged,\n        message: `'${oldType.name}' kind changed from '${getKind(oldType)}' to '${getKind(newType)}'`,\n        path: oldType.name,\n    };\n}\nfunction typeDescriptionChanged(oldType, newType) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.TypeDescriptionChanged,\n        message: `Description '${oldType.description}' on type '${oldType.name}' has changed to '${newType.description}'`,\n        path: oldType.name,\n    };\n}\nfunction typeDescriptionRemoved(type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.TypeDescriptionRemoved,\n        message: `Description '${type.description}' was removed from object type '${type.name}'`,\n        path: type.name,\n    };\n}\nfunction typeDescriptionAdded(type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.TypeDescriptionAdded,\n        message: `Object type '${type.name}' has description '${type.description}'`,\n        path: type.name,\n    };\n}\n\nfunction directiveRemoved(directive) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.DirectiveRemoved,\n        message: `Directive '${directive.name}' was removed`,\n        path: `@${directive.name}`,\n    };\n}\nfunction directiveAdded(directive) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.DirectiveAdded,\n        message: `Directive '${directive.name}' was added`,\n        path: `@${directive.name}`,\n    };\n}\nfunction directiveDescriptionChanged(oldDirective, newDirective) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.DirectiveDescriptionChanged,\n        message: `Directive '${oldDirective.name}' description changed from '${oldDirective.description}' to '${newDirective.description}'`,\n        path: `@${oldDirective.name}`,\n    };\n}\nfunction directiveLocationAdded(directive, location) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.DirectiveLocationAdded,\n        message: `Location '${location}' was added to directive '${directive.name}'`,\n        path: `@${directive.name}`,\n    };\n}\nfunction directiveLocationRemoved(directive, location) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.DirectiveLocationRemoved,\n        message: `Location '${location}' was removed from directive '${directive.name}'`,\n        path: `@${directive.name}`,\n    };\n}\nfunction directiveArgumentAdded(directive, arg) {\n    return {\n        criticality: {\n            level: isNonNullType(arg.type)\n                ? CriticalityLevel.Breaking\n                : CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.DirectiveArgumentAdded,\n        message: `Argument '${arg.name}' was added to directive '${directive.name}'`,\n        path: `@${directive.name}`,\n    };\n}\nfunction directiveArgumentRemoved(directive, arg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n        },\n        type: ChangeType.DirectiveArgumentRemoved,\n        message: `Argument '${arg.name}' was removed from directive '${directive.name}'`,\n        path: `@${directive.name}.${arg.name}`,\n    };\n}\nfunction directiveArgumentDescriptionChanged(directive, oldArg, newArg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.DirectiveArgumentDescriptionChanged,\n        message: `Description for argument '${oldArg.name}' on directive '${directive.name}' changed from '${oldArg.description}' to '${newArg.description}'`,\n        path: `@${directive.name}.${oldArg.name}`,\n    };\n}\nfunction directiveArgumentDefaultValueChanged(directive, oldArg, newArg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: 'Changing the default value for an argument may change the runtime behaviour of a field if it was never provided.',\n        },\n        type: ChangeType.DirectiveArgumentDefaultValueChanged,\n        message: typeof oldArg.defaultValue === 'undefined'\n            ? `Default value '${newArg.defaultValue}' was added to argument '${newArg.name}' on directive '${directive.name}'`\n            : `Default value for argument '${oldArg.name}' on directive '${directive.name}' changed from '${oldArg.defaultValue}' to '${newArg.defaultValue}'`,\n        path: `@${directive.name}.${oldArg.name}`,\n    };\n}\nfunction directiveArgumentTypeChanged(directive, oldArg, newArg) {\n    return {\n        criticality: safeChangeForInputValue(oldArg.type, newArg.type)\n            ? {\n                level: CriticalityLevel.NonBreaking,\n                reason: 'Changing an input field from non-null to null is considered non-breaking.',\n            }\n            : {\n                level: CriticalityLevel.Breaking,\n            },\n        type: ChangeType.DirectiveArgumentTypeChanged,\n        message: `Type for argument '${oldArg.name}' on directive '${directive.name}' changed from '${oldArg.type}' to '${newArg.type}'`,\n        path: `@${directive.name}.${oldArg.name}`,\n    };\n}\n\nfunction enumValueRemoved(oldEnum, value) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: `Removing an enum value will cause existing queries that use this enum value to error.`,\n        },\n        type: ChangeType.EnumValueRemoved,\n        message: `Enum value '${value.name}' ${isDeprecated(value) ? '(deprecated) ' : ''}was removed from enum '${oldEnum.name}'`,\n        path: [oldEnum.name, value.name].join('.'),\n    };\n}\nfunction enumValueAdded(newEnum, value) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: `Adding an enum value may break existing clients that were not programming defensively against an added case when querying an enum.`,\n        },\n        type: ChangeType.EnumValueAdded,\n        message: `Enum value '${value.name}' was added to enum '${newEnum.name}'`,\n        path: [newEnum.name, value.name].join('.'),\n    };\n}\nfunction enumValueDescriptionChanged(newEnum, oldValue, newValue) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.EnumValueDescriptionChanged,\n        message: typeof oldValue.description === 'undefined'\n            ? `Description '${newValue.description}' was added to enum value '${newEnum.name}.${newValue.name}'`\n            : `Description for enum value '${newEnum.name}.${newValue.name}' changed from '${oldValue.description}' to '${newValue.description}'`,\n        path: [newEnum.name, oldValue.name].join('.'),\n    };\n}\nfunction enumValueDeprecationReasonChanged(newEnum, oldValue, newValue) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.EnumValueDeprecationReasonChanged,\n        message: `Enum value '${newEnum.name}.${newValue.name}' deprecation reason changed from '${oldValue.deprecationReason}' to '${newValue.deprecationReason}'`,\n        path: [newEnum.name, oldValue.name].join('.'),\n    };\n}\nfunction enumValueDeprecationReasonAdded(newEnum, oldValue, newValue) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.EnumValueDeprecationReasonAdded,\n        message: `Enum value '${newEnum.name}.${newValue.name}' was deprecated with reason '${newValue.deprecationReason}'`,\n        path: [newEnum.name, oldValue.name].join('.'),\n    };\n}\nfunction enumValueDeprecationReasonRemoved(newEnum, oldValue, newValue) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.EnumValueDeprecationReasonRemoved,\n        message: `Deprecation reason was removed from enum value '${newEnum.name}.${newValue.name}'`,\n        path: [newEnum.name, oldValue.name].join('.'),\n    };\n}\n\nfunction changesInEnum(oldEnum, newEnum, addChange) {\n    compareLists(oldEnum.getValues(), newEnum.getValues(), {\n        onAdded(value) {\n            addChange(enumValueAdded(newEnum, value));\n        },\n        onRemoved(value) {\n            addChange(enumValueRemoved(oldEnum, value));\n        },\n        onMutual(value) {\n            const oldValue = value.oldVersion;\n            const newValue = value.newVersion;\n            if (isNotEqual(oldValue.description, newValue.description)) {\n                addChange(enumValueDescriptionChanged(newEnum, oldValue, newValue));\n            }\n            if (isNotEqual(oldValue.deprecationReason, newValue.deprecationReason)) {\n                if (isVoid(oldValue.deprecationReason)) {\n                    addChange(enumValueDeprecationReasonAdded(newEnum, oldValue, newValue));\n                }\n                else if (isVoid(newValue.deprecationReason)) {\n                    addChange(enumValueDeprecationReasonRemoved(newEnum, oldValue, newValue));\n                }\n                else {\n                    addChange(enumValueDeprecationReasonChanged(newEnum, oldValue, newValue));\n                }\n            }\n        },\n    });\n}\n\nfunction unionMemberRemoved(union, type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: 'Removing a union member from a union can cause existing queries that use this union member in a fragment spread to error.',\n        },\n        type: ChangeType.UnionMemberRemoved,\n        message: `Member '${type.name}' was removed from Union type '${union.name}'`,\n        path: union.name,\n    };\n}\nfunction unionMemberAdded(union, type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: 'Adding a possible type to Unions may break existing clients that were not programming defensively against a new possible type.',\n        },\n        type: ChangeType.UnionMemberAdded,\n        message: `Member '${type.name}' was added to Union type '${union.name}'`,\n        path: union.name,\n    };\n}\n\nfunction changesInUnion(oldUnion, newUnion, addChange) {\n    const oldTypes = oldUnion.getTypes();\n    const newTypes = newUnion.getTypes();\n    compareLists(oldTypes, newTypes, {\n        onAdded(t) {\n            addChange(unionMemberAdded(newUnion, t));\n        },\n        onRemoved(t) {\n            addChange(unionMemberRemoved(oldUnion, t));\n        },\n    });\n}\n\nfunction inputFieldRemoved(input, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: 'Removing an input field will cause existing queries that use this input field to error.',\n        },\n        type: ChangeType.InputFieldRemoved,\n        message: `Input field '${field.name}' was removed from input object type '${input.name}'`,\n        path: [input.name, field.name].join('.'),\n    };\n}\nfunction inputFieldAdded(input, field) {\n    return {\n        criticality: isNonNullType(field.type)\n            ? {\n                level: CriticalityLevel.Breaking,\n                reason: 'Adding a required input field to an existing input object type is a breaking change because it will cause existing uses of this input object type to error.',\n            }\n            : {\n                level: CriticalityLevel.Dangerous,\n            },\n        type: ChangeType.InputFieldAdded,\n        message: `Input field '${field.name}' was added to input object type '${input.name}'`,\n        path: [input.name, field.name].join('.'),\n    };\n}\nfunction inputFieldDescriptionAdded(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.InputFieldDescriptionAdded,\n        message: `Input field '${type.name}.${field.name}' has description '${field.description}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction inputFieldDescriptionRemoved(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.InputFieldDescriptionRemoved,\n        message: `Description was removed from input field '${type.name}.${field.name}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction inputFieldDescriptionChanged(input, oldField, newField) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.InputFieldDescriptionChanged,\n        message: `Input field '${input.name}.${oldField.name}' description changed from '${oldField.description}' to '${newField.description}'`,\n        path: [input.name, oldField.name].join('.'),\n    };\n}\nfunction inputFieldDefaultValueChanged(input, oldField, newField) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: 'Changing the default value for an argument may change the runtime behaviour of a field if it was never provided.',\n        },\n        type: ChangeType.InputFieldDefaultValueChanged,\n        message: `Input field '${input.name}.${oldField.name}' default value changed from '${oldField.defaultValue}' to '${newField.defaultValue}'`,\n        path: [input.name, oldField.name].join('.'),\n    };\n}\nfunction inputFieldTypeChanged(input, oldField, newField) {\n    return {\n        criticality: safeChangeForInputValue(oldField.type, newField.type)\n            ? {\n                level: CriticalityLevel.NonBreaking,\n                reason: 'Changing an input field from non-null to null is considered non-breaking.',\n            }\n            : {\n                level: CriticalityLevel.Breaking,\n                reason: 'Changing the type of an input field can cause existing queries that use this field to error.',\n            },\n        type: ChangeType.InputFieldTypeChanged,\n        message: `Input field '${input.name}.${oldField.name}' changed type from '${oldField.type.toString()}' to '${newField.type.toString()}'`,\n        path: [input.name, oldField.name].join('.'),\n    };\n}\n\nfunction changesInInputObject(oldInput, newInput, addChange) {\n    const oldFields = oldInput.getFields();\n    const newFields = newInput.getFields();\n    compareLists(Object.values(oldFields), Object.values(newFields), {\n        onAdded(field) {\n            addChange(inputFieldAdded(newInput, field));\n        },\n        onRemoved(field) {\n            addChange(inputFieldRemoved(oldInput, field));\n        },\n        onMutual(field) {\n            changesInInputField(oldInput, field.oldVersion, field.newVersion, addChange);\n        },\n    });\n}\nfunction changesInInputField(input, oldField, newField, addChange) {\n    if (isNotEqual(oldField.description, newField.description)) {\n        if (isVoid(oldField.description)) {\n            addChange(inputFieldDescriptionAdded(input, newField));\n        }\n        else if (isVoid(newField.description)) {\n            addChange(inputFieldDescriptionRemoved(input, oldField));\n        }\n        else {\n            addChange(inputFieldDescriptionChanged(input, oldField, newField));\n        }\n    }\n    if (isNotEqual(oldField.defaultValue, newField.defaultValue)) {\n        if (Array.isArray(oldField.defaultValue) &&\n            Array.isArray(newField.defaultValue)) {\n            if (diffArrays(oldField.defaultValue, newField.defaultValue).length > 0) {\n                addChange(inputFieldDefaultValueChanged(input, oldField, newField));\n            }\n        }\n        else if (JSON.stringify(oldField.defaultValue) !==\n            JSON.stringify(newField.defaultValue)) {\n            addChange(inputFieldDefaultValueChanged(input, oldField, newField));\n        }\n    }\n    if (isNotEqual(oldField.type.toString(), newField.type.toString())) {\n        addChange(inputFieldTypeChanged(input, oldField, newField));\n    }\n}\n\nfunction objectTypeInterfaceAdded(iface, type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: 'Adding an interface to an object type may break existing clients that were not programming defensively against a new possible type.',\n        },\n        type: ChangeType.ObjectTypeInterfaceAdded,\n        message: `'${type.name}' object implements '${iface.name}' interface`,\n        path: type.name,\n    };\n}\nfunction objectTypeInterfaceRemoved(iface, type) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: 'Removing an interface from an object type can cause existing queries that use this in a fragment spread to error.',\n        },\n        type: ChangeType.ObjectTypeInterfaceRemoved,\n        message: `'${type.name}' object type no longer implements '${iface.name}' interface`,\n        path: type.name,\n    };\n}\n\nfunction fieldRemoved(type, field) {\n    const entity = isInterfaceType(type) ? 'interface' : 'object type';\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: field.deprecationReason\n                ? `Removing a deprecated field is a breaking change. Before removing it, you may want to look at the field's usage to see the impact of removing the field.`\n                : `Removing a field is a breaking change. It is preferable to deprecate the field before removing it.`,\n        },\n        type: ChangeType.FieldRemoved,\n        message: `Field '${field.name}' ${isDeprecated(field) ? '(deprecated) ' : ''}was removed from ${entity} '${type.name}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldAdded(type, field) {\n    const entity = isInterfaceType(type) ? 'interface' : 'object type';\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldAdded,\n        message: `Field '${field.name}' was added to ${entity} '${type.name}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDescriptionChanged(type, oldField, newField) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDescriptionChanged,\n        message: `Field '${type.name}.${oldField.name}' description changed from '${oldField.description}' to '${newField.description}'`,\n        path: [type.name, oldField.name].join('.'),\n    };\n}\nfunction fieldDescriptionAdded(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDescriptionAdded,\n        message: `Field '${type.name}.${field.name}' has description '${field.description}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDescriptionRemoved(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDescriptionRemoved,\n        message: `Description was removed from field '${type.name}.${field.name}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDeprecationAdded(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDeprecationAdded,\n        message: `Field '${type.name}.${field.name}' is deprecated`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDeprecationRemoved(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n        },\n        type: ChangeType.FieldDeprecationRemoved,\n        message: `Field '${type.name}.${field.name}' is no longer deprecated`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDeprecationReasonChanged(type, oldField, newField) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDeprecationReasonChanged,\n        message: `Deprecation reason on field '${type.name}.${newField.name}' has changed from '${oldField.deprecationReason}' to '${newField.deprecationReason}'`,\n        path: [type.name, oldField.name].join('.'),\n    };\n}\nfunction fieldDeprecationReasonAdded(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDeprecationReasonAdded,\n        message: `Field '${type.name}.${field.name}' has deprecation reason '${field.deprecationReason}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldDeprecationReasonRemoved(type, field) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldDeprecationReasonRemoved,\n        message: `Deprecation reason was removed from field '${type.name}.${field.name}'`,\n        path: [type.name, field.name].join('.'),\n    };\n}\nfunction fieldTypeChanged(type, oldField, newField) {\n    return {\n        criticality: {\n            level: safeChangeForField(oldField.type, newField.type)\n                ? CriticalityLevel.NonBreaking\n                : CriticalityLevel.Breaking,\n        },\n        type: ChangeType.FieldTypeChanged,\n        message: `Field '${type}.${oldField.name}' changed type from '${oldField.type}' to '${newField.type}'`,\n        path: [type.name, oldField.name].join('.'),\n    };\n}\nfunction fieldArgumentAdded(type, field, arg) {\n    return {\n        criticality: isNonNullType(arg.type)\n            ? {\n                level: CriticalityLevel.Breaking,\n                reason: `Adding a required argument to an existing field is a breaking change because it will cause existing uses of this field to error.`,\n            }\n            : {\n                level: CriticalityLevel.Dangerous,\n                reason: `Adding a new argument to an existing field may involve a change in resolve function logic that potentially may cause some side effects.`,\n            },\n        type: ChangeType.FieldArgumentAdded,\n        message: `Argument '${arg.name}: ${arg.type}' added to field '${type.name}.${field.name}'`,\n        path: [type.name, field.name, arg.name].join('.'),\n    };\n}\nfunction fieldArgumentRemoved(type, field, arg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Breaking,\n            reason: `Removing a field argument is a breaking change because it will cause existing queries that use this argument to error.`,\n        },\n        type: ChangeType.FieldArgumentRemoved,\n        message: `Argument '${arg.name}: ${arg.type}' was removed from field '${type.name}.${field.name}'`,\n        path: [type.name, field.name, arg.name].join('.'),\n    };\n}\n\nfunction compareTwoStrings(str1, str2) {\n    if (!str1.length && !str2.length)\n        return 1;\n    if (!str1.length || !str2.length)\n        return 0;\n    if (str1.toUpperCase() === str2.toUpperCase())\n        return 1;\n    if (str1.length === 1 && str2.length === 1)\n        return 0;\n    const pairs1 = wordLetterPairs(str1);\n    const pairs2 = wordLetterPairs(str2);\n    const union = pairs1.length + pairs2.length;\n    let intersection = 0;\n    pairs1.forEach((pair1) => {\n        for (let i = 0, pair2; (pair2 = pairs2[i]); i++) {\n            if (pair1 !== pair2)\n                continue;\n            intersection++;\n            pairs2.splice(i, 1);\n            break;\n        }\n    });\n    return (intersection * 2) / union;\n}\nfunction findBestMatch(mainString, targetStrings) {\n    if (!areArgsValid(mainString, targetStrings))\n        throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');\n    const ratings = targetStrings.map((target) => ({\n        target,\n        rating: compareTwoStrings(mainString, target.value),\n    }));\n    const bestMatch = Array.from(ratings).sort((a, b) => b.rating - a.rating)[0];\n    return { ratings, bestMatch };\n}\nfunction flattenDeep(arr) {\n    return Array.isArray(arr)\n        ? arr.reduce((a, b) => a.concat(flattenDeep(b)), [])\n        : [arr];\n}\nfunction areArgsValid(mainString, targetStrings) {\n    if (typeof mainString !== 'string')\n        return false;\n    if (!Array.isArray(targetStrings))\n        return false;\n    if (!targetStrings.length)\n        return false;\n    if (targetStrings.find((s) => typeof s.value !== 'string'))\n        return false;\n    return true;\n}\nfunction letterPairs(str) {\n    const pairs = [];\n    for (let i = 0, max = str.length - 1; i < max; i++)\n        pairs[i] = str.substring(i, i + 2);\n    return pairs;\n}\nfunction wordLetterPairs(str) {\n    const pairs = str.toUpperCase().split(' ').map(letterPairs);\n    return flattenDeep(pairs);\n}\nfunction safeString(obj) {\n    return inspect(obj).replace(/\\[Object\\: null prototype\\] /g, '');\n}\n\nfunction fieldArgumentDescriptionChanged(type, field, oldArg, newArg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.NonBreaking,\n        },\n        type: ChangeType.FieldArgumentDescriptionChanged,\n        message: `Description for argument '${newArg.name}' on field '${type.name}.${field.name}' changed from '${oldArg.description}' to '${newArg.description}'`,\n        path: [type.name, field.name, oldArg.name].join('.'),\n    };\n}\nfunction fieldArgumentDefaultChanged(type, field, oldArg, newArg) {\n    return {\n        criticality: {\n            level: CriticalityLevel.Dangerous,\n            reason: 'Changing the default value for an argument may change the runtime behaviour of a field if it was never provided.',\n        },\n        type: ChangeType.FieldArgumentDefaultChanged,\n        message: typeof oldArg.defaultValue === 'undefined'\n            ? `Default value '${safeString(newArg.defaultValue)}' was added to argument '${newArg.name}' on field '${type.name}.${field.name}'`\n            : `Default value for argument '${newArg.name}' on field '${type.name}.${field.name}' changed from '${safeString(oldArg.defaultValue)}' to '${safeString(newArg.defaultValue)}'`,\n        path: [type.name, field.name, oldArg.name].join('.'),\n    };\n}\nfunction fieldArgumentTypeChanged(type, field, oldArg, newArg) {\n    return {\n        criticality: safeChangeForInputValue(oldArg.type, newArg.type)\n            ? {\n                level: CriticalityLevel.NonBreaking,\n                reason: `Changing an input field from non-null to null is considered non-breaking.`,\n            }\n            : {\n                level: CriticalityLevel.Breaking,\n                reason: `Changing the type of a field's argument can cause existing queries that use this argument to error.`,\n            },\n        type: ChangeType.FieldArgumentTypeChanged,\n        message: `Type for argument '${newArg.name}' on field '${type.name}.${field.name}' changed from '${oldArg.type}' to '${newArg.type}'`,\n        path: [type.name, field.name, oldArg.name].join('.'),\n    };\n}\n\nfunction changesInArgument(type, field, oldArg, newArg, addChange) {\n    if (isNotEqual(oldArg.description, newArg.description)) {\n        addChange(fieldArgumentDescriptionChanged(type, field, oldArg, newArg));\n    }\n    if (isNotEqual(oldArg.defaultValue, newArg.defaultValue)) {\n        if (Array.isArray(oldArg.defaultValue) &&\n            Array.isArray(newArg.defaultValue)) {\n            const diff = diffArrays(oldArg.defaultValue, newArg.defaultValue);\n            if (diff.length > 0) {\n                addChange(fieldArgumentDefaultChanged(type, field, oldArg, newArg));\n            }\n        }\n        else if (JSON.stringify(oldArg.defaultValue) !==\n            JSON.stringify(newArg.defaultValue)) {\n            addChange(fieldArgumentDefaultChanged(type, field, oldArg, newArg));\n        }\n    }\n    if (isNotEqual(oldArg.type.toString(), newArg.type.toString())) {\n        addChange(fieldArgumentTypeChanged(type, field, oldArg, newArg));\n    }\n}\n\nfunction changesInField(type, oldField, newField, addChange) {\n    if (isNotEqual(oldField.description, newField.description)) {\n        if (isVoid(oldField.description)) {\n            addChange(fieldDescriptionAdded(type, newField));\n        }\n        else if (isVoid(newField.description)) {\n            addChange(fieldDescriptionRemoved(type, oldField));\n        }\n        else {\n            addChange(fieldDescriptionChanged(type, oldField, newField));\n        }\n    }\n    if (isNotEqual(isDeprecated(oldField), isDeprecated(newField))) {\n        if (isDeprecated(newField)) {\n            addChange(fieldDeprecationAdded(type, newField));\n        }\n        else {\n            addChange(fieldDeprecationRemoved(type, oldField));\n        }\n    }\n    if (isNotEqual(oldField.deprecationReason, newField.deprecationReason)) {\n        if (isVoid(oldField.deprecationReason)) {\n            addChange(fieldDeprecationReasonAdded(type, newField));\n        }\n        else if (isVoid(newField.deprecationReason)) {\n            addChange(fieldDeprecationReasonRemoved(type, oldField));\n        }\n        else {\n            addChange(fieldDeprecationReasonChanged(type, oldField, newField));\n        }\n    }\n    if (isNotEqual(oldField.type.toString(), newField.type.toString())) {\n        addChange(fieldTypeChanged(type, oldField, newField));\n    }\n    compareLists(oldField.args, newField.args, {\n        onAdded(arg) {\n            addChange(fieldArgumentAdded(type, newField, arg));\n        },\n        onRemoved(arg) {\n            addChange(fieldArgumentRemoved(type, oldField, arg));\n        },\n        onMutual(arg) {\n            changesInArgument(type, oldField, arg.oldVersion, arg.newVersion, addChange);\n        },\n    });\n}\n\nfunction changesInObject(oldType, newType, addChange) {\n    const oldInterfaces = oldType.getInterfaces();\n    const newInterfaces = newType.getInterfaces();\n    const oldFields = oldType.getFields();\n    const newFields = newType.getFields();\n    compareLists(oldInterfaces, newInterfaces, {\n        onAdded(i) {\n            addChange(objectTypeInterfaceAdded(i, newType));\n        },\n        onRemoved(i) {\n            addChange(objectTypeInterfaceRemoved(i, oldType));\n        },\n    });\n    compareLists(Object.values(oldFields), Object.values(newFields), {\n        onAdded(f) {\n            addChange(fieldAdded(newType, f));\n        },\n        onRemoved(f) {\n            addChange(fieldRemoved(oldType, f));\n        },\n        onMutual(f) {\n            changesInField(oldType, f.oldVersion, f.newVersion, addChange);\n        },\n    });\n}\n\nfunction changesInInterface(oldInterface, newInterface, addChange) {\n    compareLists(Object.values(oldInterface.getFields()), Object.values(newInterface.getFields()), {\n        onAdded(field) {\n            addChange(fieldAdded(newInterface, field));\n        },\n        onRemoved(field) {\n            addChange(fieldRemoved(oldInterface, field));\n        },\n        onMutual(field) {\n            changesInField(oldInterface, field.oldVersion, field.newVersion, addChange);\n        },\n    });\n}\n\nfunction changesInDirective(oldDirective, newDirective, addChange) {\n    if (isNotEqual(oldDirective.description, newDirective.description)) {\n        addChange(directiveDescriptionChanged(oldDirective, newDirective));\n    }\n    const locations = {\n        added: diffArrays(newDirective.locations, oldDirective.locations),\n        removed: diffArrays(oldDirective.locations, newDirective.locations),\n    };\n    // locations added\n    locations.added.forEach((location) => addChange(directiveLocationAdded(newDirective, location)));\n    // locations removed\n    locations.removed.forEach((location) => addChange(directiveLocationRemoved(oldDirective, location)));\n    compareLists(oldDirective.args, newDirective.args, {\n        onAdded(arg) {\n            addChange(directiveArgumentAdded(newDirective, arg));\n        },\n        onRemoved(arg) {\n            addChange(directiveArgumentRemoved(oldDirective, arg));\n        },\n        onMutual(arg) {\n            changesInDirectiveArgument(oldDirective, arg.oldVersion, arg.newVersion, addChange);\n        },\n    });\n}\nfunction changesInDirectiveArgument(directive, oldArg, newArg, addChange) {\n    if (isNotEqual(oldArg.description, newArg.description)) {\n        addChange(directiveArgumentDescriptionChanged(directive, oldArg, newArg));\n    }\n    if (isNotEqual(oldArg.defaultValue, newArg.defaultValue)) {\n        addChange(directiveArgumentDefaultValueChanged(directive, oldArg, newArg));\n    }\n    if (isNotEqual(oldArg.type.toString(), newArg.type.toString())) {\n        addChange(directiveArgumentTypeChanged(directive, oldArg, newArg));\n    }\n}\n\nfunction diffSchema(oldSchema, newSchema) {\n    const changes = [];\n    function addChange(change) {\n        changes.push(change);\n    }\n    changesInSchema(oldSchema, newSchema, addChange);\n    compareLists(Object.values(oldSchema.getTypeMap()).filter((t) => !isPrimitive(t)), Object.values(newSchema.getTypeMap()).filter((t) => !isPrimitive(t)), {\n        onAdded(type) {\n            addChange(typeAdded(type));\n        },\n        onRemoved(type) {\n            addChange(typeRemoved(type));\n        },\n        onMutual(type) {\n            changesInType(type.oldVersion, type.newVersion, addChange);\n        },\n    });\n    compareLists(oldSchema.getDirectives(), newSchema.getDirectives(), {\n        onAdded(directive) {\n            addChange(directiveAdded(directive));\n        },\n        onRemoved(directive) {\n            addChange(directiveRemoved(directive));\n        },\n        onMutual(directive) {\n            changesInDirective(directive.oldVersion, directive.newVersion, addChange);\n        },\n    });\n    return changes;\n}\nfunction changesInSchema(oldSchema, newSchema, addChange) {\n    var _a, _b, _c, _d, _e, _f;\n    const defaultNames = {\n        query: 'Query',\n        mutation: 'Mutation',\n        subscription: 'Subscription',\n    };\n    const oldRoot = {\n        query: (_a = (oldSchema.getQueryType() || {}).name) !== null && _a !== void 0 ? _a : defaultNames.query,\n        mutation: (_b = (oldSchema.getMutationType() || {}).name) !== null && _b !== void 0 ? _b : defaultNames.mutation,\n        subscription: (_c = (oldSchema.getSubscriptionType() || {}).name) !== null && _c !== void 0 ? _c : defaultNames.subscription,\n    };\n    const newRoot = {\n        query: (_d = (newSchema.getQueryType() || {}).name) !== null && _d !== void 0 ? _d : defaultNames.query,\n        mutation: (_e = (newSchema.getMutationType() || {}).name) !== null && _e !== void 0 ? _e : defaultNames.mutation,\n        subscription: (_f = (newSchema.getSubscriptionType() || {}).name) !== null && _f !== void 0 ? _f : defaultNames.subscription,\n    };\n    if (isNotEqual(oldRoot.query, newRoot.query)) {\n        addChange(schemaQueryTypeChanged(oldSchema, newSchema));\n    }\n    if (isNotEqual(oldRoot.mutation, newRoot.mutation)) {\n        addChange(schemaMutationTypeChanged(oldSchema, newSchema));\n    }\n    if (isNotEqual(oldRoot.subscription, newRoot.subscription)) {\n        addChange(schemaSubscriptionTypeChanged(oldSchema, newSchema));\n    }\n}\nfunction changesInType(oldType, newType, addChange) {\n    if (isEnumType(oldType) && isEnumType(newType)) {\n        changesInEnum(oldType, newType, addChange);\n    }\n    else if (isUnionType(oldType) && isUnionType(newType)) {\n        changesInUnion(oldType, newType, addChange);\n    }\n    else if (isInputObjectType(oldType) && isInputObjectType(newType)) {\n        changesInInputObject(oldType, newType, addChange);\n    }\n    else if (isObjectType(oldType) && isObjectType(newType)) {\n        changesInObject(oldType, newType, addChange);\n    }\n    else if (isInterfaceType(oldType) && isInterfaceType(newType)) {\n        changesInInterface(oldType, newType, addChange);\n    }\n    else if (isScalarType(oldType) && isScalarType(newType)) ;\n    else {\n        addChange(typeKindChanged(oldType, newType));\n    }\n    if (isNotEqual(oldType.description, newType.description)) {\n        if (isVoid(oldType.description)) {\n            addChange(typeDescriptionAdded(newType));\n        }\n        else if (isVoid(newType.description)) {\n            addChange(typeDescriptionRemoved(oldType));\n        }\n        else {\n            addChange(typeDescriptionChanged(oldType, newType));\n        }\n    }\n}\n\nconst dangerousBreaking = ({ changes }) => {\n    return changes.map((change) => {\n        if (change.criticality.level === CriticalityLevel.Dangerous) {\n            return Object.assign(Object.assign({}, change), { criticality: Object.assign(Object.assign({}, change.criticality), { level: CriticalityLevel.Breaking }) });\n        }\n        return change;\n    });\n};\n\nfunction parsePath(path) {\n    return path.split('.');\n}\n\nconst suppressRemovalOfDeprecatedField = ({ changes, oldSchema, }) => {\n    return changes.map((change) => {\n        if (change.type === ChangeType.FieldRemoved &&\n            change.criticality.level === CriticalityLevel.Breaking &&\n            change.path) {\n            const [typeName, fieldName] = parsePath(change.path);\n            const type = oldSchema.getType(typeName);\n            if (isObjectType(type) || isInterfaceType(type)) {\n                const field = type.getFields()[fieldName];\n                if (isDeprecated(field)) {\n                    return Object.assign(Object.assign({}, change), { criticality: Object.assign(Object.assign({}, change.criticality), { level: CriticalityLevel.Dangerous }) });\n                }\n            }\n        }\n        if (change.type === ChangeType.EnumValueRemoved &&\n            change.criticality.level === CriticalityLevel.Breaking &&\n            change.path) {\n            const [enumName, enumItem] = parsePath(change.path);\n            const type = oldSchema.getType(enumName);\n            if (isEnumType(type)) {\n                const item = type.getValue(enumItem);\n                if (item && isDeprecated(item)) {\n                    return Object.assign(Object.assign({}, change), { criticality: Object.assign(Object.assign({}, change.criticality), { level: CriticalityLevel.Dangerous }) });\n                }\n            }\n        }\n        return change;\n    });\n};\n\nconst descriptionChangeTypes = [\n    ChangeType.FieldArgumentDescriptionChanged,\n    ChangeType.DirectiveDescriptionChanged,\n    ChangeType.DirectiveArgumentDescriptionChanged,\n    ChangeType.EnumValueDescriptionChanged,\n    ChangeType.FieldDescriptionChanged,\n    ChangeType.FieldDescriptionAdded,\n    ChangeType.FieldDescriptionRemoved,\n    ChangeType.InputFieldDescriptionAdded,\n    ChangeType.InputFieldDescriptionRemoved,\n    ChangeType.InputFieldDescriptionChanged,\n    ChangeType.TypeDescriptionChanged,\n];\nconst ignoreDescriptionChanges = ({ changes }) => {\n    return changes.filter((change) => descriptionChangeTypes.indexOf(change.type) === -1);\n};\n\nconst considerUsage = ({ changes, config, }) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!config) {\n        throw new Error(`considerUsage rule is missing config`);\n    }\n    const collectedBreakingField = [];\n    changes.forEach((change) => {\n        if (change.criticality.level === CriticalityLevel.Breaking && change.path) {\n            const [typeName, fieldName, argumentName] = parsePath(change.path);\n            collectedBreakingField.push({\n                type: typeName,\n                field: fieldName,\n                argument: argumentName,\n            });\n        }\n    });\n    // True if safe to break, false otherwise\n    const usageList = yield config.checkUsage(collectedBreakingField);\n    // turns an array of booleans into an array of `Type.Field` strings\n    // includes only those that are safe to break the api\n    const suppressedPaths = collectedBreakingField\n        .filter((_, i) => usageList[i] === true)\n        .map(({ type, field, argument }) => [type, field, argument].filter(Boolean).join('.'));\n    return changes.map((change) => {\n        // Turns those \"safe to break\" changes into \"dangerous\"\n        if (change.criticality.level === CriticalityLevel.Breaking &&\n            change.path &&\n            suppressedPaths.some((p) => change.path.startsWith(p))) {\n            return Object.assign(Object.assign({}, change), { criticality: Object.assign(Object.assign({}, change.criticality), { level: CriticalityLevel.Dangerous }), message: `${change.message} (non-breaking based on usage)` });\n        }\n        return change;\n    });\n});\n\nconst rules = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    dangerousBreaking: dangerousBreaking,\n    suppressRemovalOfDeprecatedField: suppressRemovalOfDeprecatedField,\n    ignoreDescriptionChanges: ignoreDescriptionChanges,\n    considerUsage: considerUsage\n});\n\nconst DiffRule = rules;\nfunction diff(oldSchema, newSchema, rules = [], config) {\n    const changes = diffSchema(oldSchema, newSchema);\n    return rules.reduce((prev, rule) => __awaiter(this, void 0, void 0, function* () {\n        const prevChanges = yield prev;\n        return rule({\n            changes: prevChanges,\n            oldSchema,\n            newSchema,\n            config,\n        });\n    }), Promise.resolve(changes));\n}\n\nfunction readDocument(source) {\n    const result = {\n        source,\n        fragments: [],\n        operations: [],\n        hasFragments: false,\n        hasOperations: false,\n    };\n    const documentNode = parse(source.body);\n    const filepath = source.name;\n    const definitions = documentNode.definitions || [];\n    definitions.forEach((node) => {\n        if (isOperation(node)) {\n            result.operations.push({\n                node,\n                source: filepath,\n            });\n        }\n        else if (isFragment(node)) {\n            result.fragments.push({\n                node,\n                source: filepath,\n            });\n        }\n    });\n    result.hasFragments = result.fragments.length > 0;\n    result.hasOperations = result.operations.length > 0;\n    return result;\n}\nfunction isOperation(node) {\n    return node.kind === Kind.OPERATION_DEFINITION;\n}\nfunction isFragment(node) {\n    return node.kind === Kind.FRAGMENT_DEFINITION;\n}\n\nfunction validateQueryDepth({ source, doc, maxDepth, fragmentGraph, }) {\n    try {\n        calculateDepth({\n            node: doc,\n            currentDepth: 0,\n            maxDepth,\n            getFragment(name) {\n                return fragmentGraph.getNodeData(name);\n            },\n        });\n    }\n    catch (errorOrNode) {\n        if (errorOrNode instanceof Error) {\n            throw errorOrNode;\n        }\n        const node = errorOrNode;\n        return new GraphQLError(`Query exceeds maximum depth of ${maxDepth}`, node, source, node.loc && node.loc.start ? [node.loc.start] : undefined);\n    }\n}\nfunction calculateDepth({ node, currentDepth, maxDepth, getFragment, }) {\n    if (maxDepth && currentDepth > maxDepth) {\n        throw node;\n    }\n    switch (node.kind) {\n        case Kind.FIELD: {\n            if (node.name.value.startsWith('__') || !node.selectionSet) {\n                return 0;\n            }\n            const maxInnerDepth = calculateDepth({\n                node: node.selectionSet,\n                currentDepth: currentDepth + 1,\n                maxDepth,\n                getFragment,\n            });\n            return 1 + maxInnerDepth;\n        }\n        case Kind.SELECTION_SET: {\n            return Math.max(...node.selections.map((selection) => {\n                return calculateDepth({\n                    node: selection,\n                    currentDepth: currentDepth,\n                    maxDepth,\n                    getFragment,\n                });\n            }));\n        }\n        case Kind.DOCUMENT: {\n            return Math.max(...node.definitions.map((def) => {\n                return calculateDepth({\n                    node: def,\n                    currentDepth: currentDepth,\n                    maxDepth,\n                    getFragment,\n                });\n            }));\n        }\n        case Kind.OPERATION_DEFINITION:\n        case Kind.INLINE_FRAGMENT:\n        case Kind.FRAGMENT_DEFINITION: {\n            return Math.max(...node.selectionSet.selections.map((selection) => {\n                return calculateDepth({\n                    node: selection,\n                    currentDepth,\n                    maxDepth,\n                    getFragment,\n                });\n            }));\n        }\n        case Kind.FRAGMENT_SPREAD:\n            return calculateDepth({\n                node: getFragment(node.name.value),\n                currentDepth,\n                maxDepth,\n                getFragment,\n            });\n        default: {\n            throw new Error(`Couldn't handle ${node.kind}`);\n        }\n    }\n}\n\nfunction transformDocumentWithApollo(doc, { keepClientFields }) {\n    return visit(doc, {\n        Field(node) {\n            return keepClientFields\n                ? removeDirectives(node, ['client'])\n                : removeFieldIfDirectives(node, ['client']);\n        },\n    });\n}\nfunction transformSchemaWithApollo(schema) {\n    return extendSchema(schema, parse(/* GraphQL */ `\n      directive @connection(key: String!, filter: [String]) on FIELD\n    `));\n}\n\nfunction validate(schema, sources, options) {\n    const config = Object.assign({ strictDeprecated: true, strictFragments: true, keepClientFields: false, apollo: false }, options);\n    const invalidDocuments = [];\n    // read documents\n    const documents = sources.map(readDocument);\n    // keep all named fragments\n    const fragments = [];\n    const fragmentNames = [];\n    const graph = new DepGraph({ circular: true });\n    documents.forEach((doc) => {\n        doc.fragments.forEach((fragment) => {\n            fragmentNames.push(fragment.node.name.value);\n            fragments.push(fragment);\n            graph.addNode(fragment.node.name.value, fragment.node);\n        });\n    });\n    fragments.forEach((fragment) => {\n        const depends = extractFragments(print(fragment.node));\n        if (depends) {\n            depends.forEach((name) => {\n                graph.addDependency(fragment.node.name.value, name);\n            });\n        }\n    });\n    documents\n        // since we include fragments, validate only operations\n        .filter((doc) => doc.hasOperations)\n        .forEach((doc) => {\n        const docWithOperations = {\n            kind: Kind.DOCUMENT,\n            definitions: doc.operations.map((d) => d.node),\n        };\n        const extractedFragments = (extractFragments(print(docWithOperations)) || [])\n            // resolve all nested fragments\n            .map((fragmentName) => resolveFragment(graph.getNodeData(fragmentName), graph))\n            // flatten arrays\n            .reduce((list, current) => list.concat(current), [])\n            // remove duplicates\n            .filter((def, i, all) => all.findIndex((item) => item.name.value === def.name.value) === i);\n        const merged = {\n            kind: Kind.DOCUMENT,\n            definitions: [...docWithOperations.definitions, ...extractedFragments],\n        };\n        let transformedSchema = config.apollo\n            ? transformSchemaWithApollo(schema)\n            : schema;\n        const transformedDoc = config.apollo\n            ? transformDocumentWithApollo(merged, {\n                keepClientFields: config.keepClientFields,\n            })\n            : merged;\n        const errors = validate$1(transformedSchema, transformedDoc) || [];\n        if (config.maxDepth) {\n            const depthError = validateQueryDepth({\n                source: doc.source,\n                doc: transformedDoc,\n                maxDepth: config.maxDepth,\n                fragmentGraph: graph,\n            });\n            if (depthError) {\n                errors.push(depthError);\n            }\n        }\n        const deprecated = config.strictDeprecated\n            ? findDeprecatedUsages(transformedSchema, transformedDoc)\n            : [];\n        const duplicatedFragments = config.strictFragments\n            ? findDuplicatedFragments(fragmentNames)\n            : [];\n        if (sumLengths(errors, duplicatedFragments, deprecated) > 0) {\n            invalidDocuments.push({\n                source: doc.source,\n                errors: [...errors, ...duplicatedFragments],\n                deprecated,\n            });\n        }\n    });\n    return invalidDocuments;\n}\nfunction findDuplicatedFragments(fragmentNames) {\n    return fragmentNames\n        .filter((name, i, all) => all.indexOf(name) !== i)\n        .map((name) => new GraphQLError(`Name of '${name}' fragment is not unique`));\n}\n//\n// PostInfo -> AuthorInfo\n// AuthorInfo -> None\n//\nfunction resolveFragment(fragment, graph) {\n    return graph\n        .dependenciesOf(fragment.name.value)\n        .reduce((list, current) => [\n        ...list,\n        ...resolveFragment(graph.getNodeData(current), graph),\n    ], [fragment]);\n}\nfunction extractFragments(document) {\n    return (document.match(/[\\.]{3}[a-z0-9\\_]+\\b/gi) || []).map((name) => name.replace('...', ''));\n}\nfunction sumLengths(...arrays) {\n    return arrays.reduce((sum, { length }) => sum + length, 0);\n}\n\nfunction similar(schema, typeName, threshold = 0.4) {\n    const typeMap = schema.getTypeMap();\n    const targets = Object.keys(schema.getTypeMap())\n        .filter((name) => !isPrimitive(name) && !isForIntrospection(name))\n        .map((name) => ({\n        typeId: name,\n        value: stripType(typeMap[name]),\n    }));\n    const results = {};\n    if (typeof typeName !== 'undefined' &&\n        !targets.some((t) => t.typeId === typeName)) {\n        throw new Error(`Type '${typeName}' doesn't exist`);\n    }\n    (typeName ? [{ typeId: typeName, value: '' }] : targets).forEach((source) => {\n        const sourceType = schema.getType(source.typeId);\n        const matchWith = targets.filter((target) => schema.getType(target.typeId).astNode.kind ===\n            sourceType.astNode.kind && target.typeId !== source.typeId);\n        if (matchWith.length > 0) {\n            const found = similarTo(sourceType, matchWith, threshold);\n            if (found) {\n                results[source.typeId] = found;\n            }\n        }\n    });\n    return results;\n}\nfunction similarTo(type, targets, threshold) {\n    const types = targets.filter((target) => target.typeId !== type.name);\n    const result = findBestMatch(stripType(type), types);\n    if (result.bestMatch.rating < threshold) {\n        return;\n    }\n    return {\n        bestMatch: result.bestMatch,\n        ratings: result.ratings\n            .filter((r) => r.rating >= threshold && r.target !== result.bestMatch.target)\n            .sort((a, b) => a.rating - b.rating)\n            .reverse(),\n    };\n}\nfunction stripType(type) {\n    return printType(type)\n        .trim()\n        .replace(/^[a-z]+ [^\\{]+\\{/g, '')\n        .replace(/\\}$/g, '')\n        .trim()\n        .split('\\n')\n        .map((s) => s.trim())\n        .sort((a, b) => a.localeCompare(b))\n        .join(' ');\n}\n\nfunction coverage(schema, sources) {\n    const coverage = {\n        sources,\n        types: {},\n    };\n    const typeMap = schema.getTypeMap();\n    const typeInfo = new TypeInfo(schema);\n    const visitor = (source) => ({\n        Field(node) {\n            const fieldDef = typeInfo.getFieldDef();\n            const parent = typeInfo.getParentType();\n            if (parent &&\n                parent.name &&\n                !isForIntrospection(parent.name) &&\n                fieldDef &&\n                fieldDef.name &&\n                fieldDef.name !== '__typename' &&\n                fieldDef.name !== '__schema') {\n                const sourceName = source.name;\n                const typeCoverage = coverage.types[parent.name];\n                const fieldCoverage = typeCoverage.children[fieldDef.name];\n                const locations = fieldCoverage.locations[sourceName];\n                typeCoverage.hits++;\n                fieldCoverage.hits++;\n                if (node.loc) {\n                    fieldCoverage.locations[sourceName] = [\n                        node.loc,\n                        ...(locations || []),\n                    ];\n                }\n                if (node.arguments) {\n                    for (const argNode of node.arguments) {\n                        const argCoverage = fieldCoverage.children[argNode.name.value];\n                        argCoverage.hits++;\n                        if (argNode.loc) {\n                            argCoverage.locations[sourceName] = [\n                                argNode.loc,\n                                ...(argCoverage.locations[sourceName] || []),\n                            ];\n                        }\n                    }\n                }\n            }\n        },\n    });\n    for (const typename in typeMap) {\n        if (!isForIntrospection(typename) && !isPrimitive(typename)) {\n            const type = typeMap[typename];\n            if (isObjectType(type) || isInterfaceType(type)) {\n                const typeCoverage = {\n                    hits: 0,\n                    type,\n                    children: {},\n                };\n                const fieldMap = type.getFields();\n                for (const fieldname in fieldMap) {\n                    const field = fieldMap[fieldname];\n                    typeCoverage.children[field.name] = {\n                        hits: 0,\n                        locations: {},\n                        children: {},\n                    };\n                    for (const arg of field.args) {\n                        typeCoverage.children[field.name].children[arg.name] = {\n                            hits: 0,\n                            locations: {},\n                        };\n                    }\n                }\n                coverage.types[type.name] = typeCoverage;\n            }\n        }\n    }\n    const documents = coverage.sources.map(readDocument);\n    documents.forEach((doc, i) => {\n        const source = coverage.sources[i];\n        doc.operations.forEach((op) => {\n            visit(op.node, visitWithTypeInfo(typeInfo, visitor(source)));\n        });\n        doc.fragments.forEach((fr) => {\n            visit(fr.node, visitWithTypeInfo(typeInfo, visitor(source)));\n        });\n    });\n    return coverage;\n}\n\nexport { ChangeType, CriticalityLevel, DiffRule, coverage, diff, getTypePrefix, similar, validate };\n", "import tslib from '../tslib.js';\r\nconst {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __spreadArray,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n    __classPrivateFieldIn,\r\n} = tslib;\r\nexport {\r\n    __extends,\r\n    __assign,\r\n    __rest,\r\n    __decorate,\r\n    __param,\r\n    __metadata,\r\n    __awaiter,\r\n    __generator,\r\n    __exportStar,\r\n    __createBinding,\r\n    __values,\r\n    __read,\r\n    __spread,\r\n    __spreadArrays,\r\n    __spreadArray,\r\n    __await,\r\n    __asyncGenerator,\r\n    __asyncDelegator,\r\n    __asyncValues,\r\n    __makeTemplateObject,\r\n    __importStar,\r\n    __importDefault,\r\n    __classPrivateFieldGet,\r\n    __classPrivateFieldSet,\r\n    __classPrivateFieldIn,\r\n};\r\n", "import { createLruCache } from '@graphql-mesh/utils';\nimport LocalForage from 'localforage';\n\nfunction nextTick() {\n    // Make sure this is scheduled for next tick because LRU Cache is synchronous\n    // This helps for testing multiple Mesh instances pointing to the same cache\n    return new Promise(resolve => setTimeout(resolve));\n}\nfunction createInMemoryLRUDriver(ttl) {\n    let lru;\n    return {\n        _driver: 'INMEMORY_LRU',\n        _initStorage(options) {\n            lru = createLruCache(options.size, ttl);\n        },\n        async getItem(key, callback) {\n            try {\n                await nextTick();\n                const value = lru.get(key);\n                if (callback) {\n                    callback(null, value);\n                }\n                return value;\n            }\n            catch (err) {\n                if (callback) {\n                    callback(err);\n                }\n                throw err;\n            }\n        },\n        async setItem(key, value, callback) {\n            try {\n                await nextTick();\n                lru.set(key, value);\n                if (callback) {\n                    callback(null, value);\n                }\n                return value;\n            }\n            catch (err) {\n                if (callback) {\n                    callback(err);\n                }\n                throw err;\n            }\n        },\n        async removeItem(key, callback) {\n            try {\n                await nextTick();\n                lru.delete(key);\n                if (callback) {\n                    callback(null);\n                }\n            }\n            catch (err) {\n                callback(err);\n                throw err;\n            }\n        },\n        async clear(callback) {\n            try {\n                await nextTick();\n                lru.clear();\n                if (callback) {\n                    callback(null);\n                }\n            }\n            catch (err) {\n                if (callback) {\n                    callback(err);\n                }\n                throw err;\n            }\n        },\n        async length(callback) {\n            try {\n                await nextTick();\n                const value = lru.size;\n                if (callback) {\n                    callback(null, value);\n                }\n                return value;\n            }\n            catch (err) {\n                if (callback) {\n                    callback(err);\n                }\n                throw err;\n            }\n        },\n        async key(n, callback) {\n            try {\n                await nextTick();\n                const value = lru.keys()[n];\n                if (callback) {\n                    callback(null, value);\n                }\n                return value;\n            }\n            catch (err) {\n                if (callback) {\n                    callback(err);\n                }\n                throw err;\n            }\n        },\n        async keys(callback) {\n            try {\n                await nextTick();\n                const value = lru.keys();\n                if (callback) {\n                    callback(null, value);\n                }\n                return value;\n            }\n            catch (err) {\n                if (callback) {\n                    callback(err);\n                }\n                throw err;\n            }\n        },\n        async iterate(iteratee, callback) {\n            try {\n                await nextTick();\n                lru.keys().forEach((key, i) => {\n                    iteratee(lru.get(key), key, i);\n                });\n                if (callback) {\n                    callback(null);\n                }\n            }\n            catch (err) {\n                if (callback) {\n                    callback(err);\n                }\n                throw err;\n            }\n        },\n    };\n}\n\nLocalForage.defineDriver(createInMemoryLRUDriver()).catch(err => console.error('Failed at defining InMemoryLRU driver', err));\nclass LocalforageCache {\n    constructor(config) {\n        const driverNames = (config === null || config === void 0 ? void 0 : config.driver) || ['INDEXEDDB', 'WEBSQL', 'LOCALSTORAGE', 'INMEMORY_LRU'];\n        this.localforage = LocalForage.createInstance({\n            name: (config === null || config === void 0 ? void 0 : config.name) || 'graphql-mesh-cache',\n            storeName: (config === null || config === void 0 ? void 0 : config.storeName) || 'graphql-mesh-cache-store',\n            driver: driverNames.map(driverName => { var _a; return (_a = LocalForage[driverName]) !== null && _a !== void 0 ? _a : driverName; }),\n        });\n    }\n    async get(key) {\n        const expiresAt = await this.localforage.getItem(`${key}.expiresAt`);\n        if (expiresAt && Date.now() > expiresAt) {\n            await this.localforage.removeItem(key);\n        }\n        return this.localforage.getItem(key.toString());\n    }\n    async set(key, value, options) {\n        const jobs = [this.localforage.setItem(key, value)];\n        if (options === null || options === void 0 ? void 0 : options.ttl) {\n            jobs.push(this.localforage.setItem(`${key}.expiresAt`, Date.now() + options.ttl * 1000));\n        }\n        await Promise.all(jobs);\n    }\n    delete(key) {\n        return this.localforage.removeItem(key);\n    }\n}\n\nexport default LocalforageCache;\n", "import { UrlLoader } from '@graphql-tools/url-loader';\nimport { buildSchema, buildASTSchema, buildClientSchema, GraphQLSchema, Kind } from 'graphql';\nimport { introspectSchema } from '@graphql-tools/wrap';\nimport { loadFromModuleExportExpression, getCachedFetch, readFileOrUrl } from '@graphql-mesh/utils';\nimport { isDocumentNode, parseSelectionSet, memoize1, getOperationASTFromRequest, isAsyncIterable } from '@graphql-tools/utils';\nimport { PredefinedProxyOptions } from '@graphql-mesh/store';\nimport lodashGet from 'lodash.get';\nimport { parseInterpolationStrings, getInterpolatedStringFactory, getInterpolatedHeadersFactory } from '@graphql-mesh/string-interpolation';\nimport { process, util } from '@graphql-mesh/cross-helpers';\n\nconst getResolverData = memoize1(function getResolverData(params) {\n    return {\n        root: params.rootValue,\n        args: params.variables,\n        context: params.context,\n        env: process.env,\n    };\n});\nclass GraphQLHandler {\n    constructor({ config, baseDir, cache, store, importFn }) {\n        this.urlLoader = new UrlLoader();\n        this.interpolationStringSet = new Set();\n        this.config = config;\n        this.baseDir = baseDir;\n        this.cache = cache;\n        this.nonExecutableSchema = store.proxy('introspectionSchema', PredefinedProxyOptions.GraphQLSchemaWithDiffing);\n        this.importFn = importFn;\n    }\n    getArgsAndContextVariables() {\n        return parseInterpolationStrings(this.interpolationStringSet);\n    }\n    getCustomFetchImpl(customFetchConfig) {\n        return customFetchConfig\n            ? loadFromModuleExportExpression(customFetchConfig, {\n                cwd: this.baseDir,\n                defaultExportName: 'default',\n                importFn: this.importFn,\n            })\n            : getCachedFetch(this.cache);\n    }\n    async getExecutorForHTTPSourceConfig(httpSourceConfig) {\n        const { endpoint, customFetch: customFetchConfig, operationHeaders = {} } = httpSourceConfig;\n        this.interpolationStringSet.add(endpoint);\n        Object.keys(operationHeaders).forEach(headerName => {\n            this.interpolationStringSet.add(headerName.toString());\n        });\n        const customFetch = await this.getCustomFetchImpl(customFetchConfig);\n        const endpointFactory = getInterpolatedStringFactory(endpoint);\n        const operationHeadersFactory = getInterpolatedHeadersFactory(operationHeaders);\n        const executor = this.urlLoader.getExecutorAsync(endpoint, {\n            ...httpSourceConfig,\n            subscriptionsProtocol: httpSourceConfig.subscriptionsProtocol,\n            customFetch,\n        });\n        return function meshExecutor(params) {\n            const resolverData = getResolverData(params);\n            return executor({\n                ...params,\n                extensions: {\n                    ...params.extensions,\n                    headers: operationHeadersFactory(resolverData),\n                    endpoint: endpointFactory(resolverData),\n                },\n            });\n        };\n    }\n    async getNonExecutableSchemaForHTTPSource(httpSourceConfig) {\n        this.interpolationStringSet.add(httpSourceConfig.endpoint);\n        Object.keys(httpSourceConfig.schemaHeaders || {}).forEach(headerName => {\n            this.interpolationStringSet.add(headerName.toString());\n        });\n        const schemaHeadersFactory = getInterpolatedHeadersFactory(httpSourceConfig.schemaHeaders || {});\n        const customFetch = await this.getCustomFetchImpl(httpSourceConfig.customFetch);\n        if (httpSourceConfig.introspection) {\n            const headers = schemaHeadersFactory({\n                env: process.env,\n            });\n            const sdlOrIntrospection = await readFileOrUrl(httpSourceConfig.introspection, {\n                cwd: this.baseDir,\n                allowUnknownExtensions: true,\n                fetch: customFetch,\n                headers,\n            });\n            if (typeof sdlOrIntrospection === 'string') {\n                return buildSchema(sdlOrIntrospection);\n            }\n            else if (isDocumentNode(sdlOrIntrospection)) {\n                return buildASTSchema(sdlOrIntrospection);\n            }\n            else if (sdlOrIntrospection.__schema) {\n                return buildClientSchema(sdlOrIntrospection);\n            }\n            throw new Error(`Invalid introspection data: ${util.inspect(sdlOrIntrospection)}`);\n        }\n        return this.nonExecutableSchema.getWithSet(() => {\n            const endpointFactory = getInterpolatedStringFactory(httpSourceConfig.endpoint);\n            const executor = this.urlLoader.getExecutorAsync(httpSourceConfig.endpoint, {\n                ...httpSourceConfig,\n                customFetch,\n                subscriptionsProtocol: httpSourceConfig.subscriptionsProtocol,\n            });\n            return introspectSchema(function meshIntrospectionExecutor(params) {\n                const resolverData = getResolverData(params);\n                return executor({\n                    ...params,\n                    extensions: {\n                        ...params.extensions,\n                        headers: schemaHeadersFactory(resolverData),\n                        endpoint: endpointFactory(resolverData),\n                    },\n                });\n            });\n        });\n    }\n    async getCodeFirstSource({ schema: schemaConfig, }) {\n        if (schemaConfig.endsWith('.graphql')) {\n            const rawSDL = await readFileOrUrl(schemaConfig, {\n                cwd: this.baseDir,\n                allowUnknownExtensions: true,\n                importFn: this.importFn,\n            });\n            const schema = buildSchema(rawSDL);\n            const { contextVariables } = this.getArgsAndContextVariables();\n            return {\n                schema,\n                contextVariables,\n            };\n        }\n        else {\n            // Loaders logic should be here somehow\n            const schemaOrStringOrDocumentNode = await loadFromModuleExportExpression(schemaConfig, { cwd: this.baseDir, defaultExportName: 'schema', importFn: this.importFn });\n            let schema;\n            if (schemaOrStringOrDocumentNode instanceof GraphQLSchema) {\n                schema = schemaOrStringOrDocumentNode;\n            }\n            else if (typeof schemaOrStringOrDocumentNode === 'string') {\n                schema = buildSchema(schemaOrStringOrDocumentNode);\n            }\n            else if (typeof schemaOrStringOrDocumentNode === 'object' &&\n                (schemaOrStringOrDocumentNode === null || schemaOrStringOrDocumentNode === void 0 ? void 0 : schemaOrStringOrDocumentNode.kind) === Kind.DOCUMENT) {\n                schema = buildASTSchema(schemaOrStringOrDocumentNode);\n            }\n            else {\n                throw new Error(`Provided file '${schemaConfig} exports an unknown type: ${util.inspect(schemaOrStringOrDocumentNode)}': expected GraphQLSchema, SDL or DocumentNode.`);\n            }\n            const { contextVariables } = this.getArgsAndContextVariables();\n            return {\n                schema,\n                contextVariables,\n            };\n        }\n    }\n    getRaceExecutor(executors) {\n        return function raceExecutor(params) {\n            return Promise.race(executors.map(executor => executor(params)));\n        };\n    }\n    getFallbackExecutor(executors) {\n        return async function fallbackExecutor(params) {\n            var _a;\n            let error;\n            let response;\n            for (const executor of executors) {\n                try {\n                    const executorResponse = await executor(params);\n                    if ('errors' in executorResponse && ((_a = executorResponse.errors) === null || _a === void 0 ? void 0 : _a.length)) {\n                        response = executorResponse;\n                        continue;\n                    }\n                    else {\n                        return executorResponse;\n                    }\n                }\n                catch (e) {\n                    error = e;\n                }\n            }\n            if (response != null) {\n                return response;\n            }\n            throw error;\n        };\n    }\n    async getMeshSource() {\n        if ('sources' in this.config) {\n            if (this.config.strategy === 'race') {\n                const schemaPromises = [];\n                const executorPromises = [];\n                let batch = true;\n                for (const httpSourceConfig of this.config.sources) {\n                    if (httpSourceConfig.batch === false) {\n                        batch = false;\n                    }\n                    schemaPromises.push(this.getNonExecutableSchemaForHTTPSource(httpSourceConfig));\n                    executorPromises.push(this.getExecutorForHTTPSourceConfig(httpSourceConfig));\n                }\n                const [schema, ...executors] = await Promise.all([Promise.race(schemaPromises), ...executorPromises]);\n                const executor = this.getRaceExecutor(executors);\n                const { contextVariables } = this.getArgsAndContextVariables();\n                return {\n                    schema,\n                    executor,\n                    batch,\n                    contextVariables,\n                };\n            }\n            else if (this.config.strategy === 'highestValue') {\n                if (this.config.strategyConfig == null) {\n                    throw new Error(`You must configure 'highestValue' strategy`);\n                }\n                let schema;\n                const executorPromises = [];\n                let error;\n                for (const httpSourceConfig of this.config.sources) {\n                    executorPromises.push(this.getExecutorForHTTPSourceConfig(httpSourceConfig));\n                    if (schema == null) {\n                        try {\n                            schema = await this.getNonExecutableSchemaForHTTPSource(httpSourceConfig);\n                        }\n                        catch (e) {\n                            error = e;\n                        }\n                    }\n                }\n                if (schema == null) {\n                    throw error;\n                }\n                const executors = await Promise.all(executorPromises);\n                const parsedSelectionSet = parseSelectionSet(this.config.strategyConfig.selectionSet);\n                const valuePath = this.config.strategyConfig.value;\n                const highestValueExecutor = async function highestValueExecutor(executionRequest) {\n                    const operationAST = getOperationASTFromRequest(executionRequest);\n                    operationAST.selectionSet.selections.push(...parsedSelectionSet.selections);\n                    const results = await Promise.all(executors.map(executor => executor(executionRequest)));\n                    let highestValue = -Infinity;\n                    let resultWithHighestResult = results[0];\n                    for (const result of results) {\n                        if (isAsyncIterable(result)) {\n                            console.warn('Incremental delivery is not supported currently');\n                            return result;\n                        }\n                        else if (result.data != null) {\n                            const currentValue = lodashGet(result.data, valuePath);\n                            if (currentValue > highestValue) {\n                                resultWithHighestResult = result;\n                                highestValue = currentValue;\n                            }\n                        }\n                    }\n                    return resultWithHighestResult;\n                };\n                const { contextVariables } = this.getArgsAndContextVariables();\n                return {\n                    schema,\n                    executor: highestValueExecutor,\n                    // Batching doesn't make sense with fallback strategy\n                    batch: false,\n                    contextVariables,\n                };\n            }\n            else {\n                let schema;\n                const executorPromises = [];\n                let error;\n                for (const httpSourceConfig of this.config.sources) {\n                    executorPromises.push(this.getExecutorForHTTPSourceConfig(httpSourceConfig));\n                    if (schema == null) {\n                        try {\n                            schema = await this.getNonExecutableSchemaForHTTPSource(httpSourceConfig);\n                        }\n                        catch (e) {\n                            error = e;\n                        }\n                    }\n                }\n                if (schema == null) {\n                    throw error;\n                }\n                const executors = await Promise.all(executorPromises);\n                const executor = this.getFallbackExecutor(executors);\n                const { contextVariables } = this.getArgsAndContextVariables();\n                return {\n                    schema,\n                    executor,\n                    // Batching doesn't make sense with fallback strategy\n                    batch: false,\n                    contextVariables,\n                };\n            }\n        }\n        else if ('endpoint' in this.config) {\n            const [schemaResult, executorResult] = await Promise.allSettled([\n                this.getNonExecutableSchemaForHTTPSource(this.config),\n                this.getExecutorForHTTPSourceConfig(this.config),\n            ]);\n            if (schemaResult.status === 'rejected') {\n                throw new Error(`Failed to fetch introspection from ${this.config.endpoint}: ${util.inspect(schemaResult.reason)}`);\n            }\n            if (executorResult.status === 'rejected') {\n                throw new Error(`Failed to create executor for ${this.config.endpoint}: ${util.inspect(executorResult.reason)}`);\n            }\n            const { contextVariables } = this.getArgsAndContextVariables();\n            return {\n                schema: schemaResult.value,\n                executor: executorResult.value,\n                batch: this.config.batch != null ? this.config.batch : true,\n                contextVariables,\n            };\n        }\n        else if ('schema' in this.config) {\n            return this.getCodeFirstSource(this.config);\n        }\n        throw new Error(`Unexpected config: ${util.inspect(this.config)}`);\n    }\n}\n\nexport default GraphQLHandler;\n", "import { print, buildASTSchema, buildSchema } from 'graphql';\nimport { mapAsyncIterator, isAsyncIterable, inspect, withCancel, observableToAsyncIterable, parseGraphQLSDL, getOperationASTFromRequest } from '@graphql-tools/utils';\nimport { introspectSchema, wrapSchema } from '@graphql-tools/wrap';\nimport { createClient } from 'graphql-ws';\nimport WebSocket from 'isomorphic-ws';\nimport { extractFiles, isExtractableFile } from 'extract-files';\nimport { ValueOrPromise } from 'value-or-promise';\nimport { isLiveQueryOperationDefinitionNode } from '@n1ru4l/graphql-live-query';\nimport { fetch, FormData, File, AbortController } from 'cross-undici-fetch';\nimport syncFetchImported from 'sync-fetch';\nimport { meros } from 'meros/node';\nimport { meros as meros$1 } from 'meros/browser';\nimport { dset } from 'dset/merge';\n\nconst defaultAsyncFetch = async (input, init) => {\n    return fetch(input, init);\n};\n\nconst defaultSyncFetch = (input, init) => {\n    if (typeof input === 'string') {\n        init === null || init === void 0 ? true : delete init.signal;\n    }\n    else {\n        delete input.signal;\n    }\n    return syncFetchImported(input, init);\n};\n\nfunction isIncomingMessage(body) {\n    return body != null && typeof body === 'object' && 'pipe' in body;\n}\nasync function handleMultipartMixedResponse(response) {\n    const body = await response.body;\n    const contentType = response.headers.get('content-type') || '';\n    let asyncIterator;\n    if (isIncomingMessage(body)) {\n        // Meros/node expects headers as an object map with the content-type prop\n        body.headers = {\n            'content-type': contentType,\n        };\n        // And it expects `IncomingMessage` and `node-fetch` returns `body` as `Promise<PassThrough>`\n        asyncIterator = (await meros(body));\n    }\n    else {\n        // Nothing is needed for regular `Response`.\n        asyncIterator = (await meros$1(response));\n    }\n    const executionResult = {};\n    return mapAsyncIterator(asyncIterator, (part) => {\n        if (part.json) {\n            const chunk = part.body;\n            if (chunk.path) {\n                if (chunk.data) {\n                    const path = ['data'];\n                    dset(executionResult, path.concat(chunk.path), chunk.data);\n                }\n                if (chunk.errors) {\n                    executionResult.errors = (executionResult.errors || []).concat(chunk.errors);\n                }\n            }\n            else {\n                if (chunk.data) {\n                    executionResult.data = chunk.data;\n                }\n                if (chunk.errors) {\n                    executionResult.errors = chunk.errors;\n                }\n            }\n            return executionResult;\n        }\n    });\n}\n\n/* eslint-disable no-labels */\nlet decodeUint8Array;\nif (globalThis.Buffer) {\n    decodeUint8Array = uint8Array => globalThis.Buffer.from(uint8Array).toString('utf-8');\n}\nelse {\n    const textDecoder = new TextDecoder();\n    decodeUint8Array = uint8Array => textDecoder.decode(uint8Array);\n}\nasync function* handleReadable(readable) {\n    outer: for await (const chunk of readable) {\n        const chunkStr = typeof chunk === 'string' ? chunk : decodeUint8Array(chunk);\n        for (const part of chunkStr.split('\\n\\n')) {\n            if (part) {\n                const eventStr = part.split('event: ')[1];\n                const dataStr = part.split('data: ')[1];\n                if (eventStr === 'complete') {\n                    break outer;\n                }\n                if (dataStr) {\n                    const data = JSON.parse(dataStr);\n                    yield data.payload || data;\n                }\n            }\n        }\n    }\n}\n\n// Based on https://github.com/Azure/fetch-event-source/blob/main/src/parse.ts\nasync function* handleReadableStream(stream) {\n    const decoder = new TextDecoder();\n    const reader = stream.getReader();\n    let buffer;\n    let position = 0; // current read position\n    let fieldLength = -1; // length of the `field` portion of the line\n    let discardTrailingNewline = false;\n    try {\n        let result;\n        let message = {\n            data: '',\n            event: '',\n            id: '',\n            retry: undefined,\n        };\n        while (!(result = await reader.read()).done) {\n            const arr = result.value;\n            if (buffer === undefined) {\n                buffer = arr;\n                position = 0;\n                fieldLength = -1;\n            }\n            else {\n                // we're still parsing the old line. Append the new bytes into buffer:\n                buffer = concat(buffer, arr);\n            }\n            const bufLength = buffer.length;\n            let lineStart = 0; // index where the current line starts\n            while (position < bufLength) {\n                if (discardTrailingNewline) {\n                    if (buffer[position] === 10 /* ControlChars.NewLine */) {\n                        lineStart = ++position; // skip to next char\n                    }\n                    discardTrailingNewline = false;\n                }\n                // start looking forward till the end of line:\n                let lineEnd = -1; // index of the \\r or \\n char\n                for (; position < bufLength && lineEnd === -1; ++position) {\n                    switch (buffer[position]) {\n                        case 58 /* ControlChars.Colon */: {\n                            if (fieldLength === -1) {\n                                // first colon in line\n                                fieldLength = position - lineStart;\n                            }\n                            break;\n                        }\n                        case 13 /* ControlChars.CarriageReturn */: {\n                            discardTrailingNewline = true;\n                            break;\n                        }\n                        case 10 /* ControlChars.NewLine */: {\n                            lineEnd = position;\n                            break;\n                        }\n                    }\n                }\n                if (lineEnd === -1) {\n                    // We reached the end of the buffer but the line hasn't ended.\n                    // Wait for the next arr and then continue parsing:\n                    break;\n                }\n                // we've reached the line end, send it out:\n                const line = buffer.subarray(lineStart, lineEnd);\n                if (line.length === 0) {\n                    // empty line denotes end of message. Trigger the callback and start a new message:\n                    if (message.event || message.data) {\n                        // NOT a server ping (\":\\n\\n\")\n                        yield JSON.parse(message.data);\n                        message = {\n                            data: '',\n                            event: '',\n                            id: '',\n                            retry: undefined,\n                        };\n                    }\n                }\n                else if (fieldLength > 0) {\n                    // exclude comments and lines with no values\n                    // line is of format \"<field>:<value>\" or \"<field>: <value>\"\n                    // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation\n                    const field = decoder.decode(line.subarray(0, fieldLength));\n                    const valueOffset = fieldLength + (line[fieldLength + 1] === 32 /* ControlChars.Space */ ? 2 : 1);\n                    const value = decoder.decode(line.subarray(valueOffset));\n                    switch (field) {\n                        case 'data':\n                            // if this message already has data, append the new value to the old.\n                            // otherwise, just set to the new value:\n                            message.data = message.data ? message.data + '\\n' + value : value; // otherwise,\n                            break;\n                        case 'event':\n                            message.event = value;\n                            break;\n                        case 'id':\n                            message.id = value;\n                            break;\n                        case 'retry': {\n                            const retry = parseInt(value, 10);\n                            message.retry = retry;\n                            break;\n                        }\n                    }\n                }\n                lineStart = position; // we're now on the next line\n                fieldLength = -1;\n            }\n            if (lineStart === bufLength) {\n                buffer = undefined; // we've finished reading it\n            }\n            else if (lineStart !== 0) {\n                // Create a new view into buffer beginning at lineStart so we don't\n                // need to copy over the previous lines when we get the new arr:\n                buffer = buffer.subarray(lineStart);\n                position -= lineStart;\n            }\n        }\n    }\n    finally {\n        reader.releaseLock();\n    }\n}\nfunction concat(a, b) {\n    const res = new Uint8Array(a.length + b.length);\n    res.set(a);\n    res.set(b, a.length);\n    return res;\n}\n\nasync function handleEventStreamResponse(response) {\n    // node-fetch returns body as a promise so we need to resolve it\n    const body = await response.body;\n    if (body) {\n        if (isAsyncIterable(body)) {\n            return handleReadable(body);\n        }\n        return handleReadableStream(body);\n    }\n    throw new Error('Response body is expected to be a readable stream but got; ' + inspect(body));\n}\n\nfunction addCancelToResponseStream(resultStream, controller) {\n    return withCancel(resultStream, () => {\n        if (!controller.signal.aborted) {\n            controller.abort();\n        }\n    });\n}\n\nfunction isBlob(obj) {\n    return typeof obj.arrayBuffer === 'function';\n}\nfunction isGraphQLUpload(upload) {\n    return typeof upload.createReadStream === 'function';\n}\nfunction isPromiseLike(obj) {\n    return typeof obj.then === 'function';\n}\nvar LEGACY_WS;\n(function (LEGACY_WS) {\n    LEGACY_WS[\"CONNECTION_INIT\"] = \"connection_init\";\n    LEGACY_WS[\"CONNECTION_ACK\"] = \"connection_ack\";\n    LEGACY_WS[\"CONNECTION_ERROR\"] = \"connection_error\";\n    LEGACY_WS[\"CONNECTION_KEEP_ALIVE\"] = \"ka\";\n    LEGACY_WS[\"START\"] = \"start\";\n    LEGACY_WS[\"STOP\"] = \"stop\";\n    LEGACY_WS[\"CONNECTION_TERMINATE\"] = \"connection_terminate\";\n    LEGACY_WS[\"DATA\"] = \"data\";\n    LEGACY_WS[\"ERROR\"] = \"error\";\n    LEGACY_WS[\"COMPLETE\"] = \"complete\";\n})(LEGACY_WS || (LEGACY_WS = {}));\n\n/* eslint-disable no-case-declarations */\nconst asyncImport = (moduleName) => import(moduleName);\nconst syncImport = (moduleName) => require(moduleName);\nvar SubscriptionProtocol;\n(function (SubscriptionProtocol) {\n    SubscriptionProtocol[\"WS\"] = \"WS\";\n    /**\n     * Use legacy web socket protocol `graphql-ws` instead of the more current standard `graphql-transport-ws`\n     */\n    SubscriptionProtocol[\"LEGACY_WS\"] = \"LEGACY_WS\";\n    /**\n     * Use SSE for subscription instead of WebSocket\n     */\n    SubscriptionProtocol[\"SSE\"] = \"SSE\";\n    /**\n     * Use `graphql-sse` for subscriptions\n     */\n    SubscriptionProtocol[\"GRAPHQL_SSE\"] = \"GRAPHQL_SSE\";\n})(SubscriptionProtocol || (SubscriptionProtocol = {}));\nfunction isCompatibleUri(uri) {\n    try {\n        // eslint-disable-next-line no-new\n        new URL(uri);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * This loader loads a schema from a URL. The loaded schema is a fully-executable,\n * remote schema since it's created using [@graphql-tools/wrap](/docs/remote-schemas).\n *\n * ```\n * const schema = await loadSchema('http://localhost:3000/graphql', {\n *   loaders: [\n *     new UrlLoader(),\n *   ]\n * });\n * ```\n */\nclass UrlLoader {\n    createFormDataFromVariables({ query, variables, operationName, extensions, }) {\n        const vars = Object.assign({}, variables);\n        const { clone, files } = extractFiles(vars, 'variables', ((v) => isExtractableFile(v) ||\n            (v === null || v === void 0 ? void 0 : v.promise) ||\n            isAsyncIterable(v) ||\n            (v === null || v === void 0 ? void 0 : v.then) ||\n            typeof (v === null || v === void 0 ? void 0 : v.arrayBuffer) === 'function'));\n        const map = {};\n        const uploads = [];\n        let currIndex = 0;\n        for (const [file, curr] of files) {\n            map[currIndex] = curr;\n            uploads[currIndex] = file;\n            currIndex++;\n        }\n        const form = new FormData();\n        form.append('operations', JSON.stringify({\n            query,\n            variables: clone,\n            operationName,\n            extensions,\n        }));\n        form.append('map', JSON.stringify(map));\n        function handleUpload(upload, i) {\n            const indexStr = i.toString();\n            if (upload != null) {\n                const filename = upload.filename || upload.name || upload.path || `blob-${indexStr}`;\n                if (isPromiseLike(upload)) {\n                    return upload.then((resolvedUpload) => handleUpload(resolvedUpload, i));\n                    // If Blob\n                }\n                else if (isBlob(upload)) {\n                    return upload.arrayBuffer().then((arrayBuffer) => {\n                        form.append(indexStr, new File([arrayBuffer], filename, { type: upload.type }), filename);\n                    });\n                }\n                else if (isGraphQLUpload(upload)) {\n                    const stream = upload.createReadStream();\n                    const chunks = [];\n                    return Promise.resolve().then(async () => {\n                        for await (const chunk of stream) {\n                            if (chunk) {\n                                chunks.push(...chunk);\n                            }\n                        }\n                        const blobPart = new Uint8Array(chunks);\n                        form.append(indexStr, new File([blobPart], filename, { type: upload.mimetype }), filename);\n                    });\n                }\n                else {\n                    form.append(indexStr, new File([upload], filename), filename);\n                }\n            }\n        }\n        return ValueOrPromise.all(uploads.map((upload, i) => new ValueOrPromise(() => handleUpload(upload, i))))\n            .then(() => form)\n            .resolve();\n    }\n    prepareGETUrl({ baseUrl, query, variables, operationName, extensions, }) {\n        const HTTP_URL = switchProtocols(baseUrl, {\n            wss: 'https',\n            ws: 'http',\n        });\n        const dummyHostname = 'https://dummyhostname.com';\n        const validUrl = HTTP_URL.startsWith('http')\n            ? HTTP_URL\n            : HTTP_URL.startsWith('/')\n                ? `${dummyHostname}${HTTP_URL}`\n                : `${dummyHostname}/${HTTP_URL}`;\n        const urlObj = new URL(validUrl);\n        urlObj.searchParams.set('query', query);\n        if (variables && Object.keys(variables).length > 0) {\n            urlObj.searchParams.set('variables', JSON.stringify(variables));\n        }\n        if (operationName) {\n            urlObj.searchParams.set('operationName', operationName);\n        }\n        if (extensions) {\n            urlObj.searchParams.set('extensions', JSON.stringify(extensions));\n        }\n        const finalUrl = urlObj.toString().replace(dummyHostname, '');\n        return finalUrl;\n    }\n    buildHTTPExecutor(initialEndpoint, fetch, options) {\n        const defaultMethod = this.getDefaultMethodFromOptions(options === null || options === void 0 ? void 0 : options.method, 'POST');\n        const HTTP_URL = switchProtocols(initialEndpoint, {\n            wss: 'https',\n            ws: 'http',\n        });\n        const executor = (request) => {\n            var _a, _b;\n            const controller = new AbortController();\n            let method = defaultMethod;\n            const operationAst = getOperationASTFromRequest(request);\n            const operationType = operationAst.operation;\n            if ((options === null || options === void 0 ? void 0 : options.useGETForQueries) && operationType === 'query') {\n                method = 'GET';\n            }\n            let accept = 'application/json, multipart/mixed';\n            if (operationType === 'subscription' || isLiveQueryOperationDefinitionNode(operationAst)) {\n                method = 'GET';\n                accept = 'text/event-stream';\n            }\n            const endpoint = ((_a = request.extensions) === null || _a === void 0 ? void 0 : _a.endpoint) || HTTP_URL;\n            const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers, ((_b = request.extensions) === null || _b === void 0 ? void 0 : _b.headers) || {});\n            const query = print(request.document);\n            const requestBody = {\n                query,\n                variables: request.variables,\n                operationName: request.operationName,\n                extensions: request.extensions,\n            };\n            let timeoutId;\n            if (options === null || options === void 0 ? void 0 : options.timeout) {\n                timeoutId = setTimeout(() => {\n                    if (!controller.signal.aborted) {\n                        controller.abort();\n                    }\n                }, options.timeout);\n            }\n            const credentials = (options === null || options === void 0 ? void 0 : options.credentials) || 'same-origin';\n            return new ValueOrPromise(() => {\n                switch (method) {\n                    case 'GET':\n                        const finalUrl = this.prepareGETUrl({\n                            baseUrl: endpoint,\n                            ...requestBody,\n                        });\n                        return fetch(finalUrl, {\n                            method: 'GET',\n                            credentials,\n                            headers: {\n                                accept,\n                                ...headers,\n                            },\n                            signal: controller.signal,\n                        });\n                    case 'POST':\n                        if (options === null || options === void 0 ? void 0 : options.multipart) {\n                            return new ValueOrPromise(() => this.createFormDataFromVariables(requestBody))\n                                .then(form => fetch(endpoint, {\n                                method: 'POST',\n                                credentials,\n                                body: form,\n                                headers: {\n                                    accept,\n                                    ...headers,\n                                },\n                                signal: controller.signal,\n                            }))\n                                .resolve();\n                        }\n                        else {\n                            return fetch(endpoint, {\n                                method: 'POST',\n                                credentials,\n                                body: JSON.stringify(requestBody),\n                                headers: {\n                                    accept,\n                                    'content-type': 'application/json',\n                                    ...headers,\n                                },\n                                signal: controller.signal,\n                            });\n                        }\n                }\n            })\n                .then((fetchResult) => {\n                if (timeoutId != null) {\n                    clearTimeout(timeoutId);\n                }\n                // Retry should respect HTTP Errors\n                if ((options === null || options === void 0 ? void 0 : options.retry) != null && !fetchResult.status.toString().startsWith('2')) {\n                    throw new Error(fetchResult.statusText || `HTTP Error: ${fetchResult.status}`);\n                }\n                const contentType = fetchResult.headers.get('content-type');\n                if (contentType === null || contentType === void 0 ? void 0 : contentType.includes('text/event-stream')) {\n                    return handleEventStreamResponse(fetchResult).then(resultStream => addCancelToResponseStream(resultStream, controller));\n                }\n                else if (contentType === null || contentType === void 0 ? void 0 : contentType.includes('multipart/mixed')) {\n                    return handleMultipartMixedResponse(fetchResult).then(resultStream => addCancelToResponseStream(resultStream, controller));\n                }\n                return fetchResult.text();\n            })\n                .then(result => {\n                if (typeof result === 'string') {\n                    if (result) {\n                        return JSON.parse(result);\n                    }\n                }\n                else {\n                    return result;\n                }\n            })\n                .resolve();\n        };\n        if ((options === null || options === void 0 ? void 0 : options.retry) != null) {\n            return function retryExecutor(request) {\n                let result;\n                let error;\n                let attempt = 0;\n                function retryAttempt() {\n                    attempt++;\n                    if (attempt > options.retry) {\n                        if (result != null) {\n                            return result;\n                        }\n                        if (error != null) {\n                            throw error;\n                        }\n                        throw new Error('No result');\n                    }\n                    return new ValueOrPromise(() => executor(request))\n                        .then(res => {\n                        var _a;\n                        result = res;\n                        if ((_a = result === null || result === void 0 ? void 0 : result.errors) === null || _a === void 0 ? void 0 : _a.length) {\n                            return retryAttempt();\n                        }\n                        return result;\n                    })\n                        .catch((e) => {\n                        error = e;\n                        return retryAttempt();\n                    })\n                        .resolve();\n                }\n                return retryAttempt();\n            };\n        }\n        return executor;\n    }\n    buildWSExecutor(subscriptionsEndpoint, webSocketImpl, connectionParams) {\n        const WS_URL = switchProtocols(subscriptionsEndpoint, {\n            https: 'wss',\n            http: 'ws',\n        });\n        const subscriptionClient = createClient({\n            url: WS_URL,\n            webSocketImpl,\n            connectionParams,\n            lazy: true,\n        });\n        return ({ document, variables, operationName, extensions }) => {\n            const query = print(document);\n            return observableToAsyncIterable({\n                subscribe: observer => {\n                    const unsubscribe = subscriptionClient.subscribe({\n                        query,\n                        variables: variables,\n                        operationName,\n                        extensions,\n                    }, observer);\n                    return {\n                        unsubscribe,\n                    };\n                },\n            });\n        };\n    }\n    buildWSLegacyExecutor(subscriptionsEndpoint, WebSocketImpl, options) {\n        const WS_URL = switchProtocols(subscriptionsEndpoint, {\n            https: 'wss',\n            http: 'ws',\n        });\n        return function legacyExecutor(request) {\n            const id = Date.now().toString();\n            return observableToAsyncIterable({\n                subscribe(observer) {\n                    const websocket = new WebSocketImpl(WS_URL, 'graphql-ws', {\n                        followRedirects: true,\n                        headers: options === null || options === void 0 ? void 0 : options.headers,\n                        rejectUnauthorized: false,\n                        skipUTF8Validation: true,\n                    });\n                    websocket.onopen = () => {\n                        websocket.send(JSON.stringify({\n                            type: LEGACY_WS.CONNECTION_INIT,\n                            payload: {\n                                ...request.extensions,\n                            },\n                        }));\n                    };\n                    websocket.onmessage = event => {\n                        const data = JSON.parse(event.data.toString('utf-8'));\n                        switch (data.type) {\n                            case LEGACY_WS.CONNECTION_ACK: {\n                                websocket.send(JSON.stringify({\n                                    type: LEGACY_WS.START,\n                                    id,\n                                    payload: {\n                                        query: print(request.document),\n                                        variables: request.variables,\n                                        operationName: request.operationName,\n                                    },\n                                }));\n                                break;\n                            }\n                            case LEGACY_WS.CONNECTION_ERROR: {\n                                observer.error(data.payload);\n                                break;\n                            }\n                            case LEGACY_WS.CONNECTION_KEEP_ALIVE: {\n                                break;\n                            }\n                            case LEGACY_WS.DATA: {\n                                observer.next(data.payload);\n                                break;\n                            }\n                            case LEGACY_WS.COMPLETE: {\n                                websocket.send(JSON.stringify({\n                                    type: LEGACY_WS.CONNECTION_TERMINATE,\n                                }));\n                                websocket.terminate();\n                                observer.complete();\n                                break;\n                            }\n                        }\n                    };\n                    return {\n                        unsubscribe: () => {\n                            websocket.send(JSON.stringify({\n                                type: LEGACY_WS.STOP,\n                                id,\n                            }));\n                            websocket.send(JSON.stringify({\n                                type: LEGACY_WS.CONNECTION_TERMINATE,\n                            }));\n                            websocket.terminate();\n                        },\n                    };\n                },\n            });\n        };\n    }\n    getFetch(customFetch, importFn) {\n        if (customFetch) {\n            if (typeof customFetch === 'string') {\n                const [moduleName, fetchFnName] = customFetch.split('#');\n                return new ValueOrPromise(() => importFn(moduleName))\n                    .then(module => (fetchFnName ? module[fetchFnName] : module))\n                    .resolve();\n            }\n            else if (typeof customFetch === 'function') {\n                return customFetch;\n            }\n        }\n        if (importFn === asyncImport) {\n            return defaultAsyncFetch;\n        }\n        else {\n            return defaultSyncFetch;\n        }\n    }\n    getDefaultMethodFromOptions(method, defaultMethod) {\n        if (method) {\n            defaultMethod = method;\n        }\n        return defaultMethod;\n    }\n    getWebSocketImpl(importFn, options) {\n        if (typeof (options === null || options === void 0 ? void 0 : options.webSocketImpl) === 'string') {\n            const [moduleName, webSocketImplName] = options.webSocketImpl.split('#');\n            return new ValueOrPromise(() => importFn(moduleName))\n                .then(importedModule => (webSocketImplName ? importedModule[webSocketImplName] : importedModule))\n                .resolve();\n        }\n        else {\n            const websocketImpl = (options === null || options === void 0 ? void 0 : options.webSocketImpl) || WebSocket;\n            return websocketImpl;\n        }\n    }\n    buildSubscriptionExecutor(subscriptionsEndpoint, fetch, importFn, options) {\n        if ((options === null || options === void 0 ? void 0 : options.subscriptionsProtocol) === SubscriptionProtocol.SSE) {\n            return this.buildHTTPExecutor(subscriptionsEndpoint, fetch, options);\n        }\n        else if ((options === null || options === void 0 ? void 0 : options.subscriptionsProtocol) === SubscriptionProtocol.GRAPHQL_SSE) {\n            if (!(options === null || options === void 0 ? void 0 : options.subscriptionsEndpoint)) {\n                // when no custom subscriptions endpoint is specified,\n                // graphql-sse is recommended to be used on `/graphql/stream`\n                subscriptionsEndpoint += '/stream';\n            }\n            return this.buildHTTPExecutor(subscriptionsEndpoint, fetch, options);\n        }\n        else {\n            const webSocketImpl$ = new ValueOrPromise(() => this.getWebSocketImpl(importFn, options));\n            const connectionParams = () => ({ headers: options === null || options === void 0 ? void 0 : options.headers });\n            const executor$ = webSocketImpl$.then(webSocketImpl => {\n                if ((options === null || options === void 0 ? void 0 : options.subscriptionsProtocol) === SubscriptionProtocol.LEGACY_WS) {\n                    return this.buildWSLegacyExecutor(subscriptionsEndpoint, webSocketImpl, options);\n                }\n                else {\n                    return this.buildWSExecutor(subscriptionsEndpoint, webSocketImpl, connectionParams);\n                }\n            });\n            return request => executor$.then(executor => executor(request)).resolve();\n        }\n    }\n    getExecutor(endpoint, importFn, options) {\n        const fetch$ = new ValueOrPromise(() => this.getFetch(options === null || options === void 0 ? void 0 : options.customFetch, importFn));\n        const httpExecutor$ = fetch$.then(fetch => {\n            return this.buildHTTPExecutor(endpoint, fetch, options);\n        });\n        if ((options === null || options === void 0 ? void 0 : options.subscriptionsEndpoint) != null || (options === null || options === void 0 ? void 0 : options.subscriptionsProtocol) !== SubscriptionProtocol.SSE) {\n            const subscriptionExecutor$ = fetch$.then(fetch => {\n                const subscriptionsEndpoint = (options === null || options === void 0 ? void 0 : options.subscriptionsEndpoint) || endpoint;\n                return this.buildSubscriptionExecutor(subscriptionsEndpoint, fetch, importFn, options);\n            });\n            // eslint-disable-next-line no-inner-declarations\n            function getExecutorByRequest(request) {\n                const operationAst = getOperationASTFromRequest(request);\n                if (operationAst.operation === 'subscription' ||\n                    isLiveQueryOperationDefinitionNode(operationAst, request.variables)) {\n                    return subscriptionExecutor$;\n                }\n                else {\n                    return httpExecutor$;\n                }\n            }\n            return request => getExecutorByRequest(request)\n                .then(executor => executor(request))\n                .resolve();\n        }\n        else {\n            return request => httpExecutor$.then(executor => executor(request)).resolve();\n        }\n    }\n    getExecutorAsync(endpoint, options) {\n        return this.getExecutor(endpoint, asyncImport, options);\n    }\n    getExecutorSync(endpoint, options) {\n        return this.getExecutor(endpoint, syncImport, options);\n    }\n    handleSDL(pointer, fetch, options) {\n        const defaultMethod = this.getDefaultMethodFromOptions(options === null || options === void 0 ? void 0 : options.method, 'GET');\n        return new ValueOrPromise(() => fetch(pointer, {\n            method: defaultMethod,\n            headers: options.headers,\n        }))\n            .then(response => response.text())\n            .then(schemaString => parseGraphQLSDL(pointer, schemaString, options))\n            .resolve();\n    }\n    async load(pointer, options) {\n        if (!isCompatibleUri(pointer)) {\n            return [];\n        }\n        let source = {\n            location: pointer,\n        };\n        let executor;\n        if ((options === null || options === void 0 ? void 0 : options.handleAsSDL) || pointer.endsWith('.graphql') || pointer.endsWith('.graphqls')) {\n            const fetch = await this.getFetch(options === null || options === void 0 ? void 0 : options.customFetch, asyncImport);\n            source = await this.handleSDL(pointer, fetch, options);\n            if (!source.schema && !source.document && !source.rawSDL) {\n                throw new Error(`Invalid SDL response`);\n            }\n            source.schema =\n                source.schema ||\n                    (source.document\n                        ? buildASTSchema(source.document, options)\n                        : source.rawSDL\n                            ? buildSchema(source.rawSDL, options)\n                            : undefined);\n        }\n        else {\n            executor = this.getExecutorAsync(pointer, options);\n            source.schema = await introspectSchema(executor, {}, options);\n        }\n        if (!source.schema) {\n            throw new Error(`Invalid introspected schema`);\n        }\n        if (options === null || options === void 0 ? void 0 : options.endpoint) {\n            executor = this.getExecutorAsync(options.endpoint, options);\n        }\n        if (executor) {\n            source.schema = wrapSchema({\n                schema: source.schema,\n                executor,\n            });\n        }\n        return [source];\n    }\n    loadSync(pointer, options) {\n        if (!isCompatibleUri(pointer)) {\n            return [];\n        }\n        let source = {\n            location: pointer,\n        };\n        let executor;\n        if ((options === null || options === void 0 ? void 0 : options.handleAsSDL) || pointer.endsWith('.graphql') || pointer.endsWith('.graphqls')) {\n            const fetch = this.getFetch(options === null || options === void 0 ? void 0 : options.customFetch, syncImport);\n            source = this.handleSDL(pointer, fetch, options);\n            if (!source.schema && !source.document && !source.rawSDL) {\n                throw new Error(`Invalid SDL response`);\n            }\n            source.schema =\n                source.schema ||\n                    (source.document\n                        ? buildASTSchema(source.document, options)\n                        : source.rawSDL\n                            ? buildSchema(source.rawSDL, options)\n                            : undefined);\n        }\n        else {\n            executor = this.getExecutorSync(pointer, options);\n            source.schema = introspectSchema(executor, {}, options);\n        }\n        if (!source.schema) {\n            throw new Error(`Invalid introspected schema`);\n        }\n        if (options === null || options === void 0 ? void 0 : options.endpoint) {\n            executor = this.getExecutorSync(options.endpoint, options);\n        }\n        if (executor) {\n            source.schema = wrapSchema({\n                schema: source.schema,\n                executor,\n            });\n        }\n        return [source];\n    }\n}\nfunction switchProtocols(pointer, protocolMap) {\n    return Object.entries(protocolMap).reduce((prev, [source, target]) => prev.replace(`${source}://`, `${target}://`).replace(`${source}:\\\\`, `${target}:\\\\`), pointer);\n}\n\nexport { SubscriptionProtocol, UrlLoader };\n", "/**\n *\n * client\n *\n */\nimport { GRAPHQL_TRANSPORT_WS_PROTOCOL, CloseCode, MessageType, parseMessage, stringifyMessage, } from './common.mjs';\nimport { isObject, limitCloseReason } from './utils.mjs';\n/** This file is the entry point for browsers, re-export common elements. */\nexport * from './common.mjs';\n/**\n * Creates a disposable GraphQL over WebSocket client.\n *\n * @category Client\n */\nexport function createClient(options) {\n    const { url, connectionParams, lazy = true, onNonLazyError = console.error, lazyCloseTimeout = 0, keepAlive = 0, disablePong, connectionAckWaitTimeout = 0, retryAttempts = 5, retryWait = async function randomisedExponentialBackoff(retries) {\n        let retryDelay = 1000; // start with 1s delay\n        for (let i = 0; i < retries; i++) {\n            retryDelay *= 2;\n        }\n        await new Promise((resolve) => setTimeout(resolve, retryDelay +\n            // add random timeout from 300ms to 3s\n            Math.floor(Math.random() * (3000 - 300) + 300)));\n    }, shouldRetry = isLikeCloseEvent, isFatalConnectionProblem, on, webSocketImpl, \n    /**\n     * Generates a v4 UUID to be used as the ID using `Math`\n     * as the random number generator. Supply your own generator\n     * in case you need more uniqueness.\n     *\n     * Reference: https://gist.github.com/jed/982883\n     */\n    generateID = function generateUUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }, jsonMessageReplacer: replacer, jsonMessageReviver: reviver, } = options;\n    let ws;\n    if (webSocketImpl) {\n        if (!isWebSocket(webSocketImpl)) {\n            throw new Error('Invalid WebSocket implementation provided');\n        }\n        ws = webSocketImpl;\n    }\n    else if (typeof WebSocket !== 'undefined') {\n        ws = WebSocket;\n    }\n    else if (typeof global !== 'undefined') {\n        ws =\n            global.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                global.MozWebSocket;\n    }\n    else if (typeof window !== 'undefined') {\n        ws =\n            window.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                window.MozWebSocket;\n    }\n    if (!ws)\n        throw new Error(\"WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`\");\n    const WebSocketImpl = ws;\n    // websocket status emitter, subscriptions are handled differently\n    const emitter = (() => {\n        const message = (() => {\n            const listeners = {};\n            return {\n                on(id, listener) {\n                    listeners[id] = listener;\n                    return () => {\n                        delete listeners[id];\n                    };\n                },\n                emit(message) {\n                    var _a;\n                    if ('id' in message)\n                        (_a = listeners[message.id]) === null || _a === void 0 ? void 0 : _a.call(listeners, message);\n                },\n            };\n        })();\n        const listeners = {\n            connecting: (on === null || on === void 0 ? void 0 : on.connecting) ? [on.connecting] : [],\n            opened: (on === null || on === void 0 ? void 0 : on.opened) ? [on.opened] : [],\n            connected: (on === null || on === void 0 ? void 0 : on.connected) ? [on.connected] : [],\n            ping: (on === null || on === void 0 ? void 0 : on.ping) ? [on.ping] : [],\n            pong: (on === null || on === void 0 ? void 0 : on.pong) ? [on.pong] : [],\n            message: (on === null || on === void 0 ? void 0 : on.message) ? [message.emit, on.message] : [message.emit],\n            closed: (on === null || on === void 0 ? void 0 : on.closed) ? [on.closed] : [],\n            error: (on === null || on === void 0 ? void 0 : on.error) ? [on.error] : [],\n        };\n        return {\n            onMessage: message.on,\n            on(event, listener) {\n                const l = listeners[event];\n                l.push(listener);\n                return () => {\n                    l.splice(l.indexOf(listener), 1);\n                };\n            },\n            emit(event, ...args) {\n                // we copy the listeners so that unlistens dont \"pull the rug under our feet\"\n                for (const listener of [...listeners[event]]) {\n                    // @ts-expect-error: The args should fit\n                    listener(...args);\n                }\n            },\n        };\n    })();\n    // invokes the callback either when an error or closed event is emitted,\n    // first one that gets called prevails, other emissions are ignored\n    function errorOrClosed(cb) {\n        const listening = [\n            // errors are fatal and more critical than close events, throw them first\n            emitter.on('error', (err) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(err);\n            }),\n            // closes can be graceful and not fatal, throw them second (if error didnt throw)\n            emitter.on('closed', (event) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(event);\n            }),\n        ];\n    }\n    let connecting, locks = 0, retrying = false, retries = 0, disposed = false;\n    async function connect() {\n        const [socket, throwOnClose] = await (connecting !== null && connecting !== void 0 ? connecting : (connecting = new Promise((connected, denied) => (async () => {\n            if (retrying) {\n                await retryWait(retries);\n                // subscriptions might complete while waiting for retry\n                if (!locks) {\n                    connecting = undefined;\n                    return denied({ code: 1000, reason: 'All Subscriptions Gone' });\n                }\n                retries++;\n            }\n            emitter.emit('connecting');\n            const socket = new WebSocketImpl(typeof url === 'function' ? await url() : url, GRAPHQL_TRANSPORT_WS_PROTOCOL);\n            let connectionAckTimeout, queuedPing;\n            function enqueuePing() {\n                if (isFinite(keepAlive) && keepAlive > 0) {\n                    clearTimeout(queuedPing); // in case where a pong was received before a ping (this is valid behaviour)\n                    queuedPing = setTimeout(() => {\n                        if (socket.readyState === WebSocketImpl.OPEN) {\n                            socket.send(stringifyMessage({ type: MessageType.Ping }));\n                            emitter.emit('ping', false, undefined);\n                        }\n                    }, keepAlive);\n                }\n            }\n            errorOrClosed((errOrEvent) => {\n                connecting = undefined;\n                clearTimeout(connectionAckTimeout);\n                clearTimeout(queuedPing);\n                denied(errOrEvent);\n                if (isLikeCloseEvent(errOrEvent) && errOrEvent.code === 4499) {\n                    socket.close(4499, 'Terminated'); // close event is artificial and emitted manually, see `Client.terminate()` below\n                    socket.onerror = null;\n                    socket.onclose = null;\n                }\n            });\n            socket.onerror = (err) => emitter.emit('error', err);\n            socket.onclose = (event) => emitter.emit('closed', event);\n            socket.onopen = async () => {\n                try {\n                    emitter.emit('opened', socket);\n                    const payload = typeof connectionParams === 'function'\n                        ? await connectionParams()\n                        : connectionParams;\n                    // connectionParams might take too long causing the server to kick off the client\n                    // the necessary error/close event is already reported - simply stop execution\n                    if (socket.readyState !== WebSocketImpl.OPEN)\n                        return;\n                    socket.send(stringifyMessage(payload\n                        ? {\n                            type: MessageType.ConnectionInit,\n                            payload,\n                        }\n                        : {\n                            type: MessageType.ConnectionInit,\n                            // payload is completely absent if not provided\n                        }, replacer));\n                    if (isFinite(connectionAckWaitTimeout) &&\n                        connectionAckWaitTimeout > 0) {\n                        connectionAckTimeout = setTimeout(() => {\n                            socket.close(CloseCode.ConnectionAcknowledgementTimeout, 'Connection acknowledgement timeout');\n                        }, connectionAckWaitTimeout);\n                    }\n                    enqueuePing(); // enqueue ping (noop if disabled)\n                }\n                catch (err) {\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.InternalClientError, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Internal client error'));\n                }\n            };\n            let acknowledged = false;\n            socket.onmessage = ({ data }) => {\n                try {\n                    const message = parseMessage(data, reviver);\n                    emitter.emit('message', message);\n                    if (message.type === 'ping' || message.type === 'pong') {\n                        emitter.emit(message.type, true, message.payload); // received\n                        if (message.type === 'pong') {\n                            enqueuePing(); // enqueue next ping (noop if disabled)\n                        }\n                        else if (!disablePong) {\n                            // respond with pong on ping\n                            socket.send(stringifyMessage(message.payload\n                                ? {\n                                    type: MessageType.Pong,\n                                    payload: message.payload,\n                                }\n                                : {\n                                    type: MessageType.Pong,\n                                    // payload is completely absent if not provided\n                                }));\n                            emitter.emit('pong', false, message.payload);\n                        }\n                        return; // ping and pongs can be received whenever\n                    }\n                    if (acknowledged)\n                        return; // already connected and acknowledged\n                    if (message.type !== MessageType.ConnectionAck)\n                        throw new Error(`First message cannot be of type ${message.type}`);\n                    clearTimeout(connectionAckTimeout);\n                    acknowledged = true;\n                    emitter.emit('connected', socket, message.payload); // connected = socket opened + acknowledged\n                    retrying = false; // future lazy connects are not retries\n                    retries = 0; // reset the retries on connect\n                    connected([\n                        socket,\n                        new Promise((_, reject) => errorOrClosed(reject)),\n                    ]);\n                }\n                catch (err) {\n                    socket.onmessage = null; // stop reading messages as soon as reading breaks once\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.BadResponse, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Bad response'));\n                }\n            };\n        })())));\n        // if the provided socket is in a closing state, wait for the throw on close\n        if (socket.readyState === WebSocketImpl.CLOSING)\n            await throwOnClose;\n        let release = () => {\n            // releases this connection\n        };\n        const released = new Promise((resolve) => (release = resolve));\n        return [\n            socket,\n            release,\n            Promise.race([\n                // wait for\n                released.then(() => {\n                    if (!locks) {\n                        // and if no more locks are present, complete the connection\n                        const complete = () => socket.close(1000, 'Normal Closure');\n                        if (isFinite(lazyCloseTimeout) && lazyCloseTimeout > 0) {\n                            // if the keepalive is set, allow for the specified calmdown time and\n                            // then complete. but only if no lock got created in the meantime and\n                            // if the socket is still open\n                            setTimeout(() => {\n                                if (!locks && socket.readyState === WebSocketImpl.OPEN)\n                                    complete();\n                            }, lazyCloseTimeout);\n                        }\n                        else {\n                            // otherwise complete immediately\n                            complete();\n                        }\n                    }\n                }),\n                // or\n                throwOnClose,\n            ]),\n        ];\n    }\n    /**\n     * Checks the `connect` problem and evaluates if the client should retry.\n     */\n    function shouldRetryConnectOrThrow(errOrCloseEvent) {\n        // some close codes are worth reporting immediately\n        if (isLikeCloseEvent(errOrCloseEvent) &&\n            (isFatalInternalCloseCode(errOrCloseEvent.code) ||\n                [\n                    CloseCode.InternalServerError,\n                    CloseCode.InternalClientError,\n                    CloseCode.BadRequest,\n                    CloseCode.BadResponse,\n                    CloseCode.Unauthorized,\n                    // CloseCode.Forbidden, might grant access out after retry\n                    CloseCode.SubprotocolNotAcceptable,\n                    // CloseCode.ConnectionInitialisationTimeout, might not time out after retry\n                    // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry\n                    CloseCode.SubscriberAlreadyExists,\n                    CloseCode.TooManyInitialisationRequests,\n                    // 4499, // Terminated, probably because the socket froze, we want to retry\n                ].includes(errOrCloseEvent.code)))\n            throw errOrCloseEvent;\n        // client was disposed, no retries should proceed regardless\n        if (disposed)\n            return false;\n        // normal closure (possibly all subscriptions have completed)\n        // if no locks were acquired in the meantime, shouldnt try again\n        if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1000)\n            return locks > 0;\n        // retries are not allowed or we tried to many times, report error\n        if (!retryAttempts || retries >= retryAttempts)\n            throw errOrCloseEvent;\n        // throw non-retryable connection problems\n        if (!shouldRetry(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // @deprecated throw fatal connection problems immediately\n        if (isFatalConnectionProblem === null || isFatalConnectionProblem === void 0 ? void 0 : isFatalConnectionProblem(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // looks good, start retrying\n        return (retrying = true);\n    }\n    // in non-lazy (hot?) mode always hold one connection lock to persist the socket\n    if (!lazy) {\n        (async () => {\n            locks++;\n            for (;;) {\n                try {\n                    const [, , throwOnClose] = await connect();\n                    await throwOnClose; // will always throw because releaser is not used\n                }\n                catch (errOrCloseEvent) {\n                    try {\n                        if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                            return;\n                    }\n                    catch (errOrCloseEvent) {\n                        // report thrown error, no further retries\n                        return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(errOrCloseEvent);\n                    }\n                }\n            }\n        })();\n    }\n    return {\n        on: emitter.on,\n        subscribe(payload, sink) {\n            const id = generateID();\n            let done = false, errored = false, releaser = () => {\n                // for handling completions before connect\n                locks--;\n                done = true;\n            };\n            (async () => {\n                locks++;\n                for (;;) {\n                    try {\n                        const [socket, release, waitForReleaseOrThrowOnClose] = await connect();\n                        // if done while waiting for connect, release the connection lock right away\n                        if (done)\n                            return release();\n                        const unlisten = emitter.onMessage(id, (message) => {\n                            switch (message.type) {\n                                case MessageType.Next: {\n                                    sink.next(message.payload);\n                                    return;\n                                }\n                                case MessageType.Error: {\n                                    (errored = true), (done = true);\n                                    sink.error(message.payload);\n                                    releaser();\n                                    return;\n                                }\n                                case MessageType.Complete: {\n                                    done = true;\n                                    releaser(); // release completes the sink\n                                    return;\n                                }\n                            }\n                        });\n                        socket.send(stringifyMessage({\n                            id,\n                            type: MessageType.Subscribe,\n                            payload,\n                        }, replacer));\n                        releaser = () => {\n                            if (!done && socket.readyState === WebSocketImpl.OPEN)\n                                // if not completed already and socket is open, send complete message to server on release\n                                socket.send(stringifyMessage({\n                                    id,\n                                    type: MessageType.Complete,\n                                }, replacer));\n                            locks--;\n                            done = true;\n                            release();\n                        };\n                        // either the releaser will be called, connection completed and\n                        // the promise resolved or the socket closed and the promise rejected.\n                        // whatever happens though, we want to stop listening for messages\n                        await waitForReleaseOrThrowOnClose.finally(unlisten);\n                        return; // completed, shouldnt try again\n                    }\n                    catch (errOrCloseEvent) {\n                        if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                            return;\n                    }\n                }\n            })()\n                .then(() => {\n                // delivering either an error or a complete terminates the sequence\n                if (!errored)\n                    sink.complete();\n            }) // resolves on release or normal closure\n                .catch((err) => {\n                sink.error(err);\n            }); // rejects on close events and errors\n            return () => {\n                // dispose only of active subscriptions\n                if (!done)\n                    releaser();\n            };\n        },\n        async dispose() {\n            disposed = true;\n            if (connecting) {\n                // if there is a connection, close it\n                const [socket] = await connecting;\n                socket.close(1000, 'Normal Closure');\n            }\n        },\n        terminate() {\n            if (connecting) {\n                // only if there is a connection\n                emitter.emit('closed', {\n                    code: 4499,\n                    reason: 'Terminated',\n                    wasClean: false,\n                });\n            }\n        },\n    };\n}\nfunction isLikeCloseEvent(val) {\n    return isObject(val) && 'code' in val && 'reason' in val;\n}\nfunction isFatalInternalCloseCode(code) {\n    if ([\n        1000,\n        1001,\n        1006,\n        1005,\n        1012,\n        1013,\n        1013, // Bad Gateway\n    ].includes(code))\n        return false;\n    // all other internal errors are fatal\n    return code >= 1000 && code <= 1999;\n}\nfunction isWebSocket(val) {\n    return (typeof val === 'function' &&\n        'constructor' in val &&\n        'CLOSED' in val &&\n        'CLOSING' in val &&\n        'CONNECTING' in val &&\n        'OPEN' in val);\n}\n", "/**\n *\n * common\n *\n */\nimport { areGraphQLErrors, extendedTypeof, isObject } from './utils.mjs';\n/**\n * The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](/PROTOCOL.md).\n *\n * @category Common\n */\nexport const GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';\n/**\n * The deprecated subprotocol used by [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws).\n *\n * @private\n */\nexport const DEPRECATED_GRAPHQL_WS_PROTOCOL = 'graphql-ws';\n/**\n * `graphql-ws` expected and standard close codes of the [GraphQL over WebSocket Protocol](/PROTOCOL.md).\n *\n * @category Common\n */\nexport var CloseCode;\n(function (CloseCode) {\n    CloseCode[CloseCode[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n    CloseCode[CloseCode[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n    CloseCode[CloseCode[\"BadRequest\"] = 4400] = \"BadRequest\";\n    CloseCode[CloseCode[\"BadResponse\"] = 4004] = \"BadResponse\";\n    /** Tried subscribing before connect ack */\n    CloseCode[CloseCode[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n    CloseCode[CloseCode[\"Forbidden\"] = 4403] = \"Forbidden\";\n    CloseCode[CloseCode[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n    CloseCode[CloseCode[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n    CloseCode[CloseCode[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n    /** Subscriber distinction is very important */\n    CloseCode[CloseCode[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n    CloseCode[CloseCode[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n})(CloseCode || (CloseCode = {}));\n/**\n * Types of messages allowed to be sent by the client/server over the WS protocol.\n *\n * @category Common\n */\nexport var MessageType;\n(function (MessageType) {\n    MessageType[\"ConnectionInit\"] = \"connection_init\";\n    MessageType[\"ConnectionAck\"] = \"connection_ack\";\n    MessageType[\"Ping\"] = \"ping\";\n    MessageType[\"Pong\"] = \"pong\";\n    MessageType[\"Subscribe\"] = \"subscribe\";\n    MessageType[\"Next\"] = \"next\";\n    MessageType[\"Error\"] = \"error\";\n    MessageType[\"Complete\"] = \"complete\";\n})(MessageType || (MessageType = {}));\n/**\n * Validates the message against the GraphQL over WebSocket Protocol.\n *\n * Invalid messages will throw descriptive errors.\n *\n * @category Common\n */\nexport function validateMessage(val) {\n    if (!isObject(val)) {\n        throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);\n    }\n    if (!val.type) {\n        throw new Error(`Message is missing the 'type' property`);\n    }\n    if (typeof val.type !== 'string') {\n        throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);\n    }\n    switch (val.type) {\n        case MessageType.ConnectionInit:\n        case MessageType.ConnectionAck:\n        case MessageType.Ping:\n        case MessageType.Pong: {\n            if ('payload' in val && !isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object or missing, but got \"${val.payload}\"`);\n            }\n            break;\n        }\n        case MessageType.Subscribe: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            if (typeof val.payload.query !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);\n            }\n            if (val.payload.variables != null && !isObject(val.payload.variables)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);\n            }\n            if (val.payload.operationName != null &&\n                extendedTypeof(val.payload.operationName) !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);\n            }\n            if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);\n            }\n            break;\n        }\n        case MessageType.Next: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Error: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!areGraphQLErrors(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Complete: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            break;\n        }\n        default:\n            throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n    }\n    return val;\n}\n/**\n * Checks if the provided value is a valid GraphQL over WebSocket message.\n *\n * @deprecated Use `validateMessage` instead.\n *\n * @category Common\n */\nexport function isMessage(val) {\n    try {\n        validateMessage(val);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * Parses the raw websocket message data to a valid message.\n *\n * @category Common\n */\nexport function parseMessage(data, reviver) {\n    try {\n        return validateMessage(data);\n    }\n    catch (_a) {\n        if (typeof data !== 'string') {\n            throw new Error('Only strings are parsable messages');\n        }\n        const message = JSON.parse(data, reviver);\n        return validateMessage(message);\n    }\n}\n/**\n * Stringifies a valid message ready to be sent through the socket.\n *\n * @category Common\n */\nexport function stringifyMessage(msg, replacer) {\n    validateMessage(msg);\n    return JSON.stringify(msg, replacer);\n}\n", "/** @private */\nexport function extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\n/** @private */\nexport function isObject(val) {\n    return extendedTypeof(val) === 'object';\n}\n/** @private */\nexport function isAsyncIterable(val) {\n    return typeof Object(val)[Symbol.asyncIterator] === 'function';\n}\n/** @private */\nexport function isAsyncGenerator(val) {\n    return (isObject(val) &&\n        typeof Object(val)[Symbol.asyncIterator] === 'function' &&\n        typeof val.return === 'function'\n    // for lazy ones, we only need the return anyway\n    // typeof val.throw === 'function' &&\n    // typeof val.next === 'function'\n    );\n}\n/** @private */\nexport function areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        // must be at least one error\n        obj.length > 0 &&\n        // error has at least a message\n        obj.every((ob) => 'message' in ob));\n}\n/**\n * Limits the WebSocket close event reason to not exceed a length of one frame.\n * Reference: https://datatracker.ietf.org/doc/html/rfc6455#section-5.2.\n *\n * @private\n */\nexport function limitCloseReason(reason, whenTooLong) {\n    return reason.length < 124 ? reason : whenTooLong;\n}\n", "export { default as ReactNativeFile } from './ReactNativeFile.js';\nexport { default as extractFiles } from './extractFiles.js';\nexport { default as isExtractableFile } from './isExtractableFile.js';\n", "import { GraphQLDirective, DirectiveLocation, GraphQLBoolean, GraphQLInt, GraphQLError, getDirectiveValues } from 'graphql';\n\nconst GraphQLLiveDirective = new GraphQLDirective({\n    name: \"live\",\n    description: \"Instruction for establishing a live connection that is updated once the underlying data changes.\",\n    locations: [DirectiveLocation.QUERY],\n    args: {\n        if: {\n            type: GraphQLBoolean,\n            defaultValue: true,\n            description: \"Whether the query should be live or not.\",\n        },\n        throttle: {\n            type: GraphQLInt,\n            description: 'Propose a desired throttle interval ot the server in order to receive updates to at most once per \"throttle\" milliseconds. The server must not accept this value.',\n        },\n    },\n});\n\nconst isNone = (input) => input == null;\n\nconst getLiveDirectiveNode = (input) => {\n    var _a;\n    if (input.kind !== \"OperationDefinition\" || input.operation !== \"query\") {\n        return null;\n    }\n    const liveDirective = (_a = input.directives) === null || _a === void 0 ? void 0 : _a.find((d) => d.name.value === \"live\");\n    if (isNone(liveDirective)) {\n        return null;\n    }\n    return liveDirective;\n};\n\nconst NoLiveMixedWithDeferStreamRule = (context) => {\n    return {\n        OperationDefinition(operationDefinitionNode) {\n            if (isNone(getLiveDirectiveNode(operationDefinitionNode))) {\n                return false;\n            }\n        },\n        Directive(directiveNode) {\n            if (directiveNode.name.value === \"defer\" ||\n                directiveNode.name.value === \"stream\") {\n                context.reportError(new GraphQLError(`Cannot mix \"@${directiveNode.name.value}\" with \"@live\".`, directiveNode.name));\n            }\n        },\n    };\n};\n\nconst getLiveDirectiveArgumentValues = (node, variableValues) => {\n    var _a;\n    const values = getDirectiveValues(GraphQLLiveDirective, { directives: [node] }, variableValues);\n    return {\n        isLive: (values === null || values === void 0 ? void 0 : values[\"if\"]) === true,\n        throttleValue: ((_a = values === null || values === void 0 ? void 0 : values[\"throttle\"]) !== null && _a !== void 0 ? _a : null),\n    };\n};\n\nconst isLiveQueryOperationDefinitionNode = (input, variables) => {\n    const liveDirectiveNode = getLiveDirectiveNode(input);\n    if (isNone(liveDirectiveNode)) {\n        return false;\n    }\n    return getLiveDirectiveArgumentValues(liveDirectiveNode, variables).isLive;\n};\n\nexport { GraphQLLiveDirective, NoLiveMixedWithDeferStreamRule, getLiveDirectiveArgumentValues, getLiveDirectiveNode, isLiveQueryOperationDefinitionNode };\n", "const separator = '\\r\\n\\r\\n';\nasync function* generate(stream, boundary, options) {\n    const is_eager = !options || !options.multiple;\n    let len_boundary = Buffer.byteLength(boundary), buffer = Buffer.alloc(0), is_preamble = true, payloads = [];\n    outer: for await (const chunk of stream) {\n        let idx_boundary = buffer.byteLength;\n        buffer = Buffer.concat([buffer, chunk]);\n        const idx_chunk = chunk.indexOf(boundary);\n        if (!!~idx_chunk) {\n            // chunk itself had `boundary` marker\n            idx_boundary += idx_chunk;\n        }\n        else {\n            // search combined (boundary can be across chunks)\n            idx_boundary = buffer.indexOf(boundary);\n        }\n        payloads = [];\n        while (!!~idx_boundary) {\n            const current = buffer.slice(0, idx_boundary);\n            const next = buffer.slice(idx_boundary + len_boundary);\n            if (is_preamble) {\n                is_preamble = false;\n                boundary = '\\r\\n' + boundary;\n                len_boundary += 2;\n            }\n            else {\n                const headers = {};\n                const idx_headers = current.indexOf(separator);\n                const arr_headers = buffer.slice(0, idx_headers).toString().trim().split(/\\r\\n/);\n                // parse headers\n                let tmp;\n                while (tmp = arr_headers.shift()) {\n                    tmp = tmp.split(': ');\n                    headers[tmp.shift().toLowerCase()] = tmp.join(': ');\n                }\n                const last_idx = current.lastIndexOf('\\r\\n', idx_headers + separator.length);\n                let body = current.slice(idx_headers + separator.length, last_idx > -1 ? undefined : last_idx);\n                let is_json = false;\n                tmp = headers['content-type'];\n                if (tmp && !!~tmp.indexOf('application/json')) {\n                    try {\n                        body = JSON.parse(body.toString());\n                        is_json = true;\n                    }\n                    catch (_) {\n                    }\n                }\n                tmp = { headers, body, json: is_json };\n                is_eager ? yield tmp : payloads.push(tmp);\n                // hit a tail boundary, break\n                if (next.slice(0, 2).toString() === '--')\n                    break outer;\n            }\n            buffer = next;\n            idx_boundary = buffer.indexOf(boundary);\n        }\n        if (payloads.length)\n            yield payloads;\n    }\n    if (payloads.length)\n        yield payloads;\n}\n\n/**\n * Yield immediately for every part made available on the response. If the `content-type` of the\n * response isn't a multipart body, then we'll resolve with {@link IncomingMessage}.\n *\n * @example\n *\n * ```js\n * const response = await new Promise((resolve) => {\n *   const request = http.get(`http://my-domain/mock-ep`, (response) => {\n *   \tresolve(response);\n *   });\n *   request.end();\n * });\n *\n * const parts = await meros(response);\n *\n * for await (const part of parts) {\n *     // do something with this part\n * }\n * ```\n */\nasync function meros(response, options) {\n    const ctype = response.headers['content-type'];\n    if (!ctype || !~ctype.indexOf('multipart/mixed'))\n        return response;\n    const idx_boundary = ctype.indexOf('boundary=');\n    return generate(response, `--${!!~idx_boundary\n        ? // +9 for 'boundary='.length\n            ctype.substring(idx_boundary + 9).trim().replace(/['\"]/g, '')\n        : '-'}`, options);\n}\n\nexport { meros };\n", "const separator = '\\r\\n\\r\\n';\nconst decoder = new TextDecoder;\nasync function* generate(stream, boundary, options) {\n    const reader = stream.getReader(), is_eager = !options || !options.multiple;\n    let buffer = '', is_preamble = true, payloads = [];\n    try {\n        let result;\n        outer: while (!(result = await reader.read()).done) {\n            const chunk = decoder.decode(result.value);\n            const idx_chunk = chunk.indexOf(boundary);\n            let idx_boundary = buffer.length;\n            buffer += chunk;\n            if (!!~idx_chunk) {\n                // chunk itself had `boundary` marker\n                idx_boundary += idx_chunk;\n            }\n            else {\n                // search combined (boundary can be across chunks)\n                idx_boundary = buffer.indexOf(boundary);\n            }\n            payloads = [];\n            while (!!~idx_boundary) {\n                const current = buffer.substring(0, idx_boundary);\n                const next = buffer.substring(idx_boundary + boundary.length);\n                if (is_preamble) {\n                    is_preamble = false;\n                    boundary = '\\r\\n' + boundary;\n                }\n                else {\n                    const headers = {};\n                    const idx_headers = current.indexOf(separator);\n                    const arr_headers = buffer.slice(0, idx_headers).trim().split(/\\r\\n/);\n                    // parse headers\n                    let tmp;\n                    while (tmp = arr_headers.shift()) {\n                        tmp = tmp.split(': ');\n                        headers[tmp.shift().toLowerCase()] = tmp.join(': ');\n                    }\n                    const last_idx = current.lastIndexOf('\\r\\n', idx_headers + separator.length);\n                    let body = current.substring(idx_headers + separator.length, last_idx > -1 ? undefined : last_idx);\n                    let is_json = false;\n                    tmp = headers['content-type'];\n                    if (tmp && !!~tmp.indexOf('application/json')) {\n                        try {\n                            body = JSON.parse(body);\n                            is_json = true;\n                        }\n                        catch (_) {\n                        }\n                    }\n                    tmp = { headers, body, json: is_json };\n                    is_eager ? yield tmp : payloads.push(tmp);\n                    // hit a tail boundary, break\n                    if (next.substring(0, 2) === '--')\n                        break outer;\n                }\n                buffer = next;\n                idx_boundary = buffer.indexOf(boundary);\n            }\n            if (payloads.length)\n                yield payloads;\n        }\n    }\n    finally {\n        if (payloads.length)\n            yield payloads;\n        reader.releaseLock();\n    }\n}\n\n/**\n * Yield immediately for every part made available on the response. If the `content-type` of the\n * response isn't a multipart body, then we'll resolve with {@link Response}.\n *\n * @example\n *\n * ```js\n * const parts = await fetch('/fetch-multipart')\n *      .then(meros);\n *\n * for await (const part of parts) {\n *     // do something with this part\n * }\n * ```\n */\nasync function meros(response, options) {\n    if (!response.ok || !response.body || response.bodyUsed)\n        return response;\n    const ctype = response.headers.get('content-type');\n    if (!ctype || !~ctype.indexOf('multipart/mixed'))\n        return response;\n    const idx_boundary = ctype.indexOf('boundary=');\n    return generate(response.body, `--${!!~idx_boundary\n        ? // +9 for 'boundary='.length\n            ctype.substring(idx_boundary + 9).trim().replace(/['\"]/g, '')\n        : '-'}`, options);\n}\n\nexport { meros };\n", "export function merge(a, b, k) {\n\tif (typeof a === 'object' && typeof b === 'object') \u00A0{\n\t\tif (Array.isArray(a) && Array.isArray(b)) {\n\t\t\tfor (k=0; k < b.length; k++) {\n\t\t\t\ta[k] = merge(a[k], b[k]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in b) {\n\t\t\t\tif (k === '__proto__' || k === 'constructor' || k === 'prototype') break;\n\t\t\t\ta[k] = merge(a[k], b[k]);\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t}\n\treturn b;\n}\n\nexport function dset(obj, keys, val) {\n\tkeys.split && (keys=keys.split('.'));\n\tvar i=0, l=keys.length, t=obj, x, k;\n\twhile (i < l) {\n\t\tk = keys[i++];\n\t\tif (k === '__proto__' || k === 'constructor' || k === 'prototype') break;\n\t\tt = t[k] = (i === l) ? merge(t[k],val) : (typeof(x=t[k])===typeof keys) ? x : (keys[i]*0 !== 0 || !!~(''+keys[i]).indexOf('.')) ? {} : [];\n\t}\n}\n", "import { stitchSchemas, ValidationLevel } from '@graphql-tools/stitch';\nimport { wrapSchema } from '@graphql-tools/wrap';\nimport { extractResolvers, groupTransforms, applySchemaTransforms } from '@graphql-mesh/utils';\nimport { federationToStitchingSDL, stitchingDirectives } from '@graphql-tools/stitching-directives';\nimport { addResolversToSchema } from '@graphql-tools/schema';\nimport { parse, buildSchema } from 'graphql';\nimport { PredefinedProxyOptions } from '@graphql-mesh/store';\nimport { AggregateError } from '@graphql-tools/utils';\n\nconst APOLLO_GET_SERVICE_DEFINITION_QUERY = /* GraphQL */ `\n  query __ApolloGetServiceDefinition__ {\n    _service {\n      sdl\n    }\n  }\n`;\nclass StitchingMerger {\n    constructor(options) {\n        this.name = 'stitching';\n        this.logger = options.logger;\n        this.store = options.store;\n    }\n    isFederatedSchema(schema) {\n        const queryType = schema.getQueryType();\n        if (queryType) {\n            const queryFields = queryType.getFields();\n            return '_service' in queryFields;\n        }\n        return false;\n    }\n    async replaceFederationSDLWithStitchingSDL(name, oldSchema, executor, stitchingDirectives) {\n        const rawSourceLogger = this.logger.child(name);\n        rawSourceLogger.debug(`Extracting existing resolvers if available`);\n        const resolvers = extractResolvers(oldSchema);\n        let newSchema = await this.store\n            .proxy(`${name}_stitching`, PredefinedProxyOptions.GraphQLSchemaWithDiffing)\n            .getWithSet(async () => {\n            var _a;\n            this.logger.debug(`Fetching Apollo Federated Service SDL for ${name}`);\n            const sdlQueryResult = (await executor({\n                document: parse(APOLLO_GET_SERVICE_DEFINITION_QUERY),\n            }));\n            if ((_a = sdlQueryResult.errors) === null || _a === void 0 ? void 0 : _a.length) {\n                throw new AggregateError(sdlQueryResult.errors, `Failed on fetching Federated SDL for ${name}`);\n            }\n            const federationSdl = sdlQueryResult.data._service.sdl;\n            this.logger.debug(`Generating Stitching SDL for ${name}`);\n            const stitchingSdl = federationToStitchingSDL(federationSdl, stitchingDirectives);\n            return buildSchema(stitchingSdl, {\n                assumeValid: true,\n                assumeValidSDL: true,\n            });\n        });\n        rawSourceLogger.debug(`Adding existing resolvers back to the schema`);\n        newSchema = addResolversToSchema({\n            schema: newSchema,\n            resolvers,\n            updateResolversInPlace: true,\n            resolverValidationOptions: {\n                requireResolversToMatchSchema: 'ignore',\n            },\n        });\n        return newSchema;\n    }\n    async getUnifiedSchema(context) {\n        const { rawSources, typeDefs, resolvers, transforms } = context;\n        this.logger.debug(`Stitching directives are being generated`);\n        const defaultStitchingDirectives = stitchingDirectives({\n            pathToDirectivesInExtensions: ['directives'],\n        });\n        this.logger.debug(`Checking if any of sources has federation metadata`);\n        const subschemas = await Promise.all(rawSources.map(async (rawSource) => {\n            if (rawSource.batch == null) {\n                rawSource.batch = true;\n            }\n            if (this.isFederatedSchema(rawSource.schema)) {\n                this.logger.debug(`${rawSource.name} has federated schema.`);\n                rawSource.schema = await this.replaceFederationSDLWithStitchingSDL(rawSource.name, rawSource.schema, rawSource.executor, defaultStitchingDirectives);\n            }\n            rawSource.merge = defaultStitchingDirectives.stitchingDirectivesTransformer(rawSource).merge;\n            return rawSource;\n        }));\n        this.logger.debug(`Stitching the source schemas`);\n        let unifiedSchema = stitchSchemas({\n            subschemas,\n            typeDefs,\n            resolvers,\n            typeMergingOptions: {\n                validationSettings: {\n                    validationLevel: ValidationLevel.Off,\n                },\n            },\n        });\n        this.logger.debug(`sourceMap is being generated and attached to the unified schema`);\n        unifiedSchema.extensions = unifiedSchema.extensions || {};\n        Object.assign(unifiedSchema.extensions, {\n            sourceMap: new Proxy({}, {\n                get: (_, pKey) => {\n                    if (pKey === 'get') {\n                        return (rawSource) => {\n                            const stitchingInfo = unifiedSchema.extensions.stitchingInfo;\n                            for (const [subschemaConfig, subschema] of stitchingInfo.subschemaMap) {\n                                if (subschemaConfig.name === rawSource.name) {\n                                    return subschema.transformedSchema;\n                                }\n                            }\n                            return undefined;\n                        };\n                    }\n                    return () => {\n                        throw new Error('Not Implemented');\n                    };\n                },\n            }),\n        });\n        if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {\n            this.logger.debug(`Root level transformations are being applied`);\n            const { noWrapTransforms, wrapTransforms } = groupTransforms(transforms);\n            if (wrapTransforms.length) {\n                unifiedSchema = wrapSchema({\n                    schema: unifiedSchema,\n                    transforms: transforms,\n                    batch: true,\n                });\n            }\n            if (noWrapTransforms.length) {\n                unifiedSchema = applySchemaTransforms(unifiedSchema, { schema: unifiedSchema }, null, noWrapTransforms);\n            }\n        }\n        return unifiedSchema;\n    }\n}\n\nexport default StitchingMerger;\n", "import { Kind, GraphQLDirective, valueFromASTUntyped, GraphQLInputObjectType, GraphQLScalarType, GraphQLUnionType, GraphQLEnumType, GraphQLInterfaceType, GraphQLObjectType, DirectiveLocation, getDirectiveValues, GraphQLDeprecatedDirective, isNonNullType, getNamedType, isEnumType, isScalarType, isListType, getNullableType, isObjectType, isInputObjectType, isInterfaceType, isUnionType, isNamedType, isDirective, isSpecifiedScalarType, GraphQLList, GraphQLSchema, isLeafType, print, specifiedDirectives, extendSchema } from 'graphql';\nimport { createStub, getDescription, createNamedStub, rewireTypes, getRootTypeMap, getRootTypes, inspect, collectSubFields, memoize1, memoize2, memoize3, memoize5, parseSelectionSet, isSome, collectFields, mapSchema, MapperKind, getDirective, pruneSchema, filterSchema, getImplementingTypes } from '@graphql-tools/utils';\nimport { extendResolversFromInterfaces, addResolversToSchema, assertResolversPresent, makeExecutableSchema } from '@graphql-tools/schema';\nimport { isSubschemaConfig, delegateToSchema, cloneSubschemaConfig, defaultMergedResolver, Subschema } from '@graphql-tools/delegate';\nimport { wrapSchema, TransformCompositeFields } from '@graphql-tools/wrap';\nimport { mergeType, mergeInputType, mergeInterface, mergeUnion, mergeEnum, mergeScalar, mergeTypeDefs, mergeResolvers, mergeExtensions, applyExtensions } from '@graphql-tools/merge';\nimport { batchDelegateToSchema } from '@graphql-tools/batch-delegate';\nimport { ValueOrPromise } from 'value-or-promise';\n\nconst backcompatOptions = { commentDescriptions: true };\nfunction typeFromAST(node) {\n    switch (node.kind) {\n        case Kind.OBJECT_TYPE_DEFINITION:\n            return makeObjectType(node);\n        case Kind.INTERFACE_TYPE_DEFINITION:\n            return makeInterfaceType(node);\n        case Kind.ENUM_TYPE_DEFINITION:\n            return makeEnumType(node);\n        case Kind.UNION_TYPE_DEFINITION:\n            return makeUnionType(node);\n        case Kind.SCALAR_TYPE_DEFINITION:\n            return makeScalarType(node);\n        case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n            return makeInputObjectType(node);\n        case Kind.DIRECTIVE_DEFINITION:\n            return makeDirective(node);\n        default:\n            return null;\n    }\n}\nfunction makeObjectType(node) {\n    const config = {\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        interfaces: () => { var _a; return ((_a = node.interfaces) === null || _a === void 0 ? void 0 : _a.map(iface => createNamedStub(iface.name.value, 'interface'))) || []; },\n        fields: () => (node.fields != null ? makeFields(node.fields) : {}),\n        astNode: node,\n    };\n    return new GraphQLObjectType(config);\n}\nfunction makeInterfaceType(node) {\n    const config = {\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        interfaces: () => {\n            var _a;\n            return (_a = node.interfaces) === null || _a === void 0 ? void 0 : _a.map(iface => createNamedStub(iface.name.value, 'interface'));\n        },\n        fields: () => (node.fields != null ? makeFields(node.fields) : {}),\n        astNode: node,\n    };\n    return new GraphQLInterfaceType(config);\n}\nfunction makeEnumType(node) {\n    var _a, _b;\n    const values = (_b = (_a = node.values) === null || _a === void 0 ? void 0 : _a.reduce((prev, value) => ({\n        ...prev,\n        [value.name.value]: {\n            description: getDescription(value, backcompatOptions),\n            deprecationReason: getDeprecationReason(value),\n            astNode: value,\n        },\n    }), {})) !== null && _b !== void 0 ? _b : {};\n    return new GraphQLEnumType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        values,\n        astNode: node,\n    });\n}\nfunction makeUnionType(node) {\n    return new GraphQLUnionType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        types: () => { var _a, _b; return (_b = (_a = node.types) === null || _a === void 0 ? void 0 : _a.map(type => createNamedStub(type.name.value, 'object'))) !== null && _b !== void 0 ? _b : []; },\n        astNode: node,\n    });\n}\nfunction makeScalarType(node) {\n    return new GraphQLScalarType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        astNode: node,\n        // TODO: serialize default property setting can be dropped once\n        // upstream graphql-js TypeScript typings are updated, likely in v16\n        serialize: value => value,\n    });\n}\nfunction makeInputObjectType(node) {\n    return new GraphQLInputObjectType({\n        name: node.name.value,\n        description: getDescription(node, backcompatOptions),\n        fields: () => (node.fields ? makeValues(node.fields) : {}),\n        astNode: node,\n    });\n}\nfunction makeFields(nodes) {\n    return nodes.reduce((prev, node) => {\n        var _a;\n        return ({\n            ...prev,\n            [node.name.value]: {\n                type: createStub(node.type, 'output'),\n                description: getDescription(node, backcompatOptions),\n                args: makeValues((_a = node.arguments) !== null && _a !== void 0 ? _a : []),\n                deprecationReason: getDeprecationReason(node),\n                astNode: node,\n            },\n        });\n    }, {});\n}\nfunction makeValues(nodes) {\n    return nodes.reduce((prev, node) => ({\n        ...prev,\n        [node.name.value]: {\n            type: createStub(node.type, 'input'),\n            defaultValue: node.defaultValue !== undefined ? valueFromASTUntyped(node.defaultValue) : undefined,\n            description: getDescription(node, backcompatOptions),\n            astNode: node,\n        },\n    }), {});\n}\nfunction isLocationValue(value) {\n    return value in DirectiveLocation;\n}\nfunction makeDirective(node) {\n    var _a;\n    const locations = [];\n    for (const location of node.locations) {\n        const locationValue = location.value;\n        if (isLocationValue(locationValue)) {\n            locations.push(locationValue);\n        }\n    }\n    return new GraphQLDirective({\n        name: node.name.value,\n        description: node.description != null ? node.description.value : null,\n        locations: locations,\n        isRepeatable: node.repeatable,\n        args: makeValues((_a = node.arguments) !== null && _a !== void 0 ? _a : []),\n        astNode: node,\n    });\n}\nfunction getDeprecationReason(node) {\n    const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);\n    return deprecated === null || deprecated === void 0 ? void 0 : deprecated['reason'];\n}\n\nvar ValidationLevel;\n(function (ValidationLevel) {\n    ValidationLevel[\"Error\"] = \"error\";\n    ValidationLevel[\"Warn\"] = \"warn\";\n    ValidationLevel[\"Off\"] = \"off\";\n})(ValidationLevel || (ValidationLevel = {}));\n\nfunction validateFieldConsistency(finalFieldConfig, candidates, typeMergingOptions) {\n    const fieldNamespace = `${candidates[0].type.name}.${candidates[0].fieldName}`;\n    const finalFieldNull = isNonNullType(finalFieldConfig.type);\n    validateTypeConsistency(finalFieldConfig, candidates.map(c => c.fieldConfig), 'field', fieldNamespace, typeMergingOptions);\n    if (getValidationSettings(fieldNamespace, typeMergingOptions).strictNullComparison &&\n        candidates.some(c => finalFieldNull !== isNonNullType(c.fieldConfig.type))) {\n        validationMessage(`Nullability of field \"${fieldNamespace}\" does not match across subschemas. Disable typeMergingOptions.validationSettings.strictNullComparison to permit safe divergences.`, fieldNamespace, typeMergingOptions);\n    }\n    else if (finalFieldNull && candidates.some(c => !isNonNullType(c.fieldConfig.type))) {\n        validationMessage(`Canonical definition of field \"${fieldNamespace}\" is not-null while some subschemas permit null. This will be an automatic error in future versions.`, fieldNamespace, typeMergingOptions);\n    }\n    const argCandidatesMap = Object.create(null);\n    for (const { fieldConfig } of candidates) {\n        if (fieldConfig.args == null) {\n            continue;\n        }\n        for (const argName in fieldConfig.args) {\n            const arg = fieldConfig.args[argName];\n            argCandidatesMap[argName] = argCandidatesMap[argName] || [];\n            argCandidatesMap[argName].push(arg);\n        }\n    }\n    if (Object.values(argCandidatesMap).some(argCandidates => candidates.length !== argCandidates.length)) {\n        validationMessage(`Canonical definition of field \"${fieldNamespace}\" implements inconsistent argument names across subschemas. Input may be filtered from some requests.`, fieldNamespace, typeMergingOptions);\n    }\n    for (const argName in argCandidatesMap) {\n        if (finalFieldConfig.args == null) {\n            continue;\n        }\n        const argCandidates = argCandidatesMap[argName];\n        const argNamespace = `${fieldNamespace}.${argName}`;\n        const finalArgConfig = finalFieldConfig.args[argName] || argCandidates[argCandidates.length - 1];\n        const finalArgType = getNamedType(finalArgConfig.type);\n        const finalArgNull = isNonNullType(finalArgConfig.type);\n        validateTypeConsistency(finalArgConfig, argCandidates, 'argument', argNamespace, typeMergingOptions);\n        if (getValidationSettings(argNamespace, typeMergingOptions).strictNullComparison &&\n            argCandidates.some(c => finalArgNull !== isNonNullType(c.type))) {\n            validationMessage(`Nullability of argument \"${argNamespace}\" does not match across subschemas. Disable typeMergingOptions.validationSettings.strictNullComparison to permit safe divergences.`, argNamespace, typeMergingOptions);\n        }\n        else if (!finalArgNull && argCandidates.some(c => isNonNullType(c.type))) {\n            validationMessage(`Canonical definition of argument \"${argNamespace}\" permits null while some subschemas require not-null. This will be an automatic error in future versions.`, argNamespace, typeMergingOptions);\n        }\n        if (isEnumType(finalArgType)) {\n            validateInputEnumConsistency(finalArgType, argCandidates, typeMergingOptions);\n        }\n    }\n}\nfunction validateInputObjectConsistency(fieldInclusionMap, candidates, typeMergingOptions) {\n    for (const fieldName in fieldInclusionMap) {\n        const count = fieldInclusionMap[fieldName];\n        if (candidates.length !== count) {\n            const namespace = `${candidates[0].type.name}.${fieldName}`;\n            validationMessage(`Definition of input field \"${namespace}\" is not implemented by all subschemas. Input may be filtered from some requests.`, namespace, typeMergingOptions);\n        }\n    }\n}\nfunction validateInputFieldConsistency(finalInputFieldConfig, candidates, typeMergingOptions) {\n    const inputFieldNamespace = `${candidates[0].type.name}.${candidates[0].fieldName}`;\n    const inputFieldConfigs = candidates.map(c => c.inputFieldConfig);\n    const finalInputFieldType = getNamedType(finalInputFieldConfig.type);\n    const finalInputFieldNull = isNonNullType(finalInputFieldConfig.type);\n    validateTypeConsistency(finalInputFieldConfig, inputFieldConfigs, 'input field', inputFieldNamespace, typeMergingOptions);\n    if (getValidationSettings(inputFieldNamespace, typeMergingOptions).strictNullComparison &&\n        candidates.some(c => finalInputFieldNull !== isNonNullType(c.inputFieldConfig.type))) {\n        validationMessage(`Nullability of input field \"${inputFieldNamespace}\" does not match across subschemas. Disable typeMergingOptions.validationSettings.strictNullComparison to permit safe divergences.`, inputFieldNamespace, typeMergingOptions);\n    }\n    else if (!finalInputFieldNull && candidates.some(c => isNonNullType(c.inputFieldConfig.type))) {\n        validationMessage(`Canonical definition of input field \"${inputFieldNamespace}\" permits null while some subschemas require not-null. This will be an automatic error in future versions.`, inputFieldNamespace, typeMergingOptions);\n    }\n    if (isEnumType(finalInputFieldType)) {\n        validateInputEnumConsistency(finalInputFieldType, inputFieldConfigs, typeMergingOptions);\n    }\n}\nfunction validateTypeConsistency(finalElementConfig, candidates, definitionType, settingNamespace, typeMergingOptions) {\n    var _a, _b, _c;\n    const finalNamedType = getNamedType(finalElementConfig.type);\n    const finalIsScalar = isScalarType(finalNamedType);\n    const finalIsList = hasListType(finalElementConfig.type);\n    for (const c of candidates) {\n        if (finalIsList !== hasListType(c.type)) {\n            throw new Error(`Definitions of ${definitionType} \"${settingNamespace}\" implement inconsistent list types across subschemas and cannot be merged.`);\n        }\n        const currentNamedType = getNamedType(c.type);\n        if (finalNamedType.toString() !== currentNamedType.toString()) {\n            const proxiableScalar = !!((_c = (_b = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.validationSettings) === null || _a === void 0 ? void 0 : _a.proxiableScalars) === null || _b === void 0 ? void 0 : _b[finalNamedType.toString()]) === null || _c === void 0 ? void 0 : _c.includes(currentNamedType.toString()));\n            const bothScalars = finalIsScalar && isScalarType(currentNamedType);\n            const permitScalar = proxiableScalar && bothScalars;\n            if (proxiableScalar && !bothScalars) {\n                throw new Error(`Types ${finalNamedType} and ${currentNamedType} are not proxiable scalars.`);\n            }\n            if (!permitScalar) {\n                validationMessage(`Definitions of ${definitionType} \"${settingNamespace}\" implement inconsistent named types across subschemas. This will be an automatic error in future versions.`, settingNamespace, typeMergingOptions);\n            }\n        }\n    }\n}\nfunction hasListType(type) {\n    return isListType(getNullableType(type));\n}\nfunction validateInputEnumConsistency(inputEnumType, candidates, typeMergingOptions) {\n    const enumValueInclusionMap = Object.create(null);\n    for (const candidate of candidates) {\n        const enumType = getNamedType(candidate.type);\n        if (isEnumType(enumType)) {\n            for (const { value } of enumType.getValues()) {\n                enumValueInclusionMap[value] = enumValueInclusionMap[value] || 0;\n                enumValueInclusionMap[value] += 1;\n            }\n        }\n    }\n    if (Object.values(enumValueInclusionMap).some(count => candidates.length !== count)) {\n        validationMessage(`Enum \"${inputEnumType.name}\" is used as an input with inconsistent values across subschemas. This will be an automatic error in future versions.`, inputEnumType.name, typeMergingOptions);\n    }\n}\nfunction validationMessage(message, settingNamespace, typeMergingOptions) {\n    var _a;\n    const override = `typeMergingOptions.validationScopes['${settingNamespace}'].validationLevel`;\n    const settings = getValidationSettings(settingNamespace, typeMergingOptions);\n    switch ((_a = settings.validationLevel) !== null && _a !== void 0 ? _a : ValidationLevel.Warn) {\n        case ValidationLevel.Off:\n            return;\n        case ValidationLevel.Error:\n            throw new Error(`${message} If this is intentional, you may disable this error by setting ${override} = \"warn|off\"`);\n        default:\n            console.warn(`${message} To disable this warning or elevate it to an error, set ${override} = \"error|off\"`);\n    }\n}\nfunction getValidationSettings(settingNamespace, typeMergingOptions) {\n    var _a, _b, _c;\n    return {\n        ...((_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.validationSettings) !== null && _a !== void 0 ? _a : {}),\n        ...((_c = (_b = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.validationScopes) === null || _b === void 0 ? void 0 : _b[settingNamespace]) !== null && _c !== void 0 ? _c : {}),\n    };\n}\n\nfunction mergeCandidates(typeName, candidates, typeMergingOptions) {\n    const initialCandidateType = candidates[0].type;\n    if (candidates.some(candidate => candidate.type.constructor !== initialCandidateType.constructor)) {\n        throw new Error(`Cannot merge different type categories into common type ${typeName}.`);\n    }\n    if (isObjectType(initialCandidateType)) {\n        return mergeObjectTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isInputObjectType(initialCandidateType)) {\n        return mergeInputObjectTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isInterfaceType(initialCandidateType)) {\n        return mergeInterfaceTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isUnionType(initialCandidateType)) {\n        return mergeUnionTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isEnumType(initialCandidateType)) {\n        return mergeEnumTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else if (isScalarType(initialCandidateType)) {\n        return mergeScalarTypeCandidates(typeName, candidates, typeMergingOptions);\n    }\n    else {\n        // not reachable.\n        throw new Error(`Type ${typeName} has unknown GraphQL type.`);\n    }\n}\nfunction mergeObjectTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const fields = fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);\n    const typeConfigs = candidates.map(candidate => candidate.type.toConfig());\n    const interfaceMap = typeConfigs\n        .map(typeConfig => typeConfig.interfaces)\n        .reduce((acc, interfaces) => {\n        if (interfaces != null) {\n            for (const iface of interfaces) {\n                acc[iface.name] = iface;\n            }\n        }\n        return acc;\n    }, Object.create(null));\n    const interfaces = Object.values(interfaceMap);\n    const astNodes = pluck('astNode', candidates);\n    const fieldAstNodes = canonicalFieldNamesForType(candidates)\n        .map(fieldName => { var _a; return (_a = fields[fieldName]) === null || _a === void 0 ? void 0 : _a.astNode; })\n        .filter(n => n != null);\n    if (astNodes.length > 1 && fieldAstNodes.length) {\n        astNodes.push({\n            ...astNodes[astNodes.length - 1],\n            fields: JSON.parse(JSON.stringify(fieldAstNodes)),\n        });\n    }\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeType(astNode, acc, { ignoreFieldConflicts: true }), astNodes[0]);\n    const extensionASTNodes = pluck('extensionASTNodes', candidates);\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        fields,\n        interfaces,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLObjectType(typeConfig);\n}\nfunction mergeInputObjectTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const fields = inputFieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);\n    const astNodes = pluck('astNode', candidates);\n    const fieldAstNodes = canonicalFieldNamesForType(candidates)\n        .map(fieldName => { var _a; return (_a = fields[fieldName]) === null || _a === void 0 ? void 0 : _a.astNode; })\n        .filter(n => n != null);\n    if (astNodes.length > 1 && fieldAstNodes.length) {\n        astNodes.push({\n            ...astNodes[astNodes.length - 1],\n            fields: JSON.parse(JSON.stringify(fieldAstNodes)),\n        });\n    }\n    const astNode = astNodes.slice(1).reduce((acc, astNode) => mergeInputType(astNode, acc, {\n        ignoreFieldConflicts: true,\n    }), astNodes[0]);\n    const extensionASTNodes = pluck('extensionASTNodes', candidates);\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        fields,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLInputObjectType(typeConfig);\n}\nfunction pluck(typeProperty, candidates) {\n    return candidates.map(candidate => candidate.type[typeProperty]).filter(value => value != null);\n}\nfunction mergeInterfaceTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const fields = fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions);\n    const typeConfigs = candidates.map(candidate => candidate.type.toConfig());\n    const interfaceMap = typeConfigs\n        .map(typeConfig => ('interfaces' in typeConfig ? typeConfig.interfaces : []))\n        .reduce((acc, interfaces) => {\n        if (interfaces != null) {\n            for (const iface of interfaces) {\n                acc[iface.name] = iface;\n            }\n        }\n        return acc;\n    }, Object.create(null));\n    const interfaces = Object.values(interfaceMap);\n    const astNodes = pluck('astNode', candidates);\n    const fieldAstNodes = canonicalFieldNamesForType(candidates)\n        .map(fieldName => { var _a; return (_a = fields[fieldName]) === null || _a === void 0 ? void 0 : _a.astNode; })\n        .filter(n => n != null);\n    if (astNodes.length > 1 && fieldAstNodes.length) {\n        astNodes.push({\n            ...astNodes[astNodes.length - 1],\n            fields: JSON.parse(JSON.stringify(fieldAstNodes)),\n        });\n    }\n    const astNode = astNodes.slice(1).reduce((acc, astNode) => mergeInterface(astNode, acc, {\n        ignoreFieldConflicts: true,\n    }), astNodes[0]);\n    const extensionASTNodes = pluck('extensionASTNodes', candidates);\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        fields,\n        interfaces,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLInterfaceType(typeConfig);\n}\nfunction mergeUnionTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const typeConfigs = candidates.map(candidate => {\n        if (!isUnionType(candidate.type)) {\n            throw new Error(`Expected ${candidate.type} to be a union type!`);\n        }\n        return candidate.type.toConfig();\n    });\n    const typeMap = typeConfigs.reduce((acc, typeConfig) => {\n        for (const type of typeConfig.types) {\n            acc[type.name] = type;\n        }\n        return acc;\n    }, Object.create(null));\n    const types = Object.values(typeMap);\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeUnion(astNode, acc), astNodes[0]);\n    const extensionASTNodes = pluck('extensionASTNodes', candidates);\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        types,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLUnionType(typeConfig);\n}\nfunction mergeEnumTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const values = enumValueConfigMapFromTypeCandidates(candidates, typeMergingOptions);\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeEnum(astNode, acc, { consistentEnumMerge: true }), astNodes[0]);\n    const extensionASTNodes = pluck('extensionASTNodes', candidates);\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        values,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLEnumType(typeConfig);\n}\nfunction enumValueConfigMapFromTypeCandidates(candidates, typeMergingOptions) {\n    var _a;\n    const enumValueConfigCandidatesMap = Object.create(null);\n    for (const candidate of candidates) {\n        const valueMap = candidate.type.toConfig().values;\n        for (const enumValue in valueMap) {\n            const enumValueConfigCandidate = {\n                enumValueConfig: valueMap[enumValue],\n                enumValue,\n                type: candidate.type,\n                subschema: candidate.subschema,\n                transformedSubschema: candidate.transformedSubschema,\n            };\n            if (enumValue in enumValueConfigCandidatesMap) {\n                enumValueConfigCandidatesMap[enumValue].push(enumValueConfigCandidate);\n            }\n            else {\n                enumValueConfigCandidatesMap[enumValue] = [enumValueConfigCandidate];\n            }\n        }\n    }\n    const enumValueConfigMap = Object.create(null);\n    for (const enumValue in enumValueConfigCandidatesMap) {\n        const enumValueConfigMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.enumValueConfigMerger) !== null && _a !== void 0 ? _a : defaultEnumValueConfigMerger;\n        enumValueConfigMap[enumValue] = enumValueConfigMerger(enumValueConfigCandidatesMap[enumValue]);\n    }\n    return enumValueConfigMap;\n}\nfunction defaultEnumValueConfigMerger(candidates) {\n    const preferred = candidates.find(({ type, transformedSubschema }) => { var _a, _b; return isSubschemaConfig(transformedSubschema) && ((_b = (_a = transformedSubschema.merge) === null || _a === void 0 ? void 0 : _a[type.name]) === null || _b === void 0 ? void 0 : _b.canonical); });\n    return (preferred || candidates[candidates.length - 1]).enumValueConfig;\n}\nfunction mergeScalarTypeCandidates(typeName, candidates, typeMergingOptions) {\n    candidates = orderedTypeCandidates(candidates, typeMergingOptions);\n    const description = mergeTypeDescriptions(candidates, typeMergingOptions);\n    const serializeFns = pluck('serialize', candidates);\n    const serialize = serializeFns[serializeFns.length - 1];\n    const parseValueFns = pluck('parseValue', candidates);\n    const parseValue = parseValueFns[parseValueFns.length - 1];\n    const parseLiteralFns = pluck('parseLiteral', candidates);\n    const parseLiteral = parseLiteralFns[parseLiteralFns.length - 1];\n    const astNodes = pluck('astNode', candidates);\n    const astNode = astNodes\n        .slice(1)\n        .reduce((acc, astNode) => mergeScalar(astNode, acc), astNodes[0]);\n    const extensionASTNodes = pluck('extensionASTNodes', candidates);\n    const extensions = Object.assign({}, ...pluck('extensions', candidates));\n    const typeConfig = {\n        name: typeName,\n        description,\n        serialize,\n        parseValue,\n        parseLiteral,\n        astNode,\n        extensionASTNodes,\n        extensions,\n    };\n    return new GraphQLScalarType(typeConfig);\n}\nfunction orderedTypeCandidates(candidates, typeMergingOptions) {\n    var _a;\n    const typeCandidateMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.typeCandidateMerger) !== null && _a !== void 0 ? _a : defaultTypeCandidateMerger;\n    const candidate = typeCandidateMerger(candidates);\n    return candidates.filter(c => c !== candidate).concat([candidate]);\n}\nfunction defaultTypeCandidateMerger(candidates) {\n    const canonical = candidates.filter(({ type, transformedSubschema }) => { var _a, _b; return isSubschemaConfig(transformedSubschema) ? (_b = (_a = transformedSubschema.merge) === null || _a === void 0 ? void 0 : _a[type.name]) === null || _b === void 0 ? void 0 : _b.canonical : false; });\n    if (canonical.length > 1) {\n        throw new Error(`Multiple canonical definitions for \"${canonical[0].type.name}\"`);\n    }\n    else if (canonical.length) {\n        return canonical[0];\n    }\n    return candidates[candidates.length - 1];\n}\nfunction mergeTypeDescriptions(candidates, typeMergingOptions) {\n    var _a;\n    const typeDescriptionsMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.typeDescriptionsMerger) !== null && _a !== void 0 ? _a : defaultTypeDescriptionMerger;\n    return typeDescriptionsMerger(candidates);\n}\nfunction defaultTypeDescriptionMerger(candidates) {\n    return candidates[candidates.length - 1].type.description;\n}\nfunction fieldConfigMapFromTypeCandidates(candidates, typeMergingOptions) {\n    const fieldConfigCandidatesMap = Object.create(null);\n    for (const candidate of candidates) {\n        const typeConfig = candidate.type.toConfig();\n        const fieldConfigMap = typeConfig.fields;\n        for (const fieldName in fieldConfigMap) {\n            const fieldConfig = fieldConfigMap[fieldName];\n            const fieldConfigCandidate = {\n                fieldConfig,\n                fieldName,\n                type: candidate.type,\n                subschema: candidate.subschema,\n                transformedSubschema: candidate.transformedSubschema,\n            };\n            if (fieldName in fieldConfigCandidatesMap) {\n                fieldConfigCandidatesMap[fieldName].push(fieldConfigCandidate);\n            }\n            else {\n                fieldConfigCandidatesMap[fieldName] = [fieldConfigCandidate];\n            }\n        }\n    }\n    const fieldConfigMap = Object.create(null);\n    for (const fieldName in fieldConfigCandidatesMap) {\n        fieldConfigMap[fieldName] = mergeFieldConfigs(fieldConfigCandidatesMap[fieldName], typeMergingOptions);\n    }\n    return fieldConfigMap;\n}\nfunction mergeFieldConfigs(candidates, typeMergingOptions) {\n    var _a;\n    const fieldConfigMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.fieldConfigMerger) !== null && _a !== void 0 ? _a : defaultFieldConfigMerger;\n    const finalFieldConfig = fieldConfigMerger(candidates);\n    validateFieldConsistency(finalFieldConfig, candidates, typeMergingOptions);\n    return finalFieldConfig;\n}\nfunction defaultFieldConfigMerger(candidates) {\n    var _a, _b, _c, _d, _e, _f;\n    const canonicalByField = [];\n    const canonicalByType = [];\n    for (const { type, fieldName, fieldConfig, transformedSubschema } of candidates) {\n        if (!isSubschemaConfig(transformedSubschema))\n            continue;\n        if ((_d = (_c = (_b = (_a = transformedSubschema.merge) === null || _a === void 0 ? void 0 : _a[type.name]) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c[fieldName]) === null || _d === void 0 ? void 0 : _d.canonical) {\n            canonicalByField.push(fieldConfig);\n        }\n        else if ((_f = (_e = transformedSubschema.merge) === null || _e === void 0 ? void 0 : _e[type.name]) === null || _f === void 0 ? void 0 : _f.canonical) {\n            canonicalByType.push(fieldConfig);\n        }\n    }\n    if (canonicalByField.length > 1) {\n        throw new Error(`Multiple canonical definitions for \"${candidates[0].type.name}.${candidates[0].fieldName}\"`);\n    }\n    else if (canonicalByField.length) {\n        return canonicalByField[0];\n    }\n    else if (canonicalByType.length) {\n        return canonicalByType[0];\n    }\n    return candidates[candidates.length - 1].fieldConfig;\n}\nfunction inputFieldConfigMapFromTypeCandidates(candidates, typeMergingOptions) {\n    var _a;\n    const inputFieldConfigCandidatesMap = Object.create(null);\n    const fieldInclusionMap = Object.create(null);\n    for (const candidate of candidates) {\n        const typeConfig = candidate.type.toConfig();\n        const inputFieldConfigMap = typeConfig.fields;\n        for (const fieldName in inputFieldConfigMap) {\n            const inputFieldConfig = inputFieldConfigMap[fieldName];\n            fieldInclusionMap[fieldName] = fieldInclusionMap[fieldName] || 0;\n            fieldInclusionMap[fieldName] += 1;\n            const inputFieldConfigCandidate = {\n                inputFieldConfig,\n                fieldName,\n                type: candidate.type,\n                subschema: candidate.subschema,\n                transformedSubschema: candidate.transformedSubschema,\n            };\n            if (fieldName in inputFieldConfigCandidatesMap) {\n                inputFieldConfigCandidatesMap[fieldName].push(inputFieldConfigCandidate);\n            }\n            else {\n                inputFieldConfigCandidatesMap[fieldName] = [inputFieldConfigCandidate];\n            }\n        }\n    }\n    validateInputObjectConsistency(fieldInclusionMap, candidates, typeMergingOptions);\n    const inputFieldConfigMap = Object.create(null);\n    for (const fieldName in inputFieldConfigCandidatesMap) {\n        const inputFieldConfigMerger = (_a = typeMergingOptions === null || typeMergingOptions === void 0 ? void 0 : typeMergingOptions.inputFieldConfigMerger) !== null && _a !== void 0 ? _a : defaultInputFieldConfigMerger;\n        inputFieldConfigMap[fieldName] = inputFieldConfigMerger(inputFieldConfigCandidatesMap[fieldName]);\n        validateInputFieldConsistency(inputFieldConfigMap[fieldName], inputFieldConfigCandidatesMap[fieldName], typeMergingOptions);\n    }\n    return inputFieldConfigMap;\n}\nfunction defaultInputFieldConfigMerger(candidates) {\n    var _a, _b, _c, _d, _e, _f;\n    const canonicalByField = [];\n    const canonicalByType = [];\n    for (const { type, fieldName, inputFieldConfig, transformedSubschema } of candidates) {\n        if (!isSubschemaConfig(transformedSubschema))\n            continue;\n        if ((_d = (_c = (_b = (_a = transformedSubschema.merge) === null || _a === void 0 ? void 0 : _a[type.name]) === null || _b === void 0 ? void 0 : _b.fields) === null || _c === void 0 ? void 0 : _c[fieldName]) === null || _d === void 0 ? void 0 : _d.canonical) {\n            canonicalByField.push(inputFieldConfig);\n        }\n        else if ((_f = (_e = transformedSubschema.merge) === null || _e === void 0 ? void 0 : _e[type.name]) === null || _f === void 0 ? void 0 : _f.canonical) {\n            canonicalByType.push(inputFieldConfig);\n        }\n    }\n    if (canonicalByField.length > 1) {\n        throw new Error(`Multiple canonical definitions for \"${candidates[0].type.name}.${candidates[0].fieldName}\"`);\n    }\n    else if (canonicalByField.length) {\n        return canonicalByField[0];\n    }\n    else if (canonicalByType.length) {\n        return canonicalByType[0];\n    }\n    return candidates[candidates.length - 1].inputFieldConfig;\n}\nfunction canonicalFieldNamesForType(candidates) {\n    var _a;\n    const canonicalFieldNames = Object.create(null);\n    for (const { type, transformedSubschema } of candidates) {\n        if (!isSubschemaConfig(transformedSubschema))\n            continue;\n        const mergeConfig = (_a = transformedSubschema.merge) === null || _a === void 0 ? void 0 : _a[type.name];\n        if (mergeConfig != null && mergeConfig.fields != null && !mergeConfig.canonical) {\n            for (const fieldName in mergeConfig.fields) {\n                const mergedFieldConfig = mergeConfig.fields[fieldName];\n                if (mergedFieldConfig.canonical) {\n                    canonicalFieldNames[fieldName] = true;\n                }\n            }\n        }\n    }\n    return Object.keys(canonicalFieldNames);\n}\n\nfunction extractDefinitions(ast) {\n    const typeDefinitions = [];\n    const directiveDefs = [];\n    const schemaDefs = [];\n    const schemaExtensions = [];\n    const extensionDefs = [];\n    for (const def of ast.definitions) {\n        switch (def.kind) {\n            case Kind.OBJECT_TYPE_DEFINITION:\n            case Kind.INTERFACE_TYPE_DEFINITION:\n            case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n            case Kind.UNION_TYPE_DEFINITION:\n            case Kind.ENUM_TYPE_DEFINITION:\n            case Kind.SCALAR_TYPE_DEFINITION:\n                typeDefinitions.push(def);\n                break;\n            case Kind.DIRECTIVE_DEFINITION:\n                directiveDefs.push(def);\n                break;\n            case Kind.SCHEMA_DEFINITION:\n                schemaDefs.push(def);\n                break;\n            case Kind.SCHEMA_EXTENSION:\n                schemaExtensions.push(def);\n                break;\n            case Kind.OBJECT_TYPE_EXTENSION:\n            case Kind.INTERFACE_TYPE_EXTENSION:\n            case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n            case Kind.UNION_TYPE_EXTENSION:\n            case Kind.ENUM_TYPE_EXTENSION:\n            case Kind.SCALAR_TYPE_EXTENSION:\n                extensionDefs.push(def);\n                break;\n        }\n    }\n    return {\n        typeDefinitions,\n        directiveDefs,\n        schemaDefs,\n        schemaExtensions,\n        extensionDefs,\n    };\n}\n\nfunction buildTypeCandidates({ subschemas, originalSubschemaMap, types, typeDefs, parseOptions, extensions, directiveMap, schemaDefs, mergeDirectives, }) {\n    const typeCandidates = Object.create(null);\n    let schemaDef;\n    let schemaExtensions = [];\n    let document;\n    let extraction;\n    if ((typeDefs && !Array.isArray(typeDefs)) || (Array.isArray(typeDefs) && typeDefs.length)) {\n        document = mergeTypeDefs(typeDefs, parseOptions);\n        extraction = extractDefinitions(document);\n        schemaDef = extraction.schemaDefs[0];\n        schemaExtensions = schemaExtensions.concat(extraction.schemaExtensions);\n    }\n    schemaDefs.schemaDef = schemaDef !== null && schemaDef !== void 0 ? schemaDef : schemaDefs.schemaDef;\n    schemaDefs.schemaExtensions = schemaExtensions;\n    const rootTypeNameMap = getRootTypeNameMap(schemaDefs);\n    for (const subschema of subschemas) {\n        const schema = wrapSchema(subschema);\n        const rootTypeMap = getRootTypeMap(schema);\n        const rootTypes = getRootTypes(schema);\n        for (const [operation, rootType] of rootTypeMap.entries()) {\n            addTypeCandidate(typeCandidates, rootTypeNameMap[operation], {\n                type: rootType,\n                subschema: originalSubschemaMap.get(subschema),\n                transformedSubschema: subschema,\n            });\n        }\n        if (mergeDirectives === true) {\n            for (const directive of schema.getDirectives()) {\n                directiveMap[directive.name] = directive;\n            }\n        }\n        const originalTypeMap = schema.getTypeMap();\n        for (const typeName in originalTypeMap) {\n            const type = originalTypeMap[typeName];\n            if (isNamedType(type) &&\n                getNamedType(type).name.slice(0, 2) !== '__' &&\n                !rootTypes.has(type)) {\n                addTypeCandidate(typeCandidates, type.name, {\n                    type,\n                    subschema: originalSubschemaMap.get(subschema),\n                    transformedSubschema: subschema,\n                });\n            }\n        }\n    }\n    if (document != null && extraction != null) {\n        for (const def of extraction.typeDefinitions) {\n            const type = typeFromAST(def);\n            if (!isNamedType(type)) {\n                throw new Error(`Expected to get named typed but got ${inspect(def)}`);\n            }\n            if (type != null) {\n                addTypeCandidate(typeCandidates, type.name, { type });\n            }\n        }\n        for (const def of extraction.directiveDefs) {\n            const directive = typeFromAST(def);\n            if (!isDirective(directive)) {\n                throw new Error(`Expected to get directive type but got ${inspect(def)}`);\n            }\n            directiveMap[directive.name] = directive;\n        }\n        if (extraction.extensionDefs.length > 0) {\n            extensions.push({\n                ...document,\n                definitions: extraction.extensionDefs,\n            });\n        }\n    }\n    for (const type of types) {\n        addTypeCandidate(typeCandidates, type.name, { type });\n    }\n    return [typeCandidates, rootTypeNameMap];\n}\nfunction getRootTypeNameMap({ schemaDef, schemaExtensions, }) {\n    const rootTypeNameMap = {\n        query: 'Query',\n        mutation: 'Mutation',\n        subscription: 'Subscription',\n    };\n    const allNodes = schemaExtensions.slice();\n    if (schemaDef != null) {\n        allNodes.unshift(schemaDef);\n    }\n    for (const node of allNodes) {\n        if (node.operationTypes != null) {\n            for (const operationType of node.operationTypes) {\n                rootTypeNameMap[operationType.operation] = operationType.type.name.value;\n            }\n        }\n    }\n    return rootTypeNameMap;\n}\nfunction addTypeCandidate(typeCandidates, name, typeCandidate) {\n    if (!(name in typeCandidates)) {\n        typeCandidates[name] = [];\n    }\n    typeCandidates[name].push(typeCandidate);\n}\nfunction buildTypes({ typeCandidates, directives, stitchingInfo, rootTypeNames, onTypeConflict, mergeTypes, typeMergingOptions, }) {\n    const typeMap = Object.create(null);\n    for (const typeName in typeCandidates) {\n        if (rootTypeNames.includes(typeName) ||\n            (mergeTypes === true && !typeCandidates[typeName].some(candidate => isSpecifiedScalarType(candidate.type))) ||\n            (typeof mergeTypes === 'function' && mergeTypes(typeCandidates[typeName], typeName)) ||\n            (Array.isArray(mergeTypes) && mergeTypes.includes(typeName)) ||\n            (stitchingInfo != null && typeName in stitchingInfo.mergedTypes)) {\n            typeMap[typeName] = mergeCandidates(typeName, typeCandidates[typeName], typeMergingOptions);\n        }\n        else {\n            const candidateSelector = onTypeConflict != null\n                ? onTypeConflictToCandidateSelector(onTypeConflict)\n                : (cands) => cands[cands.length - 1];\n            typeMap[typeName] = candidateSelector(typeCandidates[typeName]).type;\n        }\n    }\n    return rewireTypes(typeMap, directives);\n}\nfunction onTypeConflictToCandidateSelector(onTypeConflict) {\n    return cands => cands.reduce((prev, next) => {\n        const type = onTypeConflict(prev.type, next.type, {\n            left: {\n                subschema: prev.subschema,\n                transformedSubschema: prev.transformedSubschema,\n            },\n            right: {\n                subschema: next.subschema,\n                transformedSubschema: next.transformedSubschema,\n            },\n        });\n        if (prev.type === type) {\n            return prev;\n        }\n        else if (next.type === type) {\n            return next;\n        }\n        return {\n            schemaName: 'unknown',\n            type,\n        };\n    });\n}\n\nfunction createMergedTypeResolver(mergedTypeResolverOptions) {\n    const { fieldName, argsFromKeys, valuesFromResults, args } = mergedTypeResolverOptions;\n    if (argsFromKeys != null) {\n        return function mergedBatchedTypeResolver(_originalResult, context, info, subschema, selectionSet, key, type = getNamedType(info.returnType)) {\n            return batchDelegateToSchema({\n                schema: subschema,\n                operation: 'query',\n                fieldName,\n                returnType: new GraphQLList(type),\n                key,\n                argsFromKeys,\n                valuesFromResults,\n                selectionSet,\n                context,\n                info,\n                skipTypeMerging: true,\n            });\n        };\n    }\n    if (args != null) {\n        return function mergedTypeResolver(originalResult, context, info, subschema, selectionSet, _key, type = getNamedType(info.returnType)) {\n            return delegateToSchema({\n                schema: subschema,\n                operation: 'query',\n                fieldName,\n                returnType: type,\n                args: args(originalResult),\n                selectionSet,\n                context,\n                info,\n                skipTypeMerging: true,\n            });\n        };\n    }\n    return undefined;\n}\n\nfunction getFieldsNotInSubschema(schema, stitchingInfo, gatewayType, subschemaType, fieldNodes, fragments, variableValues) {\n    var _a;\n    const subFieldNodesByResponseKey = collectSubFields(schema, fragments, variableValues, gatewayType, fieldNodes);\n    // TODO: Verify whether it is safe that extensions always exists.\n    const fieldNodesByField = stitchingInfo === null || stitchingInfo === void 0 ? void 0 : stitchingInfo.fieldNodesByField;\n    const fields = subschemaType.getFields();\n    const fieldsNotInSchema = new Set();\n    for (const [, subFieldNodes] of subFieldNodesByResponseKey) {\n        const fieldName = subFieldNodes[0].name.value;\n        if (!fields[fieldName]) {\n            for (const subFieldNode of subFieldNodes) {\n                fieldsNotInSchema.add(subFieldNode);\n            }\n        }\n        const fieldNodesForField = (_a = fieldNodesByField === null || fieldNodesByField === void 0 ? void 0 : fieldNodesByField[gatewayType.name]) === null || _a === void 0 ? void 0 : _a[fieldName];\n        if (fieldNodesForField) {\n            for (const fieldNode of fieldNodesForField) {\n                if (!fields[fieldNode.name.value]) {\n                    fieldsNotInSchema.add(fieldNode);\n                }\n            }\n        }\n    }\n    return Array.from(fieldsNotInSchema);\n}\n\nfunction calculateDelegationStage(mergedTypeInfo, sourceSubschemas, targetSubschemas, fieldNodes) {\n    var _a;\n    const { selectionSets, fieldSelectionSets, uniqueFields, nonUniqueFields } = mergedTypeInfo;\n    // 1.  calculate if possible to delegate to given subschema\n    const proxiableSubschemas = [];\n    const nonProxiableSubschemas = [];\n    for (const t of targetSubschemas) {\n        const selectionSet = selectionSets.get(t);\n        const fieldSelectionSetsMap = fieldSelectionSets.get(t);\n        if (selectionSet != null && !subschemaTypesContainSelectionSet(mergedTypeInfo, sourceSubschemas, selectionSet)) {\n            nonProxiableSubschemas.push(t);\n        }\n        else {\n            if (fieldSelectionSetsMap == null ||\n                fieldNodes.every(fieldNode => {\n                    const fieldName = fieldNode.name.value;\n                    const fieldSelectionSet = fieldSelectionSetsMap[fieldName];\n                    return (fieldSelectionSet == null ||\n                        subschemaTypesContainSelectionSet(mergedTypeInfo, sourceSubschemas, fieldSelectionSet));\n                })) {\n                proxiableSubschemas.push(t);\n            }\n            else {\n                nonProxiableSubschemas.push(t);\n            }\n        }\n    }\n    const unproxiableFieldNodes = [];\n    // 2. for each selection:\n    const delegationMap = new Map();\n    for (const fieldNode of fieldNodes) {\n        if (fieldNode.name.value === '__typename') {\n            continue;\n        }\n        // 2a. use uniqueFields map to assign fields to subschema if one of possible subschemas\n        const uniqueSubschema = uniqueFields[fieldNode.name.value];\n        if (uniqueSubschema != null) {\n            if (!proxiableSubschemas.includes(uniqueSubschema)) {\n                unproxiableFieldNodes.push(fieldNode);\n                continue;\n            }\n            const existingSubschema = (_a = delegationMap.get(uniqueSubschema)) === null || _a === void 0 ? void 0 : _a.selections;\n            if (existingSubschema != null) {\n                existingSubschema.push(fieldNode);\n            }\n            else {\n                delegationMap.set(uniqueSubschema, {\n                    kind: Kind.SELECTION_SET,\n                    selections: [fieldNode],\n                });\n            }\n            continue;\n        }\n        // 2b. use nonUniqueFields to assign to a possible subschema,\n        //     preferring one of the subschemas already targets of delegation\n        let nonUniqueSubschemas = nonUniqueFields[fieldNode.name.value];\n        if (nonUniqueSubschemas == null) {\n            unproxiableFieldNodes.push(fieldNode);\n            continue;\n        }\n        nonUniqueSubschemas = nonUniqueSubschemas.filter(s => proxiableSubschemas.includes(s));\n        if (!nonUniqueSubschemas.length) {\n            unproxiableFieldNodes.push(fieldNode);\n            continue;\n        }\n        const existingSubschema = nonUniqueSubschemas.find(s => delegationMap.has(s));\n        if (existingSubschema != null) {\n            // It is okay we previously explicitly check whether the map has the element.\n            delegationMap.get(existingSubschema).selections.push(fieldNode);\n        }\n        else {\n            delegationMap.set(nonUniqueSubschemas[0], {\n                kind: Kind.SELECTION_SET,\n                selections: [fieldNode],\n            });\n        }\n    }\n    return {\n        delegationMap,\n        proxiableSubschemas,\n        nonProxiableSubschemas,\n        unproxiableFieldNodes,\n    };\n}\nfunction getStitchingInfo(schema) {\n    var _a;\n    const stitchingInfo = (_a = schema.extensions) === null || _a === void 0 ? void 0 : _a['stitchingInfo'];\n    if (!stitchingInfo) {\n        throw new Error(`Schema is not a stitched schema.`);\n    }\n    return stitchingInfo;\n}\nfunction createDelegationPlanBuilder(mergedTypeInfo) {\n    return memoize5(function delegationPlanBuilder(schema, sourceSubschema, variableValues, fragments, fieldNodes) {\n        var _a;\n        const stitchingInfo = getStitchingInfo(schema);\n        const targetSubschemas = mergedTypeInfo === null || mergedTypeInfo === void 0 ? void 0 : mergedTypeInfo.targetSubschemas.get(sourceSubschema);\n        if (!targetSubschemas || !targetSubschemas.length) {\n            return [];\n        }\n        const typeName = mergedTypeInfo.typeName;\n        const fieldsNotInSubschema = getFieldsNotInSubschema(schema, stitchingInfo, schema.getType(typeName), (_a = mergedTypeInfo.typeMaps.get(sourceSubschema)) === null || _a === void 0 ? void 0 : _a[typeName], fieldNodes, fragments, variableValues);\n        if (!fieldsNotInSubschema.length) {\n            return [];\n        }\n        const delegationMaps = [];\n        let sourceSubschemas = createSubschemas(sourceSubschema);\n        let delegationStage = calculateDelegationStage(mergedTypeInfo, sourceSubschemas, targetSubschemas, fieldsNotInSubschema);\n        let { delegationMap } = delegationStage;\n        while (delegationMap.size) {\n            delegationMaps.push(delegationMap);\n            const { proxiableSubschemas, nonProxiableSubschemas, unproxiableFieldNodes } = delegationStage;\n            sourceSubschemas = combineSubschemas(sourceSubschemas, proxiableSubschemas);\n            delegationStage = calculateDelegationStage(mergedTypeInfo, sourceSubschemas, nonProxiableSubschemas, unproxiableFieldNodes);\n            delegationMap = delegationStage.delegationMap;\n        }\n        return delegationMaps;\n    });\n}\nconst createSubschemas = memoize1(function createSubschemas(sourceSubschema) {\n    return [sourceSubschema];\n});\nconst combineSubschemas = memoize2(function combineSubschemas(sourceSubschemas, additionalSubschemas) {\n    return sourceSubschemas.concat(additionalSubschemas);\n});\nconst subschemaTypesContainSelectionSet = memoize3(function subschemaTypesContainSelectionSet(mergedTypeInfo, sourceSubchemas, selectionSet) {\n    return typesContainSelectionSet(sourceSubchemas.map(sourceSubschema => sourceSubschema.transformedSchema.getType(mergedTypeInfo.typeName)), selectionSet);\n});\nfunction typesContainSelectionSet(types, selectionSet) {\n    var _a;\n    const fieldMaps = types.map(type => type.getFields());\n    for (const selection of selectionSet.selections) {\n        if (selection.kind === Kind.FIELD) {\n            const fields = fieldMaps.map(fieldMap => fieldMap[selection.name.value]).filter(field => field != null);\n            if (!fields.length) {\n                return false;\n            }\n            if (selection.selectionSet != null) {\n                return typesContainSelectionSet(fields.map(field => getNamedType(field.type)), selection.selectionSet);\n            }\n        }\n        else if (selection.kind === Kind.INLINE_FRAGMENT && ((_a = selection.typeCondition) === null || _a === void 0 ? void 0 : _a.name.value) === types[0].name) {\n            return typesContainSelectionSet(types, selection.selectionSet);\n        }\n    }\n    return true;\n}\n\nfunction createStitchingInfo(subschemaMap, typeCandidates, mergeTypes) {\n    const mergedTypes = createMergedTypes(typeCandidates, mergeTypes);\n    return {\n        subschemaMap,\n        fieldNodesByType: Object.create(null),\n        fieldNodesByField: Object.create(null),\n        dynamicSelectionSetsByField: Object.create(null),\n        mergedTypes,\n    };\n}\nfunction createMergedTypes(typeCandidates, mergeTypes) {\n    var _a, _b;\n    const mergedTypes = Object.create(null);\n    for (const typeName in typeCandidates) {\n        if (typeCandidates[typeName].length > 1 &&\n            (isObjectType(typeCandidates[typeName][0].type) || isInterfaceType(typeCandidates[typeName][0].type))) {\n            const typeCandidatesWithMergedTypeConfig = typeCandidates[typeName].filter(typeCandidate => typeCandidate.transformedSubschema != null &&\n                typeCandidate.transformedSubschema.merge != null &&\n                typeName in typeCandidate.transformedSubschema.merge);\n            if (mergeTypes === true ||\n                (typeof mergeTypes === 'function' && mergeTypes(typeCandidates[typeName], typeName)) ||\n                (Array.isArray(mergeTypes) && mergeTypes.includes(typeName)) ||\n                typeCandidatesWithMergedTypeConfig.length) {\n                const targetSubschemas = [];\n                const typeMaps = new Map();\n                const supportedBySubschemas = Object.create({});\n                const selectionSets = new Map();\n                const fieldSelectionSets = new Map();\n                const resolvers = new Map();\n                for (const typeCandidate of typeCandidates[typeName]) {\n                    const subschema = typeCandidate.transformedSubschema;\n                    if (subschema == null) {\n                        continue;\n                    }\n                    typeMaps.set(subschema, subschema.transformedSchema.getTypeMap());\n                    const mergedTypeConfig = (_a = subschema === null || subschema === void 0 ? void 0 : subschema.merge) === null || _a === void 0 ? void 0 : _a[typeName];\n                    if (mergedTypeConfig == null) {\n                        continue;\n                    }\n                    if (mergedTypeConfig.selectionSet) {\n                        const selectionSet = parseSelectionSet(mergedTypeConfig.selectionSet, { noLocation: true });\n                        selectionSets.set(subschema, selectionSet);\n                    }\n                    if (mergedTypeConfig.fields) {\n                        const parsedFieldSelectionSets = Object.create(null);\n                        for (const fieldName in mergedTypeConfig.fields) {\n                            if (mergedTypeConfig.fields[fieldName].selectionSet) {\n                                const rawFieldSelectionSet = mergedTypeConfig.fields[fieldName].selectionSet;\n                                parsedFieldSelectionSets[fieldName] = rawFieldSelectionSet\n                                    ? parseSelectionSet(rawFieldSelectionSet, { noLocation: true })\n                                    : undefined;\n                            }\n                        }\n                        fieldSelectionSets.set(subschema, parsedFieldSelectionSets);\n                    }\n                    const resolver = (_b = mergedTypeConfig.resolve) !== null && _b !== void 0 ? _b : createMergedTypeResolver(mergedTypeConfig);\n                    if (resolver == null) {\n                        continue;\n                    }\n                    const keyFn = mergedTypeConfig.key;\n                    resolvers.set(subschema, keyFn\n                        ? function batchMergedTypeResolverWrapper(originalResult, context, info, subschema, selectionSet, type) {\n                            return new ValueOrPromise(() => keyFn(originalResult))\n                                .then(key => resolver(originalResult, context, info, subschema, selectionSet, key, type))\n                                .resolve();\n                        }\n                        : resolver);\n                    targetSubschemas.push(subschema);\n                    const type = subschema.transformedSchema.getType(typeName);\n                    const fieldMap = type.getFields();\n                    const selectionSet = selectionSets.get(subschema);\n                    for (const fieldName in fieldMap) {\n                        const field = fieldMap[fieldName];\n                        const fieldType = getNamedType(field.type);\n                        if (selectionSet && isLeafType(fieldType) && selectionSetContainsTopLevelField(selectionSet, fieldName)) {\n                            continue;\n                        }\n                        if (!(fieldName in supportedBySubschemas)) {\n                            supportedBySubschemas[fieldName] = [];\n                        }\n                        supportedBySubschemas[fieldName].push(subschema);\n                    }\n                }\n                const sourceSubschemas = typeCandidates[typeName]\n                    .map(typeCandidate => typeCandidate === null || typeCandidate === void 0 ? void 0 : typeCandidate.transformedSubschema)\n                    .filter(isSome);\n                const targetSubschemasBySubschema = new Map();\n                for (const subschema of sourceSubschemas) {\n                    const filteredSubschemas = targetSubschemas.filter(s => s !== subschema);\n                    if (filteredSubschemas.length) {\n                        targetSubschemasBySubschema.set(subschema, filteredSubschemas);\n                    }\n                }\n                mergedTypes[typeName] = {\n                    typeName,\n                    targetSubschemas: targetSubschemasBySubschema,\n                    typeMaps,\n                    selectionSets,\n                    fieldSelectionSets,\n                    uniqueFields: Object.create({}),\n                    nonUniqueFields: Object.create({}),\n                    resolvers,\n                };\n                mergedTypes[typeName].delegationPlanBuilder = createDelegationPlanBuilder(mergedTypes[typeName]);\n                for (const fieldName in supportedBySubschemas) {\n                    if (supportedBySubschemas[fieldName].length === 1) {\n                        mergedTypes[typeName].uniqueFields[fieldName] = supportedBySubschemas[fieldName][0];\n                    }\n                    else {\n                        mergedTypes[typeName].nonUniqueFields[fieldName] = supportedBySubschemas[fieldName];\n                    }\n                }\n            }\n        }\n    }\n    return mergedTypes;\n}\nfunction completeStitchingInfo(stitchingInfo, resolvers, schema) {\n    const { fieldNodesByType, fieldNodesByField, dynamicSelectionSetsByField, mergedTypes } = stitchingInfo;\n    // must add __typename to query and mutation root types to handle type merging with nested root types\n    // cannot add __typename to subscription root types, but they cannot be nested\n    const rootTypes = [schema.getQueryType(), schema.getMutationType()];\n    for (const rootType of rootTypes) {\n        if (rootType) {\n            fieldNodesByType[rootType.name] = [\n                parseSelectionSet('{ __typename }', { noLocation: true }).selections[0],\n            ];\n        }\n    }\n    const selectionSetsByField = Object.create(null);\n    for (const typeName in mergedTypes) {\n        const mergedTypeInfo = mergedTypes[typeName];\n        if (mergedTypeInfo.selectionSets == null && mergedTypeInfo.fieldSelectionSets == null) {\n            continue;\n        }\n        for (const [subschemaConfig, selectionSet] of mergedTypeInfo.selectionSets) {\n            const schema = subschemaConfig.transformedSchema;\n            const type = schema.getType(typeName);\n            const fields = type.getFields();\n            for (const fieldName in fields) {\n                const field = fields[fieldName];\n                const fieldType = getNamedType(field.type);\n                if (selectionSet && isLeafType(fieldType) && selectionSetContainsTopLevelField(selectionSet, fieldName)) {\n                    continue;\n                }\n                updateSelectionSetMap(selectionSetsByField, typeName, fieldName, selectionSet, true);\n            }\n        }\n        for (const [, selectionSetFieldMap] of mergedTypeInfo.fieldSelectionSets) {\n            for (const fieldName in selectionSetFieldMap) {\n                const selectionSet = selectionSetFieldMap[fieldName];\n                updateSelectionSetMap(selectionSetsByField, typeName, fieldName, selectionSet, true);\n            }\n        }\n    }\n    for (const typeName in resolvers) {\n        const type = schema.getType(typeName);\n        if (type === undefined || isLeafType(type) || isInputObjectType(type) || isUnionType(type)) {\n            continue;\n        }\n        const resolver = resolvers[typeName];\n        for (const fieldName in resolver) {\n            const field = resolver[fieldName];\n            if (typeof field.selectionSet === 'function') {\n                if (!(typeName in dynamicSelectionSetsByField)) {\n                    dynamicSelectionSetsByField[typeName] = Object.create(null);\n                }\n                if (!(fieldName in dynamicSelectionSetsByField[typeName])) {\n                    dynamicSelectionSetsByField[typeName][fieldName] = [];\n                }\n                dynamicSelectionSetsByField[typeName][fieldName].push(field.selectionSet);\n            }\n            else if (field.selectionSet) {\n                const selectionSet = parseSelectionSet(field.selectionSet, { noLocation: true });\n                updateSelectionSetMap(selectionSetsByField, typeName, fieldName, selectionSet);\n            }\n        }\n    }\n    const variableValues = Object.create(null);\n    const fragments = Object.create(null);\n    const fieldNodeMap = Object.create(null);\n    for (const typeName in selectionSetsByField) {\n        const type = schema.getType(typeName);\n        for (const fieldName in selectionSetsByField[typeName]) {\n            for (const selectionSet of selectionSetsByField[typeName][fieldName]) {\n                const fieldNodesByResponseKey = collectFields(schema, fragments, variableValues, type, selectionSet, new Map(), new Set());\n                for (const [, fieldNodes] of fieldNodesByResponseKey) {\n                    for (const fieldNode of fieldNodes) {\n                        const key = print(fieldNode);\n                        if (fieldNodeMap[key] == null) {\n                            fieldNodeMap[key] = fieldNode;\n                            updateArrayMap(fieldNodesByField, typeName, fieldName, fieldNode);\n                        }\n                        else {\n                            updateArrayMap(fieldNodesByField, typeName, fieldName, fieldNodeMap[key]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return stitchingInfo;\n}\nfunction updateSelectionSetMap(map, typeName, fieldName, selectionSet, includeTypename) {\n    if (includeTypename) {\n        const typenameSelectionSet = parseSelectionSet('{ __typename }', { noLocation: true });\n        updateArrayMap(map, typeName, fieldName, selectionSet, typenameSelectionSet);\n        return;\n    }\n    updateArrayMap(map, typeName, fieldName, selectionSet);\n}\nfunction updateArrayMap(map, typeName, fieldName, value, initialValue) {\n    if (map[typeName] == null) {\n        const initialItems = initialValue === undefined ? [value] : [initialValue, value];\n        map[typeName] = {\n            [fieldName]: initialItems,\n        };\n    }\n    else if (map[typeName][fieldName] == null) {\n        const initialItems = initialValue === undefined ? [value] : [initialValue, value];\n        map[typeName][fieldName] = initialItems;\n    }\n    else {\n        map[typeName][fieldName].push(value);\n    }\n}\nfunction addStitchingInfo(stitchedSchema, stitchingInfo) {\n    return new GraphQLSchema({\n        ...stitchedSchema.toConfig(),\n        extensions: {\n            ...stitchedSchema.extensions,\n            stitchingInfo,\n        },\n    });\n}\nfunction selectionSetContainsTopLevelField(selectionSet, fieldName) {\n    return selectionSet.selections.some(selection => selection.kind === Kind.FIELD && selection.name.value === fieldName);\n}\n\nfunction computedDirectiveTransformer(computedDirectiveName) {\n    return (subschemaConfig) => {\n        const newSubschemaConfig = cloneSubschemaConfig(subschemaConfig);\n        mapSchema(subschemaConfig.schema, {\n            [MapperKind.OBJECT_FIELD]: (fieldConfig, fieldName, typeName, schema) => {\n                var _a, _b, _c, _d, _e;\n                const mergeTypeConfig = (_a = newSubschemaConfig.merge) === null || _a === void 0 ? void 0 : _a[typeName];\n                if (mergeTypeConfig == null) {\n                    return undefined;\n                }\n                const computed = (_b = getDirective(schema, fieldConfig, computedDirectiveName)) === null || _b === void 0 ? void 0 : _b[0];\n                if (computed == null) {\n                    return undefined;\n                }\n                const selectionSet = computed['fields'] != null ? `{ ${computed['fields']} }` : computed['selectionSet'];\n                if (selectionSet == null) {\n                    return undefined;\n                }\n                mergeTypeConfig.fields = (_c = mergeTypeConfig.fields) !== null && _c !== void 0 ? _c : {};\n                mergeTypeConfig.fields[fieldName] = (_d = mergeTypeConfig.fields[fieldName]) !== null && _d !== void 0 ? _d : {};\n                const mergeFieldConfig = mergeTypeConfig.fields[fieldName];\n                mergeFieldConfig.selectionSet = (_e = mergeFieldConfig.selectionSet) !== null && _e !== void 0 ? _e : selectionSet;\n                mergeFieldConfig.computed = true;\n                return undefined;\n            },\n        });\n        return newSubschemaConfig;\n    };\n}\n\nfunction isolateComputedFieldsTransformer(subschemaConfig) {\n    var _a, _b;\n    if (subschemaConfig.merge == null) {\n        return [subschemaConfig];\n    }\n    const baseSchemaTypes = Object.create(null);\n    const isolatedSchemaTypes = Object.create(null);\n    for (const typeName in subschemaConfig.merge) {\n        const mergedTypeConfig = subschemaConfig.merge[typeName];\n        baseSchemaTypes[typeName] = mergedTypeConfig;\n        if (mergedTypeConfig.computedFields) {\n            const mergeConfigFields = (_a = mergedTypeConfig.fields) !== null && _a !== void 0 ? _a : Object.create(null);\n            for (const fieldName in mergedTypeConfig.computedFields) {\n                const mergedFieldConfig = mergedTypeConfig.computedFields[fieldName];\n                console.warn(`The \"computedFields\" setting is deprecated. Update your @graphql-tools/stitching-directives package, and/or update static merged type config to \"${typeName}.fields.${fieldName} = { selectionSet: '${mergedFieldConfig.selectionSet}', computed: true }\"`);\n                mergeConfigFields[fieldName] = {\n                    ...((_b = mergeConfigFields[fieldName]) !== null && _b !== void 0 ? _b : {}),\n                    ...mergedFieldConfig,\n                    computed: true,\n                };\n            }\n            delete mergedTypeConfig.computedFields;\n            mergedTypeConfig.fields = mergeConfigFields;\n        }\n        if (mergedTypeConfig.fields) {\n            const baseFields = Object.create(null);\n            const isolatedFields = Object.create(null);\n            for (const fieldName in mergedTypeConfig.fields) {\n                const mergedFieldConfig = mergedTypeConfig.fields[fieldName];\n                if (mergedFieldConfig.computed && mergedFieldConfig.selectionSet) {\n                    isolatedFields[fieldName] = mergedFieldConfig;\n                }\n                else if (mergedFieldConfig.computed) {\n                    throw new Error(`A selectionSet is required for computed field \"${typeName}.${fieldName}\"`);\n                }\n                else {\n                    baseFields[fieldName] = mergedFieldConfig;\n                }\n            }\n            const isolatedFieldCount = Object.keys(isolatedFields).length;\n            const objectType = subschemaConfig.schema.getType(typeName);\n            if (isolatedFieldCount && isolatedFieldCount !== Object.keys(objectType.getFields()).length) {\n                baseSchemaTypes[typeName] = {\n                    ...mergedTypeConfig,\n                    fields: baseFields,\n                };\n                isolatedSchemaTypes[typeName] = {\n                    ...mergedTypeConfig,\n                    fields: isolatedFields,\n                    canonical: undefined,\n                };\n            }\n        }\n    }\n    if (Object.keys(isolatedSchemaTypes).length) {\n        return [\n            filterBaseSubschema({ ...subschemaConfig, merge: baseSchemaTypes }, isolatedSchemaTypes),\n            filterIsolatedSubschema({ ...subschemaConfig, merge: isolatedSchemaTypes }),\n        ];\n    }\n    return [subschemaConfig];\n}\nfunction filterBaseSubschema(subschemaConfig, isolatedSchemaTypes) {\n    var _a;\n    const schema = subschemaConfig.schema;\n    const typesForInterface = {};\n    const filteredSchema = pruneSchema(filterSchema({\n        schema,\n        objectFieldFilter: (typeName, fieldName) => { var _a, _b; return !((_b = (_a = isolatedSchemaTypes[typeName]) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b[fieldName]); },\n        interfaceFieldFilter: (typeName, fieldName) => {\n            if (!typesForInterface[typeName]) {\n                typesForInterface[typeName] = getImplementingTypes(typeName, schema);\n            }\n            return !typesForInterface[typeName].some(implementingTypeName => { var _a, _b; return (_b = (_a = isolatedSchemaTypes[implementingTypeName]) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b[fieldName]; });\n        },\n    }));\n    const filteredFields = {};\n    for (const typeName in filteredSchema.getTypeMap()) {\n        const type = filteredSchema.getType(typeName);\n        if (isObjectType(type) || isInterfaceType(type)) {\n            filteredFields[typeName] = { __typename: true };\n            const fieldMap = type.getFields();\n            for (const fieldName in fieldMap) {\n                filteredFields[typeName][fieldName] = true;\n            }\n        }\n    }\n    const filteredSubschema = {\n        ...subschemaConfig,\n        merge: subschemaConfig.merge\n            ? {\n                ...subschemaConfig.merge,\n            }\n            : undefined,\n        transforms: ((_a = subschemaConfig.transforms) !== null && _a !== void 0 ? _a : []).concat([\n            new TransformCompositeFields((typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }, (typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }),\n        ]),\n    };\n    const remainingTypes = filteredSchema.getTypeMap();\n    const mergeConfig = filteredSubschema.merge;\n    if (mergeConfig) {\n        for (const mergeType in mergeConfig) {\n            if (!remainingTypes[mergeType]) {\n                delete mergeConfig[mergeType];\n            }\n        }\n        if (!Object.keys(mergeConfig).length) {\n            delete filteredSubschema.merge;\n        }\n    }\n    return filteredSubschema;\n}\nfunction filterIsolatedSubschema(subschemaConfig) {\n    var _a, _b, _c;\n    const rootFields = {};\n    for (const typeName in subschemaConfig.merge) {\n        const mergedTypeConfig = subschemaConfig.merge[typeName];\n        const entryPoints = (_a = mergedTypeConfig.entryPoints) !== null && _a !== void 0 ? _a : [mergedTypeConfig];\n        for (const entryPoint of entryPoints) {\n            if (entryPoint.fieldName != null) {\n                rootFields[entryPoint.fieldName] = true;\n            }\n        }\n    }\n    const interfaceFields = {};\n    for (const typeName in subschemaConfig.merge) {\n        const type = subschemaConfig.schema.getType(typeName);\n        if (!type || !('getInterfaces' in type)) {\n            throw new Error(`${typeName} expected to have 'getInterfaces' method`);\n        }\n        for (const int of type.getInterfaces()) {\n            const intType = subschemaConfig.schema.getType(int.name);\n            if (!intType || !('getFields' in intType)) {\n                throw new Error(`${int.name} expected to have 'getFields' method`);\n            }\n            for (const intFieldName in intType.getFields()) {\n                if ((_b = subschemaConfig.merge[typeName].fields) === null || _b === void 0 ? void 0 : _b[intFieldName]) {\n                    interfaceFields[int.name] = interfaceFields[int.name] || {};\n                    interfaceFields[int.name][intFieldName] = true;\n                }\n            }\n        }\n    }\n    const filteredSchema = pruneSchema(filterSchema({\n        schema: subschemaConfig.schema,\n        rootFieldFilter: (operation, fieldName) => operation === 'Query' && rootFields[fieldName] != null,\n        objectFieldFilter: (typeName, fieldName) => { var _a, _b; return ((_b = (_a = subschemaConfig.merge[typeName]) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b[fieldName]) != null; },\n        interfaceFieldFilter: (typeName, fieldName) => { var _a; return ((_a = interfaceFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) != null; },\n    }));\n    const filteredFields = {};\n    for (const typeName in filteredSchema.getTypeMap()) {\n        const type = filteredSchema.getType(typeName);\n        if (isObjectType(type) || isInterfaceType(type)) {\n            filteredFields[typeName] = { __typename: true };\n            const fieldMap = type.getFields();\n            for (const fieldName in fieldMap) {\n                filteredFields[typeName][fieldName] = true;\n            }\n        }\n    }\n    return {\n        ...subschemaConfig,\n        transforms: ((_c = subschemaConfig.transforms) !== null && _c !== void 0 ? _c : []).concat([\n            new TransformCompositeFields((typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }, (typeName, fieldName) => { var _a; return (((_a = filteredFields[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) ? undefined : null); }),\n        ]),\n    };\n}\n\nfunction splitMergedTypeEntryPointsTransformer(subschemaConfig) {\n    var _a, _b, _c, _d;\n    if (!subschemaConfig.merge)\n        return [subschemaConfig];\n    const maxEntryPoints = Object.values(subschemaConfig.merge).reduce((max, mergedTypeConfig) => {\n        var _a, _b;\n        return Math.max(max, (_b = (_a = mergedTypeConfig === null || mergedTypeConfig === void 0 ? void 0 : mergedTypeConfig.entryPoints) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);\n    }, 0);\n    if (maxEntryPoints === 0)\n        return [subschemaConfig];\n    const subschemaPermutations = [];\n    for (let i = 0; i < maxEntryPoints; i += 1) {\n        const subschemaPermutation = cloneSubschemaConfig(subschemaConfig);\n        const mergedTypesCopy = (_a = subschemaPermutation.merge) !== null && _a !== void 0 ? _a : Object.create(null);\n        let currentMerge = mergedTypesCopy;\n        if (i > 0) {\n            subschemaPermutation.merge = currentMerge = Object.create(null);\n        }\n        for (const typeName in mergedTypesCopy) {\n            const mergedTypeConfig = mergedTypesCopy[typeName];\n            const mergedTypeEntryPoint = (_b = mergedTypeConfig === null || mergedTypeConfig === void 0 ? void 0 : mergedTypeConfig.entryPoints) === null || _b === void 0 ? void 0 : _b[i];\n            if (mergedTypeEntryPoint) {\n                if ((_d = (_c = mergedTypeConfig.selectionSet) !== null && _c !== void 0 ? _c : mergedTypeConfig.fieldName) !== null && _d !== void 0 ? _d : mergedTypeConfig.resolve) {\n                    throw new Error(`Merged type ${typeName} may not define entryPoints in addition to selectionSet, fieldName, or resolve`);\n                }\n                Object.assign(mergedTypeConfig, mergedTypeEntryPoint);\n                delete mergedTypeConfig.entryPoints;\n                if (i > 0) {\n                    delete mergedTypeConfig.canonical;\n                    if (mergedTypeConfig.fields != null) {\n                        for (const mergedFieldName in mergedTypeConfig.fields) {\n                            const mergedFieldConfig = mergedTypeConfig.fields[mergedFieldName];\n                            delete mergedFieldConfig.canonical;\n                        }\n                    }\n                }\n                currentMerge[typeName] = mergedTypeConfig;\n            }\n        }\n        subschemaPermutations.push(subschemaPermutation);\n    }\n    return subschemaPermutations;\n}\n\nconst defaultSubschemaConfigTransforms = [\n    computedDirectiveTransformer('computed'),\n];\n\nfunction stitchSchemas({ subschemas = [], types = [], typeDefs, onTypeConflict, mergeDirectives, mergeTypes = true, typeMergingOptions, subschemaConfigTransforms = defaultSubschemaConfigTransforms, resolvers = {}, inheritResolversFromInterfaces = false, resolverValidationOptions = {}, parseOptions = {}, pruningOptions, updateResolversInPlace, schemaExtensions, }) {\n    if (typeof resolverValidationOptions !== 'object') {\n        throw new Error('Expected `resolverValidationOptions` to be an object');\n    }\n    const transformedSubschemas = [];\n    const subschemaMap = new Map();\n    const originalSubschemaMap = new Map();\n    for (const subschemaOrSubschemaArray of subschemas) {\n        if (Array.isArray(subschemaOrSubschemaArray)) {\n            for (const s of subschemaOrSubschemaArray) {\n                for (const transformedSubschemaConfig of applySubschemaConfigTransforms(subschemaConfigTransforms, s, subschemaMap, originalSubschemaMap)) {\n                    transformedSubschemas.push(transformedSubschemaConfig);\n                }\n            }\n        }\n        else {\n            for (const transformedSubschemaConfig of applySubschemaConfigTransforms(subschemaConfigTransforms, subschemaOrSubschemaArray, subschemaMap, originalSubschemaMap)) {\n                transformedSubschemas.push(transformedSubschemaConfig);\n            }\n        }\n    }\n    const extensions = [];\n    const directiveMap = Object.create(null);\n    for (const directive of specifiedDirectives) {\n        directiveMap[directive.name] = directive;\n    }\n    const schemaDefs = Object.create(null);\n    const [typeCandidates, rootTypeNameMap] = buildTypeCandidates({\n        subschemas: transformedSubschemas,\n        originalSubschemaMap,\n        types,\n        typeDefs: typeDefs || [],\n        parseOptions,\n        extensions,\n        directiveMap,\n        schemaDefs,\n        mergeDirectives,\n    });\n    let stitchingInfo = createStitchingInfo(subschemaMap, typeCandidates, mergeTypes);\n    const { typeMap: newTypeMap, directives: newDirectives } = buildTypes({\n        typeCandidates,\n        directives: Object.values(directiveMap),\n        stitchingInfo,\n        rootTypeNames: Object.values(rootTypeNameMap),\n        onTypeConflict,\n        mergeTypes,\n        typeMergingOptions,\n    });\n    let schema = new GraphQLSchema({\n        query: newTypeMap[rootTypeNameMap.query],\n        mutation: newTypeMap[rootTypeNameMap.mutation],\n        subscription: newTypeMap[rootTypeNameMap.subscription],\n        types: Object.values(newTypeMap),\n        directives: newDirectives,\n        astNode: schemaDefs.schemaDef,\n        extensionASTNodes: schemaDefs.schemaExtensions,\n        extensions: null,\n    });\n    for (const extension of extensions) {\n        schema = extendSchema(schema, extension, {\n            commentDescriptions: true,\n        });\n    }\n    // We allow passing in an array of resolver maps, in which case we merge them\n    const resolverMap = mergeResolvers(resolvers);\n    const finalResolvers = inheritResolversFromInterfaces\n        ? extendResolversFromInterfaces(schema, resolverMap)\n        : resolverMap;\n    stitchingInfo = completeStitchingInfo(stitchingInfo, finalResolvers, schema);\n    schema = addResolversToSchema({\n        schema,\n        defaultFieldResolver: defaultMergedResolver,\n        resolvers: finalResolvers,\n        resolverValidationOptions,\n        inheritResolversFromInterfaces: false,\n        updateResolversInPlace,\n    });\n    if (Object.keys(resolverValidationOptions).length > 0 &&\n        Object.values(resolverValidationOptions).some(o => o !== 'ignore')) {\n        assertResolversPresent(schema, resolverValidationOptions);\n    }\n    schema = addStitchingInfo(schema, stitchingInfo);\n    if (pruningOptions) {\n        schema = pruneSchema(schema, pruningOptions);\n    }\n    if (schemaExtensions) {\n        if (Array.isArray(schemaExtensions)) {\n            schemaExtensions = mergeExtensions(schemaExtensions);\n        }\n        applyExtensions(schema, schemaExtensions);\n    }\n    return schema;\n}\nconst subschemaConfigTransformerPresets = [\n    isolateComputedFieldsTransformer,\n    splitMergedTypeEntryPointsTransformer,\n];\nfunction applySubschemaConfigTransforms(subschemaConfigTransforms, subschemaOrSubschemaConfig, subschemaMap, originalSubschemaMap) {\n    let subschemaConfig;\n    if (isSubschemaConfig(subschemaOrSubschemaConfig)) {\n        subschemaConfig = subschemaOrSubschemaConfig;\n    }\n    else if (subschemaOrSubschemaConfig instanceof GraphQLSchema) {\n        subschemaConfig = { schema: subschemaOrSubschemaConfig };\n    }\n    else {\n        throw new TypeError('Received invalid input.');\n    }\n    const transformedSubschemaConfigs = subschemaConfigTransforms\n        .concat(subschemaConfigTransformerPresets)\n        .reduce((transformedSubschemaConfigs, subschemaConfigTransform) => transformedSubschemaConfigs.flatMap(ssConfig => subschemaConfigTransform(ssConfig)), [subschemaConfig]);\n    const transformedSubschemas = transformedSubschemaConfigs.map(ssConfig => new Subschema(ssConfig));\n    const baseSubschema = transformedSubschemas[0];\n    subschemaMap.set(subschemaOrSubschemaConfig, baseSubschema);\n    for (const subschema of transformedSubschemas) {\n        originalSubschemaMap.set(subschema, subschemaOrSubschemaConfig);\n    }\n    return transformedSubschemas;\n}\n\nconst forwardArgsToSelectionSet = (selectionSet, mapping) => {\n    const selectionSetDef = parseSelectionSet(selectionSet, { noLocation: true });\n    return (field) => {\n        const selections = selectionSetDef.selections.map((selectionNode) => {\n            var _a, _b;\n            if (selectionNode.kind === Kind.FIELD) {\n                if (!mapping) {\n                    return { ...selectionNode, arguments: (_a = field.arguments) === null || _a === void 0 ? void 0 : _a.slice() };\n                }\n                else if (selectionNode.name.value in mapping) {\n                    const selectionArgs = mapping[selectionNode.name.value];\n                    return {\n                        ...selectionNode,\n                        arguments: (_b = field.arguments) === null || _b === void 0 ? void 0 : _b.filter((arg) => selectionArgs.includes(arg.name.value)),\n                    };\n                }\n            }\n            return selectionNode;\n        });\n        return { ...selectionSetDef, selections };\n    };\n};\n\nconst defaultRelayMergeConfig = {\n    selectionSet: `{ id }`,\n    fieldName: 'node',\n    args: ({ id }) => ({ id }),\n};\nfunction handleRelaySubschemas(subschemas, getTypeNameFromId) {\n    const typeNames = [];\n    for (const subschema of subschemas) {\n        const nodeType = subschema.schema.getType('Node');\n        if (nodeType) {\n            if (!isInterfaceType(nodeType)) {\n                throw new Error(`Node type should be an interface!`);\n            }\n            const implementations = subschema.schema.getPossibleTypes(nodeType);\n            for (const implementedType of implementations) {\n                typeNames.push(implementedType.name);\n                subschema.merge = subschema.merge || {};\n                subschema.merge[implementedType.name] = defaultRelayMergeConfig;\n            }\n        }\n    }\n    const relaySubschemaConfig = {\n        schema: makeExecutableSchema({\n            typeDefs: /* GraphQL */ `\n        type Query {\n          node(id: ID!): Node\n        }\n        interface Node {\n          id: ID!\n        }\n        ${typeNames\n                .map(typeName => `\n          type ${typeName} implements Node {\n            id: ID!\n          }\n        `)\n                .join('\\n')}\n      `,\n            resolvers: {\n                Query: {\n                    node: (_, { id }) => ({ id }),\n                },\n                Node: {\n                    __resolveType: ({ id }, _, info) => {\n                        var _a, _b, _c;\n                        if (!getTypeNameFromId) {\n                            const possibleTypeNames = new Set();\n                            for (const fieldNode of info.fieldNodes) {\n                                if ((_a = fieldNode.selectionSet) === null || _a === void 0 ? void 0 : _a.selections) {\n                                    for (const selection of ((_b = fieldNode.selectionSet) === null || _b === void 0 ? void 0 : _b.selections) || []) {\n                                        switch (selection.kind) {\n                                            case Kind.FRAGMENT_SPREAD: {\n                                                const fragment = info.fragments[selection.name.value];\n                                                possibleTypeNames.add(fragment.typeCondition.name.value);\n                                                break;\n                                            }\n                                            case Kind.INLINE_FRAGMENT: {\n                                                const possibleTypeName = (_c = selection.typeCondition) === null || _c === void 0 ? void 0 : _c.name.value;\n                                                if (possibleTypeName) {\n                                                    possibleTypeNames.add(possibleTypeName);\n                                                }\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            if (possibleTypeNames.size !== 1) {\n                                console.warn(`You need to define getTypeNameFromId as a parameter to handleRelaySubschemas or add a fragment for \"node\" operation with specific single type condition!`);\n                            }\n                            return [...possibleTypeNames][0] || typeNames[0];\n                        }\n                        return getTypeNameFromId(id);\n                    },\n                },\n            },\n        }),\n    };\n    subschemas.push(relaySubschemaConfig);\n    return subschemas;\n}\n\nexport { ValidationLevel, computedDirectiveTransformer, createMergedTypeResolver, defaultSubschemaConfigTransforms, forwardArgsToSelectionSet, handleRelaySubschemas, isolateComputedFieldsTransformer, splitMergedTypeEntryPointsTransformer, stitchSchemas };\n", "import { visit, Kind, TypeNameMetaFieldDef, parseValue, valueFromASTUntyped, getNullableType, isListType, isNamedType, isInterfaceType, isUnionType, isObjectType, isAbstractType, getNamedType, print, GraphQLDirective, GraphQLNonNull, GraphQLString, GraphQLList, parse } from 'graphql';\nimport { mapSchema, MapperKind, getDirective, parseSelectionSet, getImplementingTypes, isSome, mergeDeep } from '@graphql-tools/utils';\nimport { cloneSubschemaConfig } from '@graphql-tools/delegate';\n\nconst defaultStitchingDirectiveOptions = {\n    keyDirectiveName: 'key',\n    computedDirectiveName: 'computed',\n    canonicalDirectiveName: 'canonical',\n    mergeDirectiveName: 'merge',\n    pathToDirectivesInExtensions: ['directives'],\n};\n\nfunction extractVariables(inputValue) {\n    const path = [];\n    const variablePaths = Object.create(null);\n    const keyPathVisitor = {\n        enter: (_node, key) => {\n            if (typeof key === 'number') {\n                path.push(key);\n            }\n        },\n        leave: (_node, key) => {\n            if (typeof key === 'number') {\n                path.pop();\n            }\n        },\n    };\n    const fieldPathVisitor = {\n        enter: (node) => {\n            path.push(node.name.value);\n        },\n        leave: () => {\n            path.pop();\n        },\n    };\n    const variableVisitor = {\n        enter: (node, key) => {\n            if (typeof key === 'number') {\n                variablePaths[node.name.value] = path.concat([key]);\n            }\n            else {\n                variablePaths[node.name.value] = path.slice();\n            }\n            return {\n                kind: Kind.NULL,\n            };\n        },\n    };\n    const newInputValue = visit(inputValue, {\n        [Kind.OBJECT]: keyPathVisitor,\n        [Kind.LIST]: keyPathVisitor,\n        [Kind.OBJECT_FIELD]: fieldPathVisitor,\n        [Kind.VARIABLE]: variableVisitor,\n    });\n    return {\n        inputValue: newInputValue,\n        variablePaths,\n    };\n}\n\nconst KEY_DELIMITER = '__dot__';\nconst EXPANSION_PREFIX = '__exp';\nfunction preparseMergeArgsExpr(mergeArgsExpr) {\n    const variableRegex = /\\$[_A-Za-z][_A-Za-z0-9.]*/g;\n    const dotRegex = /\\./g;\n    mergeArgsExpr = mergeArgsExpr.replace(variableRegex, variable => variable.replace(dotRegex, KEY_DELIMITER));\n    const segments = mergeArgsExpr.split('[[');\n    const expansionExpressions = Object.create(null);\n    if (segments.length === 1) {\n        return { mergeArgsExpr: mergeArgsExpr, expansionExpressions };\n    }\n    let finalSegments = [segments[0]];\n    for (let i = 1; i < segments.length; i++) {\n        const additionalSegments = segments[i].split(']]');\n        if (additionalSegments.length !== 2) {\n            throw new Error(`Each opening \"[[\" must be matched by a closing \"]]\" without nesting.`);\n        }\n        finalSegments = finalSegments.concat(additionalSegments);\n    }\n    let finalMergeArgsExpr = finalSegments[0];\n    for (let i = 1; i < finalSegments.length - 1; i += 2) {\n        const variableName = `${EXPANSION_PREFIX}${(i - 1) / 2 + 1}`;\n        expansionExpressions[variableName] = finalSegments[i];\n        finalMergeArgsExpr += `\\$${variableName}${finalSegments[i + 1]}`;\n    }\n    return { mergeArgsExpr: finalMergeArgsExpr, expansionExpressions };\n}\n\nfunction addProperty(object, path, value) {\n    const initialSegment = path[0];\n    if (path.length === 1) {\n        object[initialSegment] = value;\n        return;\n    }\n    let field = object[initialSegment];\n    if (field != null) {\n        addProperty(field, path.slice(1), value);\n        return;\n    }\n    if (typeof path[1] === 'string') {\n        field = Object.create(null);\n    }\n    else {\n        field = [];\n    }\n    addProperty(field, path.slice(1), value);\n    object[initialSegment] = field;\n}\nfunction getProperty(object, path) {\n    if (!path.length || object == null) {\n        return object;\n    }\n    const newPath = path.slice();\n    const key = newPath.shift();\n    if (key == null) {\n        return;\n    }\n    const prop = object[key];\n    return getProperty(prop, newPath);\n}\nfunction getProperties(object, propertyTree) {\n    if (object == null) {\n        return object;\n    }\n    const newObject = Object.create(null);\n    for (const key in propertyTree) {\n        const subKey = propertyTree[key];\n        if (subKey == null) {\n            newObject[key] = object[key];\n            continue;\n        }\n        const prop = object[key];\n        newObject[key] = deepMap(prop, function deepMapFn(item) {\n            return getProperties(item, subKey);\n        });\n    }\n    return newObject;\n}\nfunction propertyTreeFromPaths(paths) {\n    const propertyTree = Object.create(null);\n    for (const path of paths) {\n        addProperty(propertyTree, path, null);\n    }\n    return propertyTree;\n}\nfunction deepMap(arrayOrItem, fn) {\n    if (Array.isArray(arrayOrItem)) {\n        return arrayOrItem.map(nestedArrayOrItem => deepMap(nestedArrayOrItem, fn));\n    }\n    return fn(arrayOrItem);\n}\n\nfunction pathsFromSelectionSet(selectionSet, path = []) {\n    var _a;\n    const paths = [];\n    for (const selection of selectionSet.selections) {\n        const additions = (_a = pathsFromSelection(selection, path)) !== null && _a !== void 0 ? _a : [];\n        for (const addition of additions) {\n            paths.push(addition);\n        }\n    }\n    return paths;\n}\nfunction pathsFromSelection(selection, path) {\n    var _a, _b;\n    if (selection.kind === Kind.FIELD) {\n        const responseKey = (_b = (_a = selection.alias) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : selection.name.value;\n        if (selection.selectionSet) {\n            return pathsFromSelectionSet(selection.selectionSet, path.concat([responseKey]));\n        }\n        else {\n            return [path.concat([responseKey])];\n        }\n    }\n    else if (selection.kind === Kind.INLINE_FRAGMENT) {\n        return pathsFromSelectionSet(selection.selectionSet, path);\n    }\n}\n\nfunction getSourcePaths(mappingInstructions, selectionSet) {\n    const sourcePaths = [];\n    for (const mappingInstruction of mappingInstructions) {\n        const { sourcePath } = mappingInstruction;\n        if (sourcePath.length) {\n            sourcePaths.push(sourcePath);\n            continue;\n        }\n        if (selectionSet == null) {\n            continue;\n        }\n        const paths = pathsFromSelectionSet(selectionSet);\n        for (const path of paths) {\n            sourcePaths.push(path);\n        }\n        sourcePaths.push([TypeNameMetaFieldDef.name]);\n    }\n    return sourcePaths;\n}\n\nfunction parseMergeArgsExpr(mergeArgsExpr, selectionSet) {\n    const { mergeArgsExpr: newMergeArgsExpr, expansionExpressions } = preparseMergeArgsExpr(mergeArgsExpr);\n    const inputValue = parseValue(`{ ${newMergeArgsExpr} }`, { noLocation: true });\n    const { inputValue: newInputValue, variablePaths } = extractVariables(inputValue);\n    if (!Object.keys(expansionExpressions).length) {\n        if (!Object.keys(variablePaths).length) {\n            throw new Error('Merge arguments must declare a key.');\n        }\n        const mappingInstructions = getMappingInstructions(variablePaths);\n        const usedProperties = propertyTreeFromPaths(getSourcePaths(mappingInstructions, selectionSet));\n        return { args: valueFromASTUntyped(newInputValue), usedProperties, mappingInstructions };\n    }\n    const expansionRegEx = new RegExp(`^${EXPANSION_PREFIX}[0-9]+$`);\n    for (const variableName in variablePaths) {\n        if (!variableName.match(expansionRegEx)) {\n            throw new Error('Expansions cannot be mixed with single key declarations.');\n        }\n    }\n    const expansions = [];\n    const sourcePaths = [];\n    for (const variableName in expansionExpressions) {\n        const str = expansionExpressions[variableName];\n        const valuePath = variablePaths[variableName];\n        const { inputValue: expansionInputValue, variablePaths: expansionVariablePaths } = extractVariables(parseValue(`${str}`, { noLocation: true }));\n        if (!Object.keys(expansionVariablePaths).length) {\n            throw new Error('Merge arguments must declare a key.');\n        }\n        const mappingInstructions = getMappingInstructions(expansionVariablePaths);\n        const value = valueFromASTUntyped(expansionInputValue);\n        sourcePaths.push(...getSourcePaths(mappingInstructions, selectionSet));\n        assertNotWithinList(valuePath);\n        expansions.push({\n            valuePath,\n            value,\n            mappingInstructions,\n        });\n    }\n    const usedProperties = propertyTreeFromPaths(sourcePaths);\n    return { args: valueFromASTUntyped(newInputValue), usedProperties, expansions };\n}\nfunction getMappingInstructions(variablePaths) {\n    const mappingInstructions = [];\n    for (const keyPath in variablePaths) {\n        const valuePath = variablePaths[keyPath];\n        const splitKeyPath = keyPath.split(KEY_DELIMITER).slice(1);\n        assertNotWithinList(valuePath);\n        mappingInstructions.push({\n            destinationPath: valuePath,\n            sourcePath: splitKeyPath,\n        });\n    }\n    return mappingInstructions;\n}\nfunction assertNotWithinList(path) {\n    for (const pathSegment of path) {\n        if (typeof pathSegment === 'number') {\n            throw new Error('Insertions cannot be made into a list.');\n        }\n    }\n}\n\nconst dottedNameRegEx = /^[_A-Za-z][_0-9A-Za-z]*(.[_A-Za-z][_0-9A-Za-z]*)*$/;\nfunction stitchingDirectivesValidator(options = {}) {\n    const { keyDirectiveName, computedDirectiveName, mergeDirectiveName, pathToDirectivesInExtensions } = {\n        ...defaultStitchingDirectiveOptions,\n        ...options,\n    };\n    return (schema) => {\n        var _a;\n        const queryTypeName = (_a = schema.getQueryType()) === null || _a === void 0 ? void 0 : _a.name;\n        mapSchema(schema, {\n            [MapperKind.OBJECT_TYPE]: type => {\n                var _a;\n                const keyDirective = (_a = getDirective(schema, type, keyDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (keyDirective != null) {\n                    parseSelectionSet(keyDirective['selectionSet']);\n                }\n                return undefined;\n            },\n            [MapperKind.OBJECT_FIELD]: (fieldConfig, _fieldName, typeName) => {\n                var _a, _b, _c;\n                const computedDirective = (_a = getDirective(schema, fieldConfig, computedDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (computedDirective != null) {\n                    parseSelectionSet(computedDirective['selectionSet']);\n                }\n                const mergeDirective = (_b = getDirective(schema, fieldConfig, mergeDirectiveName, pathToDirectivesInExtensions)) === null || _b === void 0 ? void 0 : _b[0];\n                if (mergeDirective != null) {\n                    if (typeName !== queryTypeName) {\n                        throw new Error('@merge directive may be used only for root fields of the root Query type.');\n                    }\n                    let returnType = getNullableType(fieldConfig.type);\n                    if (isListType(returnType)) {\n                        returnType = getNullableType(returnType.ofType);\n                    }\n                    if (!isNamedType(returnType)) {\n                        throw new Error('@merge directive must be used on a field that returns an object or a list of objects.');\n                    }\n                    const mergeArgsExpr = mergeDirective['argsExpr'];\n                    if (mergeArgsExpr != null) {\n                        parseMergeArgsExpr(mergeArgsExpr);\n                    }\n                    const args = Object.keys((_c = fieldConfig.args) !== null && _c !== void 0 ? _c : {});\n                    const keyArg = mergeDirective['keyArg'];\n                    if (keyArg == null) {\n                        if (!mergeArgsExpr && args.length !== 1) {\n                            throw new Error('Cannot use @merge directive without `keyArg` argument if resolver takes more than one argument.');\n                        }\n                    }\n                    else if (!keyArg.match(dottedNameRegEx)) {\n                        throw new Error('`keyArg` argument for @merge directive must be a set of valid GraphQL SDL names separated by periods.');\n                        // TODO: ideally we should check that the arg exists for the resolver\n                    }\n                    const keyField = mergeDirective['keyField'];\n                    if (keyField != null && !keyField.match(dottedNameRegEx)) {\n                        throw new Error('`keyField` argument for @merge directive must be a set of valid GraphQL SDL names separated by periods.');\n                        // TODO: ideally we should check that it is part of the key\n                    }\n                    const key = mergeDirective['key'];\n                    if (key != null) {\n                        if (keyField != null) {\n                            throw new Error('Cannot use @merge directive with both `keyField` and `key` arguments.');\n                        }\n                        for (const keyDef of key) {\n                            let [aliasOrKeyPath, keyPath] = keyDef.split(':');\n                            let aliasPath;\n                            if (keyPath == null) {\n                                keyPath = aliasPath = aliasOrKeyPath;\n                            }\n                            else {\n                                aliasPath = aliasOrKeyPath;\n                            }\n                            if (keyPath != null && !keyPath.match(dottedNameRegEx)) {\n                                throw new Error('Each partial key within the `key` argument for @merge directive must be a set of valid GraphQL SDL names separated by periods.');\n                                // TODO: ideally we should check that it is part of the key\n                            }\n                            if (aliasPath != null && !aliasOrKeyPath.match(dottedNameRegEx)) {\n                                throw new Error('Each alias within the `key` argument for @merge directive must be a set of valid GraphQL SDL names separated by periods.');\n                                // TODO: ideally we should check that the arg exists within the resolver\n                            }\n                        }\n                    }\n                    const additionalArgs = mergeDirective['additionalArgs'];\n                    if (additionalArgs != null) {\n                        parseValue(`{ ${additionalArgs} }`, { noLocation: true });\n                    }\n                    if (mergeArgsExpr != null && (keyArg != null || additionalArgs != null)) {\n                        throw new Error('Cannot use @merge directive with both `argsExpr` argument and any additional argument.');\n                    }\n                    if (!isInterfaceType(returnType) && !isUnionType(returnType) && !isObjectType(returnType)) {\n                        throw new Error('@merge directive may be used only with resolver that return an object, interface, or union.');\n                    }\n                    const typeNames = mergeDirective['types'];\n                    if (typeNames != null) {\n                        if (!isAbstractType(returnType)) {\n                            throw new Error('Types argument can only be used with a field that returns an abstract type.');\n                        }\n                        const implementingTypes = isInterfaceType(returnType)\n                            ? getImplementingTypes(returnType.name, schema).map(typeName => schema.getType(typeName))\n                            : returnType.getTypes();\n                        const implementingTypeNames = implementingTypes.map(type => type === null || type === void 0 ? void 0 : type.name).filter(isSome);\n                        for (const typeName of typeNames) {\n                            if (!implementingTypeNames.includes(typeName)) {\n                                throw new Error(`Types argument can only include only type names that implement the field return type's abstract type.`);\n                            }\n                        }\n                    }\n                }\n                return undefined;\n            },\n        });\n        return schema;\n    };\n}\n\nfunction stitchingDirectivesTransformer(options = {}) {\n    const { keyDirectiveName, computedDirectiveName, mergeDirectiveName, canonicalDirectiveName, pathToDirectivesInExtensions, } = {\n        ...defaultStitchingDirectiveOptions,\n        ...options,\n    };\n    return (subschemaConfig) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const newSubschemaConfig = cloneSubschemaConfig(subschemaConfig);\n        const selectionSetsByType = Object.create(null);\n        const computedFieldSelectionSets = Object.create(null);\n        const mergedTypesResolversInfo = Object.create(null);\n        const canonicalTypesInfo = Object.create(null);\n        const schema = subschemaConfig.schema;\n        // gateway should also run validation\n        stitchingDirectivesValidator(options)(schema);\n        function setCanonicalDefinition(typeName, fieldName) {\n            var _a;\n            canonicalTypesInfo[typeName] = canonicalTypesInfo[typeName] || Object.create(null);\n            if (fieldName) {\n                const fields = (_a = canonicalTypesInfo[typeName].fields) !== null && _a !== void 0 ? _a : Object.create(null);\n                canonicalTypesInfo[typeName].fields = fields;\n                fields[fieldName] = true;\n            }\n            else {\n                canonicalTypesInfo[typeName].canonical = true;\n            }\n        }\n        mapSchema(schema, {\n            [MapperKind.OBJECT_TYPE]: type => {\n                var _a, _b;\n                const keyDirective = (_a = getDirective(schema, type, keyDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (keyDirective != null) {\n                    const selectionSet = parseSelectionSet(keyDirective['selectionSet'], { noLocation: true });\n                    selectionSetsByType[type.name] = selectionSet;\n                }\n                const canonicalDirective = (_b = getDirective(schema, type, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _b === void 0 ? void 0 : _b[0];\n                if (canonicalDirective != null) {\n                    setCanonicalDefinition(type.name);\n                }\n                return undefined;\n            },\n            [MapperKind.OBJECT_FIELD]: (fieldConfig, fieldName, typeName) => {\n                var _a, _b, _c;\n                const computedDirective = (_a = getDirective(schema, fieldConfig, computedDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (computedDirective != null) {\n                    const selectionSet = parseSelectionSet(computedDirective['selectionSet'], { noLocation: true });\n                    if (!computedFieldSelectionSets[typeName]) {\n                        computedFieldSelectionSets[typeName] = Object.create(null);\n                    }\n                    computedFieldSelectionSets[typeName][fieldName] = selectionSet;\n                }\n                const mergeDirective = (_b = getDirective(schema, fieldConfig, mergeDirectiveName, pathToDirectivesInExtensions)) === null || _b === void 0 ? void 0 : _b[0];\n                if ((mergeDirective === null || mergeDirective === void 0 ? void 0 : mergeDirective['keyField']) != null) {\n                    const mergeDirectiveKeyField = mergeDirective['keyField'];\n                    const selectionSet = parseSelectionSet(`{ ${mergeDirectiveKeyField}}`, { noLocation: true });\n                    const typeNames = mergeDirective['types'];\n                    const returnType = getNamedType(fieldConfig.type);\n                    forEachConcreteType(schema, returnType, typeNames, typeName => {\n                        if (typeNames == null || typeNames.includes(typeName)) {\n                            const existingSelectionSet = selectionSetsByType[typeName];\n                            selectionSetsByType[typeName] = existingSelectionSet\n                                ? mergeSelectionSets(existingSelectionSet, selectionSet)\n                                : selectionSet;\n                        }\n                    });\n                }\n                const canonicalDirective = (_c = getDirective(schema, fieldConfig, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _c === void 0 ? void 0 : _c[0];\n                if (canonicalDirective != null) {\n                    setCanonicalDefinition(typeName, fieldName);\n                }\n                return undefined;\n            },\n            [MapperKind.INTERFACE_TYPE]: type => {\n                var _a;\n                const canonicalDirective = (_a = getDirective(schema, type, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (canonicalDirective) {\n                    setCanonicalDefinition(type.name);\n                }\n                return undefined;\n            },\n            [MapperKind.INTERFACE_FIELD]: (fieldConfig, fieldName, typeName) => {\n                var _a;\n                const canonicalDirective = (_a = getDirective(schema, fieldConfig, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (canonicalDirective) {\n                    setCanonicalDefinition(typeName, fieldName);\n                }\n                return undefined;\n            },\n            [MapperKind.INPUT_OBJECT_TYPE]: type => {\n                var _a;\n                const canonicalDirective = (_a = getDirective(schema, type, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (canonicalDirective) {\n                    setCanonicalDefinition(type.name);\n                }\n                return undefined;\n            },\n            [MapperKind.INPUT_OBJECT_FIELD]: (inputFieldConfig, fieldName, typeName) => {\n                var _a;\n                const canonicalDirective = (_a = getDirective(schema, inputFieldConfig, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (canonicalDirective != null) {\n                    setCanonicalDefinition(typeName, fieldName);\n                }\n                return undefined;\n            },\n            [MapperKind.UNION_TYPE]: type => {\n                var _a;\n                const canonicalDirective = (_a = getDirective(schema, type, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (canonicalDirective != null) {\n                    setCanonicalDefinition(type.name);\n                }\n                return undefined;\n            },\n            [MapperKind.ENUM_TYPE]: type => {\n                var _a;\n                const canonicalDirective = (_a = getDirective(schema, type, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (canonicalDirective != null) {\n                    setCanonicalDefinition(type.name);\n                }\n                return undefined;\n            },\n            [MapperKind.SCALAR_TYPE]: type => {\n                var _a;\n                const canonicalDirective = (_a = getDirective(schema, type, canonicalDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (canonicalDirective != null) {\n                    setCanonicalDefinition(type.name);\n                }\n                return undefined;\n            },\n        });\n        if (subschemaConfig.merge) {\n            for (const typeName in subschemaConfig.merge) {\n                const mergedTypeConfig = subschemaConfig.merge[typeName];\n                if (mergedTypeConfig.selectionSet) {\n                    const selectionSet = parseSelectionSet(mergedTypeConfig.selectionSet, { noLocation: true });\n                    if (selectionSet) {\n                        if (selectionSetsByType[typeName]) {\n                            selectionSetsByType[typeName] = mergeSelectionSets(selectionSetsByType[typeName], selectionSet);\n                        }\n                        else {\n                            selectionSetsByType[typeName] = selectionSet;\n                        }\n                    }\n                }\n                if (mergedTypeConfig.fields) {\n                    for (const fieldName in mergedTypeConfig.fields) {\n                        const fieldConfig = mergedTypeConfig.fields[fieldName];\n                        if (!fieldConfig.selectionSet)\n                            continue;\n                        const selectionSet = parseSelectionSet(fieldConfig.selectionSet, { noLocation: true });\n                        if (selectionSet) {\n                            if ((_a = computedFieldSelectionSets[typeName]) === null || _a === void 0 ? void 0 : _a[fieldName]) {\n                                computedFieldSelectionSets[typeName][fieldName] = mergeSelectionSets(computedFieldSelectionSets[typeName][fieldName], selectionSet);\n                            }\n                            else {\n                                if (computedFieldSelectionSets[typeName] == null) {\n                                    computedFieldSelectionSets[typeName] = Object.create(null);\n                                }\n                                computedFieldSelectionSets[typeName][fieldName] = selectionSet;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        const allSelectionSetsByType = Object.create(null);\n        for (const typeName in selectionSetsByType) {\n            allSelectionSetsByType[typeName] = allSelectionSetsByType[typeName] || [];\n            const selectionSet = selectionSetsByType[typeName];\n            allSelectionSetsByType[typeName].push(selectionSet);\n        }\n        for (const typeName in computedFieldSelectionSets) {\n            const selectionSets = computedFieldSelectionSets[typeName];\n            for (const i in selectionSets) {\n                allSelectionSetsByType[typeName] = allSelectionSetsByType[typeName] || [];\n                const selectionSet = selectionSets[i];\n                allSelectionSetsByType[typeName].push(selectionSet);\n            }\n        }\n        mapSchema(schema, {\n            [MapperKind.OBJECT_FIELD]: function objectFieldMapper(fieldConfig, fieldName) {\n                var _a, _b;\n                const mergeDirective = (_a = getDirective(schema, fieldConfig, mergeDirectiveName, pathToDirectivesInExtensions)) === null || _a === void 0 ? void 0 : _a[0];\n                if (mergeDirective != null) {\n                    const returnType = getNullableType(fieldConfig.type);\n                    const returnsList = isListType(returnType);\n                    const namedType = getNamedType(returnType);\n                    let mergeArgsExpr = mergeDirective['argsExpr'];\n                    if (mergeArgsExpr == null) {\n                        const key = mergeDirective['key'];\n                        const keyField = mergeDirective['keyField'];\n                        const keyExpr = key != null ? buildKeyExpr(key) : keyField != null ? `$key.${keyField}` : '$key';\n                        const keyArg = mergeDirective['keyArg'];\n                        const argNames = keyArg == null ? [Object.keys((_b = fieldConfig.args) !== null && _b !== void 0 ? _b : {})[0]] : keyArg.split('.');\n                        const lastArgName = argNames.pop();\n                        mergeArgsExpr = returnsList ? `${lastArgName}: [[${keyExpr}]]` : `${lastArgName}: ${keyExpr}`;\n                        for (const argName of argNames.reverse()) {\n                            mergeArgsExpr = `${argName}: { ${mergeArgsExpr} }`;\n                        }\n                    }\n                    const typeNames = mergeDirective['types'];\n                    forEachConcreteTypeName(namedType, schema, typeNames, function generateResolveInfo(typeName) {\n                        const parsedMergeArgsExpr = parseMergeArgsExpr(mergeArgsExpr, allSelectionSetsByType[typeName] == null\n                            ? undefined\n                            : mergeSelectionSets(...allSelectionSetsByType[typeName]));\n                        const additionalArgs = mergeDirective['additionalArgs'];\n                        if (additionalArgs != null) {\n                            parsedMergeArgsExpr.args = mergeDeep([\n                                parsedMergeArgsExpr.args,\n                                valueFromASTUntyped(parseValue(`{ ${additionalArgs} }`, { noLocation: true })),\n                            ]);\n                        }\n                        mergedTypesResolversInfo[typeName] = {\n                            fieldName,\n                            returnsList,\n                            ...parsedMergeArgsExpr,\n                        };\n                    });\n                }\n                return undefined;\n            },\n        });\n        for (const typeName in selectionSetsByType) {\n            const selectionSet = selectionSetsByType[typeName];\n            const mergeConfig = (_b = newSubschemaConfig.merge) !== null && _b !== void 0 ? _b : Object.create(null);\n            newSubschemaConfig.merge = mergeConfig;\n            if (mergeConfig[typeName] == null) {\n                newSubschemaConfig.merge[typeName] = Object.create(null);\n            }\n            const mergeTypeConfig = mergeConfig[typeName];\n            mergeTypeConfig.selectionSet = print(selectionSet);\n        }\n        for (const typeName in computedFieldSelectionSets) {\n            const selectionSets = computedFieldSelectionSets[typeName];\n            const mergeConfig = (_c = newSubschemaConfig.merge) !== null && _c !== void 0 ? _c : Object.create(null);\n            newSubschemaConfig.merge = mergeConfig;\n            if (mergeConfig[typeName] == null) {\n                mergeConfig[typeName] = Object.create(null);\n            }\n            const mergeTypeConfig = newSubschemaConfig.merge[typeName];\n            const mergeTypeConfigFields = (_d = mergeTypeConfig.fields) !== null && _d !== void 0 ? _d : Object.create(null);\n            mergeTypeConfig.fields = mergeTypeConfigFields;\n            for (const fieldName in selectionSets) {\n                const selectionSet = selectionSets[fieldName];\n                const fieldConfig = (_e = mergeTypeConfigFields[fieldName]) !== null && _e !== void 0 ? _e : Object.create(null);\n                mergeTypeConfigFields[fieldName] = fieldConfig;\n                fieldConfig.selectionSet = print(selectionSet);\n                fieldConfig.computed = true;\n            }\n        }\n        for (const typeName in mergedTypesResolversInfo) {\n            const mergedTypeResolverInfo = mergedTypesResolversInfo[typeName];\n            const mergeConfig = (_f = newSubschemaConfig.merge) !== null && _f !== void 0 ? _f : Object.create(null);\n            newSubschemaConfig.merge = mergeConfig;\n            if (newSubschemaConfig.merge[typeName] == null) {\n                newSubschemaConfig.merge[typeName] = Object.create(null);\n            }\n            const mergeTypeConfig = newSubschemaConfig.merge[typeName];\n            mergeTypeConfig.fieldName = mergedTypeResolverInfo.fieldName;\n            if (mergedTypeResolverInfo.returnsList) {\n                mergeTypeConfig.key = generateKeyFn(mergedTypeResolverInfo);\n                mergeTypeConfig.argsFromKeys = generateArgsFromKeysFn(mergedTypeResolverInfo);\n            }\n            else {\n                mergeTypeConfig.args = generateArgsFn(mergedTypeResolverInfo);\n            }\n        }\n        for (const typeName in canonicalTypesInfo) {\n            const canonicalTypeInfo = canonicalTypesInfo[typeName];\n            const mergeConfig = (_g = newSubschemaConfig.merge) !== null && _g !== void 0 ? _g : Object.create(null);\n            newSubschemaConfig.merge = mergeConfig;\n            if (newSubschemaConfig.merge[typeName] == null) {\n                newSubschemaConfig.merge[typeName] = Object.create(null);\n            }\n            const mergeTypeConfig = newSubschemaConfig.merge[typeName];\n            if (canonicalTypeInfo.canonical) {\n                mergeTypeConfig.canonical = true;\n            }\n            if (canonicalTypeInfo.fields) {\n                const mergeTypeConfigFields = (_h = mergeTypeConfig.fields) !== null && _h !== void 0 ? _h : Object.create(null);\n                mergeTypeConfig.fields = mergeTypeConfigFields;\n                for (const fieldName in canonicalTypeInfo.fields) {\n                    if (mergeTypeConfigFields[fieldName] == null) {\n                        mergeTypeConfigFields[fieldName] = Object.create(null);\n                    }\n                    mergeTypeConfigFields[fieldName].canonical = true;\n                }\n            }\n        }\n        return newSubschemaConfig;\n    };\n}\nfunction forEachConcreteType(schema, type, typeNames, fn) {\n    if (isInterfaceType(type)) {\n        for (const typeName of getImplementingTypes(type.name, schema)) {\n            if (typeNames == null || typeNames.includes(typeName)) {\n                fn(typeName);\n            }\n        }\n    }\n    else if (isUnionType(type)) {\n        for (const { name: typeName } of type.getTypes()) {\n            if (typeNames == null || typeNames.includes(typeName)) {\n                fn(typeName);\n            }\n        }\n    }\n    else if (isObjectType(type)) {\n        fn(type.name);\n    }\n}\nfunction generateKeyFn(mergedTypeResolverInfo) {\n    return function keyFn(originalResult) {\n        return getProperties(originalResult, mergedTypeResolverInfo.usedProperties);\n    };\n}\nfunction generateArgsFromKeysFn(mergedTypeResolverInfo) {\n    const { expansions, args } = mergedTypeResolverInfo;\n    return function generateArgsFromKeys(keys) {\n        const newArgs = mergeDeep([{}, args]);\n        if (expansions) {\n            for (const expansion of expansions) {\n                const mappingInstructions = expansion.mappingInstructions;\n                const expanded = [];\n                for (const key of keys) {\n                    let newValue = mergeDeep([{}, expansion.valuePath]);\n                    for (const { destinationPath, sourcePath } of mappingInstructions) {\n                        if (destinationPath.length) {\n                            addProperty(newValue, destinationPath, getProperty(key, sourcePath));\n                        }\n                        else {\n                            newValue = getProperty(key, sourcePath);\n                        }\n                    }\n                    expanded.push(newValue);\n                }\n                addProperty(newArgs, expansion.valuePath, expanded);\n            }\n        }\n        return newArgs;\n    };\n}\nfunction generateArgsFn(mergedTypeResolverInfo) {\n    const { mappingInstructions, args, usedProperties } = mergedTypeResolverInfo;\n    return function generateArgs(originalResult) {\n        const newArgs = mergeDeep([{}, args]);\n        const filteredResult = getProperties(originalResult, usedProperties);\n        if (mappingInstructions) {\n            for (const mappingInstruction of mappingInstructions) {\n                const { destinationPath, sourcePath } = mappingInstruction;\n                addProperty(newArgs, destinationPath, getProperty(filteredResult, sourcePath));\n            }\n        }\n        return newArgs;\n    };\n}\nfunction buildKeyExpr(key) {\n    let mergedObject = {};\n    for (const keyDef of key) {\n        let [aliasOrKeyPath, keyPath] = keyDef.split(':');\n        let aliasPath;\n        if (keyPath == null) {\n            keyPath = aliasPath = aliasOrKeyPath;\n        }\n        else {\n            aliasPath = aliasOrKeyPath;\n        }\n        const aliasParts = aliasPath.split('.');\n        const lastAliasPart = aliasParts.pop();\n        if (lastAliasPart == null) {\n            throw new Error(`Key \"${key}\" is invalid, no path provided.`);\n        }\n        let object = { [lastAliasPart]: `$key.${keyPath}` };\n        for (const aliasPart of aliasParts.reverse()) {\n            object = { [aliasPart]: object };\n        }\n        mergedObject = mergeDeep([mergedObject, object]);\n    }\n    return JSON.stringify(mergedObject).replace(/\"/g, '');\n}\nfunction mergeSelectionSets(...selectionSets) {\n    const normalizedSelections = Object.create(null);\n    for (const selectionSet of selectionSets) {\n        for (const selection of selectionSet.selections) {\n            const normalizedSelection = print(selection);\n            normalizedSelections[normalizedSelection] = selection;\n        }\n    }\n    const newSelectionSet = {\n        kind: Kind.SELECTION_SET,\n        selections: Object.values(normalizedSelections),\n    };\n    return newSelectionSet;\n}\nfunction forEachConcreteTypeName(returnType, schema, typeNames, fn) {\n    if (isInterfaceType(returnType)) {\n        for (const typeName of getImplementingTypes(returnType.name, schema)) {\n            if (typeNames == null || typeNames.includes(typeName)) {\n                fn(typeName);\n            }\n        }\n    }\n    else if (isUnionType(returnType)) {\n        for (const type of returnType.getTypes()) {\n            if (typeNames == null || typeNames.includes(type.name)) {\n                fn(type.name);\n            }\n        }\n    }\n    else if (isObjectType(returnType) && (typeNames == null || typeNames.includes(returnType.name))) {\n        fn(returnType.name);\n    }\n}\n\nfunction stitchingDirectives(options = {}) {\n    const finalOptions = {\n        ...defaultStitchingDirectiveOptions,\n        ...options,\n    };\n    const { keyDirectiveName, computedDirectiveName, mergeDirectiveName, canonicalDirectiveName } = finalOptions;\n    const keyDirectiveTypeDefs = /* GraphQL */ `directive @${keyDirectiveName}(selectionSet: String!) on OBJECT`;\n    const computedDirectiveTypeDefs = /* GraphQL */ `directive @${computedDirectiveName}(selectionSet: String!) on FIELD_DEFINITION`;\n    const mergeDirectiveTypeDefs = /* GraphQL */ `directive @${mergeDirectiveName}(argsExpr: String, keyArg: String, keyField: String, key: [String!], additionalArgs: String) on FIELD_DEFINITION`;\n    const canonicalDirectiveTypeDefs = /* GraphQL */ `directive @${canonicalDirectiveName} on OBJECT | INTERFACE | INPUT_OBJECT | UNION | ENUM | SCALAR | FIELD_DEFINITION | INPUT_FIELD_DEFINITION`;\n    const keyDirective = new GraphQLDirective({\n        name: keyDirectiveName,\n        locations: ['OBJECT'],\n        args: {\n            selectionSet: { type: new GraphQLNonNull(GraphQLString) },\n        },\n    });\n    const computedDirective = new GraphQLDirective({\n        name: computedDirectiveName,\n        locations: ['FIELD_DEFINITION'],\n        args: {\n            selectionSet: { type: new GraphQLNonNull(GraphQLString) },\n        },\n    });\n    const mergeDirective = new GraphQLDirective({\n        name: mergeDirectiveName,\n        locations: ['FIELD_DEFINITION'],\n        args: {\n            argsExpr: { type: GraphQLString },\n            keyArg: { type: GraphQLString },\n            keyField: { type: GraphQLString },\n            key: { type: new GraphQLList(new GraphQLNonNull(GraphQLString)) },\n            additionalArgs: { type: GraphQLString },\n        },\n    });\n    const canonicalDirective = new GraphQLDirective({\n        name: canonicalDirectiveName,\n        locations: [\n            'OBJECT',\n            'INTERFACE',\n            'INPUT_OBJECT',\n            'UNION',\n            'ENUM',\n            'SCALAR',\n            'FIELD_DEFINITION',\n            'INPUT_FIELD_DEFINITION',\n        ],\n    });\n    const allStitchingDirectivesTypeDefs = [\n        keyDirectiveTypeDefs,\n        computedDirectiveTypeDefs,\n        mergeDirectiveTypeDefs,\n        canonicalDirectiveTypeDefs,\n    ].join('\\n');\n    return {\n        keyDirectiveTypeDefs,\n        computedDirectiveTypeDefs,\n        mergeDirectiveTypeDefs,\n        canonicalDirectiveTypeDefs,\n        stitchingDirectivesTypeDefs: allStitchingDirectivesTypeDefs,\n        allStitchingDirectivesTypeDefs,\n        keyDirective,\n        computedDirective,\n        mergeDirective,\n        canonicalDirective,\n        allStitchingDirectives: [keyDirective, computedDirective, mergeDirective, canonicalDirective],\n        stitchingDirectivesValidator: stitchingDirectivesValidator(finalOptions),\n        stitchingDirectivesTransformer: stitchingDirectivesTransformer(finalOptions),\n    };\n}\n\n// Taken from https://github.com/gmac/federation-to-stitching-sdl/blob/main/index.js\nconst extensionKind = /Extension$/;\nconst entityKinds = [\n    Kind.OBJECT_TYPE_DEFINITION,\n    Kind.OBJECT_TYPE_EXTENSION,\n    Kind.INTERFACE_TYPE_DEFINITION,\n    Kind.INTERFACE_TYPE_EXTENSION,\n];\nfunction isEntityKind(def) {\n    return entityKinds.includes(def.kind);\n}\nfunction getQueryTypeDef(definitions) {\n    var _a;\n    const schemaDef = definitions.find(def => def.kind === Kind.SCHEMA_DEFINITION);\n    const typeName = schemaDef\n        ? (_a = schemaDef.operationTypes.find(({ operation }) => operation === 'query')) === null || _a === void 0 ? void 0 : _a.type.name.value\n        : 'Query';\n    return definitions.find(def => def.kind === Kind.OBJECT_TYPE_DEFINITION && def.name.value === typeName);\n}\n// Federation services are actually fairly complex,\n// as the `buildFederatedSchema` helper does a fair amount\n// of hidden work to setup the Federation schema specification:\n// https://www.apollographql.com/docs/federation/federation-spec/#federation-schema-specification\nfunction federationToStitchingSDL(federationSDL, stitchingConfig = stitchingDirectives()) {\n    const doc = parse(federationSDL);\n    const entityTypes = [];\n    const baseTypeNames = doc.definitions.reduce((memo, typeDef) => {\n        if (!extensionKind.test(typeDef.kind) && 'name' in typeDef && typeDef.name) {\n            memo[typeDef.name.value] = true;\n        }\n        return memo;\n    }, {});\n    doc.definitions.forEach(typeDef => {\n        var _a, _b, _c;\n        // Un-extend all types (remove \"extends\" keywords)...\n        // extended types are invalid GraphQL without a local base type to extend from.\n        // Stitching merges flat types in lieu of hierarchical extensions.\n        if (extensionKind.test(typeDef.kind) && 'name' in typeDef && typeDef.name && !baseTypeNames[typeDef.name.value]) {\n            typeDef.kind = typeDef.kind.replace(extensionKind, 'Definition');\n        }\n        if (!isEntityKind(typeDef))\n            return;\n        // Find object definitions with \"@key\" directives;\n        // these are federated entities that get turned into merged types.\n        const keyDirs = [];\n        const otherDirs = [];\n        (_a = typeDef.directives) === null || _a === void 0 ? void 0 : _a.forEach(dir => {\n            if (dir.name.value === 'key') {\n                keyDirs.push(dir);\n            }\n            else {\n                otherDirs.push(dir);\n            }\n        });\n        if (!keyDirs.length)\n            return;\n        // Setup stitching MergedTypeConfig for all federated entities:\n        const selectionSet = `{ ${keyDirs.map((dir) => dir.arguments[0].value.value).join(' ')} }`;\n        const keyFields = parse(selectionSet).definitions[0].selectionSet.selections.map((sel) => sel.name.value);\n        const keyDir = keyDirs[0];\n        keyDir.name.value = stitchingConfig.keyDirective.name;\n        keyDir.arguments[0].name.value = 'selectionSet';\n        keyDir.arguments[0].value.value = selectionSet;\n        typeDef.directives = [keyDir, ...otherDirs];\n        // Remove non-key \"@external\" fields from the type...\n        // the stitching query planner expects services to only publish their own fields.\n        // This makes \"@provides\" moot because the query planner can automate the logic.\n        typeDef.fields = (_b = typeDef.fields) === null || _b === void 0 ? void 0 : _b.filter(fieldDef => {\n            var _a;\n            return (keyFields.includes(fieldDef.name.value) || !((_a = fieldDef.directives) === null || _a === void 0 ? void 0 : _a.find(dir => dir.name.value === 'external')));\n        });\n        // Discard remaining \"@external\" directives and any \"@provides\" directives\n        (_c = typeDef.fields) === null || _c === void 0 ? void 0 : _c.forEach((fieldDef) => {\n            fieldDef.directives = fieldDef.directives.filter((dir) => !/^(external|provides)$/.test(dir.name.value));\n            fieldDef.directives.forEach((dir) => {\n                if (dir.name.value === 'requires') {\n                    dir.name.value = stitchingConfig.computedDirective.name;\n                    dir.arguments[0].name.value = 'selectionSet';\n                    dir.arguments[0].value.value = `{ ${dir.arguments[0].value.value} }`;\n                }\n            });\n        });\n        if (typeDef.kind === Kind.OBJECT_TYPE_DEFINITION || typeDef.kind === Kind.OBJECT_TYPE_EXTENSION) {\n            entityTypes.push(typeDef.name.value);\n        }\n    });\n    // Federation service SDLs are incomplete because they omit the federation spec itself...\n    // (https://www.apollographql.com/docs/federation/federation-spec/#federation-schema-specification)\n    // To make federation SDLs into valid and parsable GraphQL schemas,\n    // we must fill in the missing details from the specification.\n    if (entityTypes.length) {\n        const queryDef = getQueryTypeDef(doc.definitions);\n        const entitiesSchema = parse(/* GraphQL */ `\n      scalar _Any\n      union _Entity = ${entityTypes.filter((v, i, a) => a.indexOf(v) === i).join(' | ')}\n      type Query { _entities(representations: [_Any!]!): [_Entity]! @${stitchingConfig.mergeDirective.name} }\n    `).definitions;\n        doc.definitions.push(entitiesSchema[0]);\n        doc.definitions.push(entitiesSchema[1]);\n        if (queryDef) {\n            queryDef.fields.push(entitiesSchema[2].fields[0]);\n        }\n        else {\n            doc.definitions.push(entitiesSchema[2]);\n        }\n    }\n    return [stitchingConfig.stitchingDirectivesTypeDefs, print(doc)].join('\\n');\n}\n\nexport { federationToStitchingSDL, stitchingDirectives };\n"],
  "mappings": "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CA,8BACA,uBACA,sBACA,UACA,cACA;AACA,QAAM,WAAW,QAAQ,YAAY,YAAY;AAEjD,MAAI,CAAC,UAAU;AACb;AAAA,EACF;AAEA,QAAM,CAAC,WAAW,2BAChB,oCACE,SACA,8BACA,QACF;AAEF,MAAI,aAAa,WAAW;AAC1B;AAAA,EACF;AAGA,0BACE,SACA,WACA,8BACA,uBACA,sBACA,UACA,SACF;AAGA,aAAW,0BAA0B,yBAAyB;AAE5D,QACE,sBAAsB,IACpB,wBACA,cACA,oBACF,GACA;AACA;AAAA,IACF;AAEA,0BAAsB,IACpB,wBACA,cACA,oBACF;AACA,6CACE,SACA,WACA,8BACA,uBACA,sBACA,UACA,sBACF;AAAA,EACF;AACF;AAGA,0CACE,SACA,WACA,8BACA,uBACA,sBACA,eACA,eACA;AAEA,MAAI,kBAAkB,eAAe;AACnC;AAAA,EACF;AAEA,MACE,sBAAsB,IACpB,eACA,eACA,oBACF,GACA;AACA;AAAA,EACF;AAEA,wBAAsB,IAAI,eAAe,eAAe,oBAAoB;AAC5E,QAAM,YAAY,QAAQ,YAAY,aAAa;AACnD,QAAM,YAAY,QAAQ,YAAY,aAAa;AAEnD,MAAI,CAAC,aAAa,CAAC,WAAW;AAC5B;AAAA,EACF;AAEA,QAAM,CAAC,WAAW,4BAChB,oCACE,SACA,8BACA,SACF;AACF,QAAM,CAAC,WAAW,4BAChB,oCACE,SACA,8BACA,SACF;AAGF,0BACE,SACA,WACA,8BACA,uBACA,sBACA,WACA,SACF;AAGA,aAAW,2BAA2B,0BAA0B;AAC9D,qCACE,SACA,WACA,8BACA,uBACA,sBACA,eACA,uBACF;AAAA,EACF;AAGA,aAAW,2BAA2B,0BAA0B;AAC9D,qCACE,SACA,WACA,8BACA,uBACA,sBACA,yBACA,aACF;AAAA,EACF;AACF;AAIA,8CACE,SACA,8BACA,uBACA,sBACA,aACA,eACA,aACA,eACA;AACA,QAAM,YAAY,CAAC;AACnB,QAAM,CAAC,WAAW,kBAAkB,0BAClC,SACA,8BACA,aACA,aACF;AACA,QAAM,CAAC,WAAW,kBAAkB,0BAClC,SACA,8BAC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AAQ;AAEZ,WAAO,MAAM;AACX,YAAM,YAAY,SAAS,KAAK;AAEhC,UAAI,UAAU,MAAM;AAClB,eAAO;AAAA,MACT;AAEA,YAAM,WAAW,SAAQ,OAAM,OAAO,MAAS;AAC/C,WAAK,sBACH,kBACA,OACA,UACA,UAAU,OACV,YACA,UACA,gBACA,cACA,MACA,UACA,YACF;AACA;AAAA,IACF;AAAA,EACF;AAAA,QAKM,2BACJ,YACA,UACA,cACA,MACA,gBACA,OACA,UACA,cACA,QACA,kBACA,UACA;AACA,QAAI,QAAQ;AACV,YAAM,KAAK,qCACT,YACA,UACA,cACA,MACA,gBACA,OACA,UACA,cACA,QACA,kBACA,QACF;AAAA,IACF,OAAO;AACL,YAAM,KAAK,wCACT,YACA,UACA,cACA,MACA,gBACA,OACA,UACA,cACA,kBACA,QACF;AAAA,IACF;AAEA,WAAO,SAAS,SACZ,gBAAgB,kBAAkB,QAAQ,IAC1C;AAAA,EACN;AAAA,QAEM,qCACJ,YACA,UACA,cACA,MACA,gBACA,OACA,UACA,cACA,QACA,kBACA,UACA;AACA,UAAM,eAAe,OAAO;AAC5B,QAAI,QAAQ;AAEZ,QAAI;AACF,aAAO,MAAM;AACX,YAAI,SAAS,cAAc;AACzB,gBAAM,EAAE,cAAc,aAAa,YAAY,UAAU;AACzD,gBAAM,gBAAgB,KAAK,oBACzB,YACA,cACA,cACA,aACA,YACA,OACA,OACA,YACF;AAEA,eAAK,sBACH,OACA,UACA,YACA,UACA,cACA,MACA,gBACA,aACF;AACA;AAAA,QACF;AAEA,cAAM,YAAY,MAAM,SAAS,KAAK;AAEtC,YAAI,UAAU,MAAM;AAClB;AAAA,QACF;AAEA,cAAM,WAAW,SAAQ,OAAM,OAAO,MAAS;AAC/C,aAAK,sBACH,kBACA,OACA,UACA,UAAU,OACV,YACA,UACA,gBACA,cACA,MACA,UACA,YACF;AACA;AAAA,MACF;AAAA,IACF,SAAS,UAAP;AACA,YAAM,WAAW,SAAQ,OAAM,OAAO,MAAS;AAC/C,uBAAiB,KACf,KAAK,eACH,UACA,aAAa,YACb,UACA,UACA,aAAa,MACf,CACF;AAA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",
  "names": []
}
